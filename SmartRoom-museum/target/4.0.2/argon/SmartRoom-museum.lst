
c:/Users/nick/Documents/IoT/SmartRoom/SmartRoom-museum/target/4.0.2/argon/SmartRoom-museum.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000045c0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b85e0  000b85e0  000085e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b8604  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000480  2003e184  000b8608  0001e184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001ec  2003e604  2003e604  0002e604  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b8a88  000b8a88  00028a88  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b8ab0  000b8ab0  00028ab0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001361a9  00000000  00000000  00028ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000150f2  00000000  00000000  0015ec5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0003d62e  00000000  00000000  00173d4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002f38  00000000  00000000  001b137d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000a8f0  00000000  00000000  001b42b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003ebef  00000000  00000000  001beba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00046f3b  00000000  00000000  001fd794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013a1b8  00000000  00000000  002446cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000086ac  00000000  00000000  0037e888  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
   b4026:	b508      	push	{r3, lr}
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f003 fd6f 	bl	b7b14 <memcpy>
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f003 fd77 	bl	b7b30 <memset>
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e184 	.word	0x2003e184
   b404c:	000b8608 	.word	0x000b8608
   b4050:	2003e604 	.word	0x2003e604
   b4054:	2003e604 	.word	0x2003e604
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
   b405c:	b570      	push	{r4, r5, r6, lr}
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
   b4062:	f002 f9e3 	bl	b642c <module_user_init_hook>
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
   b4070:	bd70      	pop	{r4, r5, r6, pc}
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b85b8 	.word	0x000b85b8
   b4080:	000b85dc 	.word	0x000b85dc

000b4084 <module_user_setup>:
   b4084:	f000 b876 	b.w	b4174 <setup>

000b4088 <module_user_loop>:
   b4088:	b508      	push	{r3, lr}
   b408a:	f000 f8b1 	bl	b41f0 <loop>
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4092:	f002 b983 	b.w	b639c <_post_loop>

000b4096 <_Znwj>:
   b4096:	f001 bd43 	b.w	b5b20 <malloc>

000b409a <_Znaj>:
   b409a:	f001 bd41 	b.w	b5b20 <malloc>

000b409e <_ZdlPvj>:
   b409e:	f001 bd47 	b.w	b5b30 <free>
	...

000b40a4 <__cxa_pure_virtual>:
   b40a4:	b508      	push	{r3, lr}
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f001 fc7c 	bl	b59a8 <panic_>
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b56e9 	.word	0x000b56e9
   b40b8:	000b7cd8 	.word	0x000b7cd8

000b40bc <__cxa_guard_acquire>:
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40cc:	b40e      	push	{r1, r2, r3}
   b40ce:	b503      	push	{r0, r1, lr}
   b40d0:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40d2:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40d4:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40d8:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40da:	f002 f8a2 	bl	b6222 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40de:	b002      	add	sp, #8
   b40e0:	f85d eb04 	ldr.w	lr, [sp], #4
   b40e4:	b003      	add	sp, #12
   b40e6:	4770      	bx	lr

000b40e8 <_Z6setLED9LEDColors>:
   b40e8:	b510      	push	{r4, lr}
   b40ea:	4604      	mov	r4, r0
   b40ec:	b158      	cbz	r0, b4106 <_Z6setLED9LEDColors+0x1e>
   b40ee:	2801      	cmp	r0, #1
   b40f0:	d017      	beq.n	b4122 <_Z6setLED9LEDColors+0x3a>
   b40f2:	2100      	movs	r1, #0
   b40f4:	2004      	movs	r0, #4
   b40f6:	f002 ff8e 	bl	b7016 <digitalWrite>
   b40fa:	2100      	movs	r1, #0
   b40fc:	2003      	movs	r0, #3
   b40fe:	f002 ff8a 	bl	b7016 <digitalWrite>
   b4102:	2101      	movs	r1, #1
   b4104:	e008      	b.n	b4118 <_Z6setLED9LEDColors+0x30>
   b4106:	2101      	movs	r1, #1
   b4108:	2004      	movs	r0, #4
   b410a:	f002 ff84 	bl	b7016 <digitalWrite>
   b410e:	4621      	mov	r1, r4
   b4110:	2003      	movs	r0, #3
   b4112:	f002 ff80 	bl	b7016 <digitalWrite>
   b4116:	2100      	movs	r1, #0
   b4118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b411c:	2005      	movs	r0, #5
   b411e:	f002 bf7a 	b.w	b7016 <digitalWrite>
   b4122:	2100      	movs	r1, #0
   b4124:	e7f0      	b.n	b4108 <_Z6setLED9LEDColors+0x20>
	...

000b4128 <_Z8initPinsv>:
   b4128:	b507      	push	{r0, r1, r2, lr}
   b412a:	2101      	movs	r1, #1
   b412c:	2004      	movs	r0, #4
   b412e:	f002 ff61 	bl	b6ff4 <pinMode>
   b4132:	2101      	movs	r1, #1
   b4134:	2003      	movs	r0, #3
   b4136:	f002 ff5d 	bl	b6ff4 <pinMode>
   b413a:	2101      	movs	r1, #1
   b413c:	2005      	movs	r0, #5
   b413e:	f002 ff59 	bl	b6ff4 <pinMode>
   b4142:	2103      	movs	r1, #3
   b4144:	2006      	movs	r0, #6
   b4146:	f002 ff55 	bl	b6ff4 <pinMode>
   b414a:	2300      	movs	r3, #0
   b414c:	22b4      	movs	r2, #180	; 0xb4
   b414e:	e9cd 3200 	strd	r3, r2, [sp]
   b4152:	210e      	movs	r1, #14
   b4154:	f44f 6316 	mov.w	r3, #2400	; 0x960
   b4158:	f44f 7208 	mov.w	r2, #544	; 0x220
   b415c:	4804      	ldr	r0, [pc, #16]	; (b4170 <_Z8initPinsv+0x48>)
   b415e:	f001 fedd 	bl	b5f1c <_ZN5Servo6attachEtttss>
   b4162:	2001      	movs	r0, #1
   b4164:	b003      	add	sp, #12
   b4166:	f85d eb04 	ldr.w	lr, [sp], #4
   b416a:	f7ff bfbd 	b.w	b40e8 <_Z6setLED9LEDColors>
   b416e:	bf00      	nop
   b4170:	2003e698 	.word	0x2003e698

000b4174 <setup>:
   b4174:	b508      	push	{r3, lr}
   b4176:	f7ff ffd7 	bl	b4128 <_Z8initPinsv>
   b417a:	f002 fcf7 	bl	b6b6c <_Z16_fetch_usbserialv>
   b417e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4182:	f002 fce7 	bl	b6b54 <_ZN9USBSerial5beginEl>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   b4186:	f001 fcab 	bl	b5ae0 <spark_cloud_flag_connect>
   b418a:	f002 ffed 	bl	b7168 <_Z19__fetch_global_Wirev>
   b418e:	f002 fdc3 	bl	b6d18 <_ZN7TwoWire5beginEv>
   b4192:	4810      	ldr	r0, [pc, #64]	; (b41d4 <setup+0x60>)
   b4194:	2176      	movs	r1, #118	; 0x76
   b4196:	f000 fd26 	bl	b4be6 <_ZN15Adafruit_BME2805beginEh>
   b419a:	b928      	cbnz	r0, b41a8 <setup+0x34>
   b419c:	f002 fce6 	bl	b6b6c <_Z16_fetch_usbserialv>
   b41a0:	490d      	ldr	r1, [pc, #52]	; (b41d8 <setup+0x64>)
   b41a2:	2276      	movs	r2, #118	; 0x76
   b41a4:	f7ff ff92 	bl	b40cc <_ZN5Print6printfEPKcz>
   b41a8:	223c      	movs	r2, #60	; 0x3c
   b41aa:	480c      	ldr	r0, [pc, #48]	; (b41dc <setup+0x68>)
   b41ac:	2102      	movs	r1, #2
   b41ae:	f000 ffc9 	bl	b5144 <_ZN16Adafruit_SSD13065beginEhh>
   b41b2:	480a      	ldr	r0, [pc, #40]	; (b41dc <setup+0x68>)
   b41b4:	2101      	movs	r1, #1
   b41b6:	f001 fa4b 	bl	b5650 <_ZN12Adafruit_GFX12setTextColorEt>
   b41ba:	4808      	ldr	r0, [pc, #32]	; (b41dc <setup+0x68>)
   b41bc:	2102      	movs	r1, #2
   b41be:	f001 fa42 	bl	b5646 <_ZN12Adafruit_GFX11setTextSizeEh>
   b41c2:	4806      	ldr	r0, [pc, #24]	; (b41dc <setup+0x68>)
   b41c4:	f000 fef2 	bl	b4fac <_ZN16Adafruit_SSD130612clearDisplayEv>
   b41c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b41cc:	4803      	ldr	r0, [pc, #12]	; (b41dc <setup+0x68>)
   b41ce:	f000 bf49 	b.w	b5064 <_ZN16Adafruit_SSD13067displayEv>
   b41d2:	bf00      	nop
   b41d4:	2003e648 	.word	0x2003e648
   b41d8:	000b7ced 	.word	0x000b7ced
   b41dc:	2003e624 	.word	0x2003e624

000b41e0 <_Z8lockDoorb>:
   b41e0:	4601      	mov	r1, r0
   b41e2:	b100      	cbz	r0, b41e6 <_Z8lockDoorb+0x6>
   b41e4:	215a      	movs	r1, #90	; 0x5a
   b41e6:	4801      	ldr	r0, [pc, #4]	; (b41ec <_Z8lockDoorb+0xc>)
   b41e8:	f001 be5b 	b.w	b5ea2 <_ZN5Servo5writeEi>
   b41ec:	2003e698 	.word	0x2003e698

000b41f0 <loop>:
   b41f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b41f2:	487b      	ldr	r0, [pc, #492]	; (b43e0 <loop+0x1f0>)
   b41f4:	4c7b      	ldr	r4, [pc, #492]	; (b43e4 <loop+0x1f4>)
   b41f6:	4f7c      	ldr	r7, [pc, #496]	; (b43e8 <loop+0x1f8>)
   b41f8:	4e7c      	ldr	r6, [pc, #496]	; (b43ec <loop+0x1fc>)
   b41fa:	4d7d      	ldr	r5, [pc, #500]	; (b43f0 <loop+0x200>)
   b41fc:	b08b      	sub	sp, #44	; 0x2c
   b41fe:	f000 fc1f 	bl	b4a40 <_ZN15Adafruit_BME28015readTemperatureEv>
   b4202:	4877      	ldr	r0, [pc, #476]	; (b43e0 <loop+0x1f0>)
   b4204:	ed84 0a00 	vstr	s0, [r4]
   b4208:	f000 fc4a 	bl	b4aa0 <_ZN15Adafruit_BME28012readHumidityEv>
   b420c:	6820      	ldr	r0, [r4, #0]
   b420e:	ed87 0a00 	vstr	s0, [r7]
   b4212:	f003 f937 	bl	b7484 <__aeabi_f2d>
   b4216:	ed9f 4b6a 	vldr	d4, [pc, #424]	; b43c0 <loop+0x1d0>
   b421a:	ed9f 3b6b 	vldr	d3, [pc, #428]	; b43c8 <loop+0x1d8>
   b421e:	ed9f 2b6c 	vldr	d2, [pc, #432]	; b43d0 <loop+0x1e0>
   b4222:	ed9f 1b6d 	vldr	d1, [pc, #436]	; b43d8 <loop+0x1e8>
   b4226:	ec41 0b10 	vmov	d0, r0, r1
   b422a:	f002 f849 	bl	b62c0 <_Z3mapddddd>
   b422e:	ec51 0b10 	vmov	r0, r1, d0
   b4232:	f003 fc19 	bl	b7a68 <__aeabi_d2f>
   b4236:	4c6f      	ldr	r4, [pc, #444]	; (b43f4 <loop+0x204>)
   b4238:	6030      	str	r0, [r6, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b423a:	f001 fa5d 	bl	b56f8 <HAL_Timer_Get_Milli_Seconds>
   b423e:	6823      	ldr	r3, [r4, #0]
   b4240:	1ac0      	subs	r0, r0, r3
   b4242:	f247 5330 	movw	r3, #30000	; 0x7530
   b4246:	4298      	cmp	r0, r3
   b4248:	d941      	bls.n	b42ce <loop+0xde>
   b424a:	f001 fa55 	bl	b56f8 <HAL_Timer_Get_Milli_Seconds>
   b424e:	782b      	ldrb	r3, [r5, #0]
   b4250:	6020      	str	r0, [r4, #0]
   b4252:	2b00      	cmp	r3, #0
   b4254:	f000 8091 	beq.w	b437a <loop+0x18a>
   b4258:	f002 fc88 	bl	b6b6c <_Z16_fetch_usbserialv>
   b425c:	4966      	ldr	r1, [pc, #408]	; (b43f8 <loop+0x208>)
   b425e:	f7ff ff35 	bl	b40cc <_ZN5Print6printfEPKcz>
   b4262:	f002 fc83 	bl	b6b6c <_Z16_fetch_usbserialv>
   b4266:	4604      	mov	r4, r0
   b4268:	6830      	ldr	r0, [r6, #0]
   b426a:	f003 f90b 	bl	b7484 <__aeabi_f2d>
   b426e:	460b      	mov	r3, r1
   b4270:	4602      	mov	r2, r0
   b4272:	4962      	ldr	r1, [pc, #392]	; (b43fc <loop+0x20c>)
   b4274:	4620      	mov	r0, r4
   b4276:	f7ff ff29 	bl	b40cc <_ZN5Print6printfEPKcz>
   b427a:	782b      	ldrb	r3, [r5, #0]
   b427c:	bb3b      	cbnz	r3, b42ce <loop+0xde>
   b427e:	6830      	ldr	r0, [r6, #0]
   b4280:	f003 f900 	bl	b7484 <__aeabi_f2d>
   b4284:	4602      	mov	r2, r0
   b4286:	460b      	mov	r3, r1
   b4288:	a806      	add	r0, sp, #24
   b428a:	495d      	ldr	r1, [pc, #372]	; (b4400 <loop+0x210>)
   b428c:	f001 ff08 	bl	b60a0 <_ZN6String6formatEPKcz>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4290:	4b5c      	ldr	r3, [pc, #368]	; (b4404 <loop+0x214>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4292:	9a06      	ldr	r2, [sp, #24]
   b4294:	781b      	ldrb	r3, [r3, #0]
   b4296:	f88d 3000 	strb.w	r3, [sp]
   b429a:	495b      	ldr	r1, [pc, #364]	; (b4408 <loop+0x218>)
   b429c:	233c      	movs	r3, #60	; 0x3c
   b429e:	a804      	add	r0, sp, #16
   b42a0:	f002 fa22 	bl	b66e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b42a4:	9c05      	ldr	r4, [sp, #20]
   b42a6:	b17c      	cbz	r4, b42c8 <loop+0xd8>
      if (--_M_use_count == 0)
   b42a8:	6863      	ldr	r3, [r4, #4]
   b42aa:	3b01      	subs	r3, #1
   b42ac:	6063      	str	r3, [r4, #4]
   b42ae:	b95b      	cbnz	r3, b42c8 <loop+0xd8>
          _M_dispose();
   b42b0:	6823      	ldr	r3, [r4, #0]
   b42b2:	4620      	mov	r0, r4
   b42b4:	689b      	ldr	r3, [r3, #8]
   b42b6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b42b8:	68a3      	ldr	r3, [r4, #8]
   b42ba:	3b01      	subs	r3, #1
   b42bc:	60a3      	str	r3, [r4, #8]
   b42be:	b91b      	cbnz	r3, b42c8 <loop+0xd8>
            _M_destroy();
   b42c0:	6823      	ldr	r3, [r4, #0]
   b42c2:	4620      	mov	r0, r4
   b42c4:	68db      	ldr	r3, [r3, #12]
   b42c6:	4798      	blx	r3
   b42c8:	a806      	add	r0, sp, #24
   b42ca:	f001 fe65 	bl	b5f98 <_ZN6StringD1Ev>
   b42ce:	4c4f      	ldr	r4, [pc, #316]	; (b440c <loop+0x21c>)
   b42d0:	f001 fa12 	bl	b56f8 <HAL_Timer_Get_Milli_Seconds>
   b42d4:	6823      	ldr	r3, [r4, #0]
   b42d6:	1ac0      	subs	r0, r0, r3
   b42d8:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   b42dc:	d90a      	bls.n	b42f4 <loop+0x104>
   b42de:	2006      	movs	r0, #6
   b42e0:	f002 feb2 	bl	b7048 <digitalRead>
   b42e4:	b130      	cbz	r0, b42f4 <loop+0x104>
   b42e6:	782b      	ldrb	r3, [r5, #0]
   b42e8:	f083 0301 	eor.w	r3, r3, #1
   b42ec:	702b      	strb	r3, [r5, #0]
   b42ee:	f001 fa03 	bl	b56f8 <HAL_Timer_Get_Milli_Seconds>
   b42f2:	6020      	str	r0, [r4, #0]
   b42f4:	7828      	ldrb	r0, [r5, #0]
   b42f6:	4c46      	ldr	r4, [pc, #280]	; (b4410 <loop+0x220>)
   b42f8:	2800      	cmp	r0, #0
   b42fa:	d049      	beq.n	b4390 <loop+0x1a0>
   b42fc:	2300      	movs	r3, #0
   b42fe:	7023      	strb	r3, [r4, #0]
   b4300:	2002      	movs	r0, #2
   b4302:	f7ff fef1 	bl	b40e8 <_Z6setLED9LEDColors>
   b4306:	f001 f9f7 	bl	b56f8 <HAL_Timer_Get_Milli_Seconds>
   b430a:	4b42      	ldr	r3, [pc, #264]	; (b4414 <loop+0x224>)
   b430c:	681b      	ldr	r3, [r3, #0]
   b430e:	1ac0      	subs	r0, r0, r3
   b4310:	280a      	cmp	r0, #10
   b4312:	d92c      	bls.n	b436e <loop+0x17e>
   b4314:	6830      	ldr	r0, [r6, #0]
   b4316:	f003 f8b5 	bl	b7484 <__aeabi_f2d>
   b431a:	4602      	mov	r2, r0
   b431c:	460b      	mov	r3, r1
   b431e:	6838      	ldr	r0, [r7, #0]
   b4320:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b4324:	f003 f8ae 	bl	b7484 <__aeabi_f2d>
   b4328:	7826      	ldrb	r6, [r4, #0]
   b432a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b432e:	2e00      	cmp	r6, #0
   b4330:	d03c      	beq.n	b43ac <loop+0x1bc>
   b4332:	e9cd 0100 	strd	r0, r1, [sp]
   b4336:	4938      	ldr	r1, [pc, #224]	; (b4418 <loop+0x228>)
   b4338:	a806      	add	r0, sp, #24
   b433a:	f001 feb1 	bl	b60a0 <_ZN6String6formatEPKcz>
   b433e:	a906      	add	r1, sp, #24
   b4340:	4836      	ldr	r0, [pc, #216]	; (b441c <loop+0x22c>)
   b4342:	f001 fea5 	bl	b6090 <_ZN6StringaSEOS_>
   b4346:	a806      	add	r0, sp, #24
   b4348:	f001 fe26 	bl	b5f98 <_ZN6StringD1Ev>
   b434c:	4834      	ldr	r0, [pc, #208]	; (b4420 <loop+0x230>)
   b434e:	f000 fe2d 	bl	b4fac <_ZN16Adafruit_SSD130612clearDisplayEv>
   b4352:	4833      	ldr	r0, [pc, #204]	; (b4420 <loop+0x230>)
   b4354:	2205      	movs	r2, #5
   b4356:	2100      	movs	r1, #0
   b4358:	f001 f972 	bl	b5640 <_ZN12Adafruit_GFX9setCursorEss>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b435c:	4b2f      	ldr	r3, [pc, #188]	; (b441c <loop+0x22c>)
   b435e:	4931      	ldr	r1, [pc, #196]	; (b4424 <loop+0x234>)
   b4360:	681a      	ldr	r2, [r3, #0]
   b4362:	482f      	ldr	r0, [pc, #188]	; (b4420 <loop+0x230>)
   b4364:	f7ff feb2 	bl	b40cc <_ZN5Print6printfEPKcz>
   b4368:	482d      	ldr	r0, [pc, #180]	; (b4420 <loop+0x230>)
   b436a:	f000 fe7b 	bl	b5064 <_ZN16Adafruit_SSD13067displayEv>
   b436e:	7820      	ldrb	r0, [r4, #0]
   b4370:	b00b      	add	sp, #44	; 0x2c
   b4372:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b4376:	f7ff bf33 	b.w	b41e0 <_Z8lockDoorb>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b437a:	f001 fbb9 	bl	b5af0 <spark_cloud_flag_connected>
   b437e:	b918      	cbnz	r0, b4388 <loop+0x198>
   b4380:	f002 fbf4 	bl	b6b6c <_Z16_fetch_usbserialv>
   b4384:	4928      	ldr	r1, [pc, #160]	; (b4428 <loop+0x238>)
   b4386:	e76a      	b.n	b425e <loop+0x6e>
   b4388:	f002 fbf0 	bl	b6b6c <_Z16_fetch_usbserialv>
   b438c:	4927      	ldr	r1, [pc, #156]	; (b442c <loop+0x23c>)
   b438e:	e766      	b.n	b425e <loop+0x6e>
   b4390:	ed96 7a00 	vldr	s14, [r6]
   b4394:	eddf 7a26 	vldr	s15, [pc, #152]	; b4430 <loop+0x240>
   b4398:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b439c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b43a0:	bf55      	itete	pl
   b43a2:	2301      	movpl	r3, #1
   b43a4:	7020      	strbmi	r0, [r4, #0]
   b43a6:	7023      	strbpl	r3, [r4, #0]
   b43a8:	2001      	movmi	r0, #1
   b43aa:	e7aa      	b.n	b4302 <loop+0x112>
   b43ac:	782d      	ldrb	r5, [r5, #0]
   b43ae:	e9cd 0100 	strd	r0, r1, [sp]
   b43b2:	b10d      	cbz	r5, b43b8 <loop+0x1c8>
   b43b4:	491f      	ldr	r1, [pc, #124]	; (b4434 <loop+0x244>)
   b43b6:	e7bf      	b.n	b4338 <loop+0x148>
   b43b8:	491f      	ldr	r1, [pc, #124]	; (b4438 <loop+0x248>)
   b43ba:	e7bd      	b.n	b4338 <loop+0x148>
   b43bc:	f3af 8000 	nop.w
   b43c0:	00000000 	.word	0x00000000
   b43c4:	406a8000 	.word	0x406a8000
   b43c8:	00000000 	.word	0x00000000
   b43cc:	40400000 	.word	0x40400000
   b43d0:	00000000 	.word	0x00000000
   b43d4:	40590000 	.word	0x40590000
	...
   b43e0:	2003e648 	.word	0x2003e648
   b43e4:	2003e6b0 	.word	0x2003e6b0
   b43e8:	2003e694 	.word	0x2003e694
   b43ec:	2003e6b4 	.word	0x2003e6b4
   b43f0:	2003e6a8 	.word	0x2003e6a8
   b43f4:	2003e6ac 	.word	0x2003e6ac
   b43f8:	000b7d16 	.word	0x000b7d16
   b43fc:	000b7d5d 	.word	0x000b7d5d
   b4400:	000b7d63 	.word	0x000b7d63
   b4404:	2003e620 	.word	0x2003e620
   b4408:	000b7d68 	.word	0x000b7d68
   b440c:	2003e68c 	.word	0x2003e68c
   b4410:	2003e184 	.word	0x2003e184
   b4414:	2003e690 	.word	0x2003e690
   b4418:	000b7d6e 	.word	0x000b7d6e
   b441c:	2003e604 	.word	0x2003e604
   b4420:	2003e624 	.word	0x2003e624
   b4424:	000b7dc4 	.word	0x000b7dc4
   b4428:	000b7d27 	.word	0x000b7d27
   b442c:	000b7d4a 	.word	0x000b7d4a
   b4430:	42960000 	.word	0x42960000
   b4434:	000b7d8c 	.word	0x000b7d8c
   b4438:	000b7daa 	.word	0x000b7daa

000b443c <_GLOBAL__sub_I_SystemMode>:
   b443c:	b508      	push	{r3, lr}
        val_(val) {
   b443e:	4b0e      	ldr	r3, [pc, #56]	; (b4478 <_GLOBAL__sub_I_SystemMode+0x3c>)
   b4440:	2002      	movs	r0, #2
   b4442:	7018      	strb	r0, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4444:	4b0d      	ldr	r3, [pc, #52]	; (b447c <_GLOBAL__sub_I_SystemMode+0x40>)
   b4446:	2200      	movs	r2, #0
   b4448:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b444c:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b4450:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4452:	f001 fab1 	bl	b59b8 <set_system_mode>
   b4456:	2109      	movs	r1, #9
   b4458:	4809      	ldr	r0, [pc, #36]	; (b4480 <_GLOBAL__sub_I_SystemMode+0x44>)
   b445a:	f000 fd91 	bl	b4f80 <_ZN16Adafruit_SSD1306C1Ea>
   b445e:	4809      	ldr	r0, [pc, #36]	; (b4484 <_GLOBAL__sub_I_SystemMode+0x48>)
   b4460:	f000 f84a 	bl	b44f8 <_ZN15Adafruit_BME280C1Ev>
   b4464:	4908      	ldr	r1, [pc, #32]	; (b4488 <_GLOBAL__sub_I_SystemMode+0x4c>)
   b4466:	4809      	ldr	r0, [pc, #36]	; (b448c <_GLOBAL__sub_I_SystemMode+0x50>)
   b4468:	f001 fde1 	bl	b602e <_ZN6StringC1EPK19__FlashStringHelper>
   b446c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4470:	4807      	ldr	r0, [pc, #28]	; (b4490 <_GLOBAL__sub_I_SystemMode+0x54>)
   b4472:	f001 bd3f 	b.w	b5ef4 <_ZN5ServoC1Ev>
   b4476:	bf00      	nop
   b4478:	2003e620 	.word	0x2003e620
   b447c:	2003e614 	.word	0x2003e614
   b4480:	2003e624 	.word	0x2003e624
   b4484:	2003e648 	.word	0x2003e648
   b4488:	000b7d62 	.word	0x000b7d62
   b448c:	2003e604 	.word	0x2003e604
   b4490:	2003e698 	.word	0x2003e698

000b4494 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b4494:	4770      	bx	lr

000b4496 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b4496:	b510      	push	{r4, lr}
  }
   b4498:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b449a:	4604      	mov	r4, r0
  }
   b449c:	f7ff fdff 	bl	b409e <_ZdlPvj>
   b44a0:	4620      	mov	r0, r4
   b44a2:	bd10      	pop	{r4, pc}

000b44a4 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b44a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b44a6:	4604      	mov	r4, r0
   b44a8:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b44aa:	7922      	ldrb	r2, [r4, #4]
   b44ac:	68a3      	ldr	r3, [r4, #8]
   b44ae:	b132      	cbz	r2, b44be <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b44b0:	b9a3      	cbnz	r3, b44dc <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b44b2:	490b      	ldr	r1, [pc, #44]	; (b44e0 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b44b4:	b002      	add	sp, #8
   b44b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b44ba:	f001 be81 	b.w	b61c0 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b44be:	4a09      	ldr	r2, [pc, #36]	; (b44e4 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b44c0:	7b26      	ldrb	r6, [r4, #12]
   b44c2:	4d09      	ldr	r5, [pc, #36]	; (b44e8 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b44c4:	4909      	ldr	r1, [pc, #36]	; (b44ec <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b44c6:	7b64      	ldrb	r4, [r4, #13]
   b44c8:	2e01      	cmp	r6, #1
   b44ca:	bf18      	it	ne
   b44cc:	4629      	movne	r1, r5
   b44ce:	e9cd 1400 	strd	r1, r4, [sp]
   b44d2:	4907      	ldr	r1, [pc, #28]	; (b44f0 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b44d4:	f7ff fdfa 	bl	b40cc <_ZN5Print6printfEPKcz>
  }
   b44d8:	b002      	add	sp, #8
   b44da:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b44dc:	4a05      	ldr	r2, [pc, #20]	; (b44f4 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b44de:	e7ef      	b.n	b44c0 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b44e0:	000b7dd8 	.word	0x000b7dd8
   b44e4:	000b7d62 	.word	0x000b7d62
   b44e8:	000b7dd4 	.word	0x000b7dd4
   b44ec:	000b7dd0 	.word	0x000b7dd0
   b44f0:	000b7dee 	.word	0x000b7dee
   b44f4:	000b7dc7 	.word	0x000b7dc7

000b44f8 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   b44f8:	f04f 33ff 	mov.w	r3, #4294967295
   b44fc:	6103      	str	r3, [r0, #16]
{ }
   b44fe:	4770      	bx	lr

000b4500 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b4500:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b4502:	4c0b      	ldr	r4, [pc, #44]	; (b4530 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b4504:	7821      	ldrb	r1, [r4, #0]
   b4506:	f3bf 8f5b 	dmb	ish
   b450a:	f011 0101 	ands.w	r1, r1, #1
   b450e:	d10b      	bne.n	b4528 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b4510:	4620      	mov	r0, r4
   b4512:	9101      	str	r1, [sp, #4]
   b4514:	f7ff fdd2 	bl	b40bc <__cxa_guard_acquire>
   b4518:	9901      	ldr	r1, [sp, #4]
   b451a:	b128      	cbz	r0, b4528 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b451c:	4805      	ldr	r0, [pc, #20]	; (b4534 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b451e:	f001 fb83 	bl	b5c28 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b4522:	4620      	mov	r0, r4
   b4524:	f7ff fdcf 	bl	b40c6 <__cxa_guard_release>
        return instance;
    }
   b4528:	4802      	ldr	r0, [pc, #8]	; (b4534 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b452a:	b002      	add	sp, #8
   b452c:	bd10      	pop	{r4, pc}
   b452e:	bf00      	nop
   b4530:	2003e6b8 	.word	0x2003e6b8
   b4534:	2003e6bc 	.word	0x2003e6bc

000b4538 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>:
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
   b4538:	b508      	push	{r3, lr}
        instance().endTransaction();
   b453a:	f7ff ffe1 	bl	b4500 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
   b453e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().endTransaction();
   b4542:	f001 bbb7 	b.w	b5cb4 <_ZN8SPIClass14endTransactionEv>

000b4546 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>:
    int32_t beginTransaction(const particle::SPISettings& settings) {
   b4546:	b507      	push	{r0, r1, r2, lr}
   b4548:	9001      	str	r0, [sp, #4]
        return instance().beginTransaction(settings);
   b454a:	f7ff ffd9 	bl	b4500 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b454e:	9901      	ldr	r1, [sp, #4]
    }
   b4550:	b003      	add	sp, #12
   b4552:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().beginTransaction(settings);
   b4556:	f001 bbc7 	b.w	b5ce8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b455a <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   b455a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   b455e:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4562:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   b4564:	4605      	mov	r5, r0
   b4566:	460f      	mov	r7, r1
    if (_sck == -1)
   b4568:	d106      	bne.n	b4578 <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b456a:	f7ff ffc9 	bl	b4500 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b456e:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   b4570:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b4574:	f001 bc7e 	b.w	b5e74 <_ZN8SPIClass8transferEh>
    uint8_t reply = 0;
   b4578:	2400      	movs	r4, #0
    for (int i=7; i>=0; i--) {
   b457a:	2607      	movs	r6, #7
        digitalWrite(_mosi, x & (1<<i));
   b457c:	f04f 0801 	mov.w	r8, #1
        digitalWrite(_sck, LOW);
   b4580:	f995 0013 	ldrsb.w	r0, [r5, #19]
   b4584:	2100      	movs	r1, #0
   b4586:	b280      	uxth	r0, r0
   b4588:	f002 fd45 	bl	b7016 <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   b458c:	f995 0011 	ldrsb.w	r0, [r5, #17]
   b4590:	fa08 f106 	lsl.w	r1, r8, r6
   b4594:	4039      	ands	r1, r7
   b4596:	b280      	uxth	r0, r0
   b4598:	f002 fd3d 	bl	b7016 <digitalWrite>
        digitalWrite(_sck, HIGH);
   b459c:	f995 0013 	ldrsb.w	r0, [r5, #19]
   b45a0:	2101      	movs	r1, #1
   b45a2:	b280      	uxth	r0, r0
   b45a4:	f002 fd37 	bl	b7016 <digitalWrite>
        if (digitalRead(_miso))
   b45a8:	f995 0012 	ldrsb.w	r0, [r5, #18]
        reply <<= 1;
   b45ac:	0064      	lsls	r4, r4, #1
        if (digitalRead(_miso))
   b45ae:	b280      	uxth	r0, r0
        reply <<= 1;
   b45b0:	b2e4      	uxtb	r4, r4
        if (digitalRead(_miso))
   b45b2:	f002 fd49 	bl	b7048 <digitalRead>
   b45b6:	b108      	cbz	r0, b45bc <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   b45b8:	f044 0401 	orr.w	r4, r4, #1
    for (int i=7; i>=0; i--) {
   b45bc:	3e01      	subs	r6, #1
   b45be:	d2df      	bcs.n	b4580 <_ZN15Adafruit_BME2807spixferEh+0x26>
}
   b45c0:	4620      	mov	r0, r4
   b45c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b45c8 <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   b45c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   b45ca:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b45ce:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
   b45d0:	4604      	mov	r4, r0
   b45d2:	460e      	mov	r6, r1
   b45d4:	4615      	mov	r5, r2
    if (_cs == -1) {
   b45d6:	d113      	bne.n	b4600 <_ZN15Adafruit_BME2806write8Ehh+0x38>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b45d8:	7901      	ldrb	r1, [r0, #4]
   b45da:	6800      	ldr	r0, [r0, #0]
   b45dc:	f002 fbce 	bl	b6d7c <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b45e0:	6820      	ldr	r0, [r4, #0]
   b45e2:	6803      	ldr	r3, [r0, #0]
   b45e4:	4631      	mov	r1, r6
   b45e6:	689b      	ldr	r3, [r3, #8]
   b45e8:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   b45ea:	6820      	ldr	r0, [r4, #0]
   b45ec:	6803      	ldr	r3, [r0, #0]
   b45ee:	4629      	mov	r1, r5
   b45f0:	689b      	ldr	r3, [r3, #8]
   b45f2:	4798      	blx	r3
        _wire -> endTransmission();
   b45f4:	6820      	ldr	r0, [r4, #0]
        spixfer(value);
        digitalWrite(_cs, HIGH);
    if (_sck == -1)
        SPI.endTransaction(); // release the SPI bus
    }
}
   b45f6:	b004      	add	sp, #16
   b45f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _wire -> endTransmission();
   b45fc:	f002 bbc9 	b.w	b6d92 <_ZN7TwoWire15endTransmissionEv>
        if (_sck == -1)
   b4600:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4604:	3301      	adds	r3, #1
   b4606:	d10c      	bne.n	b4622 <_ZN15Adafruit_BME2806write8Ehh+0x5a>
      dataMode_{dataMode}
   b4608:	4b16      	ldr	r3, [pc, #88]	; (b4664 <_ZN15Adafruit_BME2806write8Ehh+0x9c>)
   b460a:	9300      	str	r3, [sp, #0]
   b460c:	2300      	movs	r3, #0
   b460e:	f88d 3004 	strb.w	r3, [sp, #4]
   b4612:	4b15      	ldr	r3, [pc, #84]	; (b4668 <_ZN15Adafruit_BME2806write8Ehh+0xa0>)
   b4614:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b4616:	4668      	mov	r0, sp
   b4618:	2301      	movs	r3, #1
   b461a:	f8ad 300c 	strh.w	r3, [sp, #12]
   b461e:	f7ff ff92 	bl	b4546 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b4622:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4626:	2100      	movs	r1, #0
   b4628:	b280      	uxth	r0, r0
   b462a:	f002 fcf4 	bl	b7016 <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   b462e:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   b4632:	4620      	mov	r0, r4
   b4634:	f7ff ff91 	bl	b455a <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   b4638:	4629      	mov	r1, r5
   b463a:	4620      	mov	r0, r4
   b463c:	f7ff ff8d 	bl	b455a <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   b4640:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4644:	2101      	movs	r1, #1
   b4646:	b280      	uxth	r0, r0
   b4648:	f002 fce5 	bl	b7016 <digitalWrite>
    if (_sck == -1)
   b464c:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b4650:	3301      	adds	r3, #1
   b4652:	d104      	bne.n	b465e <_ZN15Adafruit_BME2806write8Ehh+0x96>
}
   b4654:	b004      	add	sp, #16
   b4656:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        SPI.endTransaction(); // release the SPI bus
   b465a:	f7ff bf6d 	b.w	b4538 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
}
   b465e:	b004      	add	sp, #16
   b4660:	bd70      	pop	{r4, r5, r6, pc}
   b4662:	bf00      	nop
   b4664:	000b7e14 	.word	0x000b7e14
   b4668:	0007a120 	.word	0x0007a120

000b466c <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
		 standby_duration  duration) {
   b466c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.osrs_t   = tempSampling;
   b466e:	00db      	lsls	r3, r3, #3
   b4670:	f002 0207 	and.w	r2, r2, #7
   b4674:	f003 0338 	and.w	r3, r3, #56	; 0x38
   b4678:	4313      	orrs	r3, r2
   b467a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
		 standby_duration  duration) {
   b467e:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.osrs_t   = tempSampling;
   b4682:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    _humReg.osrs_h    = humSampling;
   b4686:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 standby_duration  duration) {
   b468a:	f89d 501c 	ldrb.w	r5, [sp, #28]
   b468e:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _humReg.osrs_h    = humSampling;
   b4692:	f366 1347 	bfi	r3, r6, #5, #3
   b4696:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.t_sb   = duration;
   b469a:	00ed      	lsls	r5, r5, #3
   b469c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   b46a0:	f007 0707 	and.w	r7, r7, #7
   b46a4:	f005 0538 	and.w	r5, r5, #56	; 0x38
   b46a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   b46ac:	433d      	orrs	r5, r7
		 standby_duration  duration) {
   b46ae:	4604      	mov	r4, r0
    _configReg.t_sb   = duration;
   b46b0:	431d      	orrs	r5, r3
   b46b2:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   b46b6:	f006 0207 	and.w	r2, r6, #7
   b46ba:	21f2      	movs	r1, #242	; 0xf2
   b46bc:	f7ff ff84 	bl	b45c8 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   b46c0:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   b46c4:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   b46c8:	f002 0107 	and.w	r1, r2, #7
   b46cc:	009b      	lsls	r3, r3, #2
   b46ce:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   b46d2:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   b46d6:	4620      	mov	r0, r4
   b46d8:	21f5      	movs	r1, #245	; 0xf5
   b46da:	f7ff ff75 	bl	b45c8 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   b46de:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   b46e2:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   b46e6:	f002 0107 	and.w	r1, r2, #7
   b46ea:	009b      	lsls	r3, r3, #2
   b46ec:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   b46f0:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   b46f4:	4620      	mov	r0, r4
   b46f6:	21f4      	movs	r1, #244	; 0xf4
}
   b46f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   b46fc:	f7ff bf64 	b.w	b45c8 <_ZN15Adafruit_BME2806write8Ehh>

000b4700 <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   b4700:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
   b4702:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b4706:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
   b4708:	b085      	sub	sp, #20
   b470a:	4604      	mov	r4, r0
   b470c:	460d      	mov	r5, r1
    if (_cs == -1) {
   b470e:	d118      	bne.n	b4742 <_ZN15Adafruit_BME2805read8Eh+0x42>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b4710:	7901      	ldrb	r1, [r0, #4]
   b4712:	6800      	ldr	r0, [r0, #0]
   b4714:	f002 fb32 	bl	b6d7c <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b4718:	6820      	ldr	r0, [r4, #0]
   b471a:	6803      	ldr	r3, [r0, #0]
   b471c:	4629      	mov	r1, r5
   b471e:	689b      	ldr	r3, [r3, #8]
   b4720:	4798      	blx	r3
        _wire -> endTransmission();
   b4722:	6820      	ldr	r0, [r4, #0]
   b4724:	f002 fb35 	bl	b6d92 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   b4728:	7921      	ldrb	r1, [r4, #4]
   b472a:	6820      	ldr	r0, [r4, #0]
   b472c:	2201      	movs	r2, #1
   b472e:	f002 fb22 	bl	b6d76 <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   b4732:	6820      	ldr	r0, [r4, #0]
   b4734:	6803      	ldr	r3, [r0, #0]
   b4736:	695b      	ldr	r3, [r3, #20]
   b4738:	4798      	blx	r3
   b473a:	b2c5      	uxtb	r5, r0
        digitalWrite(_cs, HIGH);
        if (_sck == -1)
            SPI.endTransaction(); // release the SPI bus
    }
    return value;
}
   b473c:	4628      	mov	r0, r5
   b473e:	b005      	add	sp, #20
   b4740:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b4742:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4746:	3301      	adds	r3, #1
   b4748:	d10c      	bne.n	b4764 <_ZN15Adafruit_BME2805read8Eh+0x64>
   b474a:	4b15      	ldr	r3, [pc, #84]	; (b47a0 <_ZN15Adafruit_BME2805read8Eh+0xa0>)
   b474c:	9300      	str	r3, [sp, #0]
   b474e:	2300      	movs	r3, #0
   b4750:	f88d 3004 	strb.w	r3, [sp, #4]
   b4754:	4b13      	ldr	r3, [pc, #76]	; (b47a4 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   b4756:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b4758:	4668      	mov	r0, sp
   b475a:	2301      	movs	r3, #1
   b475c:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4760:	f7ff fef1 	bl	b4546 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b4764:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4768:	2100      	movs	r1, #0
   b476a:	b280      	uxth	r0, r0
   b476c:	f002 fc53 	bl	b7016 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b4770:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b4774:	4620      	mov	r0, r4
   b4776:	f7ff fef0 	bl	b455a <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   b477a:	2100      	movs	r1, #0
   b477c:	4620      	mov	r0, r4
   b477e:	f7ff feec 	bl	b455a <_ZN15Adafruit_BME2807spixferEh>
   b4782:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   b4784:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4788:	2101      	movs	r1, #1
   b478a:	b280      	uxth	r0, r0
   b478c:	f002 fc43 	bl	b7016 <digitalWrite>
        if (_sck == -1)
   b4790:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b4794:	3301      	adds	r3, #1
   b4796:	d1d1      	bne.n	b473c <_ZN15Adafruit_BME2805read8Eh+0x3c>
            SPI.endTransaction(); // release the SPI bus
   b4798:	f7ff fece 	bl	b4538 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   b479c:	e7ce      	b.n	b473c <_ZN15Adafruit_BME2805read8Eh+0x3c>
   b479e:	bf00      	nop
   b47a0:	000b7e14 	.word	0x000b7e14
   b47a4:	0007a120 	.word	0x0007a120

000b47a8 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   b47a8:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   b47aa:	21f3      	movs	r1, #243	; 0xf3
   b47ac:	f7ff ffa8 	bl	b4700 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   b47b0:	f000 0001 	and.w	r0, r0, #1
   b47b4:	bd08      	pop	{r3, pc}
	...

000b47b8 <_ZN15Adafruit_BME2806read16Eh>:
{
   b47b8:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   b47ba:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b47be:	3301      	adds	r3, #1
{
   b47c0:	b085      	sub	sp, #20
   b47c2:	4604      	mov	r4, r0
   b47c4:	460d      	mov	r5, r1
    if (_cs == -1) {
   b47c6:	d11f      	bne.n	b4808 <_ZN15Adafruit_BME2806read16Eh+0x50>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b47c8:	7901      	ldrb	r1, [r0, #4]
   b47ca:	6800      	ldr	r0, [r0, #0]
   b47cc:	f002 fad6 	bl	b6d7c <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b47d0:	6820      	ldr	r0, [r4, #0]
   b47d2:	6803      	ldr	r3, [r0, #0]
   b47d4:	4629      	mov	r1, r5
   b47d6:	689b      	ldr	r3, [r3, #8]
   b47d8:	4798      	blx	r3
        _wire -> endTransmission();
   b47da:	6820      	ldr	r0, [r4, #0]
   b47dc:	f002 fad9 	bl	b6d92 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   b47e0:	7921      	ldrb	r1, [r4, #4]
   b47e2:	6820      	ldr	r0, [r4, #0]
   b47e4:	2202      	movs	r2, #2
   b47e6:	f002 fac6 	bl	b6d76 <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   b47ea:	6820      	ldr	r0, [r4, #0]
   b47ec:	6803      	ldr	r3, [r0, #0]
   b47ee:	695b      	ldr	r3, [r3, #20]
   b47f0:	4798      	blx	r3
   b47f2:	4605      	mov	r5, r0
   b47f4:	6820      	ldr	r0, [r4, #0]
   b47f6:	6803      	ldr	r3, [r0, #0]
   b47f8:	695b      	ldr	r3, [r3, #20]
   b47fa:	4798      	blx	r3
   b47fc:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b4800:	b285      	uxth	r5, r0
}
   b4802:	4628      	mov	r0, r5
   b4804:	b005      	add	sp, #20
   b4806:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b4808:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b480c:	3301      	adds	r3, #1
   b480e:	d10c      	bne.n	b482a <_ZN15Adafruit_BME2806read16Eh+0x72>
   b4810:	4b18      	ldr	r3, [pc, #96]	; (b4874 <_ZN15Adafruit_BME2806read16Eh+0xbc>)
   b4812:	9300      	str	r3, [sp, #0]
   b4814:	2300      	movs	r3, #0
   b4816:	f88d 3004 	strb.w	r3, [sp, #4]
   b481a:	4b17      	ldr	r3, [pc, #92]	; (b4878 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   b481c:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b481e:	4668      	mov	r0, sp
   b4820:	2301      	movs	r3, #1
   b4822:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4826:	f7ff fe8e 	bl	b4546 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b482a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b482e:	2100      	movs	r1, #0
   b4830:	b280      	uxth	r0, r0
   b4832:	f002 fbf0 	bl	b7016 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b4836:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b483a:	4620      	mov	r0, r4
   b483c:	f7ff fe8d 	bl	b455a <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   b4840:	2100      	movs	r1, #0
   b4842:	4620      	mov	r0, r4
   b4844:	f7ff fe89 	bl	b455a <_ZN15Adafruit_BME2807spixferEh>
   b4848:	2100      	movs	r1, #0
   b484a:	4605      	mov	r5, r0
   b484c:	4620      	mov	r0, r4
   b484e:	f7ff fe84 	bl	b455a <_ZN15Adafruit_BME2807spixferEh>
   b4852:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b4856:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   b4858:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b485c:	2101      	movs	r1, #1
   b485e:	b280      	uxth	r0, r0
   b4860:	f002 fbd9 	bl	b7016 <digitalWrite>
        if (_sck == -1)
   b4864:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b4868:	3301      	adds	r3, #1
   b486a:	d1ca      	bne.n	b4802 <_ZN15Adafruit_BME2806read16Eh+0x4a>
            SPI.endTransaction(); // release the SPI bus
   b486c:	f7ff fe64 	bl	b4538 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   b4870:	e7c7      	b.n	b4802 <_ZN15Adafruit_BME2806read16Eh+0x4a>
   b4872:	bf00      	nop
   b4874:	000b7e14 	.word	0x000b7e14
   b4878:	0007a120 	.word	0x0007a120

000b487c <_ZN15Adafruit_BME2809read16_LEEh>:
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   b487c:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   b487e:	f7ff ff9b 	bl	b47b8 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   b4882:	ba40      	rev16	r0, r0
}
   b4884:	b280      	uxth	r0, r0
   b4886:	bd08      	pop	{r3, pc}

000b4888 <_ZN15Adafruit_BME28016readCoefficientsEv>:
{
   b4888:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b488a:	2188      	movs	r1, #136	; 0x88
{
   b488c:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b488e:	f7ff fff5 	bl	b487c <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   b4892:	218a      	movs	r1, #138	; 0x8a
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b4894:	82a0      	strh	r0, [r4, #20]
    return (int16_t)read16_LE(reg);
   b4896:	4620      	mov	r0, r4
   b4898:	f7ff fff0 	bl	b487c <_ZN15Adafruit_BME2809read16_LEEh>
   b489c:	218c      	movs	r1, #140	; 0x8c
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   b489e:	82e0      	strh	r0, [r4, #22]
    return (int16_t)read16_LE(reg);
   b48a0:	4620      	mov	r0, r4
   b48a2:	f7ff ffeb 	bl	b487c <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b48a6:	218e      	movs	r1, #142	; 0x8e
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   b48a8:	8320      	strh	r0, [r4, #24]
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b48aa:	4620      	mov	r0, r4
   b48ac:	f7ff ffe6 	bl	b487c <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   b48b0:	2190      	movs	r1, #144	; 0x90
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b48b2:	8360      	strh	r0, [r4, #26]
    return (int16_t)read16_LE(reg);
   b48b4:	4620      	mov	r0, r4
   b48b6:	f7ff ffe1 	bl	b487c <_ZN15Adafruit_BME2809read16_LEEh>
   b48ba:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   b48bc:	83a0      	strh	r0, [r4, #28]
    return (int16_t)read16_LE(reg);
   b48be:	4620      	mov	r0, r4
   b48c0:	f7ff ffdc 	bl	b487c <_ZN15Adafruit_BME2809read16_LEEh>
   b48c4:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   b48c6:	83e0      	strh	r0, [r4, #30]
    return (int16_t)read16_LE(reg);
   b48c8:	4620      	mov	r0, r4
   b48ca:	f7ff ffd7 	bl	b487c <_ZN15Adafruit_BME2809read16_LEEh>
   b48ce:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   b48d0:	8420      	strh	r0, [r4, #32]
    return (int16_t)read16_LE(reg);
   b48d2:	4620      	mov	r0, r4
   b48d4:	f7ff ffd2 	bl	b487c <_ZN15Adafruit_BME2809read16_LEEh>
   b48d8:	2198      	movs	r1, #152	; 0x98
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   b48da:	8460      	strh	r0, [r4, #34]	; 0x22
    return (int16_t)read16_LE(reg);
   b48dc:	4620      	mov	r0, r4
   b48de:	f7ff ffcd 	bl	b487c <_ZN15Adafruit_BME2809read16_LEEh>
   b48e2:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   b48e4:	84a0      	strh	r0, [r4, #36]	; 0x24
    return (int16_t)read16_LE(reg);
   b48e6:	4620      	mov	r0, r4
   b48e8:	f7ff ffc8 	bl	b487c <_ZN15Adafruit_BME2809read16_LEEh>
   b48ec:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   b48ee:	84e0      	strh	r0, [r4, #38]	; 0x26
    return (int16_t)read16_LE(reg);
   b48f0:	4620      	mov	r0, r4
   b48f2:	f7ff ffc3 	bl	b487c <_ZN15Adafruit_BME2809read16_LEEh>
   b48f6:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   b48f8:	8520      	strh	r0, [r4, #40]	; 0x28
    return (int16_t)read16_LE(reg);
   b48fa:	4620      	mov	r0, r4
   b48fc:	f7ff ffbe 	bl	b487c <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4900:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   b4902:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4904:	4620      	mov	r0, r4
   b4906:	f7ff fefb 	bl	b4700 <_ZN15Adafruit_BME2805read8Eh>
    return (int16_t)read16_LE(reg);
   b490a:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b490c:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    return (int16_t)read16_LE(reg);
   b4910:	4620      	mov	r0, r4
   b4912:	f7ff ffb3 	bl	b487c <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b4916:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   b4918:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b491a:	4620      	mov	r0, r4
   b491c:	f7ff fef0 	bl	b4700 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   b4920:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b4922:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   b4926:	4620      	mov	r0, r4
   b4928:	f7ff feea 	bl	b4700 <_ZN15Adafruit_BME2805read8Eh>
   b492c:	21e5      	movs	r1, #229	; 0xe5
   b492e:	4605      	mov	r5, r0
   b4930:	4620      	mov	r0, r4
   b4932:	f7ff fee5 	bl	b4700 <_ZN15Adafruit_BME2805read8Eh>
   b4936:	f000 030f 	and.w	r3, r0, #15
   b493a:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   b493e:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   b4940:	21e6      	movs	r1, #230	; 0xe6
   b4942:	4620      	mov	r0, r4
   b4944:	f7ff fedc 	bl	b4700 <_ZN15Adafruit_BME2805read8Eh>
   b4948:	21e5      	movs	r1, #229	; 0xe5
   b494a:	4605      	mov	r5, r0
   b494c:	4620      	mov	r0, r4
   b494e:	f7ff fed7 	bl	b4700 <_ZN15Adafruit_BME2805read8Eh>
   b4952:	f3c0 1307 	ubfx	r3, r0, #4, #8
   b4956:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   b495a:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   b495c:	21e7      	movs	r1, #231	; 0xe7
   b495e:	4620      	mov	r0, r4
   b4960:	f7ff fece 	bl	b4700 <_ZN15Adafruit_BME2805read8Eh>
   b4964:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
}
   b4968:	bd38      	pop	{r3, r4, r5, pc}
	...

000b496c <_ZN15Adafruit_BME2806read24Eh>:
{
   b496c:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   b496e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b4972:	3301      	adds	r3, #1
{
   b4974:	b085      	sub	sp, #20
   b4976:	4604      	mov	r4, r0
   b4978:	460d      	mov	r5, r1
    if (_cs == -1) {
   b497a:	d123      	bne.n	b49c4 <_ZN15Adafruit_BME2806read24Eh+0x58>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b497c:	7901      	ldrb	r1, [r0, #4]
   b497e:	6800      	ldr	r0, [r0, #0]
   b4980:	f002 f9fc 	bl	b6d7c <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b4984:	6820      	ldr	r0, [r4, #0]
   b4986:	6803      	ldr	r3, [r0, #0]
   b4988:	4629      	mov	r1, r5
   b498a:	689b      	ldr	r3, [r3, #8]
   b498c:	4798      	blx	r3
        _wire -> endTransmission();
   b498e:	6820      	ldr	r0, [r4, #0]
   b4990:	f002 f9ff 	bl	b6d92 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   b4994:	7921      	ldrb	r1, [r4, #4]
   b4996:	6820      	ldr	r0, [r4, #0]
   b4998:	2203      	movs	r2, #3
   b499a:	f002 f9ec 	bl	b6d76 <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   b499e:	6820      	ldr	r0, [r4, #0]
   b49a0:	6803      	ldr	r3, [r0, #0]
   b49a2:	695b      	ldr	r3, [r3, #20]
   b49a4:	4798      	blx	r3
        value <<= 8;
   b49a6:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   b49a8:	6820      	ldr	r0, [r4, #0]
   b49aa:	6803      	ldr	r3, [r0, #0]
   b49ac:	695b      	ldr	r3, [r3, #20]
   b49ae:	4798      	blx	r3
   b49b0:	4328      	orrs	r0, r5
        value <<= 8;
   b49b2:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   b49b4:	6820      	ldr	r0, [r4, #0]
   b49b6:	6803      	ldr	r3, [r0, #0]
   b49b8:	695b      	ldr	r3, [r3, #20]
   b49ba:	4798      	blx	r3
   b49bc:	4305      	orrs	r5, r0
}
   b49be:	4628      	mov	r0, r5
   b49c0:	b005      	add	sp, #20
   b49c2:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b49c4:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b49c8:	3301      	adds	r3, #1
   b49ca:	d10c      	bne.n	b49e6 <_ZN15Adafruit_BME2806read24Eh+0x7a>
   b49cc:	4b1a      	ldr	r3, [pc, #104]	; (b4a38 <_ZN15Adafruit_BME2806read24Eh+0xcc>)
   b49ce:	9300      	str	r3, [sp, #0]
   b49d0:	2300      	movs	r3, #0
   b49d2:	f88d 3004 	strb.w	r3, [sp, #4]
   b49d6:	4b19      	ldr	r3, [pc, #100]	; (b4a3c <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   b49d8:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b49da:	4668      	mov	r0, sp
   b49dc:	2301      	movs	r3, #1
   b49de:	f8ad 300c 	strh.w	r3, [sp, #12]
   b49e2:	f7ff fdb0 	bl	b4546 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b49e6:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b49ea:	2100      	movs	r1, #0
   b49ec:	b280      	uxth	r0, r0
   b49ee:	f002 fb12 	bl	b7016 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b49f2:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b49f6:	4620      	mov	r0, r4
   b49f8:	f7ff fdaf 	bl	b455a <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   b49fc:	2100      	movs	r1, #0
   b49fe:	4620      	mov	r0, r4
   b4a00:	f7ff fdab 	bl	b455a <_ZN15Adafruit_BME2807spixferEh>
        value |= spixfer(0);
   b4a04:	2100      	movs	r1, #0
        value <<= 8;
   b4a06:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   b4a08:	4620      	mov	r0, r4
   b4a0a:	f7ff fda6 	bl	b455a <_ZN15Adafruit_BME2807spixferEh>
   b4a0e:	4328      	orrs	r0, r5
        value <<= 8;
   b4a10:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   b4a12:	2100      	movs	r1, #0
   b4a14:	4620      	mov	r0, r4
   b4a16:	f7ff fda0 	bl	b455a <_ZN15Adafruit_BME2807spixferEh>
   b4a1a:	4305      	orrs	r5, r0
        digitalWrite(_cs, HIGH);
   b4a1c:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4a20:	2101      	movs	r1, #1
   b4a22:	b280      	uxth	r0, r0
   b4a24:	f002 faf7 	bl	b7016 <digitalWrite>
        if (_sck == -1)
   b4a28:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b4a2c:	3301      	adds	r3, #1
   b4a2e:	d1c6      	bne.n	b49be <_ZN15Adafruit_BME2806read24Eh+0x52>
            SPI.endTransaction(); // release the SPI bus
   b4a30:	f7ff fd82 	bl	b4538 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
    return value;
   b4a34:	e7c3      	b.n	b49be <_ZN15Adafruit_BME2806read24Eh+0x52>
   b4a36:	bf00      	nop
   b4a38:	000b7e14 	.word	0x000b7e14
   b4a3c:	0007a120 	.word	0x0007a120

000b4a40 <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   b4a40:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   b4a42:	21fa      	movs	r1, #250	; 0xfa
{
   b4a44:	4604      	mov	r4, r0
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   b4a46:	f7ff ff91 	bl	b496c <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   b4a4a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b4a4e:	d01f      	beq.n	b4a90 <_ZN15Adafruit_BME28015readTemperatureEv+0x50>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4a50:	8aa1      	ldrh	r1, [r4, #20]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   b4a52:	ed9f 7a11 	vldr	s14, [pc, #68]	; b4a98 <_ZN15Adafruit_BME28015readTemperatureEv+0x58>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4a56:	004b      	lsls	r3, r1, #1
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b4a58:	ebc1 2220 	rsb	r2, r1, r0, asr #8
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4a5c:	ebc3 11e0 	rsb	r1, r3, r0, asr #7
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
   b4a60:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4a64:	4359      	muls	r1, r3
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b4a66:	fb02 f302 	mul.w	r3, r2, r2
            ((int32_t)_bme280_calib.dig_T3)) >> 14;
   b4a6a:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   b4a6e:	131b      	asrs	r3, r3, #12
   b4a70:	4353      	muls	r3, r2
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b4a72:	139b      	asrs	r3, r3, #14
    t_fine = var1 + var2;
   b4a74:	eb03 23e1 	add.w	r3, r3, r1, asr #11
   b4a78:	60e3      	str	r3, [r4, #12]
    float T = (t_fine * 5 + 128) >> 8;
   b4a7a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b4a7e:	3380      	adds	r3, #128	; 0x80
   b4a80:	121b      	asrs	r3, r3, #8
   b4a82:	ee07 3a90 	vmov	s15, r3
   b4a86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return T/100;
   b4a8a:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   b4a8e:	bd10      	pop	{r4, pc}
        return NAN;
   b4a90:	ed9f 0a02 	vldr	s0, [pc, #8]	; b4a9c <_ZN15Adafruit_BME28015readTemperatureEv+0x5c>
   b4a94:	e7fb      	b.n	b4a8e <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
   b4a96:	bf00      	nop
   b4a98:	42c80000 	.word	0x42c80000
   b4a9c:	7fc00000 	.word	0x7fc00000

000b4aa0 <_ZN15Adafruit_BME28012readHumidityEv>:
/*!
    @brief  Returns the humidity from the sensor
    @returns the humidity value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readHumidity(void) {
   b4aa0:	b538      	push	{r3, r4, r5, lr}
   b4aa2:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   b4aa4:	f7ff ffcc 	bl	b4a40 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   b4aa8:	21fd      	movs	r1, #253	; 0xfd
   b4aaa:	4620      	mov	r0, r4
   b4aac:	f7ff fe84 	bl	b47b8 <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   b4ab0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   b4ab4:	d038      	beq.n	b4b28 <_ZN15Adafruit_BME28012readHumidityEv+0x88>
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
   b4ab6:	68e1      	ldr	r1, [r4, #12]

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   b4ab8:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
    v_x1_u32r = (t_fine - ((int32_t)76800));
   b4abc:	f5a1 3596 	sub.w	r5, r1, #76800	; 0x12c00
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   b4ac0:	f9b4 1032 	ldrsh.w	r1, [r4, #50]	; 0x32
   b4ac4:	0509      	lsls	r1, r1, #20
   b4ac6:	ebc1 3380 	rsb	r3, r1, r0, lsl #14
   b4aca:	fb05 3312 	mls	r3, r5, r2, r3
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   b4ace:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   b4ad2:	13da      	asrs	r2, r3, #15
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4ad4:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4ad8:	f994 1036 	ldrsb.w	r1, [r4, #54]	; 0x36
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4adc:	436b      	muls	r3, r5
   b4ade:	12db      	asrs	r3, r3, #11
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4ae0:	4369      	muls	r1, r5
   b4ae2:	1289      	asrs	r1, r1, #10
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4ae4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4ae8:	434b      	muls	r3, r1
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4aea:	129b      	asrs	r3, r3, #10
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   b4aec:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	; 0x2e
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4af0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   b4af4:	434b      	muls	r3, r1
   b4af6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   b4afa:	139b      	asrs	r3, r3, #14
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   b4afc:	4353      	muls	r3, r2

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   b4afe:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   b4b00:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   b4b04:	4352      	muls	r2, r2
   b4b06:	11d2      	asrs	r2, r2, #7
   b4b08:	434a      	muls	r2, r1
   b4b0a:	eba3 1322 	sub.w	r3, r3, r2, asr #4

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   b4b0e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
   b4b12:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   b4b16:	bfa8      	it	ge
   b4b18:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
    float h = (v_x1_u32r>>12);
   b4b1c:	131b      	asrs	r3, r3, #12
   b4b1e:	ee00 3a10 	vmov	s0, r3
    return  h / 1024.0;
   b4b22:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
}
   b4b26:	bd38      	pop	{r3, r4, r5, pc}
        return NAN;
   b4b28:	ed9f 0a01 	vldr	s0, [pc, #4]	; b4b30 <_ZN15Adafruit_BME28012readHumidityEv+0x90>
   b4b2c:	e7fb      	b.n	b4b26 <_ZN15Adafruit_BME28012readHumidityEv+0x86>
   b4b2e:	bf00      	nop
   b4b30:	7fc00000 	.word	0x7fc00000

000b4b34 <_ZN15Adafruit_BME2804initEv>:
{
   b4b34:	b530      	push	{r4, r5, lr}
   b4b36:	4604      	mov	r4, r0
    if (_cs == -1) {
   b4b38:	f990 0010 	ldrsb.w	r0, [r0, #16]
   b4b3c:	1c42      	adds	r2, r0, #1
{
   b4b3e:	b085      	sub	sp, #20
    if (_cs == -1) {
   b4b40:	d119      	bne.n	b4b76 <_ZN15Adafruit_BME2804initEv+0x42>
        _wire -> begin();
   b4b42:	6820      	ldr	r0, [r4, #0]
   b4b44:	f002 f8e8 	bl	b6d18 <_ZN7TwoWire5beginEv>
    _sensorID = read8(BME280_REGISTER_CHIPID);
   b4b48:	21d0      	movs	r1, #208	; 0xd0
   b4b4a:	4620      	mov	r0, r4
   b4b4c:	f7ff fdd8 	bl	b4700 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   b4b50:	2860      	cmp	r0, #96	; 0x60
    _sensorID = read8(BME280_REGISTER_CHIPID);
   b4b52:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   b4b54:	d145      	bne.n	b4be2 <_ZN15Adafruit_BME2804initEv+0xae>
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   b4b56:	4620      	mov	r0, r4
   b4b58:	22b6      	movs	r2, #182	; 0xb6
   b4b5a:	21e0      	movs	r1, #224	; 0xe0
   b4b5c:	f7ff fd34 	bl	b45c8 <_ZN15Adafruit_BME2806write8Ehh>
    delay(300);
   b4b60:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b4b64:	f001 fbef 	bl	b6346 <delay>
    while (isReadingCalibration())
   b4b68:	4620      	mov	r0, r4
   b4b6a:	f7ff fe1d 	bl	b47a8 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   b4b6e:	4605      	mov	r5, r0
   b4b70:	b328      	cbz	r0, b4bbe <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   b4b72:	2064      	movs	r0, #100	; 0x64
   b4b74:	e7f6      	b.n	b4b64 <_ZN15Adafruit_BME2804initEv+0x30>
        digitalWrite(_cs, HIGH);
   b4b76:	2101      	movs	r1, #1
   b4b78:	b280      	uxth	r0, r0
   b4b7a:	f002 fa4c 	bl	b7016 <digitalWrite>
        pinMode(_cs, OUTPUT);
   b4b7e:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4b82:	2101      	movs	r1, #1
   b4b84:	b280      	uxth	r0, r0
   b4b86:	f002 fa35 	bl	b6ff4 <pinMode>
        if (_sck == -1) {
   b4b8a:	f994 0013 	ldrsb.w	r0, [r4, #19]
   b4b8e:	1c43      	adds	r3, r0, #1
   b4b90:	d104      	bne.n	b4b9c <_ZN15Adafruit_BME2804initEv+0x68>
        instance().begin();
   b4b92:	f7ff fcb5 	bl	b4500 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4b96:	f001 f851 	bl	b5c3c <_ZN8SPIClass5beginEv>
    }
   b4b9a:	e7d5      	b.n	b4b48 <_ZN15Adafruit_BME2804initEv+0x14>
            pinMode(_sck, OUTPUT);
   b4b9c:	2101      	movs	r1, #1
   b4b9e:	b280      	uxth	r0, r0
   b4ba0:	f002 fa28 	bl	b6ff4 <pinMode>
            pinMode(_mosi, OUTPUT);
   b4ba4:	f994 0011 	ldrsb.w	r0, [r4, #17]
   b4ba8:	2101      	movs	r1, #1
   b4baa:	b280      	uxth	r0, r0
   b4bac:	f002 fa22 	bl	b6ff4 <pinMode>
            pinMode(_miso, INPUT);
   b4bb0:	f994 0012 	ldrsb.w	r0, [r4, #18]
   b4bb4:	2100      	movs	r1, #0
   b4bb6:	b280      	uxth	r0, r0
   b4bb8:	f002 fa1c 	bl	b6ff4 <pinMode>
   b4bbc:	e7c4      	b.n	b4b48 <_ZN15Adafruit_BME2804initEv+0x14>
    readCoefficients(); // read trimming parameters, see DS 4.2.2
   b4bbe:	4620      	mov	r0, r4
   b4bc0:	f7ff fe62 	bl	b4888 <_ZN15Adafruit_BME28016readCoefficientsEv>
    setSampling(); // use defaults
   b4bc4:	2305      	movs	r3, #5
   b4bc6:	9300      	str	r3, [sp, #0]
   b4bc8:	461a      	mov	r2, r3
   b4bca:	2103      	movs	r1, #3
   b4bcc:	4620      	mov	r0, r4
   b4bce:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b4bd2:	f7ff fd4b 	bl	b466c <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    delay(100);
   b4bd6:	2064      	movs	r0, #100	; 0x64
   b4bd8:	f001 fbb5 	bl	b6346 <delay>
    return true;
   b4bdc:	2001      	movs	r0, #1
}
   b4bde:	b005      	add	sp, #20
   b4be0:	bd30      	pop	{r4, r5, pc}
        return false;
   b4be2:	2000      	movs	r0, #0
   b4be4:	e7fb      	b.n	b4bde <_ZN15Adafruit_BME2804initEv+0xaa>

000b4be6 <_ZN15Adafruit_BME2805beginEh>:
{
   b4be6:	b510      	push	{r4, lr}
	_i2caddr = addr;
   b4be8:	7101      	strb	r1, [r0, #4]
{
   b4bea:	4604      	mov	r4, r0
	_wire = &Wire;
   b4bec:	f002 fabc 	bl	b7168 <_Z19__fetch_global_Wirev>
   b4bf0:	6020      	str	r0, [r4, #0]
	return init();
   b4bf2:	4620      	mov	r0, r4
}
   b4bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return init();
   b4bf8:	f7ff bf9c 	b.w	b4b34 <_ZN15Adafruit_BME2804initEv>

000b4bfc <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b4bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   b4bfe:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b4c00:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b4c04:	2d02      	cmp	r5, #2
   b4c06:	d069      	beq.n	b4cdc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xe0>
   b4c08:	2d03      	cmp	r5, #3
   b4c0a:	f000 8099 	beq.w	b4d40 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x144>
   b4c0e:	2d01      	cmp	r5, #1
   b4c10:	d16c      	bne.n	b4cec <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf0>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   b4c12:	8905      	ldrh	r5, [r0, #8]
   b4c14:	43d2      	mvns	r2, r2
   b4c16:	442a      	add	r2, r5
   b4c18:	b212      	sxth	r2, r2


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   b4c1a:	2a00      	cmp	r2, #0
   b4c1c:	db5d      	blt.n	b4cda <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4c1e:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b4c22:	4295      	cmp	r5, r2
   b4c24:	dd59      	ble.n	b4cda <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   b4c26:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   b4c28:	bfbe      	ittt	lt
   b4c2a:	185b      	addlt	r3, r3, r1
   b4c2c:	b21b      	sxthlt	r3, r3
    __y = 0;
   b4c2e:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   b4c30:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b4c34:	18cd      	adds	r5, r1, r3
   b4c36:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b4c38:	bfc4      	itt	gt
   b4c3a:	1a43      	subgt	r3, r0, r1
   b4c3c:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   b4c3e:	2b00      	cmp	r3, #0
   b4c40:	dd4b      	ble.n	b4cda <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   b4c42:	f3c1 00c4 	ubfx	r0, r1, #3, #5
   b4c46:	f8df c120 	ldr.w	ip, [pc, #288]	; b4d68 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>
   b4c4a:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   b4c4e:	f011 0107 	ands.w	r1, r1, #7
  register uint8_t h = __h;
   b4c52:	b2db      	uxtb	r3, r3
  pBuf += x;
   b4c54:	eb0c 0002 	add.w	r0, ip, r2
  if(mod) {
   b4c58:	d01a      	beq.n	b4c90 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x94>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   b4c5a:	f1c1 0508 	rsb	r5, r1, #8

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   b4c5e:	4e40      	ldr	r6, [pc, #256]	; (b4d60 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x164>)
    mod = 8-mod;
   b4c60:	b2ed      	uxtb	r5, r5

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   b4c62:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b4c64:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b4c66:	bf3f      	itttt	cc
   b4c68:	eba5 0e03 	subcc.w	lr, r5, r3
   b4c6c:	26ff      	movcc	r6, #255	; 0xff
   b4c6e:	fa46 f60e 	asrcc.w	r6, r6, lr
   b4c72:	4037      	andcc	r7, r6
    }

    if(color == WHITE) { 
      *pBuf |= mask;
   b4c74:	f81c 6002 	ldrb.w	r6, [ip, r2]
    if(color == WHITE) { 
   b4c78:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b4c7a:	bf0c      	ite	eq
   b4c7c:	433e      	orreq	r6, r7
    } else {
      *pBuf &= ~mask;
   b4c7e:	43be      	bicne	r6, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   b4c80:	42ab      	cmp	r3, r5
   b4c82:	f80c 6002 	strb.w	r6, [ip, r2]
   b4c86:	d328      	bcc.n	b4cda <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

    h -= mod;
   b4c88:	3908      	subs	r1, #8
   b4c8a:	440b      	add	r3, r1
   b4c8c:	b2db      	uxtb	r3, r3

    pBuf += SSD1306_LCDWIDTH;
   b4c8e:	3080      	adds	r0, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   b4c90:	2b07      	cmp	r3, #7
   b4c92:	d919      	bls.n	b4cc8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xcc>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b4c94:	2c01      	cmp	r4, #1
   b4c96:	f04f 35ff 	mov.w	r5, #4294967295
   b4c9a:	bf18      	it	ne
   b4c9c:	2500      	movne	r5, #0
   b4c9e:	b2ed      	uxtb	r5, r5
   b4ca0:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b4ca4:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   b4ca6:	3a08      	subs	r2, #8
   b4ca8:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b4caa:	2a07      	cmp	r2, #7
      *pBuf = val;
   b4cac:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b4cb0:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b4cb4:	d8f7      	bhi.n	b4ca6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
      pBuf += SSD1306_LCDWIDTH;
   b4cb6:	f1a3 0208 	sub.w	r2, r3, #8
   b4cba:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b4cbe:	3201      	adds	r2, #1
   b4cc0:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b4cc4:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   b4cc8:	b13b      	cbz	r3, b4cda <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   b4cca:	4a26      	ldr	r2, [pc, #152]	; (b4d64 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   b4ccc:	5cd2      	ldrb	r2, [r2, r3]
    if(color == WHITE) { 
      *pBuf |= mask;
   b4cce:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b4cd0:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b4cd2:	bf0c      	ite	eq
   b4cd4:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   b4cd6:	4393      	bicne	r3, r2
   b4cd8:	7003      	strb	r3, [r0, #0]
}
   b4cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b4cdc:	8945      	ldrh	r5, [r0, #10]
   b4cde:	43d2      	mvns	r2, r2
   b4ce0:	442a      	add	r2, r5
      x -= (w-1);
   b4ce2:	18cd      	adds	r5, r1, r3
   b4ce4:	8901      	ldrh	r1, [r0, #8]
   b4ce6:	1b49      	subs	r1, r1, r5
      y = HEIGHT - y - 1;
   b4ce8:	b212      	sxth	r2, r2
      x -= (w-1);
   b4cea:	b209      	sxth	r1, r1
  if(y < 0 || y >= HEIGHT) { return; }
   b4cec:	2a00      	cmp	r2, #0
   b4cee:	dbf4      	blt.n	b4cda <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4cf0:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b4cf4:	4295      	cmp	r5, r2
   b4cf6:	ddf0      	ble.n	b4cda <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  if(x < 0) { 
   b4cf8:	2900      	cmp	r1, #0
    w += x;
   b4cfa:	bfbe      	ittt	lt
   b4cfc:	185b      	addlt	r3, r3, r1
   b4cfe:	b21b      	sxthlt	r3, r3
    x = 0;
   b4d00:	2100      	movlt	r1, #0
  if( (x + w) > WIDTH) { 
   b4d02:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b4d06:	18ce      	adds	r6, r1, r3
   b4d08:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b4d0a:	bfc4      	itt	gt
   b4d0c:	1a6b      	subgt	r3, r5, r1
   b4d0e:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b4d10:	2b00      	cmp	r3, #0
   b4d12:	dde2      	ble.n	b4cda <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b4d14:	10d0      	asrs	r0, r2, #3
  pBuf += x;
   b4d16:	2580      	movs	r5, #128	; 0x80
   b4d18:	fb10 1105 	smlabb	r1, r0, r5, r1
   b4d1c:	4812      	ldr	r0, [pc, #72]	; (b4d68 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)
   b4d1e:	4401      	add	r1, r0
  register uint8_t mask = 1 << (y&7);
   b4d20:	f002 0007 	and.w	r0, r2, #7
   b4d24:	2201      	movs	r2, #1
   b4d26:	4082      	lsls	r2, r0
  if(color == WHITE) { 
   b4d28:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b4d2a:	b2d2      	uxtb	r2, r2
  if(color == WHITE) { 
   b4d2c:	440b      	add	r3, r1
   b4d2e:	d10c      	bne.n	b4d4a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
    while(w--) { *pBuf++ |= mask; }
   b4d30:	428b      	cmp	r3, r1
   b4d32:	d0d2      	beq.n	b4cda <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4d34:	f811 0b01 	ldrb.w	r0, [r1], #1
   b4d38:	4310      	orrs	r0, r2
   b4d3a:	f801 0c01 	strb.w	r0, [r1, #-1]
   b4d3e:	e7f7      	b.n	b4d30 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x134>
      y -= (w-1);
   b4d40:	18cd      	adds	r5, r1, r3
   b4d42:	8941      	ldrh	r1, [r0, #10]
   b4d44:	1b49      	subs	r1, r1, r5
   b4d46:	b209      	sxth	r1, r1
      break;
   b4d48:	e767      	b.n	b4c1a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
    mask = ~mask;
   b4d4a:	43d2      	mvns	r2, r2
   b4d4c:	b2d2      	uxtb	r2, r2
    while(w--) { *pBuf++ &= mask; }
   b4d4e:	428b      	cmp	r3, r1
   b4d50:	d0c3      	beq.n	b4cda <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4d52:	f811 0b01 	ldrb.w	r0, [r1], #1
   b4d56:	4010      	ands	r0, r2
   b4d58:	f801 0c01 	strb.w	r0, [r1, #-1]
   b4d5c:	e7f7      	b.n	b4d4e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   b4d5e:	bf00      	nop
   b4d60:	2003e18d 	.word	0x2003e18d
   b4d64:	2003e185 	.word	0x2003e185
   b4d68:	2003e195 	.word	0x2003e195

000b4d6c <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b4d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(rotation) { 
   b4d6e:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b4d70:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b4d74:	2d02      	cmp	r5, #2
   b4d76:	d034      	beq.n	b4de2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x76>
   b4d78:	2d03      	cmp	r5, #3
   b4d7a:	f000 809b 	beq.w	b4eb4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x148>
   b4d7e:	2d01      	cmp	r5, #1
   b4d80:	d137      	bne.n	b4df2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x86>
      x -= (h-1);
   b4d82:	18d5      	adds	r5, r2, r3
   b4d84:	8902      	ldrh	r2, [r0, #8]
   b4d86:	1b52      	subs	r2, r2, r5
   b4d88:	b212      	sxth	r2, r2
  if(y < 0 || y >= HEIGHT) { return; }
   b4d8a:	2900      	cmp	r1, #0
   b4d8c:	f2c0 8091 	blt.w	b4eb2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b4d90:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b4d94:	428d      	cmp	r5, r1
   b4d96:	f340 808c 	ble.w	b4eb2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(x < 0) { 
   b4d9a:	2a00      	cmp	r2, #0
    w += x;
   b4d9c:	bfbe      	ittt	lt
   b4d9e:	189b      	addlt	r3, r3, r2
   b4da0:	b21b      	sxthlt	r3, r3
    x = 0;
   b4da2:	2200      	movlt	r2, #0
  if( (x + w) > WIDTH) { 
   b4da4:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b4da8:	18d6      	adds	r6, r2, r3
   b4daa:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b4dac:	bfc4      	itt	gt
   b4dae:	1aab      	subgt	r3, r5, r2
   b4db0:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b4db2:	2b00      	cmp	r3, #0
   b4db4:	dd7d      	ble.n	b4eb2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b4db6:	10c8      	asrs	r0, r1, #3
  pBuf += x;
   b4db8:	2580      	movs	r5, #128	; 0x80
   b4dba:	fb10 2205 	smlabb	r2, r0, r5, r2
   b4dbe:	4845      	ldr	r0, [pc, #276]	; (b4ed4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>)
   b4dc0:	4402      	add	r2, r0
  register uint8_t mask = 1 << (y&7);
   b4dc2:	f001 0007 	and.w	r0, r1, #7
   b4dc6:	2101      	movs	r1, #1
   b4dc8:	4081      	lsls	r1, r0
  if(color == WHITE) { 
   b4dca:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b4dcc:	b2c9      	uxtb	r1, r1
  if(color == WHITE) { 
   b4dce:	4413      	add	r3, r2
   b4dd0:	d175      	bne.n	b4ebe <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
    while(w--) { *pBuf++ |= mask; }
   b4dd2:	429a      	cmp	r2, r3
   b4dd4:	d06d      	beq.n	b4eb2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b4dd6:	f812 0b01 	ldrb.w	r0, [r2], #1
   b4dda:	4308      	orrs	r0, r1
   b4ddc:	f802 0c01 	strb.w	r0, [r2, #-1]
   b4de0:	e7f7      	b.n	b4dd2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x66>
      x = WIDTH - x - 1;
   b4de2:	8905      	ldrh	r5, [r0, #8]
   b4de4:	43c9      	mvns	r1, r1
   b4de6:	4429      	add	r1, r5
      y -= (h-1);
   b4de8:	18d5      	adds	r5, r2, r3
   b4dea:	8942      	ldrh	r2, [r0, #10]
   b4dec:	1b52      	subs	r2, r2, r5
      x = WIDTH - x - 1;
   b4dee:	b209      	sxth	r1, r1
      y -= (h-1);
   b4df0:	b212      	sxth	r2, r2
  if(x < 0 || x >= WIDTH) { return; }
   b4df2:	2900      	cmp	r1, #0
   b4df4:	db5d      	blt.n	b4eb2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b4df6:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b4dfa:	428d      	cmp	r5, r1
   b4dfc:	dd59      	ble.n	b4eb2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(__y < 0) { 
   b4dfe:	2a00      	cmp	r2, #0
    __h += __y;
   b4e00:	bfbe      	ittt	lt
   b4e02:	189b      	addlt	r3, r3, r2
   b4e04:	b21b      	sxthlt	r3, r3
    __y = 0;
   b4e06:	2200      	movlt	r2, #0
  if( (__y + __h) > HEIGHT) { 
   b4e08:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b4e0c:	18d5      	adds	r5, r2, r3
   b4e0e:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b4e10:	bfc4      	itt	gt
   b4e12:	1a83      	subgt	r3, r0, r2
   b4e14:	b21b      	sxthgt	r3, r3
  if(__h <= 0) { 
   b4e16:	2b00      	cmp	r3, #0
   b4e18:	dd4b      	ble.n	b4eb2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += x;
   b4e1a:	f3c2 00c4 	ubfx	r0, r2, #3, #5
   b4e1e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; b4ed4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>
   b4e22:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  if(mod) {
   b4e26:	f012 0207 	ands.w	r2, r2, #7
  register uint8_t h = __h;
   b4e2a:	b2db      	uxtb	r3, r3
  pBuf += x;
   b4e2c:	eb0c 0001 	add.w	r0, ip, r1
  if(mod) {
   b4e30:	d01a      	beq.n	b4e68 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfc>
    mod = 8-mod;
   b4e32:	f1c2 0508 	rsb	r5, r2, #8
    register uint8_t mask = premask[mod];
   b4e36:	4e28      	ldr	r6, [pc, #160]	; (b4ed8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    mod = 8-mod;
   b4e38:	b2ed      	uxtb	r5, r5
    if( h < mod) { 
   b4e3a:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b4e3c:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b4e3e:	bf3f      	itttt	cc
   b4e40:	eba5 0e03 	subcc.w	lr, r5, r3
   b4e44:	26ff      	movcc	r6, #255	; 0xff
   b4e46:	fa46 f60e 	asrcc.w	r6, r6, lr
   b4e4a:	4037      	andcc	r7, r6
      *pBuf |= mask;
   b4e4c:	f81c 6001 	ldrb.w	r6, [ip, r1]
    if(color == WHITE) { 
   b4e50:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b4e52:	bf0c      	ite	eq
   b4e54:	433e      	orreq	r6, r7
      *pBuf &= ~mask;
   b4e56:	43be      	bicne	r6, r7
    if(h<mod) { return; }
   b4e58:	42ab      	cmp	r3, r5
   b4e5a:	f80c 6001 	strb.w	r6, [ip, r1]
   b4e5e:	d328      	bcc.n	b4eb2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    h -= mod;
   b4e60:	3a08      	subs	r2, #8
   b4e62:	4413      	add	r3, r2
   b4e64:	b2db      	uxtb	r3, r3
    pBuf += SSD1306_LCDWIDTH;
   b4e66:	3080      	adds	r0, #128	; 0x80
  if(h >= 8) { 
   b4e68:	2b07      	cmp	r3, #7
   b4e6a:	d919      	bls.n	b4ea0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x134>
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b4e6c:	2c01      	cmp	r4, #1
   b4e6e:	f04f 35ff 	mov.w	r5, #4294967295
   b4e72:	bf18      	it	ne
   b4e74:	2500      	movne	r5, #0
   b4e76:	b2ed      	uxtb	r5, r5
   b4e78:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b4e7c:	461a      	mov	r2, r3
      h -= 8;
   b4e7e:	3a08      	subs	r2, #8
   b4e80:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b4e82:	2a07      	cmp	r2, #7
      *pBuf = val;
   b4e84:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b4e88:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b4e8c:	d8f7      	bhi.n	b4e7e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x112>
      pBuf += SSD1306_LCDWIDTH;
   b4e8e:	f1a3 0208 	sub.w	r2, r3, #8
   b4e92:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b4e96:	3201      	adds	r2, #1
   b4e98:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b4e9c:	f003 0307 	and.w	r3, r3, #7
  if(h) {
   b4ea0:	b13b      	cbz	r3, b4eb2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    register uint8_t mask = postmask[mod];
   b4ea2:	4a0e      	ldr	r2, [pc, #56]	; (b4edc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)
   b4ea4:	5cd2      	ldrb	r2, [r2, r3]
      *pBuf |= mask;
   b4ea6:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b4ea8:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b4eaa:	bf0c      	ite	eq
   b4eac:	4313      	orreq	r3, r2
      *pBuf &= ~mask;
   b4eae:	4393      	bicne	r3, r2
   b4eb0:	7003      	strb	r3, [r0, #0]
}
   b4eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b4eb4:	8945      	ldrh	r5, [r0, #10]
   b4eb6:	43c9      	mvns	r1, r1
   b4eb8:	4429      	add	r1, r5
   b4eba:	b209      	sxth	r1, r1
      break;
   b4ebc:	e765      	b.n	b4d8a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
    mask = ~mask;
   b4ebe:	43c9      	mvns	r1, r1
   b4ec0:	b2c9      	uxtb	r1, r1
    while(w--) { *pBuf++ &= mask; }
   b4ec2:	429a      	cmp	r2, r3
   b4ec4:	d0f5      	beq.n	b4eb2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b4ec6:	f812 0b01 	ldrb.w	r0, [r2], #1
   b4eca:	4008      	ands	r0, r1
   b4ecc:	f802 0c01 	strb.w	r0, [r2, #-1]
   b4ed0:	e7f7      	b.n	b4ec2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   b4ed2:	bf00      	nop
   b4ed4:	2003e195 	.word	0x2003e195
   b4ed8:	2003e18d 	.word	0x2003e18d
   b4edc:	2003e185 	.word	0x2003e185

000b4ee0 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   b4ee0:	4770      	bx	lr
	...

000b4ee4 <_ZN16Adafruit_SSD13069drawPixelEsst>:
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b4ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b4ee6:	1e0d      	subs	r5, r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b4ee8:	4606      	mov	r6, r0
   b4eea:	4614      	mov	r4, r2
   b4eec:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b4eee:	db2d      	blt.n	b4f4c <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b4ef0:	f000 fbb3 	bl	b565a <_ZN12Adafruit_GFX5widthEv>
   b4ef4:	42a8      	cmp	r0, r5
   b4ef6:	dd29      	ble.n	b4f4c <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b4ef8:	2c00      	cmp	r4, #0
   b4efa:	db27      	blt.n	b4f4c <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b4efc:	4630      	mov	r0, r6
   b4efe:	f000 fbaf 	bl	b5660 <_ZN12Adafruit_GFX6heightEv>
   b4f02:	42a0      	cmp	r0, r4
   b4f04:	dd22      	ble.n	b4f4c <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
  switch (getRotation()) {
   b4f06:	4630      	mov	r0, r6
   b4f08:	f000 fba5 	bl	b5656 <_ZN12Adafruit_GFX11getRotationEv>
   b4f0c:	2802      	cmp	r0, #2
   b4f0e:	d01e      	beq.n	b4f4e <_ZN16Adafruit_SSD13069drawPixelEsst+0x6a>
   b4f10:	2803      	cmp	r0, #3
   b4f12:	d025      	beq.n	b4f60 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
   b4f14:	2801      	cmp	r0, #1
   b4f16:	d104      	bne.n	b4f22 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
   b4f18:	8933      	ldrh	r3, [r6, #8]
   b4f1a:	43e2      	mvns	r2, r4
   b4f1c:	441a      	add	r2, r3
    break;
   b4f1e:	462c      	mov	r4, r5
    x = WIDTH - x - 1;
   b4f20:	b215      	sxth	r5, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b4f22:	2c00      	cmp	r4, #0
   b4f24:	4622      	mov	r2, r4
   b4f26:	bfb8      	it	lt
   b4f28:	1de2      	addlt	r2, r4, #7
   b4f2a:	10d2      	asrs	r2, r2, #3
   b4f2c:	2180      	movs	r1, #128	; 0x80
   b4f2e:	fb12 5501 	smlabb	r5, r2, r1, r5
   b4f32:	490e      	ldr	r1, [pc, #56]	; (b4f6c <_ZN16Adafruit_SSD13069drawPixelEsst+0x88>)
   b4f34:	2201      	movs	r2, #1
   b4f36:	f004 0407 	and.w	r4, r4, #7
   b4f3a:	574b      	ldrsb	r3, [r1, r5]
   b4f3c:	fa02 f404 	lsl.w	r4, r2, r4
   b4f40:	b264      	sxtb	r4, r4
  if (color == WHITE) 
   b4f42:	4297      	cmp	r7, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b4f44:	bf0c      	ite	eq
   b4f46:	4323      	orreq	r3, r4
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   b4f48:	43a3      	bicne	r3, r4
   b4f4a:	554b      	strb	r3, [r1, r5]
}
   b4f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x = WIDTH - x - 1;
   b4f4e:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   b4f50:	8972      	ldrh	r2, [r6, #10]
    x = WIDTH - x - 1;
   b4f52:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   b4f54:	43e4      	mvns	r4, r4
    x = WIDTH - x - 1;
   b4f56:	1b4d      	subs	r5, r1, r5
    y = HEIGHT - y - 1;
   b4f58:	4414      	add	r4, r2
    x = WIDTH - x - 1;
   b4f5a:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
   b4f5c:	b224      	sxth	r4, r4
    break;
   b4f5e:	e7e0      	b.n	b4f22 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    y = HEIGHT - y - 1;
   b4f60:	8973      	ldrh	r3, [r6, #10]
   b4f62:	3b01      	subs	r3, #1
   b4f64:	1b5b      	subs	r3, r3, r5
    break;
   b4f66:	4625      	mov	r5, r4
    y = HEIGHT - y - 1;
   b4f68:	b21c      	sxth	r4, r3
    break;
   b4f6a:	e7da      	b.n	b4f22 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
   b4f6c:	2003e195 	.word	0x2003e195

000b4f70 <_ZN16Adafruit_SSD1306D0Ev>:
   b4f70:	b510      	push	{r4, lr}
   b4f72:	2124      	movs	r1, #36	; 0x24
   b4f74:	4604      	mov	r4, r0
   b4f76:	f7ff f892 	bl	b409e <_ZdlPvj>
   b4f7a:	4620      	mov	r0, r4
   b4f7c:	bd10      	pop	{r4, pc}
	...

000b4f80 <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b4f80:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b4f82:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b4f84:	4604      	mov	r4, r0
   b4f86:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b4f88:	2180      	movs	r1, #128	; 0x80
   b4f8a:	f000 fa8b 	bl	b54a4 <_ZN12Adafruit_GFXC1Ess>
   b4f8e:	4b06      	ldr	r3, [pc, #24]	; (b4fa8 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   b4f90:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   b4f92:	23ff      	movs	r3, #255	; 0xff
   b4f94:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   b4f98:	7763      	strb	r3, [r4, #29]
   b4f9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b4f9e:	83e3      	strh	r3, [r4, #30]
  rst = reset;
   b4fa0:	f884 5020 	strb.w	r5, [r4, #32]
}
   b4fa4:	4620      	mov	r0, r4
   b4fa6:	bd38      	pop	{r3, r4, r5, pc}
   b4fa8:	000b7e28 	.word	0x000b7e28

000b4fac <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   b4fac:	4802      	ldr	r0, [pc, #8]	; (b4fb8 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   b4fae:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b4fb2:	2100      	movs	r1, #0
   b4fb4:	f002 bdbc 	b.w	b7b30 <memset>
   b4fb8:	2003e195 	.word	0x2003e195

000b4fbc <_ZN16Adafruit_SSD130612fastSPIwriteEh>:
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
   b4fbc:	b507      	push	{r0, r1, r2, lr}
  if(hwSPI) {
   b4fbe:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   b4fc2:	b143      	cbz	r3, b4fd6 <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x1a>
   b4fc4:	9101      	str	r1, [sp, #4]
        return instance().transfer(data);
   b4fc6:	f7ff fa9b 	bl	b4500 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4fca:	9901      	ldr	r1, [sp, #4]
}
   b4fcc:	b003      	add	sp, #12
   b4fce:	f85d eb04 	ldr.w	lr, [sp], #4
   b4fd2:	f000 bf4f 	b.w	b5e74 <_ZN8SPIClass8transferEh>
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b4fd6:	460b      	mov	r3, r1
   b4fd8:	7f81      	ldrb	r1, [r0, #30]
   b4fda:	7f40      	ldrb	r0, [r0, #29]
   b4fdc:	2201      	movs	r2, #1
}
   b4fde:	b003      	add	sp, #12
   b4fe0:	f85d eb04 	ldr.w	lr, [sp], #4
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b4fe4:	f002 b843 	b.w	b706e <shiftOut>

000b4fe8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b4fe8:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   b4fea:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b4fee:	3301      	adds	r3, #1
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b4ff0:	4604      	mov	r4, r0
   b4ff2:	460d      	mov	r5, r1
  if (sid != -1)
   b4ff4:	d01d      	beq.n	b5032 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x4a>
    digitalWrite(cs, HIGH);
   b4ff6:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   b4ffa:	2101      	movs	r1, #1
   b4ffc:	b280      	uxth	r0, r0
   b4ffe:	f002 f80a 	bl	b7016 <digitalWrite>
    digitalWrite(dc, LOW);
   b5002:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b5006:	2100      	movs	r1, #0
   b5008:	b280      	uxth	r0, r0
   b500a:	f002 f804 	bl	b7016 <digitalWrite>
    digitalWrite(cs, LOW);
   b500e:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5012:	2100      	movs	r1, #0
   b5014:	b280      	uxth	r0, r0
   b5016:	f001 fffe 	bl	b7016 <digitalWrite>
    fastSPIwrite(c);
   b501a:	4629      	mov	r1, r5
   b501c:	4620      	mov	r0, r4
   b501e:	f7ff ffcd 	bl	b4fbc <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    digitalWrite(cs, HIGH);
   b5022:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5026:	2101      	movs	r1, #1
}
   b5028:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(cs, HIGH);
   b502c:	b280      	uxth	r0, r0
   b502e:	f001 bff2 	b.w	b7016 <digitalWrite>
    Wire.beginTransmission(_i2caddr);
   b5032:	f002 f899 	bl	b7168 <_Z19__fetch_global_Wirev>
   b5036:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b503a:	f001 fea3 	bl	b6d84 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   b503e:	f002 f893 	bl	b7168 <_Z19__fetch_global_Wirev>
   b5042:	6803      	ldr	r3, [r0, #0]
   b5044:	2100      	movs	r1, #0
   b5046:	689b      	ldr	r3, [r3, #8]
   b5048:	4798      	blx	r3
    Wire.write(c);
   b504a:	f002 f88d 	bl	b7168 <_Z19__fetch_global_Wirev>
   b504e:	6803      	ldr	r3, [r0, #0]
   b5050:	4629      	mov	r1, r5
   b5052:	689b      	ldr	r3, [r3, #8]
   b5054:	4798      	blx	r3
    Wire.endTransmission();
   b5056:	f002 f887 	bl	b7168 <_Z19__fetch_global_Wirev>
}
   b505a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();
   b505e:	f001 be98 	b.w	b6d92 <_ZN7TwoWire15endTransmissionEv>
	...

000b5064 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b5064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   b5066:	2121      	movs	r1, #33	; 0x21
void Adafruit_SSD1306::display(void) {
   b5068:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   b506a:	f7ff ffbd 	bl	b4fe8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   b506e:	2100      	movs	r1, #0
   b5070:	4620      	mov	r0, r4
   b5072:	f7ff ffb9 	bl	b4fe8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   b5076:	217f      	movs	r1, #127	; 0x7f
   b5078:	4620      	mov	r0, r4
   b507a:	f7ff ffb5 	bl	b4fe8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_PAGEADDR);
   b507e:	2122      	movs	r1, #34	; 0x22
   b5080:	4620      	mov	r0, r4
   b5082:	f7ff ffb1 	bl	b4fe8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   b5086:	2100      	movs	r1, #0
   b5088:	4620      	mov	r0, r4
   b508a:	f7ff ffad 	bl	b4fe8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   b508e:	2107      	movs	r1, #7
   b5090:	4620      	mov	r0, r4
   b5092:	f7ff ffa9 	bl	b4fe8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (sid != -1)
   b5096:	f994 301d 	ldrsb.w	r3, [r4, #29]
   b509a:	4f29      	ldr	r7, [pc, #164]	; (b5140 <_ZN16Adafruit_SSD13067displayEv+0xdc>)
   b509c:	3301      	adds	r3, #1
   b509e:	d02a      	beq.n	b50f6 <_ZN16Adafruit_SSD13067displayEv+0x92>
    digitalWrite(cs, HIGH);
   b50a0:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b50a4:	2101      	movs	r1, #1
   b50a6:	b280      	uxth	r0, r0
   b50a8:	f001 ffb5 	bl	b7016 <digitalWrite>
    digitalWrite(dc, HIGH);
   b50ac:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b50b0:	2101      	movs	r1, #1
   b50b2:	b280      	uxth	r0, r0
   b50b4:	f001 ffaf 	bl	b7016 <digitalWrite>
    digitalWrite(cs, LOW);
   b50b8:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b50bc:	2100      	movs	r1, #0
   b50be:	b280      	uxth	r0, r0
   b50c0:	f001 ffa9 	bl	b7016 <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b50c4:	2001      	movs	r0, #1
   b50c6:	f000 fb0f 	bl	b56e8 <HAL_Delay_Microseconds>
   b50ca:	f44f 6580 	mov.w	r5, #1024	; 0x400
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b50ce:	3d01      	subs	r5, #1
      fastSPIwrite(buffer[i]);
   b50d0:	f817 1b01 	ldrb.w	r1, [r7], #1
   b50d4:	4620      	mov	r0, r4
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b50d6:	b2ad      	uxth	r5, r5
      fastSPIwrite(buffer[i]);
   b50d8:	f7ff ff70 	bl	b4fbc <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b50dc:	2d00      	cmp	r5, #0
   b50de:	d1f6      	bne.n	b50ce <_ZN16Adafruit_SSD13067displayEv+0x6a>
   b50e0:	2001      	movs	r0, #1
   b50e2:	f000 fb01 	bl	b56e8 <HAL_Delay_Microseconds>
    digitalWrite(cs, HIGH);
   b50e6:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b50ea:	2101      	movs	r1, #1
}
   b50ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    digitalWrite(cs, HIGH);
   b50f0:	b280      	uxth	r0, r0
   b50f2:	f001 bf90 	b.w	b7016 <digitalWrite>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b50f6:	2500      	movs	r5, #0
      Wire.beginTransmission(_i2caddr);
   b50f8:	f002 f836 	bl	b7168 <_Z19__fetch_global_Wirev>
   b50fc:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b5100:	f001 fe40 	bl	b6d84 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   b5104:	f002 f830 	bl	b7168 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b5108:	6803      	ldr	r3, [r0, #0]
   b510a:	2140      	movs	r1, #64	; 0x40
   b510c:	689b      	ldr	r3, [r3, #8]
   b510e:	4798      	blx	r3
      for (uint8_t x=0; x<16; x++) {
   b5110:	f105 0610 	add.w	r6, r5, #16
   b5114:	b2b6      	uxth	r6, r6
		Wire.write(buffer[i]);
   b5116:	f002 f827 	bl	b7168 <_Z19__fetch_global_Wirev>
   b511a:	6803      	ldr	r3, [r0, #0]
   b511c:	5d79      	ldrb	r1, [r7, r5]
   b511e:	689b      	ldr	r3, [r3, #8]
   b5120:	4798      	blx	r3
		i++;
   b5122:	1c6b      	adds	r3, r5, #1
   b5124:	b29d      	uxth	r5, r3
      for (uint8_t x=0; x<16; x++) {
   b5126:	42ae      	cmp	r6, r5
   b5128:	d1f5      	bne.n	b5116 <_ZN16Adafruit_SSD13067displayEv+0xb2>
	Wire.endTransmission();
   b512a:	f002 f81d 	bl	b7168 <_Z19__fetch_global_Wirev>
   b512e:	f001 fe30 	bl	b6d92 <_ZN7TwoWire15endTransmissionEv>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b5132:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b5136:	d100      	bne.n	b513a <_ZN16Adafruit_SSD13067displayEv+0xd6>
}
   b5138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b513a:	4635      	mov	r5, r6
   b513c:	e7dc      	b.n	b50f8 <_ZN16Adafruit_SSD13067displayEv+0x94>
   b513e:	bf00      	nop
   b5140:	2003e195 	.word	0x2003e195

000b5144 <_ZN16Adafruit_SSD13065beginEhh>:
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b5144:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1){
   b5146:	f990 301d 	ldrsb.w	r3, [r0, #29]
  _vccstate = vccstate;
   b514a:	7701      	strb	r1, [r0, #28]
  if (sid != -1){
   b514c:	3301      	adds	r3, #1
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b514e:	4604      	mov	r4, r0
   b5150:	460d      	mov	r5, r1
  _i2caddr = i2caddr;
   b5152:	76c2      	strb	r2, [r0, #27]
  if (sid != -1){
   b5154:	f000 80c9 	beq.w	b52ea <_ZN16Adafruit_SSD13065beginEhh+0x1a6>
    pinMode(dc, OUTPUT);
   b5158:	f990 001f 	ldrsb.w	r0, [r0, #31]
   b515c:	2101      	movs	r1, #1
   b515e:	b280      	uxth	r0, r0
   b5160:	f001 ff48 	bl	b6ff4 <pinMode>
    pinMode(cs, OUTPUT);
   b5164:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5168:	2101      	movs	r1, #1
   b516a:	b280      	uxth	r0, r0
   b516c:	f001 ff42 	bl	b6ff4 <pinMode>
    if (!hwSPI){
   b5170:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b5174:	2b00      	cmp	r3, #0
   b5176:	f000 80a6 	beq.w	b52c6 <_ZN16Adafruit_SSD13065beginEhh+0x182>
        digitalWrite(cs, HIGH);
   b517a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b517e:	2101      	movs	r1, #1
   b5180:	b280      	uxth	r0, r0
   b5182:	f001 ff48 	bl	b7016 <digitalWrite>
        instance().setBitOrder(order);
   b5186:	f7ff f9bb 	bl	b4500 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b518a:	2101      	movs	r1, #1
   b518c:	f000 fd6a 	bl	b5c64 <_ZN8SPIClass11setBitOrderEh>
        instance().setClockDivider(divider);
   b5190:	f7ff f9b6 	bl	b4500 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5194:	2110      	movs	r1, #16
   b5196:	f000 fe47 	bl	b5e28 <_ZN8SPIClass15setClockDividerEh>
        instance().setDataMode(mode);
   b519a:	f7ff f9b1 	bl	b4500 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b519e:	2100      	movs	r1, #0
   b51a0:	f000 fd74 	bl	b5c8c <_ZN8SPIClass11setDataModeEh>
        instance().begin();
   b51a4:	f7ff f9ac 	bl	b4500 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b51a8:	f000 fd48 	bl	b5c3c <_ZN8SPIClass5beginEv>
  pinMode(rst, OUTPUT);
   b51ac:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b51b0:	2101      	movs	r1, #1
   b51b2:	b280      	uxth	r0, r0
   b51b4:	f001 ff1e 	bl	b6ff4 <pinMode>
  digitalWrite(rst, HIGH);
   b51b8:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b51bc:	2101      	movs	r1, #1
   b51be:	b280      	uxth	r0, r0
   b51c0:	f001 ff29 	bl	b7016 <digitalWrite>
  delay(1);
   b51c4:	2001      	movs	r0, #1
   b51c6:	f001 f8be 	bl	b6346 <delay>
  digitalWrite(rst, LOW);
   b51ca:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b51ce:	2100      	movs	r1, #0
   b51d0:	b280      	uxth	r0, r0
   b51d2:	f001 ff20 	bl	b7016 <digitalWrite>
  delay(10);
   b51d6:	200a      	movs	r0, #10
   b51d8:	f001 f8b5 	bl	b6346 <delay>
  digitalWrite(rst, HIGH);
   b51dc:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b51e0:	2101      	movs	r1, #1
   b51e2:	b280      	uxth	r0, r0
   b51e4:	f001 ff17 	bl	b7016 <digitalWrite>
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   b51e8:	4620      	mov	r0, r4
   b51ea:	21ae      	movs	r1, #174	; 0xae
   b51ec:	f7ff fefc 	bl	b4fe8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   b51f0:	4620      	mov	r0, r4
   b51f2:	21d5      	movs	r1, #213	; 0xd5
   b51f4:	f7ff fef8 	bl	b4fe8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   b51f8:	4620      	mov	r0, r4
   b51fa:	2180      	movs	r1, #128	; 0x80
   b51fc:	f7ff fef4 	bl	b4fe8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   b5200:	4620      	mov	r0, r4
   b5202:	21a8      	movs	r1, #168	; 0xa8
   b5204:	f7ff fef0 	bl	b4fe8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   b5208:	4620      	mov	r0, r4
   b520a:	213f      	movs	r1, #63	; 0x3f
   b520c:	f7ff feec 	bl	b4fe8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   b5210:	4620      	mov	r0, r4
   b5212:	21d3      	movs	r1, #211	; 0xd3
   b5214:	f7ff fee8 	bl	b4fe8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   b5218:	4620      	mov	r0, r4
   b521a:	2100      	movs	r1, #0
   b521c:	f7ff fee4 	bl	b4fe8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   b5220:	4620      	mov	r0, r4
   b5222:	2140      	movs	r1, #64	; 0x40
   b5224:	f7ff fee0 	bl	b4fe8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   b5228:	218d      	movs	r1, #141	; 0x8d
   b522a:	4620      	mov	r0, r4
   b522c:	f7ff fedc 	bl	b4fe8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b5230:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   b5232:	bf0c      	ite	eq
   b5234:	2110      	moveq	r1, #16
      { ssd1306_command(0x14); }
   b5236:	2114      	movne	r1, #20
   b5238:	4620      	mov	r0, r4
   b523a:	f7ff fed5 	bl	b4fe8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   b523e:	4620      	mov	r0, r4
   b5240:	2120      	movs	r1, #32
   b5242:	f7ff fed1 	bl	b4fe8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   b5246:	4620      	mov	r0, r4
   b5248:	2100      	movs	r1, #0
   b524a:	f7ff fecd 	bl	b4fe8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   b524e:	4620      	mov	r0, r4
   b5250:	21a1      	movs	r1, #161	; 0xa1
   b5252:	f7ff fec9 	bl	b4fe8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   b5256:	4620      	mov	r0, r4
   b5258:	21c8      	movs	r1, #200	; 0xc8
   b525a:	f7ff fec5 	bl	b4fe8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   b525e:	4620      	mov	r0, r4
   b5260:	21da      	movs	r1, #218	; 0xda
   b5262:	f7ff fec1 	bl	b4fe8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   b5266:	4620      	mov	r0, r4
   b5268:	2112      	movs	r1, #18
   b526a:	f7ff febd 	bl	b4fe8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   b526e:	2181      	movs	r1, #129	; 0x81
   b5270:	4620      	mov	r0, r4
   b5272:	f7ff feb9 	bl	b4fe8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b5276:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   b5278:	bf0c      	ite	eq
   b527a:	219f      	moveq	r1, #159	; 0x9f
      { ssd1306_command(0xCF); }
   b527c:	21cf      	movne	r1, #207	; 0xcf
   b527e:	4620      	mov	r0, r4
   b5280:	f7ff feb2 	bl	b4fe8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   b5284:	21d9      	movs	r1, #217	; 0xd9
   b5286:	4620      	mov	r0, r4
   b5288:	f7ff feae 	bl	b4fe8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b528c:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   b528e:	bf0c      	ite	eq
   b5290:	2122      	moveq	r1, #34	; 0x22
      { ssd1306_command(0xF1); }
   b5292:	21f1      	movne	r1, #241	; 0xf1
   b5294:	4620      	mov	r0, r4
   b5296:	f7ff fea7 	bl	b4fe8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   b529a:	4620      	mov	r0, r4
   b529c:	21db      	movs	r1, #219	; 0xdb
   b529e:	f7ff fea3 	bl	b4fe8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   b52a2:	4620      	mov	r0, r4
   b52a4:	2140      	movs	r1, #64	; 0x40
   b52a6:	f7ff fe9f 	bl	b4fe8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   b52aa:	4620      	mov	r0, r4
   b52ac:	21a4      	movs	r1, #164	; 0xa4
   b52ae:	f7ff fe9b 	bl	b4fe8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   b52b2:	4620      	mov	r0, r4
   b52b4:	21a6      	movs	r1, #166	; 0xa6
   b52b6:	f7ff fe97 	bl	b4fe8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b52ba:	4620      	mov	r0, r4
   b52bc:	21af      	movs	r1, #175	; 0xaf
}
   b52be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b52c2:	f7ff be91 	b.w	b4fe8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    	pinMode(sid, OUTPUT);
   b52c6:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b52ca:	2101      	movs	r1, #1
   b52cc:	b280      	uxth	r0, r0
   b52ce:	f001 fe91 	bl	b6ff4 <pinMode>
    	pinMode(sclk, OUTPUT);
   b52d2:	f994 001e 	ldrsb.w	r0, [r4, #30]
   b52d6:	2101      	movs	r1, #1
   b52d8:	b280      	uxth	r0, r0
   b52da:	f001 fe8b 	bl	b6ff4 <pinMode>
    if (hwSPI){
   b52de:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b52e2:	2b00      	cmp	r3, #0
   b52e4:	f43f af62 	beq.w	b51ac <_ZN16Adafruit_SSD13065beginEhh+0x68>
   b52e8:	e747      	b.n	b517a <_ZN16Adafruit_SSD13065beginEhh+0x36>
    Wire.begin();
   b52ea:	f001 ff3d 	bl	b7168 <_Z19__fetch_global_Wirev>
   b52ee:	f001 fd13 	bl	b6d18 <_ZN7TwoWire5beginEv>
   b52f2:	e75b      	b.n	b51ac <_ZN16Adafruit_SSD13065beginEhh+0x68>

000b52f4 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   b52f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b52f8:	b085      	sub	sp, #20
   b52fa:	461f      	mov	r7, r3
   b52fc:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b5300:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b5304:	eba8 0902 	sub.w	r9, r8, r2
   b5308:	eba7 0a01 	sub.w	sl, r7, r1
   b530c:	f1b9 0f00 	cmp.w	r9, #0
   b5310:	bfb8      	it	lt
   b5312:	f1c9 0900 	rsblt	r9, r9, #0
   b5316:	f1ba 0f00 	cmp.w	sl, #0
   b531a:	bfb8      	it	lt
   b531c:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   b5320:	45d1      	cmp	r9, sl
			    uint16_t color) {
   b5322:	4683      	mov	fp, r0
   b5324:	460c      	mov	r4, r1
   b5326:	4615      	mov	r5, r2
  if (steep) {
   b5328:	dd04      	ble.n	b5334 <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
   b532a:	463a      	mov	r2, r7
    swap(x0, y0);
   b532c:	462c      	mov	r4, r5
    swap(x1, y1);
   b532e:	4647      	mov	r7, r8
    swap(x0, y0);
   b5330:	460d      	mov	r5, r1
    swap(x1, y1);
   b5332:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   b5334:	42bc      	cmp	r4, r7
   b5336:	dd05      	ble.n	b5344 <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
   b5338:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   b533a:	4645      	mov	r5, r8
   b533c:	4690      	mov	r8, r2
  if (x0 > x1) {
   b533e:	4622      	mov	r2, r4
   b5340:	463c      	mov	r4, r7
   b5342:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   b5344:	1b3e      	subs	r6, r7, r4
   b5346:	b2b2      	uxth	r2, r6
   b5348:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   b534a:	eba8 0205 	sub.w	r2, r8, r5
   b534e:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b5352:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
   b5356:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b535a:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   b535e:	4545      	cmp	r5, r8
   b5360:	bfb4      	ite	lt
   b5362:	2201      	movlt	r2, #1
   b5364:	f04f 32ff 	movge.w	r2, #4294967295
  dy = abs(y1 - y0);
   b5368:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
   b536a:	1076      	asrs	r6, r6, #1
    ystep = -1;
   b536c:	9202      	str	r2, [sp, #8]
  }

  for (; x0<=x1; x0++) {
   b536e:	42bc      	cmp	r4, r7
   b5370:	dc1c      	bgt.n	b53ac <_ZN12Adafruit_GFX8drawLineEsssst+0xb8>
    if (steep) {
      drawPixel(y0, x0, color);
   b5372:	f8db 2000 	ldr.w	r2, [fp]
   b5376:	9303      	str	r3, [sp, #12]
    if (steep) {
   b5378:	45d1      	cmp	r9, sl
      drawPixel(y0, x0, color);
   b537a:	f8d2 8010 	ldr.w	r8, [r2, #16]
   b537e:	bfc7      	ittee	gt
   b5380:	4629      	movgt	r1, r5
   b5382:	4622      	movgt	r2, r4
    } else {
      drawPixel(x0, y0, color);
   b5384:	462a      	movle	r2, r5
   b5386:	4621      	movle	r1, r4
   b5388:	4658      	mov	r0, fp
   b538a:	47c0      	blx	r8
    }
    err -= dy;
   b538c:	9a01      	ldr	r2, [sp, #4]
      drawPixel(x0, y0, color);
   b538e:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   b5390:	1ab6      	subs	r6, r6, r2
   b5392:	b2b1      	uxth	r1, r6
   b5394:	b236      	sxth	r6, r6
    if (err < 0) {
   b5396:	2e00      	cmp	r6, #0
   b5398:	da05      	bge.n	b53a6 <_ZN12Adafruit_GFX8drawLineEsssst+0xb2>
      y0 += ystep;
   b539a:	9a02      	ldr	r2, [sp, #8]
   b539c:	4415      	add	r5, r2
      err += dx;
   b539e:	9a00      	ldr	r2, [sp, #0]
   b53a0:	1856      	adds	r6, r2, r1
      y0 += ystep;
   b53a2:	b22d      	sxth	r5, r5
      err += dx;
   b53a4:	b236      	sxth	r6, r6
  for (; x0<=x1; x0++) {
   b53a6:	3401      	adds	r4, #1
   b53a8:	b224      	sxth	r4, r4
   b53aa:	e7e0      	b.n	b536e <_ZN12Adafruit_GFX8drawLineEsssst+0x7a>
    }
  }
}
   b53ac:	b005      	add	sp, #20
   b53ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b53b2 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   b53b2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b53b6:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   b53ba:	6807      	ldr	r7, [r0, #0]
			    uint16_t color) {
   b53bc:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   b53c0:	f8cd 8000 	str.w	r8, [sp]
			    uint16_t color) {
   b53c4:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   b53c6:	69ff      	ldr	r7, [r7, #28]
			    uint16_t color) {
   b53c8:	4616      	mov	r6, r2
   b53ca:	468a      	mov	sl, r1
   b53cc:	461d      	mov	r5, r3
  drawFastHLine(x, y, w, color);
   b53ce:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   b53d0:	6823      	ldr	r3, [r4, #0]
   b53d2:	f8cd 8000 	str.w	r8, [sp]
   b53d6:	f109 32ff 	add.w	r2, r9, #4294967295
   b53da:	4432      	add	r2, r6
   b53dc:	69df      	ldr	r7, [r3, #28]
   b53de:	4651      	mov	r1, sl
   b53e0:	462b      	mov	r3, r5
   b53e2:	4620      	mov	r0, r4
   b53e4:	b212      	sxth	r2, r2
   b53e6:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   b53e8:	6823      	ldr	r3, [r4, #0]
   b53ea:	f8cd 8000 	str.w	r8, [sp]
   b53ee:	699f      	ldr	r7, [r3, #24]
   b53f0:	4632      	mov	r2, r6
   b53f2:	464b      	mov	r3, r9
   b53f4:	4651      	mov	r1, sl
   b53f6:	4620      	mov	r0, r4
   b53f8:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   b53fa:	1e6b      	subs	r3, r5, #1
   b53fc:	eb03 010a 	add.w	r1, r3, sl
   b5400:	6823      	ldr	r3, [r4, #0]
   b5402:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   b5406:	699d      	ldr	r5, [r3, #24]
   b5408:	4632      	mov	r2, r6
   b540a:	464b      	mov	r3, r9
   b540c:	b209      	sxth	r1, r1
   b540e:	4620      	mov	r0, r4
   b5410:	46ac      	mov	ip, r5
}
   b5412:	b002      	add	sp, #8
   b5414:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawFastVLine(x+w-1, y, h, color);
   b5418:	4760      	bx	ip

000b541a <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   b541a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   b541c:	3b01      	subs	r3, #1
   b541e:	4413      	add	r3, r2
   b5420:	6804      	ldr	r4, [r0, #0]
   b5422:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b5426:	9501      	str	r5, [sp, #4]
   b5428:	b21b      	sxth	r3, r3
   b542a:	9300      	str	r3, [sp, #0]
   b542c:	6964      	ldr	r4, [r4, #20]
   b542e:	460b      	mov	r3, r1
   b5430:	47a0      	blx	r4
}
   b5432:	b003      	add	sp, #12
   b5434:	bd30      	pop	{r4, r5, pc}

000b5436 <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   b5436:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   b5438:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b543c:	6804      	ldr	r4, [r0, #0]
   b543e:	e9cd 2500 	strd	r2, r5, [sp]
   b5442:	3b01      	subs	r3, #1
   b5444:	440b      	add	r3, r1
   b5446:	6964      	ldr	r4, [r4, #20]
   b5448:	b21b      	sxth	r3, r3
   b544a:	47a0      	blx	r4
}
   b544c:	b003      	add	sp, #12
   b544e:	bd30      	pop	{r4, r5, pc}

000b5450 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   b5450:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5454:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b5458:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b545c:	4605      	mov	r5, r0
   b545e:	4692      	mov	sl, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   b5460:	460c      	mov	r4, r1
   b5462:	18ce      	adds	r6, r1, r3
   b5464:	42b4      	cmp	r4, r6
   b5466:	da0b      	bge.n	b5480 <_ZN12Adafruit_GFX8fillRectEsssst+0x30>
    drawFastVLine(i, y, h, color);
   b5468:	682b      	ldr	r3, [r5, #0]
   b546a:	f8cd 8000 	str.w	r8, [sp]
   b546e:	699f      	ldr	r7, [r3, #24]
   b5470:	4621      	mov	r1, r4
   b5472:	464b      	mov	r3, r9
   b5474:	4652      	mov	r2, sl
   b5476:	4628      	mov	r0, r5
   b5478:	3401      	adds	r4, #1
   b547a:	47b8      	blx	r7
  for (int16_t i=x; i<x+w; i++) {
   b547c:	b224      	sxth	r4, r4
   b547e:	e7f1      	b.n	b5464 <_ZN12Adafruit_GFX8fillRectEsssst+0x14>
  }
}
   b5480:	b002      	add	sp, #8
   b5482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b5486 <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   b5486:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   b5488:	6802      	ldr	r2, [r0, #0]
   b548a:	9101      	str	r1, [sp, #4]
   b548c:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b5490:	9100      	str	r1, [sp, #0]
   b5492:	6a54      	ldr	r4, [r2, #36]	; 0x24
   b5494:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5498:	2200      	movs	r2, #0
   b549a:	4611      	mov	r1, r2
   b549c:	47a0      	blx	r4
}
   b549e:	b002      	add	sp, #8
   b54a0:	bd10      	pop	{r4, pc}

000b54a2 <_ZN12Adafruit_GFX13invertDisplayEb>:
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
  // Do nothing, must be subclassed if supported
}
   b54a2:	4770      	bx	lr

000b54a4 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b54a4:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   b54a6:	8142      	strh	r2, [r0, #10]
  _height   = HEIGHT;
   b54a8:	81c2      	strh	r2, [r0, #14]
  textcolor = textbgcolor = 0xFFFF;
   b54aa:	f04f 32ff 	mov.w	r2, #4294967295
    Print() : write_error(0) {}
   b54ae:	2400      	movs	r4, #0
  WIDTH(w), HEIGHT(h)
   b54b0:	4d05      	ldr	r5, [pc, #20]	; (b54c8 <_ZN12Adafruit_GFXC1Ess+0x24>)
  textcolor = textbgcolor = 0xFFFF;
   b54b2:	6142      	str	r2, [r0, #20]
  textsize  = 1;
   b54b4:	2201      	movs	r2, #1
   b54b6:	6044      	str	r4, [r0, #4]
  WIDTH(w), HEIGHT(h)
   b54b8:	6005      	str	r5, [r0, #0]
   b54ba:	8101      	strh	r1, [r0, #8]
  _width    = WIDTH;
   b54bc:	8181      	strh	r1, [r0, #12]
  cursor_y  = cursor_x    = 0;
   b54be:	6104      	str	r4, [r0, #16]
  textsize  = 1;
   b54c0:	8302      	strh	r2, [r0, #24]
  wrap      = true;
   b54c2:	7682      	strb	r2, [r0, #26]
}
   b54c4:	bd30      	pop	{r4, r5, pc}
   b54c6:	bf00      	nop
   b54c8:	000b835c 	.word	0x000b835c

000b54cc <_ZN12Adafruit_GFX8drawCharEsshtth>:
			    uint16_t color, uint16_t bg, uint8_t size) {
   b54cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b54d0:	ed2d 8b02 	vpush	{d8}
   b54d4:	b08d      	sub	sp, #52	; 0x34
   b54d6:	4607      	mov	r7, r0
   b54d8:	9104      	str	r1, [sp, #16]
   b54da:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   b54de:	9105      	str	r1, [sp, #20]
   b54e0:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   b54e4:	9106      	str	r1, [sp, #24]
  if((x >= _width)            || // Clip right
   b54e6:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   b54ea:	9804      	ldr	r0, [sp, #16]
			    uint16_t color, uint16_t bg, uint8_t size) {
   b54ec:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
  if((x >= _width)            || // Clip right
   b54f0:	4281      	cmp	r1, r0
   b54f2:	dd52      	ble.n	b559a <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
   b54f4:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
   b54f8:	4291      	cmp	r1, r2
   b54fa:	dd4e      	ble.n	b559a <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((x + 6 * size - 1) < 0) || // Clip left
   b54fc:	2106      	movs	r1, #6
   b54fe:	fb11 0405 	smlabb	r4, r1, r5, r0
     (y >= _height)           || // Clip bottom
   b5502:	2c00      	cmp	r4, #0
   b5504:	dd49      	ble.n	b559a <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((y + 8 * size - 1) < 0))   // Clip top
   b5506:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
     ((x + 6 * size - 1) < 0) || // Clip left
   b550a:	2c00      	cmp	r4, #0
   b550c:	dd45      	ble.n	b559a <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
      line = pgm_read_byte(font+(c*5)+i);
   b550e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b5512:	930b      	str	r3, [sp, #44]	; 0x2c
   b5514:	b293      	uxth	r3, r2
   b5516:	9307      	str	r3, [sp, #28]
   b5518:	3308      	adds	r3, #8
   b551a:	b29b      	uxth	r3, r3
   b551c:	9108      	str	r1, [sp, #32]
  for (int8_t i=0; i<6; i++ ) {
   b551e:	2400      	movs	r4, #0
   b5520:	9309      	str	r3, [sp, #36]	; 0x24
    if (i == 5) 
   b5522:	2c05      	cmp	r4, #5
      line = pgm_read_byte(font+(c*5)+i);
   b5524:	bf1c      	itt	ne
   b5526:	4b2c      	ldrne	r3, [pc, #176]	; (b55d8 <_ZN12Adafruit_GFX8drawCharEsshtth+0x10c>)
   b5528:	9a0b      	ldrne	r2, [sp, #44]	; 0x2c
   b552a:	9e07      	ldr	r6, [sp, #28]
   b552c:	bf16      	itet	ne
   b552e:	191b      	addne	r3, r3, r4
      line = 0x0;
   b5530:	2300      	moveq	r3, #0
      line = pgm_read_byte(font+(c*5)+i);
   b5532:	5c9b      	ldrbne	r3, [r3, r2]
      line = 0x0;
   b5534:	9303      	str	r3, [sp, #12]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b5536:	9a04      	ldr	r2, [sp, #16]
   b5538:	b2ab      	uxth	r3, r5
   b553a:	930a      	str	r3, [sp, #40]	; 0x28
   b553c:	fb04 f305 	mul.w	r3, r4, r5
   b5540:	fa13 f382 	uxtah	r3, r3, r2
   b5544:	b21b      	sxth	r3, r3
          drawPixel(x+i, y+j, bg);
   b5546:	eb04 0a02 	add.w	sl, r4, r2
          fillRect(x+i*size, y+j*size, size, size, bg);
   b554a:	ee08 3a10 	vmov	s16, r3
   b554e:	46b0      	mov	r8, r6
   b5550:	fa0f f985 	sxth.w	r9, r5
          drawPixel(x+i, y+j, bg);
   b5554:	fa0f fa8a 	sxth.w	sl, sl
      if (line & 0x1) {
   b5558:	9b03      	ldr	r3, [sp, #12]
   b555a:	07db      	lsls	r3, r3, #31
   b555c:	d52f      	bpl.n	b55be <_ZN12Adafruit_GFX8drawCharEsshtth+0xf2>
        if (size == 1) // default size
   b555e:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b5560:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b5562:	d11f      	bne.n	b55a4 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
          drawPixel(x+i, y+j, color);
   b5564:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b5568:	9b05      	ldr	r3, [sp, #20]
          drawPixel(x+i, y+j, bg);
   b556a:	b232      	sxth	r2, r6
   b556c:	4651      	mov	r1, sl
   b556e:	4638      	mov	r0, r7
   b5570:	47d8      	blx	fp
      line >>= 1;
   b5572:	9b03      	ldr	r3, [sp, #12]
   b5574:	085b      	lsrs	r3, r3, #1
   b5576:	9303      	str	r3, [sp, #12]
    for (int8_t j = 0; j<8; j++) {
   b5578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b557a:	3601      	adds	r6, #1
   b557c:	4498      	add	r8, r3
   b557e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5580:	b2b6      	uxth	r6, r6
   b5582:	42b3      	cmp	r3, r6
   b5584:	fa1f f888 	uxth.w	r8, r8
   b5588:	d1e6      	bne.n	b5558 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
  for (int8_t i=0; i<6; i++ ) {
   b558a:	9b08      	ldr	r3, [sp, #32]
   b558c:	3b01      	subs	r3, #1
   b558e:	3401      	adds	r4, #1
   b5590:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b5594:	b264      	sxtb	r4, r4
   b5596:	9308      	str	r3, [sp, #32]
   b5598:	d1c3      	bne.n	b5522 <_ZN12Adafruit_GFX8drawCharEsshtth+0x56>
}
   b559a:	b00d      	add	sp, #52	; 0x34
   b559c:	ecbd 8b02 	vpop	{d8}
   b55a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fillRect(x+(i*size), y+(j*size), size, size, color);
   b55a4:	9a05      	ldr	r2, [sp, #20]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b55a6:	e9cd 9200 	strd	r9, r2, [sp]
   b55aa:	ee18 1a10 	vmov	r1, s16
   b55ae:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   b55b2:	fa0f f288 	sxth.w	r2, r8
   b55b6:	464b      	mov	r3, r9
   b55b8:	4638      	mov	r0, r7
   b55ba:	47d8      	blx	fp
   b55bc:	e7d9      	b.n	b5572 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
      } else if (bg != color) {
   b55be:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   b55c2:	4293      	cmp	r3, r2
   b55c4:	d0d5      	beq.n	b5572 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
        if (size == 1) // default size
   b55c6:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b55c8:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b55ca:	d103      	bne.n	b55d4 <_ZN12Adafruit_GFX8drawCharEsshtth+0x108>
          drawPixel(x+i, y+j, bg);
   b55cc:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b55d0:	9b06      	ldr	r3, [sp, #24]
   b55d2:	e7ca      	b.n	b556a <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
          fillRect(x+i*size, y+j*size, size, size, bg);
   b55d4:	9a06      	ldr	r2, [sp, #24]
   b55d6:	e7e6      	b.n	b55a6 <_ZN12Adafruit_GFX8drawCharEsshtth+0xda>
   b55d8:	000b7e58 	.word	0x000b7e58

000b55dc <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b55dc:	b530      	push	{r4, r5, lr}
  if (c == '\n') {
   b55de:	290a      	cmp	r1, #10
size_t Adafruit_GFX::write(uint8_t c) {
   b55e0:	b085      	sub	sp, #20
   b55e2:	4604      	mov	r4, r0
  if (c == '\n') {
   b55e4:	d107      	bne.n	b55f6 <_ZN12Adafruit_GFX5writeEh+0x1a>
    cursor_y += textsize*8;
   b55e6:	7e02      	ldrb	r2, [r0, #24]
      cursor_y += textsize*8;
   b55e8:	8a63      	ldrh	r3, [r4, #18]
   b55ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b55ee:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   b55f0:	2300      	movs	r3, #0
   b55f2:	8223      	strh	r3, [r4, #16]
   b55f4:	e021      	b.n	b563a <_ZN12Adafruit_GFX5writeEh+0x5e>
  } else if (c == '\r') {
   b55f6:	290d      	cmp	r1, #13
   b55f8:	d01f      	beq.n	b563a <_ZN12Adafruit_GFX5writeEh+0x5e>
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   b55fa:	7e03      	ldrb	r3, [r0, #24]
   b55fc:	9302      	str	r3, [sp, #8]
   b55fe:	8ac3      	ldrh	r3, [r0, #22]
   b5600:	9301      	str	r3, [sp, #4]
   b5602:	8a83      	ldrh	r3, [r0, #20]
   b5604:	9300      	str	r3, [sp, #0]
   b5606:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   b560a:	460b      	mov	r3, r1
   b560c:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   b5610:	f7ff ff5c 	bl	b54cc <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   b5614:	7e20      	ldrb	r0, [r4, #24]
   b5616:	8a23      	ldrh	r3, [r4, #16]
   b5618:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   b561c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b5620:	7ea1      	ldrb	r1, [r4, #26]
    cursor_x += textsize*6;
   b5622:	b21b      	sxth	r3, r3
   b5624:	4602      	mov	r2, r0
   b5626:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b5628:	b139      	cbz	r1, b563a <_ZN12Adafruit_GFX5writeEh+0x5e>
   b562a:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   b562e:	f06f 0505 	mvn.w	r5, #5
   b5632:	fb05 1100 	mla	r1, r5, r0, r1
   b5636:	428b      	cmp	r3, r1
   b5638:	dcd6      	bgt.n	b55e8 <_ZN12Adafruit_GFX5writeEh+0xc>
}
   b563a:	2001      	movs	r0, #1
   b563c:	b005      	add	sp, #20
   b563e:	bd30      	pop	{r4, r5, pc}

000b5640 <_ZN12Adafruit_GFX9setCursorEss>:
  cursor_x = x;
   b5640:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   b5642:	8242      	strh	r2, [r0, #18]
}
   b5644:	4770      	bx	lr

000b5646 <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize = (s > 0) ? s : 1;
   b5646:	2901      	cmp	r1, #1
   b5648:	bf38      	it	cc
   b564a:	2101      	movcc	r1, #1
   b564c:	7601      	strb	r1, [r0, #24]
}
   b564e:	4770      	bx	lr

000b5650 <_ZN12Adafruit_GFX12setTextColorEt>:
  textcolor = textbgcolor = c;
   b5650:	82c1      	strh	r1, [r0, #22]
   b5652:	8281      	strh	r1, [r0, #20]
}
   b5654:	4770      	bx	lr

000b5656 <_ZN12Adafruit_GFX11getRotationEv>:
}
   b5656:	7e40      	ldrb	r0, [r0, #25]
   b5658:	4770      	bx	lr

000b565a <_ZN12Adafruit_GFX5widthEv>:
}
   b565a:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   b565e:	4770      	bx	lr

000b5660 <_ZN12Adafruit_GFX6heightEv>:
}
   b5660:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   b5664:	4770      	bx	lr
	...

000b5668 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5668:	b508      	push	{r3, lr}
   b566a:	4b02      	ldr	r3, [pc, #8]	; (b5674 <netdb_freeaddrinfo+0xc>)
   b566c:	681b      	ldr	r3, [r3, #0]
   b566e:	689b      	ldr	r3, [r3, #8]
   b5670:	9301      	str	r3, [sp, #4]
   b5672:	bd08      	pop	{r3, pc}
   b5674:	00030268 	.word	0x00030268

000b5678 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5678:	b508      	push	{r3, lr}
   b567a:	4b02      	ldr	r3, [pc, #8]	; (b5684 <netdb_getaddrinfo+0xc>)
   b567c:	681b      	ldr	r3, [r3, #0]
   b567e:	68db      	ldr	r3, [r3, #12]
   b5680:	9301      	str	r3, [sp, #4]
   b5682:	bd08      	pop	{r3, pc}
   b5684:	00030268 	.word	0x00030268

000b5688 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b5688:	b508      	push	{r3, lr}
   b568a:	4b02      	ldr	r3, [pc, #8]	; (b5694 <HAL_Validate_Pin_Function+0xc>)
   b568c:	681b      	ldr	r3, [r3, #0]
   b568e:	685b      	ldr	r3, [r3, #4]
   b5690:	9301      	str	r3, [sp, #4]
   b5692:	bd08      	pop	{r3, pc}
   b5694:	0003022c 	.word	0x0003022c

000b5698 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b5698:	b508      	push	{r3, lr}
   b569a:	4b02      	ldr	r3, [pc, #8]	; (b56a4 <HAL_Pin_Mode+0xc>)
   b569c:	681b      	ldr	r3, [r3, #0]
   b569e:	689b      	ldr	r3, [r3, #8]
   b56a0:	9301      	str	r3, [sp, #4]
   b56a2:	bd08      	pop	{r3, pc}
   b56a4:	0003022c 	.word	0x0003022c

000b56a8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b56a8:	b508      	push	{r3, lr}
   b56aa:	4b02      	ldr	r3, [pc, #8]	; (b56b4 <HAL_Get_Pin_Mode+0xc>)
   b56ac:	681b      	ldr	r3, [r3, #0]
   b56ae:	68db      	ldr	r3, [r3, #12]
   b56b0:	9301      	str	r3, [sp, #4]
   b56b2:	bd08      	pop	{r3, pc}
   b56b4:	0003022c 	.word	0x0003022c

000b56b8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b56b8:	b508      	push	{r3, lr}
   b56ba:	4b02      	ldr	r3, [pc, #8]	; (b56c4 <HAL_GPIO_Write+0xc>)
   b56bc:	681b      	ldr	r3, [r3, #0]
   b56be:	691b      	ldr	r3, [r3, #16]
   b56c0:	9301      	str	r3, [sp, #4]
   b56c2:	bd08      	pop	{r3, pc}
   b56c4:	0003022c 	.word	0x0003022c

000b56c8 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b56c8:	b508      	push	{r3, lr}
   b56ca:	4b02      	ldr	r3, [pc, #8]	; (b56d4 <HAL_GPIO_Read+0xc>)
   b56cc:	681b      	ldr	r3, [r3, #0]
   b56ce:	695b      	ldr	r3, [r3, #20]
   b56d0:	9301      	str	r3, [sp, #4]
   b56d2:	bd08      	pop	{r3, pc}
   b56d4:	0003022c 	.word	0x0003022c

000b56d8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b56d8:	b508      	push	{r3, lr}
   b56da:	4b02      	ldr	r3, [pc, #8]	; (b56e4 <HAL_RNG_GetRandomNumber+0xc>)
   b56dc:	681b      	ldr	r3, [r3, #0]
   b56de:	685b      	ldr	r3, [r3, #4]
   b56e0:	9301      	str	r3, [sp, #4]
   b56e2:	bd08      	pop	{r3, pc}
   b56e4:	00030218 	.word	0x00030218

000b56e8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b56e8:	b508      	push	{r3, lr}
   b56ea:	4b02      	ldr	r3, [pc, #8]	; (b56f4 <HAL_Delay_Microseconds+0xc>)
   b56ec:	681b      	ldr	r3, [r3, #0]
   b56ee:	68db      	ldr	r3, [r3, #12]
   b56f0:	9301      	str	r3, [sp, #4]
   b56f2:	bd08      	pop	{r3, pc}
   b56f4:	00030218 	.word	0x00030218

000b56f8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b56f8:	b508      	push	{r3, lr}
   b56fa:	4b02      	ldr	r3, [pc, #8]	; (b5704 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b56fc:	681b      	ldr	r3, [r3, #0]
   b56fe:	695b      	ldr	r3, [r3, #20]
   b5700:	9301      	str	r3, [sp, #4]
   b5702:	bd08      	pop	{r3, pc}
   b5704:	00030218 	.word	0x00030218

000b5708 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5708:	b508      	push	{r3, lr}
   b570a:	4b02      	ldr	r3, [pc, #8]	; (b5714 <os_mutex_recursive_create+0xc>)
   b570c:	681b      	ldr	r3, [r3, #0]
   b570e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5710:	9301      	str	r3, [sp, #4]
   b5712:	bd08      	pop	{r3, pc}
   b5714:	00030248 	.word	0x00030248

000b5718 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5718:	b508      	push	{r3, lr}
   b571a:	4b02      	ldr	r3, [pc, #8]	; (b5724 <inet_inet_ntop+0xc>)
   b571c:	681b      	ldr	r3, [r3, #0]
   b571e:	695b      	ldr	r3, [r3, #20]
   b5720:	9301      	str	r3, [sp, #4]
   b5722:	bd08      	pop	{r3, pc}
   b5724:	00030264 	.word	0x00030264

000b5728 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5728:	b508      	push	{r3, lr}
   b572a:	4b02      	ldr	r3, [pc, #8]	; (b5734 <hal_usart_write+0xc>)
   b572c:	681b      	ldr	r3, [r3, #0]
   b572e:	68db      	ldr	r3, [r3, #12]
   b5730:	9301      	str	r3, [sp, #4]
   b5732:	bd08      	pop	{r3, pc}
   b5734:	0003023c 	.word	0x0003023c

000b5738 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5738:	b508      	push	{r3, lr}
   b573a:	4b02      	ldr	r3, [pc, #8]	; (b5744 <hal_usart_available+0xc>)
   b573c:	681b      	ldr	r3, [r3, #0]
   b573e:	691b      	ldr	r3, [r3, #16]
   b5740:	9301      	str	r3, [sp, #4]
   b5742:	bd08      	pop	{r3, pc}
   b5744:	0003023c 	.word	0x0003023c

000b5748 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5748:	b508      	push	{r3, lr}
   b574a:	4b02      	ldr	r3, [pc, #8]	; (b5754 <hal_usart_read+0xc>)
   b574c:	681b      	ldr	r3, [r3, #0]
   b574e:	695b      	ldr	r3, [r3, #20]
   b5750:	9301      	str	r3, [sp, #4]
   b5752:	bd08      	pop	{r3, pc}
   b5754:	0003023c 	.word	0x0003023c

000b5758 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5758:	b508      	push	{r3, lr}
   b575a:	4b02      	ldr	r3, [pc, #8]	; (b5764 <hal_usart_peek+0xc>)
   b575c:	681b      	ldr	r3, [r3, #0]
   b575e:	699b      	ldr	r3, [r3, #24]
   b5760:	9301      	str	r3, [sp, #4]
   b5762:	bd08      	pop	{r3, pc}
   b5764:	0003023c 	.word	0x0003023c

000b5768 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5768:	b508      	push	{r3, lr}
   b576a:	4b02      	ldr	r3, [pc, #8]	; (b5774 <hal_usart_flush+0xc>)
   b576c:	681b      	ldr	r3, [r3, #0]
   b576e:	69db      	ldr	r3, [r3, #28]
   b5770:	9301      	str	r3, [sp, #4]
   b5772:	bd08      	pop	{r3, pc}
   b5774:	0003023c 	.word	0x0003023c

000b5778 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5778:	b508      	push	{r3, lr}
   b577a:	4b02      	ldr	r3, [pc, #8]	; (b5784 <hal_usart_is_enabled+0xc>)
   b577c:	681b      	ldr	r3, [r3, #0]
   b577e:	6a1b      	ldr	r3, [r3, #32]
   b5780:	9301      	str	r3, [sp, #4]
   b5782:	bd08      	pop	{r3, pc}
   b5784:	0003023c 	.word	0x0003023c

000b5788 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5788:	b508      	push	{r3, lr}
   b578a:	4b02      	ldr	r3, [pc, #8]	; (b5794 <hal_usart_available_data_for_write+0xc>)
   b578c:	681b      	ldr	r3, [r3, #0]
   b578e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5790:	9301      	str	r3, [sp, #4]
   b5792:	bd08      	pop	{r3, pc}
   b5794:	0003023c 	.word	0x0003023c

000b5798 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5798:	b508      	push	{r3, lr}
   b579a:	4b02      	ldr	r3, [pc, #8]	; (b57a4 <hal_usart_init_ex+0xc>)
   b579c:	681b      	ldr	r3, [r3, #0]
   b579e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b57a0:	9301      	str	r3, [sp, #4]
   b57a2:	bd08      	pop	{r3, pc}
   b57a4:	0003023c 	.word	0x0003023c

000b57a8 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b57a8:	b508      	push	{r3, lr}
   b57aa:	4b02      	ldr	r3, [pc, #8]	; (b57b4 <hal_i2c_begin+0xc>)
   b57ac:	681b      	ldr	r3, [r3, #0]
   b57ae:	68db      	ldr	r3, [r3, #12]
   b57b0:	9301      	str	r3, [sp, #4]
   b57b2:	bd08      	pop	{r3, pc}
   b57b4:	00030228 	.word	0x00030228

000b57b8 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b57b8:	b508      	push	{r3, lr}
   b57ba:	4b02      	ldr	r3, [pc, #8]	; (b57c4 <hal_i2c_begin_transmission+0xc>)
   b57bc:	681b      	ldr	r3, [r3, #0]
   b57be:	699b      	ldr	r3, [r3, #24]
   b57c0:	9301      	str	r3, [sp, #4]
   b57c2:	bd08      	pop	{r3, pc}
   b57c4:	00030228 	.word	0x00030228

000b57c8 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b57c8:	b508      	push	{r3, lr}
   b57ca:	4b02      	ldr	r3, [pc, #8]	; (b57d4 <hal_i2c_end_transmission+0xc>)
   b57cc:	681b      	ldr	r3, [r3, #0]
   b57ce:	69db      	ldr	r3, [r3, #28]
   b57d0:	9301      	str	r3, [sp, #4]
   b57d2:	bd08      	pop	{r3, pc}
   b57d4:	00030228 	.word	0x00030228

000b57d8 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b57d8:	b508      	push	{r3, lr}
   b57da:	4b02      	ldr	r3, [pc, #8]	; (b57e4 <hal_i2c_write+0xc>)
   b57dc:	681b      	ldr	r3, [r3, #0]
   b57de:	6a1b      	ldr	r3, [r3, #32]
   b57e0:	9301      	str	r3, [sp, #4]
   b57e2:	bd08      	pop	{r3, pc}
   b57e4:	00030228 	.word	0x00030228

000b57e8 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b57e8:	b508      	push	{r3, lr}
   b57ea:	4b02      	ldr	r3, [pc, #8]	; (b57f4 <hal_i2c_available+0xc>)
   b57ec:	681b      	ldr	r3, [r3, #0]
   b57ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b57f0:	9301      	str	r3, [sp, #4]
   b57f2:	bd08      	pop	{r3, pc}
   b57f4:	00030228 	.word	0x00030228

000b57f8 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b57f8:	b508      	push	{r3, lr}
   b57fa:	4b02      	ldr	r3, [pc, #8]	; (b5804 <hal_i2c_read+0xc>)
   b57fc:	681b      	ldr	r3, [r3, #0]
   b57fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5800:	9301      	str	r3, [sp, #4]
   b5802:	bd08      	pop	{r3, pc}
   b5804:	00030228 	.word	0x00030228

000b5808 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5808:	b508      	push	{r3, lr}
   b580a:	4b02      	ldr	r3, [pc, #8]	; (b5814 <hal_i2c_peek+0xc>)
   b580c:	681b      	ldr	r3, [r3, #0]
   b580e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5810:	9301      	str	r3, [sp, #4]
   b5812:	bd08      	pop	{r3, pc}
   b5814:	00030228 	.word	0x00030228

000b5818 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5818:	b508      	push	{r3, lr}
   b581a:	4b02      	ldr	r3, [pc, #8]	; (b5824 <hal_i2c_flush+0xc>)
   b581c:	681b      	ldr	r3, [r3, #0]
   b581e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5820:	9301      	str	r3, [sp, #4]
   b5822:	bd08      	pop	{r3, pc}
   b5824:	00030228 	.word	0x00030228

000b5828 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5828:	b508      	push	{r3, lr}
   b582a:	4b02      	ldr	r3, [pc, #8]	; (b5834 <hal_i2c_is_enabled+0xc>)
   b582c:	681b      	ldr	r3, [r3, #0]
   b582e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5830:	9301      	str	r3, [sp, #4]
   b5832:	bd08      	pop	{r3, pc}
   b5834:	00030228 	.word	0x00030228

000b5838 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5838:	b508      	push	{r3, lr}
   b583a:	4b02      	ldr	r3, [pc, #8]	; (b5844 <hal_i2c_init+0xc>)
   b583c:	681b      	ldr	r3, [r3, #0]
   b583e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5840:	9301      	str	r3, [sp, #4]
   b5842:	bd08      	pop	{r3, pc}
   b5844:	00030228 	.word	0x00030228

000b5848 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b5848:	b508      	push	{r3, lr}
   b584a:	4b02      	ldr	r3, [pc, #8]	; (b5854 <hal_i2c_request_ex+0xc>)
   b584c:	681b      	ldr	r3, [r3, #0]
   b584e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5850:	9301      	str	r3, [sp, #4]
   b5852:	bd08      	pop	{r3, pc}
   b5854:	00030228 	.word	0x00030228

000b5858 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b5858:	b508      	push	{r3, lr}
   b585a:	4b02      	ldr	r3, [pc, #8]	; (b5864 <hal_spi_begin+0xc>)
   b585c:	681b      	ldr	r3, [r3, #0]
   b585e:	681b      	ldr	r3, [r3, #0]
   b5860:	9301      	str	r3, [sp, #4]
   b5862:	bd08      	pop	{r3, pc}
   b5864:	00030230 	.word	0x00030230

000b5868 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   b5868:	b508      	push	{r3, lr}
   b586a:	4b02      	ldr	r3, [pc, #8]	; (b5874 <hal_spi_set_bit_order+0xc>)
   b586c:	681b      	ldr	r3, [r3, #0]
   b586e:	689b      	ldr	r3, [r3, #8]
   b5870:	9301      	str	r3, [sp, #4]
   b5872:	bd08      	pop	{r3, pc}
   b5874:	00030230 	.word	0x00030230

000b5878 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   b5878:	b508      	push	{r3, lr}
   b587a:	4b02      	ldr	r3, [pc, #8]	; (b5884 <hal_spi_set_data_mode+0xc>)
   b587c:	681b      	ldr	r3, [r3, #0]
   b587e:	68db      	ldr	r3, [r3, #12]
   b5880:	9301      	str	r3, [sp, #4]
   b5882:	bd08      	pop	{r3, pc}
   b5884:	00030230 	.word	0x00030230

000b5888 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   b5888:	b508      	push	{r3, lr}
   b588a:	4b02      	ldr	r3, [pc, #8]	; (b5894 <hal_spi_set_clock_divider+0xc>)
   b588c:	681b      	ldr	r3, [r3, #0]
   b588e:	691b      	ldr	r3, [r3, #16]
   b5890:	9301      	str	r3, [sp, #4]
   b5892:	bd08      	pop	{r3, pc}
   b5894:	00030230 	.word	0x00030230

000b5898 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b5898:	b508      	push	{r3, lr}
   b589a:	4b02      	ldr	r3, [pc, #8]	; (b58a4 <hal_spi_transfer+0xc>)
   b589c:	681b      	ldr	r3, [r3, #0]
   b589e:	695b      	ldr	r3, [r3, #20]
   b58a0:	9301      	str	r3, [sp, #4]
   b58a2:	bd08      	pop	{r3, pc}
   b58a4:	00030230 	.word	0x00030230

000b58a8 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b58a8:	b508      	push	{r3, lr}
   b58aa:	4b02      	ldr	r3, [pc, #8]	; (b58b4 <hal_spi_init+0xc>)
   b58ac:	681b      	ldr	r3, [r3, #0]
   b58ae:	69db      	ldr	r3, [r3, #28]
   b58b0:	9301      	str	r3, [sp, #4]
   b58b2:	bd08      	pop	{r3, pc}
   b58b4:	00030230 	.word	0x00030230

000b58b8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b58b8:	b508      	push	{r3, lr}
   b58ba:	4b02      	ldr	r3, [pc, #8]	; (b58c4 <hal_spi_is_enabled+0xc>)
   b58bc:	681b      	ldr	r3, [r3, #0]
   b58be:	6a1b      	ldr	r3, [r3, #32]
   b58c0:	9301      	str	r3, [sp, #4]
   b58c2:	bd08      	pop	{r3, pc}
   b58c4:	00030230 	.word	0x00030230

000b58c8 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b58c8:	b508      	push	{r3, lr}
   b58ca:	4b02      	ldr	r3, [pc, #8]	; (b58d4 <hal_spi_info+0xc>)
   b58cc:	681b      	ldr	r3, [r3, #0]
   b58ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b58d0:	9301      	str	r3, [sp, #4]
   b58d2:	bd08      	pop	{r3, pc}
   b58d4:	00030230 	.word	0x00030230

000b58d8 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b58d8:	b508      	push	{r3, lr}
   b58da:	4b02      	ldr	r3, [pc, #8]	; (b58e4 <hal_spi_set_settings+0xc>)
   b58dc:	681b      	ldr	r3, [r3, #0]
   b58de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b58e0:	9301      	str	r3, [sp, #4]
   b58e2:	bd08      	pop	{r3, pc}
   b58e4:	00030230 	.word	0x00030230

000b58e8 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b58e8:	b508      	push	{r3, lr}
   b58ea:	4b02      	ldr	r3, [pc, #8]	; (b58f4 <hal_spi_acquire+0xc>)
   b58ec:	681b      	ldr	r3, [r3, #0]
   b58ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b58f0:	9301      	str	r3, [sp, #4]
   b58f2:	bd08      	pop	{r3, pc}
   b58f4:	00030230 	.word	0x00030230

000b58f8 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b58f8:	b508      	push	{r3, lr}
   b58fa:	4b02      	ldr	r3, [pc, #8]	; (b5904 <hal_spi_release+0xc>)
   b58fc:	681b      	ldr	r3, [r3, #0]
   b58fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5900:	9301      	str	r3, [sp, #4]
   b5902:	bd08      	pop	{r3, pc}
   b5904:	00030230 	.word	0x00030230

000b5908 <HAL_Servo_Attach>:
DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
DYNALIB_FN(2, hal_peripherals, HAL_Tone_Get_Frequency, uint32_t(uint8_t))
DYNALIB_FN(3, hal_peripherals, HAL_Tone_Is_Stopped, bool(uint8_t))

DYNALIB_FN(4, hal_peripherals, HAL_Servo_Attach, void(uint16_t))
   b5908:	b508      	push	{r3, lr}
   b590a:	4b02      	ldr	r3, [pc, #8]	; (b5914 <HAL_Servo_Attach+0xc>)
   b590c:	681b      	ldr	r3, [r3, #0]
   b590e:	691b      	ldr	r3, [r3, #16]
   b5910:	9301      	str	r3, [sp, #4]
   b5912:	bd08      	pop	{r3, pc}
   b5914:	00030224 	.word	0x00030224

000b5918 <HAL_Servo_Detach>:
DYNALIB_FN(5, hal_peripherals, HAL_Servo_Detach, void(uint16_t))
   b5918:	b508      	push	{r3, lr}
   b591a:	4b02      	ldr	r3, [pc, #8]	; (b5924 <HAL_Servo_Detach+0xc>)
   b591c:	681b      	ldr	r3, [r3, #0]
   b591e:	695b      	ldr	r3, [r3, #20]
   b5920:	9301      	str	r3, [sp, #4]
   b5922:	bd08      	pop	{r3, pc}
   b5924:	00030224 	.word	0x00030224

000b5928 <HAL_Servo_Write_Pulse_Width>:
DYNALIB_FN(6, hal_peripherals, HAL_Servo_Write_Pulse_Width, void(uint16_t, uint16_t))
   b5928:	b508      	push	{r3, lr}
   b592a:	4b02      	ldr	r3, [pc, #8]	; (b5934 <HAL_Servo_Write_Pulse_Width+0xc>)
   b592c:	681b      	ldr	r3, [r3, #0]
   b592e:	699b      	ldr	r3, [r3, #24]
   b5930:	9301      	str	r3, [sp, #4]
   b5932:	bd08      	pop	{r3, pc}
   b5934:	00030224 	.word	0x00030224

000b5938 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5938:	b508      	push	{r3, lr}
   b593a:	4b02      	ldr	r3, [pc, #8]	; (b5944 <HAL_USB_USART_Init+0xc>)
   b593c:	681b      	ldr	r3, [r3, #0]
   b593e:	681b      	ldr	r3, [r3, #0]
   b5940:	9301      	str	r3, [sp, #4]
   b5942:	bd08      	pop	{r3, pc}
   b5944:	0003024c 	.word	0x0003024c

000b5948 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b5948:	b508      	push	{r3, lr}
   b594a:	4b02      	ldr	r3, [pc, #8]	; (b5954 <HAL_USB_USART_Begin+0xc>)
   b594c:	681b      	ldr	r3, [r3, #0]
   b594e:	685b      	ldr	r3, [r3, #4]
   b5950:	9301      	str	r3, [sp, #4]
   b5952:	bd08      	pop	{r3, pc}
   b5954:	0003024c 	.word	0x0003024c

000b5958 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5958:	b508      	push	{r3, lr}
   b595a:	4b02      	ldr	r3, [pc, #8]	; (b5964 <HAL_USB_USART_Available_Data+0xc>)
   b595c:	681b      	ldr	r3, [r3, #0]
   b595e:	691b      	ldr	r3, [r3, #16]
   b5960:	9301      	str	r3, [sp, #4]
   b5962:	bd08      	pop	{r3, pc}
   b5964:	0003024c 	.word	0x0003024c

000b5968 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5968:	b508      	push	{r3, lr}
   b596a:	4b02      	ldr	r3, [pc, #8]	; (b5974 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b596c:	681b      	ldr	r3, [r3, #0]
   b596e:	695b      	ldr	r3, [r3, #20]
   b5970:	9301      	str	r3, [sp, #4]
   b5972:	bd08      	pop	{r3, pc}
   b5974:	0003024c 	.word	0x0003024c

000b5978 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5978:	b508      	push	{r3, lr}
   b597a:	4b02      	ldr	r3, [pc, #8]	; (b5984 <HAL_USB_USART_Receive_Data+0xc>)
   b597c:	681b      	ldr	r3, [r3, #0]
   b597e:	699b      	ldr	r3, [r3, #24]
   b5980:	9301      	str	r3, [sp, #4]
   b5982:	bd08      	pop	{r3, pc}
   b5984:	0003024c 	.word	0x0003024c

000b5988 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5988:	b508      	push	{r3, lr}
   b598a:	4b02      	ldr	r3, [pc, #8]	; (b5994 <HAL_USB_USART_Send_Data+0xc>)
   b598c:	681b      	ldr	r3, [r3, #0]
   b598e:	69db      	ldr	r3, [r3, #28]
   b5990:	9301      	str	r3, [sp, #4]
   b5992:	bd08      	pop	{r3, pc}
   b5994:	0003024c 	.word	0x0003024c

000b5998 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5998:	b508      	push	{r3, lr}
   b599a:	4b02      	ldr	r3, [pc, #8]	; (b59a4 <HAL_USB_USART_Flush_Data+0xc>)
   b599c:	681b      	ldr	r3, [r3, #0]
   b599e:	6a1b      	ldr	r3, [r3, #32]
   b59a0:	9301      	str	r3, [sp, #4]
   b59a2:	bd08      	pop	{r3, pc}
   b59a4:	0003024c 	.word	0x0003024c

000b59a8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b59a8:	b508      	push	{r3, lr}
   b59aa:	4b02      	ldr	r3, [pc, #8]	; (b59b4 <panic_+0xc>)
   b59ac:	681b      	ldr	r3, [r3, #0]
   b59ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b59b0:	9301      	str	r3, [sp, #4]
   b59b2:	bd08      	pop	{r3, pc}
   b59b4:	00030260 	.word	0x00030260

000b59b8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b59b8:	b508      	push	{r3, lr}
   b59ba:	4b02      	ldr	r3, [pc, #8]	; (b59c4 <set_system_mode+0xc>)
   b59bc:	681b      	ldr	r3, [r3, #0]
   b59be:	685b      	ldr	r3, [r3, #4]
   b59c0:	9301      	str	r3, [sp, #4]
   b59c2:	bd08      	pop	{r3, pc}
   b59c4:	00030220 	.word	0x00030220

000b59c8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b59c8:	b508      	push	{r3, lr}
   b59ca:	4b02      	ldr	r3, [pc, #8]	; (b59d4 <system_delay_ms+0xc>)
   b59cc:	681b      	ldr	r3, [r3, #0]
   b59ce:	695b      	ldr	r3, [r3, #20]
   b59d0:	9301      	str	r3, [sp, #4]
   b59d2:	bd08      	pop	{r3, pc}
   b59d4:	00030220 	.word	0x00030220

000b59d8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b59d8:	b508      	push	{r3, lr}
   b59da:	4b02      	ldr	r3, [pc, #8]	; (b59e4 <application_thread_current+0xc>)
   b59dc:	681b      	ldr	r3, [r3, #0]
   b59de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b59e0:	9301      	str	r3, [sp, #4]
   b59e2:	bd08      	pop	{r3, pc}
   b59e4:	00030220 	.word	0x00030220

000b59e8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b59e8:	b508      	push	{r3, lr}
   b59ea:	4b02      	ldr	r3, [pc, #8]	; (b59f4 <application_thread_invoke+0xc>)
   b59ec:	681b      	ldr	r3, [r3, #0]
   b59ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b59f0:	9301      	str	r3, [sp, #4]
   b59f2:	bd08      	pop	{r3, pc}
   b59f4:	00030220 	.word	0x00030220

000b59f8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b59f8:	b508      	push	{r3, lr}
   b59fa:	4b03      	ldr	r3, [pc, #12]	; (b5a08 <system_ctrl_set_app_request_handler+0x10>)
   b59fc:	681b      	ldr	r3, [r3, #0]
   b59fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b5a02:	9301      	str	r3, [sp, #4]
   b5a04:	bd08      	pop	{r3, pc}
   b5a06:	0000      	.short	0x0000
   b5a08:	00030220 	.word	0x00030220

000b5a0c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5a0c:	b508      	push	{r3, lr}
   b5a0e:	4b03      	ldr	r3, [pc, #12]	; (b5a1c <system_ctrl_set_result+0x10>)
   b5a10:	681b      	ldr	r3, [r3, #0]
   b5a12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b5a16:	9301      	str	r3, [sp, #4]
   b5a18:	bd08      	pop	{r3, pc}
   b5a1a:	0000      	.short	0x0000
   b5a1c:	00030220 	.word	0x00030220

000b5a20 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b5a20:	b508      	push	{r3, lr}
   b5a22:	4b02      	ldr	r3, [pc, #8]	; (b5a2c <network_connect+0xc>)
   b5a24:	681b      	ldr	r3, [r3, #0]
   b5a26:	685b      	ldr	r3, [r3, #4]
   b5a28:	9301      	str	r3, [sp, #4]
   b5a2a:	bd08      	pop	{r3, pc}
   b5a2c:	00030240 	.word	0x00030240

000b5a30 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b5a30:	b508      	push	{r3, lr}
   b5a32:	4b02      	ldr	r3, [pc, #8]	; (b5a3c <network_connecting+0xc>)
   b5a34:	681b      	ldr	r3, [r3, #0]
   b5a36:	689b      	ldr	r3, [r3, #8]
   b5a38:	9301      	str	r3, [sp, #4]
   b5a3a:	bd08      	pop	{r3, pc}
   b5a3c:	00030240 	.word	0x00030240

000b5a40 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b5a40:	b508      	push	{r3, lr}
   b5a42:	4b02      	ldr	r3, [pc, #8]	; (b5a4c <network_disconnect+0xc>)
   b5a44:	681b      	ldr	r3, [r3, #0]
   b5a46:	68db      	ldr	r3, [r3, #12]
   b5a48:	9301      	str	r3, [sp, #4]
   b5a4a:	bd08      	pop	{r3, pc}
   b5a4c:	00030240 	.word	0x00030240

000b5a50 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b5a50:	b508      	push	{r3, lr}
   b5a52:	4b02      	ldr	r3, [pc, #8]	; (b5a5c <network_ready+0xc>)
   b5a54:	681b      	ldr	r3, [r3, #0]
   b5a56:	691b      	ldr	r3, [r3, #16]
   b5a58:	9301      	str	r3, [sp, #4]
   b5a5a:	bd08      	pop	{r3, pc}
   b5a5c:	00030240 	.word	0x00030240

000b5a60 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b5a60:	b508      	push	{r3, lr}
   b5a62:	4b02      	ldr	r3, [pc, #8]	; (b5a6c <network_on+0xc>)
   b5a64:	681b      	ldr	r3, [r3, #0]
   b5a66:	695b      	ldr	r3, [r3, #20]
   b5a68:	9301      	str	r3, [sp, #4]
   b5a6a:	bd08      	pop	{r3, pc}
   b5a6c:	00030240 	.word	0x00030240

000b5a70 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5a70:	b508      	push	{r3, lr}
   b5a72:	4b02      	ldr	r3, [pc, #8]	; (b5a7c <network_off+0xc>)
   b5a74:	681b      	ldr	r3, [r3, #0]
   b5a76:	699b      	ldr	r3, [r3, #24]
   b5a78:	9301      	str	r3, [sp, #4]
   b5a7a:	bd08      	pop	{r3, pc}
   b5a7c:	00030240 	.word	0x00030240

000b5a80 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5a80:	b508      	push	{r3, lr}
   b5a82:	4b02      	ldr	r3, [pc, #8]	; (b5a8c <network_listen+0xc>)
   b5a84:	681b      	ldr	r3, [r3, #0]
   b5a86:	69db      	ldr	r3, [r3, #28]
   b5a88:	9301      	str	r3, [sp, #4]
   b5a8a:	bd08      	pop	{r3, pc}
   b5a8c:	00030240 	.word	0x00030240

000b5a90 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5a90:	b508      	push	{r3, lr}
   b5a92:	4b02      	ldr	r3, [pc, #8]	; (b5a9c <network_listening+0xc>)
   b5a94:	681b      	ldr	r3, [r3, #0]
   b5a96:	6a1b      	ldr	r3, [r3, #32]
   b5a98:	9301      	str	r3, [sp, #4]
   b5a9a:	bd08      	pop	{r3, pc}
   b5a9c:	00030240 	.word	0x00030240

000b5aa0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5aa0:	b508      	push	{r3, lr}
   b5aa2:	4b02      	ldr	r3, [pc, #8]	; (b5aac <network_set_listen_timeout+0xc>)
   b5aa4:	681b      	ldr	r3, [r3, #0]
   b5aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5aa8:	9301      	str	r3, [sp, #4]
   b5aaa:	bd08      	pop	{r3, pc}
   b5aac:	00030240 	.word	0x00030240

000b5ab0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5ab0:	b508      	push	{r3, lr}
   b5ab2:	4b02      	ldr	r3, [pc, #8]	; (b5abc <network_get_listen_timeout+0xc>)
   b5ab4:	681b      	ldr	r3, [r3, #0]
   b5ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5ab8:	9301      	str	r3, [sp, #4]
   b5aba:	bd08      	pop	{r3, pc}
   b5abc:	00030240 	.word	0x00030240

000b5ac0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5ac0:	b508      	push	{r3, lr}
   b5ac2:	4b02      	ldr	r3, [pc, #8]	; (b5acc <network_is_on+0xc>)
   b5ac4:	681b      	ldr	r3, [r3, #0]
   b5ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5ac8:	9301      	str	r3, [sp, #4]
   b5aca:	bd08      	pop	{r3, pc}
   b5acc:	00030240 	.word	0x00030240

000b5ad0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5ad0:	b508      	push	{r3, lr}
   b5ad2:	4b02      	ldr	r3, [pc, #8]	; (b5adc <network_is_off+0xc>)
   b5ad4:	681b      	ldr	r3, [r3, #0]
   b5ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5ad8:	9301      	str	r3, [sp, #4]
   b5ada:	bd08      	pop	{r3, pc}
   b5adc:	00030240 	.word	0x00030240

000b5ae0 <spark_cloud_flag_connect>:
DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   b5ae0:	b508      	push	{r3, lr}
   b5ae2:	4b02      	ldr	r3, [pc, #8]	; (b5aec <spark_cloud_flag_connect+0xc>)
   b5ae4:	681b      	ldr	r3, [r3, #0]
   b5ae6:	68db      	ldr	r3, [r3, #12]
   b5ae8:	9301      	str	r3, [sp, #4]
   b5aea:	bd08      	pop	{r3, pc}
   b5aec:	00030244 	.word	0x00030244

000b5af0 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b5af0:	b508      	push	{r3, lr}
   b5af2:	4b02      	ldr	r3, [pc, #8]	; (b5afc <spark_cloud_flag_connected+0xc>)
   b5af4:	681b      	ldr	r3, [r3, #0]
   b5af6:	695b      	ldr	r3, [r3, #20]
   b5af8:	9301      	str	r3, [sp, #4]
   b5afa:	bd08      	pop	{r3, pc}
   b5afc:	00030244 	.word	0x00030244

000b5b00 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b5b00:	b508      	push	{r3, lr}
   b5b02:	4b02      	ldr	r3, [pc, #8]	; (b5b0c <spark_send_event+0xc>)
   b5b04:	681b      	ldr	r3, [r3, #0]
   b5b06:	6a1b      	ldr	r3, [r3, #32]
   b5b08:	9301      	str	r3, [sp, #4]
   b5b0a:	bd08      	pop	{r3, pc}
   b5b0c:	00030244 	.word	0x00030244

000b5b10 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5b10:	b508      	push	{r3, lr}
   b5b12:	4b02      	ldr	r3, [pc, #8]	; (b5b1c <spark_set_random_seed_from_cloud_handler+0xc>)
   b5b14:	681b      	ldr	r3, [r3, #0]
   b5b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5b18:	9301      	str	r3, [sp, #4]
   b5b1a:	bd08      	pop	{r3, pc}
   b5b1c:	00030244 	.word	0x00030244

000b5b20 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5b20:	b508      	push	{r3, lr}
   b5b22:	4b02      	ldr	r3, [pc, #8]	; (b5b2c <malloc+0xc>)
   b5b24:	681b      	ldr	r3, [r3, #0]
   b5b26:	681b      	ldr	r3, [r3, #0]
   b5b28:	9301      	str	r3, [sp, #4]
   b5b2a:	bd08      	pop	{r3, pc}
   b5b2c:	0003021c 	.word	0x0003021c

000b5b30 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5b30:	b508      	push	{r3, lr}
   b5b32:	4b02      	ldr	r3, [pc, #8]	; (b5b3c <free+0xc>)
   b5b34:	681b      	ldr	r3, [r3, #0]
   b5b36:	685b      	ldr	r3, [r3, #4]
   b5b38:	9301      	str	r3, [sp, #4]
   b5b3a:	bd08      	pop	{r3, pc}
   b5b3c:	0003021c 	.word	0x0003021c

000b5b40 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b5b40:	b508      	push	{r3, lr}
   b5b42:	4b02      	ldr	r3, [pc, #8]	; (b5b4c <realloc+0xc>)
   b5b44:	681b      	ldr	r3, [r3, #0]
   b5b46:	689b      	ldr	r3, [r3, #8]
   b5b48:	9301      	str	r3, [sp, #4]
   b5b4a:	bd08      	pop	{r3, pc}
   b5b4c:	0003021c 	.word	0x0003021c

000b5b50 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b5b50:	b508      	push	{r3, lr}
   b5b52:	4b02      	ldr	r3, [pc, #8]	; (b5b5c <vsnprintf+0xc>)
   b5b54:	681b      	ldr	r3, [r3, #0]
   b5b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5b58:	9301      	str	r3, [sp, #4]
   b5b5a:	bd08      	pop	{r3, pc}
   b5b5c:	0003021c 	.word	0x0003021c

000b5b60 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b5b60:	b508      	push	{r3, lr}
   b5b62:	4b02      	ldr	r3, [pc, #8]	; (b5b6c <abort+0xc>)
   b5b64:	681b      	ldr	r3, [r3, #0]
   b5b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5b68:	9301      	str	r3, [sp, #4]
   b5b6a:	bd08      	pop	{r3, pc}
   b5b6c:	0003021c 	.word	0x0003021c

000b5b70 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b5b70:	b508      	push	{r3, lr}
   b5b72:	4b02      	ldr	r3, [pc, #8]	; (b5b7c <_malloc_r+0xc>)
   b5b74:	681b      	ldr	r3, [r3, #0]
   b5b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5b78:	9301      	str	r3, [sp, #4]
   b5b7a:	bd08      	pop	{r3, pc}
   b5b7c:	0003021c 	.word	0x0003021c

000b5b80 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5b80:	b508      	push	{r3, lr}
   b5b82:	4b02      	ldr	r3, [pc, #8]	; (b5b8c <__assert_func+0xc>)
   b5b84:	681b      	ldr	r3, [r3, #0]
   b5b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5b88:	9301      	str	r3, [sp, #4]
   b5b8a:	bd08      	pop	{r3, pc}
   b5b8c:	0003021c 	.word	0x0003021c

000b5b90 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5b90:	b508      	push	{r3, lr}
   b5b92:	4b02      	ldr	r3, [pc, #8]	; (b5b9c <newlib_impure_ptr_callback+0xc>)
   b5b94:	681b      	ldr	r3, [r3, #0]
   b5b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5b98:	9301      	str	r3, [sp, #4]
   b5b9a:	bd08      	pop	{r3, pc}
   b5b9c:	0003021c 	.word	0x0003021c

000b5ba0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5ba0:	2200      	movs	r2, #0
   b5ba2:	6840      	ldr	r0, [r0, #4]
   b5ba4:	4611      	mov	r1, r2
   b5ba6:	f7ff bf73 	b.w	b5a90 <network_listening>

000b5baa <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5baa:	2200      	movs	r2, #0
   b5bac:	6840      	ldr	r0, [r0, #4]
   b5bae:	4611      	mov	r1, r2
   b5bb0:	f7ff bf7e 	b.w	b5ab0 <network_get_listen_timeout>

000b5bb4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5bb4:	6840      	ldr	r0, [r0, #4]
   b5bb6:	2200      	movs	r2, #0
   b5bb8:	f7ff bf72 	b.w	b5aa0 <network_set_listen_timeout>

000b5bbc <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5bbc:	6840      	ldr	r0, [r0, #4]
   b5bbe:	2200      	movs	r2, #0
   b5bc0:	f081 0101 	eor.w	r1, r1, #1
   b5bc4:	f7ff bf5c 	b.w	b5a80 <network_listen>

000b5bc8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5bc8:	2300      	movs	r3, #0
   b5bca:	6840      	ldr	r0, [r0, #4]
   b5bcc:	461a      	mov	r2, r3
   b5bce:	4619      	mov	r1, r3
   b5bd0:	f7ff bf4e 	b.w	b5a70 <network_off>

000b5bd4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5bd4:	2300      	movs	r3, #0
   b5bd6:	6840      	ldr	r0, [r0, #4]
   b5bd8:	461a      	mov	r2, r3
   b5bda:	4619      	mov	r1, r3
   b5bdc:	f7ff bf40 	b.w	b5a60 <network_on>

000b5be0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b5be0:	2200      	movs	r2, #0
   b5be2:	6840      	ldr	r0, [r0, #4]
   b5be4:	4611      	mov	r1, r2
   b5be6:	f7ff bf33 	b.w	b5a50 <network_ready>

000b5bea <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5bea:	2200      	movs	r2, #0
   b5bec:	6840      	ldr	r0, [r0, #4]
   b5bee:	4611      	mov	r1, r2
   b5bf0:	f7ff bf1e 	b.w	b5a30 <network_connecting>

000b5bf4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5bf4:	6840      	ldr	r0, [r0, #4]
   b5bf6:	2200      	movs	r2, #0
   b5bf8:	2102      	movs	r1, #2
   b5bfa:	f7ff bf21 	b.w	b5a40 <network_disconnect>

000b5bfe <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5bfe:	2300      	movs	r3, #0
   b5c00:	6840      	ldr	r0, [r0, #4]
   b5c02:	461a      	mov	r2, r3
   b5c04:	f7ff bf0c 	b.w	b5a20 <network_connect>

000b5c08 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5c08:	4b02      	ldr	r3, [pc, #8]	; (b5c14 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5c0a:	2203      	movs	r2, #3
   b5c0c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b5c0e:	4a02      	ldr	r2, [pc, #8]	; (b5c18 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5c10:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b5c12:	4770      	bx	lr
   b5c14:	2003e6c4 	.word	0x2003e6c4
   b5c18:	000b8394 	.word	0x000b8394

000b5c1c <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b5c1c:	2100      	movs	r1, #0
   b5c1e:	f7ff be6b 	b.w	b58f8 <hal_spi_release>

000b5c22 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b5c22:	2100      	movs	r1, #0
   b5c24:	f7ff be60 	b.w	b58e8 <hal_spi_acquire>

000b5c28 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b5c28:	b510      	push	{r4, lr}
   b5c2a:	4604      	mov	r4, r0
   b5c2c:	4608      	mov	r0, r1
{
    _spi = spi;
   b5c2e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b5c30:	f7ff fe3a 	bl	b58a8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5c34:	2300      	movs	r3, #0
   b5c36:	6063      	str	r3, [r4, #4]
}
   b5c38:	4620      	mov	r0, r4
   b5c3a:	bd10      	pop	{r4, pc}

000b5c3c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b5c3c:	b513      	push	{r0, r1, r4, lr}
   b5c3e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b5c40:	7800      	ldrb	r0, [r0, #0]
   b5c42:	f7ff ffee 	bl	b5c22 <_ZN8SPIClass4lockEv.isra.0>
   b5c46:	b958      	cbnz	r0, b5c60 <_ZN8SPIClass5beginEv+0x24>
   b5c48:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b5c4a:	9001      	str	r0, [sp, #4]
   b5c4c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b5c50:	f7ff fe02 	bl	b5858 <hal_spi_begin>
        unlock();
   b5c54:	9801      	ldr	r0, [sp, #4]
    }
}
   b5c56:	b002      	add	sp, #8
   b5c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5c5c:	f7ff bfde 	b.w	b5c1c <_ZN8SPIClass6unlockEv.isra.0>
   b5c60:	b002      	add	sp, #8
   b5c62:	bd10      	pop	{r4, pc}

000b5c64 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   b5c64:	b513      	push	{r0, r1, r4, lr}
   b5c66:	4604      	mov	r4, r0
    if (!lock())
   b5c68:	7800      	ldrb	r0, [r0, #0]
{
   b5c6a:	9101      	str	r1, [sp, #4]
    if (!lock())
   b5c6c:	f7ff ffd9 	bl	b5c22 <_ZN8SPIClass4lockEv.isra.0>
   b5c70:	9901      	ldr	r1, [sp, #4]
   b5c72:	b948      	cbnz	r0, b5c88 <_ZN8SPIClass11setBitOrderEh+0x24>
   b5c74:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   b5c76:	9001      	str	r0, [sp, #4]
   b5c78:	f7ff fdf6 	bl	b5868 <hal_spi_set_bit_order>
        unlock();
   b5c7c:	9801      	ldr	r0, [sp, #4]
    }
}
   b5c7e:	b002      	add	sp, #8
   b5c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5c84:	f7ff bfca 	b.w	b5c1c <_ZN8SPIClass6unlockEv.isra.0>
   b5c88:	b002      	add	sp, #8
   b5c8a:	bd10      	pop	{r4, pc}

000b5c8c <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   b5c8c:	b513      	push	{r0, r1, r4, lr}
   b5c8e:	4604      	mov	r4, r0
    if (!lock())
   b5c90:	7800      	ldrb	r0, [r0, #0]
{
   b5c92:	9101      	str	r1, [sp, #4]
    if (!lock())
   b5c94:	f7ff ffc5 	bl	b5c22 <_ZN8SPIClass4lockEv.isra.0>
   b5c98:	9901      	ldr	r1, [sp, #4]
   b5c9a:	b948      	cbnz	r0, b5cb0 <_ZN8SPIClass11setDataModeEh+0x24>
   b5c9c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
   b5c9e:	9001      	str	r0, [sp, #4]
   b5ca0:	f7ff fdea 	bl	b5878 <hal_spi_set_data_mode>
        unlock();
   b5ca4:	9801      	ldr	r0, [sp, #4]
    }
}
   b5ca6:	b002      	add	sp, #8
   b5ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5cac:	f7ff bfb6 	b.w	b5c1c <_ZN8SPIClass6unlockEv.isra.0>
   b5cb0:	b002      	add	sp, #8
   b5cb2:	bd10      	pop	{r4, pc}

000b5cb4 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b5cb4:	7800      	ldrb	r0, [r0, #0]
   b5cb6:	f7ff bfb1 	b.w	b5c1c <_ZN8SPIClass6unlockEv.isra.0>
	...

000b5cbc <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b5cbc:	0840      	lsrs	r0, r0, #1
{
   b5cbe:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b5cc0:	6018      	str	r0, [r3, #0]
   b5cc2:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b5cc4:	6818      	ldr	r0, [r3, #0]
   b5cc6:	4288      	cmp	r0, r1
   b5cc8:	b2e5      	uxtb	r5, r4
   b5cca:	d906      	bls.n	b5cda <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b5ccc:	3401      	adds	r4, #1
   b5cce:	2c08      	cmp	r4, #8
   b5cd0:	d002      	beq.n	b5cd8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b5cd2:	0840      	lsrs	r0, r0, #1
   b5cd4:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b5cd6:	e7f5      	b.n	b5cc4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b5cd8:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b5cda:	4b02      	ldr	r3, [pc, #8]	; (b5ce4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b5cdc:	5d5b      	ldrb	r3, [r3, r5]
   b5cde:	7013      	strb	r3, [r2, #0]
}
   b5ce0:	bd30      	pop	{r4, r5, pc}
   b5ce2:	bf00      	nop
   b5ce4:	000b83c8 	.word	0x000b83c8

000b5ce8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b5ce8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5cec:	4606      	mov	r6, r0
   b5cee:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b5cf0:	7800      	ldrb	r0, [r0, #0]
{
   b5cf2:	460c      	mov	r4, r1
    CHECK(lock());
   b5cf4:	f7ff ff95 	bl	b5c22 <_ZN8SPIClass4lockEv.isra.0>
   b5cf8:	2800      	cmp	r0, #0
   b5cfa:	db1b      	blt.n	b5d34 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b5cfc:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b5cfe:	2214      	movs	r2, #20
   b5d00:	2100      	movs	r1, #0
   b5d02:	a809      	add	r0, sp, #36	; 0x24
   b5d04:	f001 ff14 	bl	b7b30 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b5d08:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b5d0a:	2200      	movs	r2, #0
   b5d0c:	a909      	add	r1, sp, #36	; 0x24
   b5d0e:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b5d10:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b5d14:	f7ff fdd8 	bl	b58c8 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b5d18:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b5d1c:	b113      	cbz	r3, b5d24 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b5d1e:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b5d22:	b155      	cbz	r5, b5d3a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b5d24:	2700      	movs	r7, #0
   b5d26:	46b9      	mov	r9, r7
   b5d28:	46b8      	mov	r8, r7
   b5d2a:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b5d2c:	7923      	ldrb	r3, [r4, #4]
   b5d2e:	b15d      	cbz	r5, b5d48 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b5d30:	b1c3      	cbz	r3, b5d64 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b5d32:	2000      	movs	r0, #0
}
   b5d34:	b00f      	add	sp, #60	; 0x3c
   b5d36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b5d3a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b5d3e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b5d42:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b5d46:	e7f1      	b.n	b5d2c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b5d48:	2b00      	cmp	r3, #0
   b5d4a:	d135      	bne.n	b5db8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b5d4c:	68a3      	ldr	r3, [r4, #8]
   b5d4e:	4543      	cmp	r3, r8
   b5d50:	d108      	bne.n	b5d64 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b5d52:	f88d 9020 	strb.w	r9, [sp, #32]
   b5d56:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b5d5a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b5d5e:	89a3      	ldrh	r3, [r4, #12]
   b5d60:	429a      	cmp	r2, r3
   b5d62:	d0e6      	beq.n	b5d32 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b5d64:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b5d66:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b5d68:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b5d6c:	980a      	ldr	r0, [sp, #40]	; 0x28
   b5d6e:	ab04      	add	r3, sp, #16
   b5d70:	f10d 020f 	add.w	r2, sp, #15
   b5d74:	f7ff ffa2 	bl	b5cbc <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b5d78:	7921      	ldrb	r1, [r4, #4]
   b5d7a:	b985      	cbnz	r5, b5d9e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b5d7c:	b989      	cbnz	r1, b5da2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b5d7e:	68a3      	ldr	r3, [r4, #8]
   b5d80:	4543      	cmp	r3, r8
   b5d82:	d30e      	bcc.n	b5da2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b5d84:	f88d 9020 	strb.w	r9, [sp, #32]
   b5d88:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b5d8c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b5d90:	89a3      	ldrh	r3, [r4, #12]
   b5d92:	429a      	cmp	r2, r3
   b5d94:	d105      	bne.n	b5da2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b5d96:	9b04      	ldr	r3, [sp, #16]
   b5d98:	4543      	cmp	r3, r8
   b5d9a:	d102      	bne.n	b5da2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b5d9c:	e7c9      	b.n	b5d32 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b5d9e:	2900      	cmp	r1, #0
   b5da0:	d1f9      	bne.n	b5d96 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b5da2:	2300      	movs	r3, #0
   b5da4:	9301      	str	r3, [sp, #4]
   b5da6:	7b63      	ldrb	r3, [r4, #13]
   b5da8:	9300      	str	r3, [sp, #0]
   b5daa:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b5dae:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b5db0:	7830      	ldrb	r0, [r6, #0]
   b5db2:	f7ff fd91 	bl	b58d8 <hal_spi_set_settings>
   b5db6:	e7bc      	b.n	b5d32 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b5db8:	e9cd 5500 	strd	r5, r5, [sp]
   b5dbc:	462b      	mov	r3, r5
   b5dbe:	462a      	mov	r2, r5
   b5dc0:	2101      	movs	r1, #1
   b5dc2:	e7f5      	b.n	b5db0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b5dc4 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   b5dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5dc8:	b088      	sub	sp, #32
    unsigned clock = 0;
   b5dca:	2300      	movs	r3, #0
{
   b5dcc:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   b5dce:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   b5dd0:	9302      	str	r3, [sp, #8]
{
   b5dd2:	460e      	mov	r6, r1
   b5dd4:	4617      	mov	r7, r2
    if (!lock())
   b5dd6:	f7ff ff24 	bl	b5c22 <_ZN8SPIClass4lockEv.isra.0>
   b5dda:	4605      	mov	r5, r0
   b5ddc:	bb00      	cbnz	r0, b5e20 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   b5dde:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   b5de2:	4601      	mov	r1, r0
   b5de4:	2214      	movs	r2, #20
   b5de6:	a803      	add	r0, sp, #12
   b5de8:	f001 fea2 	bl	b7b30 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b5dec:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b5dee:	462a      	mov	r2, r5
   b5df0:	a903      	add	r1, sp, #12
   b5df2:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   b5df4:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   b5df8:	f7ff fd66 	bl	b58c8 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b5dfc:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   b5dfe:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b5e02:	ab02      	add	r3, sp, #8
   b5e04:	f10d 0207 	add.w	r2, sp, #7
   b5e08:	fb07 f106 	mul.w	r1, r7, r6
   b5e0c:	f7ff ff56 	bl	b5cbc <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   b5e10:	7820      	ldrb	r0, [r4, #0]
   b5e12:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b5e16:	f7ff fd37 	bl	b5888 <hal_spi_set_clock_divider>
        unlock();
   b5e1a:	7820      	ldrb	r0, [r4, #0]
   b5e1c:	f7ff fefe 	bl	b5c1c <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   b5e20:	9802      	ldr	r0, [sp, #8]
   b5e22:	b008      	add	sp, #32
   b5e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5e28 <_ZN8SPIClass15setClockDividerEh>:
{
   b5e28:	b538      	push	{r3, r4, r5, lr}
   b5e2a:	4604      	mov	r4, r0
    if (!lock())
   b5e2c:	7800      	ldrb	r0, [r0, #0]
{
   b5e2e:	460d      	mov	r5, r1
    if (!lock())
   b5e30:	f7ff fef7 	bl	b5c22 <_ZN8SPIClass4lockEv.isra.0>
   b5e34:	4603      	mov	r3, r0
   b5e36:	b9d0      	cbnz	r0, b5e6e <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   b5e38:	6861      	ldr	r1, [r4, #4]
   b5e3a:	b199      	cbz	r1, b5e64 <_ZN8SPIClass15setClockDividerEh+0x3c>
   b5e3c:	4a0c      	ldr	r2, [pc, #48]	; (b5e70 <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   b5e3e:	f812 0b01 	ldrb.w	r0, [r2], #1
   b5e42:	4285      	cmp	r5, r0
   b5e44:	d002      	beq.n	b5e4c <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   b5e46:	3301      	adds	r3, #1
   b5e48:	2b08      	cmp	r3, #8
   b5e4a:	d1f8      	bne.n	b5e3e <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   b5e4c:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   b5e4e:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   b5e50:	2201      	movs	r2, #1
   b5e52:	40d9      	lsrs	r1, r3
   b5e54:	4620      	mov	r0, r4
   b5e56:	f7ff ffb5 	bl	b5dc4 <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   b5e5a:	7820      	ldrb	r0, [r4, #0]
}
   b5e5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   b5e60:	f7ff bedc 	b.w	b5c1c <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   b5e64:	7820      	ldrb	r0, [r4, #0]
   b5e66:	4629      	mov	r1, r5
   b5e68:	f7ff fd0e 	bl	b5888 <hal_spi_set_clock_divider>
   b5e6c:	e7f5      	b.n	b5e5a <_ZN8SPIClass15setClockDividerEh+0x32>
}
   b5e6e:	bd38      	pop	{r3, r4, r5, pc}
   b5e70:	000b83c8 	.word	0x000b83c8

000b5e74 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   b5e74:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b5e76:	7800      	ldrb	r0, [r0, #0]
   b5e78:	f7ff fd0e 	bl	b5898 <hal_spi_transfer>
}
   b5e7c:	b2c0      	uxtb	r0, r0
   b5e7e:	bd08      	pop	{r3, pc}

000b5e80 <_ZN5Servo17writeMicrosecondsEt>:
    /**
     * @brief Check if this instance is attached to a servo.
     * @return true if this instance is attached to a servo, false otherwise.
     * @see Servo::attachedPin()
     */
    bool attached() const { return this->pin != NOT_ATTACHED; }
   b5e80:	f9b0 2000 	ldrsh.w	r2, [r0]
}

void Servo::writeMicroseconds(uint16_t pulseWidth)
{

  if (!this->attached())
   b5e84:	1c53      	adds	r3, r2, #1
   b5e86:	d00b      	beq.n	b5ea0 <_ZN5Servo17writeMicrosecondsEt+0x20>
  {
    return;
  }

  pulseWidth = constrain(pulseWidth, this->minPW, this->maxPW);
   b5e88:	8843      	ldrh	r3, [r0, #2]
   b5e8a:	8880      	ldrh	r0, [r0, #4]
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   b5e8c:	428b      	cmp	r3, r1
   b5e8e:	d803      	bhi.n	b5e98 <_ZN5Servo17writeMicrosecondsEt+0x18>
   b5e90:	4288      	cmp	r0, r1
   b5e92:	4603      	mov	r3, r0
   b5e94:	bf28      	it	cs
   b5e96:	460b      	movcs	r3, r1

  HAL_Servo_Write_Pulse_Width(this->pin, pulseWidth);
   b5e98:	4619      	mov	r1, r3
   b5e9a:	b290      	uxth	r0, r2
   b5e9c:	f7ff bd44 	b.w	b5928 <HAL_Servo_Write_Pulse_Width>
}
   b5ea0:	4770      	bx	lr

000b5ea2 <_ZN5Servo5writeEi>:
{
   b5ea2:	b513      	push	{r0, r1, r4, lr}
   b5ea4:	4604      	mov	r4, r0
   b5ea6:	4608      	mov	r0, r1
   b5ea8:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
   b5eac:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   b5eb0:	4288      	cmp	r0, r1
   b5eb2:	db10      	blt.n	b5ed6 <_ZN5Servo5writeEi+0x34>
   b5eb4:	4290      	cmp	r0, r2
   b5eb6:	bfa8      	it	ge
   b5eb8:	4610      	movge	r0, r2
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   b5eba:	88a3      	ldrh	r3, [r4, #4]
   b5ebc:	9300      	str	r3, [sp, #0]
   b5ebe:	8863      	ldrh	r3, [r4, #2]
   b5ec0:	f000 f9f2 	bl	b62a8 <_Z3mapiiiii>
   b5ec4:	68e1      	ldr	r1, [r4, #12]
   b5ec6:	4401      	add	r1, r0
   b5ec8:	b289      	uxth	r1, r1
   b5eca:	4620      	mov	r0, r4
}
   b5ecc:	b002      	add	sp, #8
   b5ece:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   b5ed2:	f7ff bfd5 	b.w	b5e80 <_ZN5Servo17writeMicrosecondsEt>
   b5ed6:	4608      	mov	r0, r1
   b5ed8:	e7ef      	b.n	b5eba <_ZN5Servo5writeEi+0x18>
	...

000b5edc <_ZN5Servo11resetFieldsEv>:
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
   b5edc:	4a04      	ldr	r2, [pc, #16]	; (b5ef0 <_ZN5Servo11resetFieldsEv+0x14>)
   b5ede:	f44f 6316 	mov.w	r3, #2400	; 0x960
   b5ee2:	e9c0 2300 	strd	r2, r3, [r0]
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
   b5ee6:	23b4      	movs	r3, #180	; 0xb4
   b5ee8:	8103      	strh	r3, [r0, #8]
  this->trim = 0;
   b5eea:	2300      	movs	r3, #0
   b5eec:	60c3      	str	r3, [r0, #12]
}
   b5eee:	4770      	bx	lr
   b5ef0:	0220ffff 	.word	0x0220ffff

000b5ef4 <_ZN5ServoC1Ev>:
Servo::Servo()
   b5ef4:	b508      	push	{r3, lr}
  this->resetFields();
   b5ef6:	f7ff fff1 	bl	b5edc <_ZN5Servo11resetFieldsEv>
}
   b5efa:	bd08      	pop	{r3, pc}

000b5efc <_ZN5Servo6detachEv>:
{
   b5efc:	b510      	push	{r4, lr}
   b5efe:	4604      	mov	r4, r0
   b5f00:	f9b0 0000 	ldrsh.w	r0, [r0]
  if (!this->attached())
   b5f04:	1c43      	adds	r3, r0, #1
   b5f06:	d007      	beq.n	b5f18 <_ZN5Servo6detachEv+0x1c>
  HAL_Servo_Detach(this->pin);
   b5f08:	b280      	uxth	r0, r0
   b5f0a:	f7ff fd05 	bl	b5918 <HAL_Servo_Detach>
  this->resetFields();
   b5f0e:	4620      	mov	r0, r4
   b5f10:	f7ff ffe4 	bl	b5edc <_ZN5Servo11resetFieldsEv>
  return true;
   b5f14:	2001      	movs	r0, #1
}
   b5f16:	bd10      	pop	{r4, pc}
    return false;
   b5f18:	2000      	movs	r0, #0
   b5f1a:	e7fc      	b.n	b5f16 <_ZN5Servo6detachEv+0x1a>

000b5f1c <_ZN5Servo6attachEtttss>:
{
   b5f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5f20:	460d      	mov	r5, r1
   b5f22:	4604      	mov	r4, r0
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   b5f24:	2102      	movs	r1, #2
   b5f26:	4628      	mov	r0, r5
{
   b5f28:	4690      	mov	r8, r2
   b5f2a:	461f      	mov	r7, r3
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   b5f2c:	f7ff fbac 	bl	b5688 <HAL_Validate_Pin_Function>
   b5f30:	2802      	cmp	r0, #2
   b5f32:	d003      	beq.n	b5f3c <_ZN5Servo6attachEtttss+0x20>
    return false;
   b5f34:	2600      	movs	r6, #0
}
   b5f36:	4630      	mov	r0, r6
   b5f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!pinAvailable(pin))
   b5f3c:	4628      	mov	r0, r5
   b5f3e:	f001 f81b 	bl	b6f78 <pinAvailable>
   b5f42:	4606      	mov	r6, r0
   b5f44:	2800      	cmp	r0, #0
   b5f46:	d0f5      	beq.n	b5f34 <_ZN5Servo6attachEtttss+0x18>
  if (this->attached())
   b5f48:	f9b4 3000 	ldrsh.w	r3, [r4]
   b5f4c:	3301      	adds	r3, #1
   b5f4e:	d002      	beq.n	b5f56 <_ZN5Servo6attachEtttss+0x3a>
    this->detach();
   b5f50:	4620      	mov	r0, r4
   b5f52:	f7ff ffd3 	bl	b5efc <_ZN5Servo6detachEv>
  this->minAngle = minAngle;
   b5f56:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
   b5f5a:	80e3      	strh	r3, [r4, #6]
  this->maxAngle = maxAngle;
   b5f5c:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
  this->pin = pin;
   b5f60:	8025      	strh	r5, [r4, #0]
  this->minPW = minPW;
   b5f62:	f8a4 8002 	strh.w	r8, [r4, #2]
  this->maxPW = maxPW;
   b5f66:	80a7      	strh	r7, [r4, #4]
  this->maxAngle = maxAngle;
   b5f68:	8123      	strh	r3, [r4, #8]
  HAL_Servo_Attach(this->pin);
   b5f6a:	4628      	mov	r0, r5
   b5f6c:	f7ff fccc 	bl	b5908 <HAL_Servo_Attach>
  return true;
   b5f70:	e7e1      	b.n	b5f36 <_ZN5Servo6attachEtttss+0x1a>
	...

000b5f74 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5f74:	4b05      	ldr	r3, [pc, #20]	; (b5f8c <_GLOBAL__sub_I_System+0x18>)
   b5f76:	2202      	movs	r2, #2
   b5f78:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5f7a:	4b05      	ldr	r3, [pc, #20]	; (b5f90 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5f7c:	4a05      	ldr	r2, [pc, #20]	; (b5f94 <_GLOBAL__sub_I_System+0x20>)
   b5f7e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5f80:	2000      	movs	r0, #0
   b5f82:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5f86:	f7ff bd17 	b.w	b59b8 <set_system_mode>
   b5f8a:	bf00      	nop
   b5f8c:	2003e6d8 	.word	0x2003e6d8
   b5f90:	2003e6cc 	.word	0x2003e6cc
   b5f94:	ffff0000 	.word	0xffff0000

000b5f98 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b5f98:	b510      	push	{r4, lr}
   b5f9a:	4604      	mov	r4, r0
{
	free(buffer);
   b5f9c:	6800      	ldr	r0, [r0, #0]
   b5f9e:	f7ff fdc7 	bl	b5b30 <free>
}
   b5fa2:	4620      	mov	r0, r4
   b5fa4:	bd10      	pop	{r4, pc}

000b5fa6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b5fa6:	b510      	push	{r4, lr}
   b5fa8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b5faa:	6800      	ldr	r0, [r0, #0]
   b5fac:	b108      	cbz	r0, b5fb2 <_ZN6String10invalidateEv+0xc>
   b5fae:	f7ff fdbf 	bl	b5b30 <free>
	buffer = NULL;
   b5fb2:	2300      	movs	r3, #0
	capacity = len = 0;
   b5fb4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b5fb8:	6023      	str	r3, [r4, #0]
}
   b5fba:	bd10      	pop	{r4, pc}

000b5fbc <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b5fbc:	b538      	push	{r3, r4, r5, lr}
   b5fbe:	4604      	mov	r4, r0
   b5fc0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b5fc2:	6800      	ldr	r0, [r0, #0]
   b5fc4:	3101      	adds	r1, #1
   b5fc6:	f7ff fdbb 	bl	b5b40 <realloc>
	if (newbuffer) {
   b5fca:	b110      	cbz	r0, b5fd2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b5fcc:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b5fd0:	2001      	movs	r0, #1
	}
	return 0;
}
   b5fd2:	bd38      	pop	{r3, r4, r5, pc}

000b5fd4 <_ZN6String7reserveEj>:
{
   b5fd4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b5fd6:	6803      	ldr	r3, [r0, #0]
{
   b5fd8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b5fda:	b123      	cbz	r3, b5fe6 <_ZN6String7reserveEj+0x12>
   b5fdc:	6843      	ldr	r3, [r0, #4]
   b5fde:	428b      	cmp	r3, r1
   b5fe0:	d301      	bcc.n	b5fe6 <_ZN6String7reserveEj+0x12>
   b5fe2:	2001      	movs	r0, #1
}
   b5fe4:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b5fe6:	4620      	mov	r0, r4
   b5fe8:	f7ff ffe8 	bl	b5fbc <_ZN6String12changeBufferEj>
   b5fec:	2800      	cmp	r0, #0
   b5fee:	d0f9      	beq.n	b5fe4 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b5ff0:	68a3      	ldr	r3, [r4, #8]
   b5ff2:	2b00      	cmp	r3, #0
   b5ff4:	d1f5      	bne.n	b5fe2 <_ZN6String7reserveEj+0xe>
   b5ff6:	6822      	ldr	r2, [r4, #0]
   b5ff8:	7013      	strb	r3, [r2, #0]
   b5ffa:	e7f2      	b.n	b5fe2 <_ZN6String7reserveEj+0xe>

000b5ffc <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b5ffc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5ffe:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b6000:	4611      	mov	r1, r2
   b6002:	9201      	str	r2, [sp, #4]
{
   b6004:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b6006:	f7ff ffe5 	bl	b5fd4 <_ZN6String7reserveEj>
   b600a:	9a01      	ldr	r2, [sp, #4]
   b600c:	b928      	cbnz	r0, b601a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b600e:	4620      	mov	r0, r4
   b6010:	f7ff ffc9 	bl	b5fa6 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b6014:	4620      	mov	r0, r4
   b6016:	b003      	add	sp, #12
   b6018:	bd30      	pop	{r4, r5, pc}
	len = length;
   b601a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b601c:	4629      	mov	r1, r5
   b601e:	6820      	ldr	r0, [r4, #0]
   b6020:	f001 fd78 	bl	b7b14 <memcpy>
	buffer[len] = 0;
   b6024:	6822      	ldr	r2, [r4, #0]
   b6026:	68a3      	ldr	r3, [r4, #8]
   b6028:	2100      	movs	r1, #0
   b602a:	54d1      	strb	r1, [r2, r3]
	return *this;
   b602c:	e7f2      	b.n	b6014 <_ZN6String4copyEPKcj+0x18>

000b602e <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b602e:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b6030:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b6032:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b6036:	4604      	mov	r4, r0
	len = 0;
   b6038:	6083      	str	r3, [r0, #8]
	flags = 0;
   b603a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b603c:	b141      	cbz	r1, b6050 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b603e:	4608      	mov	r0, r1
   b6040:	9101      	str	r1, [sp, #4]
   b6042:	f001 fdd0 	bl	b7be6 <strlen>
   b6046:	9901      	ldr	r1, [sp, #4]
   b6048:	4602      	mov	r2, r0
   b604a:	4620      	mov	r0, r4
   b604c:	f7ff ffd6 	bl	b5ffc <_ZN6String4copyEPKcj>
}
   b6050:	4620      	mov	r0, r4
   b6052:	b002      	add	sp, #8
   b6054:	bd10      	pop	{r4, pc}

000b6056 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b6056:	b538      	push	{r3, r4, r5, lr}
   b6058:	4605      	mov	r5, r0
	if (buffer) {
   b605a:	6800      	ldr	r0, [r0, #0]
{
   b605c:	460c      	mov	r4, r1
	if (buffer) {
   b605e:	b168      	cbz	r0, b607c <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b6060:	686a      	ldr	r2, [r5, #4]
   b6062:	688b      	ldr	r3, [r1, #8]
   b6064:	429a      	cmp	r2, r3
   b6066:	d307      	bcc.n	b6078 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b6068:	6809      	ldr	r1, [r1, #0]
   b606a:	f001 fd97 	bl	b7b9c <strcpy>
			len = rhs.len;
   b606e:	68a3      	ldr	r3, [r4, #8]
   b6070:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b6072:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b6074:	60a3      	str	r3, [r4, #8]
}
   b6076:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b6078:	f7ff fd5a 	bl	b5b30 <free>
	buffer = rhs.buffer;
   b607c:	6823      	ldr	r3, [r4, #0]
   b607e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b6080:	6863      	ldr	r3, [r4, #4]
   b6082:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b6084:	68a3      	ldr	r3, [r4, #8]
   b6086:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b6088:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b608a:	e9c4 3300 	strd	r3, r3, [r4]
   b608e:	e7f1      	b.n	b6074 <_ZN6String4moveERS_+0x1e>

000b6090 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   b6090:	4288      	cmp	r0, r1
{
   b6092:	b510      	push	{r4, lr}
   b6094:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   b6096:	d001      	beq.n	b609c <_ZN6StringaSEOS_+0xc>
   b6098:	f7ff ffdd 	bl	b6056 <_ZN6String4moveERS_>
	return *this;
}
   b609c:	4620      	mov	r0, r4
   b609e:	bd10      	pop	{r4, pc}

000b60a0 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   b60a0:	b40e      	push	{r1, r2, r3}
   b60a2:	b570      	push	{r4, r5, r6, lr}
   b60a4:	b087      	sub	sp, #28
   b60a6:	ad0b      	add	r5, sp, #44	; 0x2c
   b60a8:	4604      	mov	r4, r0
   b60aa:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b60ae:	9201      	str	r2, [sp, #4]
   b60b0:	462b      	mov	r3, r5
   b60b2:	2105      	movs	r1, #5
   b60b4:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   b60b6:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b60b8:	f7ff fd4a 	bl	b5b50 <vsnprintf>
    va_end(marker);

    String result;
   b60bc:	490b      	ldr	r1, [pc, #44]	; (b60ec <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b60be:	4606      	mov	r6, r0
    String result;
   b60c0:	4620      	mov	r0, r4
   b60c2:	f7ff ffb4 	bl	b602e <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   b60c6:	4631      	mov	r1, r6
   b60c8:	4620      	mov	r0, r4
   b60ca:	f7ff ff83 	bl	b5fd4 <_ZN6String7reserveEj>
    if (result.buffer) {
   b60ce:	6820      	ldr	r0, [r4, #0]
   b60d0:	b130      	cbz	r0, b60e0 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b60d2:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   b60d4:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b60d6:	462b      	mov	r3, r5
   b60d8:	1c71      	adds	r1, r6, #1
   b60da:	f7ff fd39 	bl	b5b50 <vsnprintf>
        va_end(marker);
        result.len = n;
   b60de:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   b60e0:	4620      	mov	r0, r4
   b60e2:	b007      	add	sp, #28
   b60e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b60e8:	b003      	add	sp, #12
   b60ea:	4770      	bx	lr
   b60ec:	000b7d62 	.word	0x000b7d62

000b60f0 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b60f0:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b60f2:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b60f4:	4604      	mov	r4, r0
      if (_M_manager)
   b60f6:	b113      	cbz	r3, b60fe <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b60f8:	2203      	movs	r2, #3
   b60fa:	4601      	mov	r1, r0
   b60fc:	4798      	blx	r3
    }
   b60fe:	4620      	mov	r0, r4
   b6100:	bd10      	pop	{r4, pc}

000b6102 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b6102:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b6104:	6843      	ldr	r3, [r0, #4]
   b6106:	3b01      	subs	r3, #1
    {
   b6108:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b610a:	6043      	str	r3, [r0, #4]
   b610c:	b963      	cbnz	r3, b6128 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b610e:	6803      	ldr	r3, [r0, #0]
   b6110:	689b      	ldr	r3, [r3, #8]
   b6112:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b6114:	68a3      	ldr	r3, [r4, #8]
   b6116:	3b01      	subs	r3, #1
   b6118:	60a3      	str	r3, [r4, #8]
   b611a:	b92b      	cbnz	r3, b6128 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b611c:	6823      	ldr	r3, [r4, #0]
   b611e:	4620      	mov	r0, r4
   b6120:	68db      	ldr	r3, [r3, #12]
    }
   b6122:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b6126:	4718      	bx	r3
    }
   b6128:	bd10      	pop	{r4, pc}

000b612a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b612a:	b510      	push	{r4, lr}
   b612c:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b612e:	6800      	ldr	r0, [r0, #0]
   b6130:	b108      	cbz	r0, b6136 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b6132:	f7ff ffe6 	bl	b6102 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b6136:	4620      	mov	r0, r4
   b6138:	bd10      	pop	{r4, pc}

000b613a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b613a:	b513      	push	{r0, r1, r4, lr}
   b613c:	460b      	mov	r3, r1
   b613e:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6140:	e9d0 0100 	ldrd	r0, r1, [r0]
   b6144:	466c      	mov	r4, sp
   b6146:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b614a:	e893 0003 	ldmia.w	r3, {r0, r1}
   b614e:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b6152:	e894 0003 	ldmia.w	r4, {r0, r1}
   b6156:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b615a:	b002      	add	sp, #8
   b615c:	bd10      	pop	{r4, pc}
	...

000b6160 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b6160:	4802      	ldr	r0, [pc, #8]	; (b616c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b6162:	2300      	movs	r3, #0
   b6164:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b6166:	f7ff bacf 	b.w	b5708 <os_mutex_recursive_create>
   b616a:	bf00      	nop
   b616c:	2003e6dc 	.word	0x2003e6dc

000b6170 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6172:	4606      	mov	r6, r0
   b6174:	460d      	mov	r5, r1
  size_t n = 0;
   b6176:	188f      	adds	r7, r1, r2
   b6178:	2400      	movs	r4, #0
  while (size--) {
   b617a:	42bd      	cmp	r5, r7
   b617c:	d00c      	beq.n	b6198 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b617e:	6833      	ldr	r3, [r6, #0]
   b6180:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6184:	689b      	ldr	r3, [r3, #8]
   b6186:	4630      	mov	r0, r6
   b6188:	4798      	blx	r3
     if (chunk>=0)
   b618a:	1e03      	subs	r3, r0, #0
   b618c:	db01      	blt.n	b6192 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b618e:	441c      	add	r4, r3
  while (size--) {
   b6190:	e7f3      	b.n	b617a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b6192:	2c00      	cmp	r4, #0
   b6194:	bf08      	it	eq
   b6196:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6198:	4620      	mov	r0, r4
   b619a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b619c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b619c:	b513      	push	{r0, r1, r4, lr}
   b619e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b61a0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b61a2:	b159      	cbz	r1, b61bc <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b61a4:	9101      	str	r1, [sp, #4]
   b61a6:	f001 fd1e 	bl	b7be6 <strlen>
   b61aa:	6823      	ldr	r3, [r4, #0]
   b61ac:	9901      	ldr	r1, [sp, #4]
   b61ae:	68db      	ldr	r3, [r3, #12]
   b61b0:	4602      	mov	r2, r0
   b61b2:	4620      	mov	r0, r4
    }
   b61b4:	b002      	add	sp, #8
   b61b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b61ba:	4718      	bx	r3
    }
   b61bc:	b002      	add	sp, #8
   b61be:	bd10      	pop	{r4, pc}

000b61c0 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b61c0:	b508      	push	{r3, lr}
  return write(str);
   b61c2:	f7ff ffeb 	bl	b619c <_ZN5Print5writeEPKc>
}
   b61c6:	bd08      	pop	{r3, pc}

000b61c8 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b61c8:	6803      	ldr	r3, [r0, #0]
   b61ca:	689b      	ldr	r3, [r3, #8]
   b61cc:	4718      	bx	r3

000b61ce <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b61ce:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b61d0:	210d      	movs	r1, #13
{
   b61d2:	4605      	mov	r5, r0
  size_t n = print('\r');
   b61d4:	f7ff fff8 	bl	b61c8 <_ZN5Print5printEc>
  n += print('\n');
   b61d8:	210a      	movs	r1, #10
  size_t n = print('\r');
   b61da:	4604      	mov	r4, r0
  n += print('\n');
   b61dc:	4628      	mov	r0, r5
   b61de:	f7ff fff3 	bl	b61c8 <_ZN5Print5printEc>
  return n;
}
   b61e2:	4420      	add	r0, r4
   b61e4:	bd38      	pop	{r3, r4, r5, pc}

000b61e6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b61e6:	b530      	push	{r4, r5, lr}
   b61e8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b61ea:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b61ec:	2a01      	cmp	r2, #1
  *str = '\0';
   b61ee:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b61f2:	bf98      	it	ls
   b61f4:	220a      	movls	r2, #10
   b61f6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b61f8:	460d      	mov	r5, r1
   b61fa:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b61fe:	fb01 5312 	mls	r3, r1, r2, r5
   b6202:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6206:	2b09      	cmp	r3, #9
   b6208:	bf94      	ite	ls
   b620a:	3330      	addls	r3, #48	; 0x30
   b620c:	3337      	addhi	r3, #55	; 0x37
   b620e:	b2db      	uxtb	r3, r3
  } while(n);
   b6210:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6212:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b6216:	d9ef      	bls.n	b61f8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6218:	4621      	mov	r1, r4
   b621a:	f7ff ffbf 	bl	b619c <_ZN5Print5writeEPKc>
}
   b621e:	b00b      	add	sp, #44	; 0x2c
   b6220:	bd30      	pop	{r4, r5, pc}

000b6222 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b6222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6226:	b086      	sub	sp, #24
   b6228:	af00      	add	r7, sp, #0
   b622a:	4605      	mov	r5, r0
   b622c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b622e:	1d38      	adds	r0, r7, #4
   b6230:	2114      	movs	r1, #20
{
   b6232:	4614      	mov	r4, r2
    va_copy(args2, args);
   b6234:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b6236:	f7ff fc8b 	bl	b5b50 <vsnprintf>

    if (n<bufsize)
   b623a:	2813      	cmp	r0, #19
   b623c:	d80e      	bhi.n	b625c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b623e:	1d39      	adds	r1, r7, #4
   b6240:	4628      	mov	r0, r5
   b6242:	f7ff ffab 	bl	b619c <_ZN5Print5writeEPKc>
   b6246:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b6248:	b11e      	cbz	r6, b6252 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b624a:	4628      	mov	r0, r5
   b624c:	f7ff ffbf 	bl	b61ce <_ZN5Print7printlnEv>
   b6250:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b6252:	4620      	mov	r0, r4
   b6254:	3718      	adds	r7, #24
   b6256:	46bd      	mov	sp, r7
   b6258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b625c:	f100 0308 	add.w	r3, r0, #8
   b6260:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b6264:	46e8      	mov	r8, sp
        char bigger[n+1];
   b6266:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b626a:	4622      	mov	r2, r4
   b626c:	1c41      	adds	r1, r0, #1
   b626e:	683b      	ldr	r3, [r7, #0]
   b6270:	4668      	mov	r0, sp
   b6272:	f7ff fc6d 	bl	b5b50 <vsnprintf>
  return write(str);
   b6276:	4669      	mov	r1, sp
   b6278:	4628      	mov	r0, r5
   b627a:	f7ff ff8f 	bl	b619c <_ZN5Print5writeEPKc>
   b627e:	4604      	mov	r4, r0
   b6280:	46c5      	mov	sp, r8
   b6282:	e7e1      	b.n	b6248 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b6284 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b6284:	4b01      	ldr	r3, [pc, #4]	; (b628c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b6286:	4a02      	ldr	r2, [pc, #8]	; (b6290 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b6288:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b628a:	4770      	bx	lr
   b628c:	2003e6e0 	.word	0x2003e6e0
   b6290:	000b83d0 	.word	0x000b83d0

000b6294 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b6294:	4b02      	ldr	r3, [pc, #8]	; (b62a0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b6296:	681a      	ldr	r2, [r3, #0]
   b6298:	4b02      	ldr	r3, [pc, #8]	; (b62a4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b629a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b629c:	4770      	bx	lr
   b629e:	bf00      	nop
   b62a0:	2003e598 	.word	0x2003e598
   b62a4:	2003e6e4 	.word	0x2003e6e4

000b62a8 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   b62a8:	428a      	cmp	r2, r1
{
   b62aa:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   b62ac:	d007      	beq.n	b62be <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   b62ae:	1a44      	subs	r4, r0, r1
   b62b0:	9802      	ldr	r0, [sp, #8]
   b62b2:	1ac0      	subs	r0, r0, r3
   b62b4:	4344      	muls	r4, r0
   b62b6:	1a50      	subs	r0, r2, r1
   b62b8:	fb94 f0f0 	sdiv	r0, r4, r0
   b62bc:	4418      	add	r0, r3
}
   b62be:	bd10      	pop	{r4, pc}

000b62c0 <_Z3mapddddd>:

double map(double value, double fromStart, double fromEnd, double toStart, double toEnd)
{
   b62c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b62c4:	ec55 4b11 	vmov	r4, r5, d1
   b62c8:	ec57 6b12 	vmov	r6, r7, d2
   b62cc:	b085      	sub	sp, #20
    if (fromEnd == fromStart) {
   b62ce:	ee11 2a10 	vmov	r2, s2
   b62d2:	ee12 0a10 	vmov	r0, s4
   b62d6:	462b      	mov	r3, r5
   b62d8:	4639      	mov	r1, r7
{
   b62da:	ed8d 0b02 	vstr	d0, [sp, #8]
   b62de:	ed8d 4b00 	vstr	d4, [sp]
   b62e2:	ec5b ab13 	vmov	sl, fp, d3
    if (fromEnd == fromStart) {
   b62e6:	f001 fb8d 	bl	b7a04 <__aeabi_dcmpeq>
   b62ea:	ed9d 0b02 	vldr	d0, [sp, #8]
   b62ee:	bb38      	cbnz	r0, b6340 <_Z3mapddddd+0x80>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   b62f0:	ec51 0b10 	vmov	r0, r1, d0
   b62f4:	4622      	mov	r2, r4
   b62f6:	462b      	mov	r3, r5
   b62f8:	f000 ff64 	bl	b71c4 <__aeabi_dsub>
   b62fc:	4652      	mov	r2, sl
   b62fe:	4680      	mov	r8, r0
   b6300:	4689      	mov	r9, r1
   b6302:	465b      	mov	r3, fp
   b6304:	e9dd 0100 	ldrd	r0, r1, [sp]
   b6308:	f000 ff5c 	bl	b71c4 <__aeabi_dsub>
   b630c:	4602      	mov	r2, r0
   b630e:	460b      	mov	r3, r1
   b6310:	4640      	mov	r0, r8
   b6312:	4649      	mov	r1, r9
   b6314:	f001 f90e 	bl	b7534 <__aeabi_dmul>
   b6318:	4622      	mov	r2, r4
   b631a:	4680      	mov	r8, r0
   b631c:	4689      	mov	r9, r1
   b631e:	462b      	mov	r3, r5
   b6320:	4630      	mov	r0, r6
   b6322:	4639      	mov	r1, r7
   b6324:	f000 ff4e 	bl	b71c4 <__aeabi_dsub>
   b6328:	4602      	mov	r2, r0
   b632a:	460b      	mov	r3, r1
   b632c:	4640      	mov	r0, r8
   b632e:	4649      	mov	r1, r9
   b6330:	f001 fa2a 	bl	b7788 <__aeabi_ddiv>
   b6334:	4652      	mov	r2, sl
   b6336:	465b      	mov	r3, fp
   b6338:	f000 ff46 	bl	b71c8 <__adddf3>
   b633c:	ec41 0b10 	vmov	d0, r0, r1
}
   b6340:	b005      	add	sp, #20
   b6342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b6346 <delay>:

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b6346:	2100      	movs	r1, #0
   b6348:	f7ff bb3e 	b.w	b59c8 <system_delay_ms>

000b634c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b634c:	4b01      	ldr	r3, [pc, #4]	; (b6354 <_GLOBAL__sub_I_RGB+0x8>)
   b634e:	2200      	movs	r2, #0
   b6350:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b6352:	4770      	bx	lr
   b6354:	2003e6e8 	.word	0x2003e6e8

000b6358 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b6358:	4b01      	ldr	r3, [pc, #4]	; (b6360 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b635a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b635c:	4770      	bx	lr
   b635e:	bf00      	nop
   b6360:	2003e59c 	.word	0x2003e59c

000b6364 <serialEventRun>:
{
   b6364:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b6366:	4b0b      	ldr	r3, [pc, #44]	; (b6394 <serialEventRun+0x30>)
   b6368:	b143      	cbz	r3, b637c <serialEventRun+0x18>
   b636a:	f000 fbff 	bl	b6b6c <_Z16_fetch_usbserialv>
   b636e:	6803      	ldr	r3, [r0, #0]
   b6370:	691b      	ldr	r3, [r3, #16]
   b6372:	4798      	blx	r3
   b6374:	2800      	cmp	r0, #0
   b6376:	dd01      	ble.n	b637c <serialEventRun+0x18>
        serialEvent();
   b6378:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b637c:	4b06      	ldr	r3, [pc, #24]	; (b6398 <serialEventRun+0x34>)
   b637e:	b143      	cbz	r3, b6392 <serialEventRun+0x2e>
   b6380:	f000 feb2 	bl	b70e8 <_Z22__fetch_global_Serial1v>
   b6384:	6803      	ldr	r3, [r0, #0]
   b6386:	691b      	ldr	r3, [r3, #16]
   b6388:	4798      	blx	r3
   b638a:	2800      	cmp	r0, #0
   b638c:	dd01      	ble.n	b6392 <serialEventRun+0x2e>
        serialEvent1();
   b638e:	f3af 8000 	nop.w
}
   b6392:	bd08      	pop	{r3, pc}
	...

000b639c <_post_loop>:
{
   b639c:	b508      	push	{r3, lr}
	serialEventRun();
   b639e:	f7ff ffe1 	bl	b6364 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b63a2:	f7ff f9a9 	bl	b56f8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b63a6:	4b01      	ldr	r3, [pc, #4]	; (b63ac <_post_loop+0x10>)
   b63a8:	6018      	str	r0, [r3, #0]
}
   b63aa:	bd08      	pop	{r3, pc}
   b63ac:	2003e740 	.word	0x2003e740

000b63b0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b63b0:	4805      	ldr	r0, [pc, #20]	; (b63c8 <_Z33system_initialize_user_backup_ramv+0x18>)
   b63b2:	4a06      	ldr	r2, [pc, #24]	; (b63cc <_Z33system_initialize_user_backup_ramv+0x1c>)
   b63b4:	4906      	ldr	r1, [pc, #24]	; (b63d0 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b63b6:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b63b8:	1a12      	subs	r2, r2, r0
   b63ba:	f001 fbab 	bl	b7b14 <memcpy>
    __backup_sram_signature = signature;
   b63be:	4b05      	ldr	r3, [pc, #20]	; (b63d4 <_Z33system_initialize_user_backup_ramv+0x24>)
   b63c0:	4a05      	ldr	r2, [pc, #20]	; (b63d8 <_Z33system_initialize_user_backup_ramv+0x28>)
   b63c2:	601a      	str	r2, [r3, #0]
}
   b63c4:	bd08      	pop	{r3, pc}
   b63c6:	bf00      	nop
   b63c8:	2003f400 	.word	0x2003f400
   b63cc:	2003f404 	.word	0x2003f404
   b63d0:	000b8604 	.word	0x000b8604
   b63d4:	2003f400 	.word	0x2003f400
   b63d8:	9a271c1e 	.word	0x9a271c1e

000b63dc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b63dc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b63de:	2300      	movs	r3, #0
   b63e0:	9300      	str	r3, [sp, #0]
   b63e2:	461a      	mov	r2, r3
   b63e4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b63e8:	f7ff fb10 	bl	b5a0c <system_ctrl_set_result>
}
   b63ec:	b003      	add	sp, #12
   b63ee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b63f4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b63f4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b63f6:	8843      	ldrh	r3, [r0, #2]
   b63f8:	2b0a      	cmp	r3, #10
   b63fa:	d008      	beq.n	b640e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b63fc:	2b50      	cmp	r3, #80	; 0x50
   b63fe:	d10b      	bne.n	b6418 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b6400:	4b09      	ldr	r3, [pc, #36]	; (b6428 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b6402:	681b      	ldr	r3, [r3, #0]
   b6404:	b14b      	cbz	r3, b641a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b6406:	b003      	add	sp, #12
   b6408:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b640c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b640e:	f7ff ffe5 	bl	b63dc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b6412:	b003      	add	sp, #12
   b6414:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6418:	2300      	movs	r3, #0
   b641a:	9300      	str	r3, [sp, #0]
   b641c:	461a      	mov	r2, r3
   b641e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6422:	f7ff faf3 	bl	b5a0c <system_ctrl_set_result>
}
   b6426:	e7f4      	b.n	b6412 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b6428:	2003e6fc 	.word	0x2003e6fc

000b642c <module_user_init_hook>:
{
   b642c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b642e:	4812      	ldr	r0, [pc, #72]	; (b6478 <module_user_init_hook+0x4c>)
   b6430:	2100      	movs	r1, #0
   b6432:	f7ff fbad 	bl	b5b90 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b6436:	4b11      	ldr	r3, [pc, #68]	; (b647c <module_user_init_hook+0x50>)
   b6438:	681a      	ldr	r2, [r3, #0]
   b643a:	4b11      	ldr	r3, [pc, #68]	; (b6480 <module_user_init_hook+0x54>)
   b643c:	429a      	cmp	r2, r3
   b643e:	4b11      	ldr	r3, [pc, #68]	; (b6484 <module_user_init_hook+0x58>)
   b6440:	bf0c      	ite	eq
   b6442:	2201      	moveq	r2, #1
   b6444:	2200      	movne	r2, #0
   b6446:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b6448:	d001      	beq.n	b644e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b644a:	f7ff ffb1 	bl	b63b0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b644e:	f7ff f943 	bl	b56d8 <HAL_RNG_GetRandomNumber>
   b6452:	4604      	mov	r4, r0
    srand(seed);
   b6454:	f001 fb74 	bl	b7b40 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b6458:	4b0b      	ldr	r3, [pc, #44]	; (b6488 <module_user_init_hook+0x5c>)
   b645a:	b113      	cbz	r3, b6462 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b645c:	4620      	mov	r0, r4
   b645e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b6462:	2100      	movs	r1, #0
   b6464:	4808      	ldr	r0, [pc, #32]	; (b6488 <module_user_init_hook+0x5c>)
   b6466:	f7ff fb53 	bl	b5b10 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b646a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b646e:	4807      	ldr	r0, [pc, #28]	; (b648c <module_user_init_hook+0x60>)
   b6470:	2100      	movs	r1, #0
   b6472:	f7ff bac1 	b.w	b59f8 <system_ctrl_set_app_request_handler>
   b6476:	bf00      	nop
   b6478:	000b6359 	.word	0x000b6359
   b647c:	2003f400 	.word	0x2003f400
   b6480:	9a271c1e 	.word	0x9a271c1e
   b6484:	2003e6f8 	.word	0x2003e6f8
   b6488:	00000000 	.word	0x00000000
   b648c:	000b63f5 	.word	0x000b63f5

000b6490 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b6490:	4770      	bx	lr

000b6492 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b6492:	2000      	movs	r0, #0
   b6494:	4770      	bx	lr

000b6496 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b6496:	b510      	push	{r4, lr}
   b6498:	2110      	movs	r1, #16
   b649a:	4604      	mov	r4, r0
   b649c:	f7fd fdff 	bl	b409e <_ZdlPvj>
   b64a0:	4620      	mov	r0, r4
   b64a2:	bd10      	pop	{r4, pc}

000b64a4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b64a4:	b508      	push	{r3, lr}
      { delete this; }
   b64a6:	f7ff fff6 	bl	b6496 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b64aa:	bd08      	pop	{r3, pc}

000b64ac <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b64ac:	b530      	push	{r4, r5, lr}
        type_(type) {
   b64ae:	2200      	movs	r2, #0
   b64b0:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b64b4:	6002      	str	r2, [r0, #0]
   b64b6:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b64b8:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b64ba:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b64bc:	680c      	ldr	r4, [r1, #0]
   b64be:	8085      	strh	r5, [r0, #4]
   b64c0:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b64c2:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b64c4:	bd30      	pop	{r4, r5, pc}

000b64c6 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b64c6:	b510      	push	{r4, lr}
   b64c8:	4604      	mov	r4, r0
    free((void*)msg_);
   b64ca:	6800      	ldr	r0, [r0, #0]
   b64cc:	f7ff fb30 	bl	b5b30 <free>
}
   b64d0:	4620      	mov	r0, r4
   b64d2:	bd10      	pop	{r4, pc}

000b64d4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b64d4:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b64d6:	68c4      	ldr	r4, [r0, #12]
   b64d8:	b1f4      	cbz	r4, b6518 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b64da:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b64dc:	2b02      	cmp	r3, #2
   b64de:	d103      	bne.n	b64e8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b64e0:	f104 000c 	add.w	r0, r4, #12
   b64e4:	f7ff ffef 	bl	b64c6 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b64e8:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b64ea:	b135      	cbz	r5, b64fa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b64ec:	4628      	mov	r0, r5
   b64ee:	f7ff fdff 	bl	b60f0 <_ZNSt14_Function_baseD1Ev>
   b64f2:	2110      	movs	r1, #16
   b64f4:	4628      	mov	r0, r5
   b64f6:	f7fd fdd2 	bl	b409e <_ZdlPvj>
   b64fa:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b64fc:	b135      	cbz	r5, b650c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b64fe:	4628      	mov	r0, r5
   b6500:	f7ff fdf6 	bl	b60f0 <_ZNSt14_Function_baseD1Ev>
   b6504:	2110      	movs	r1, #16
   b6506:	4628      	mov	r0, r5
   b6508:	f7fd fdc9 	bl	b409e <_ZdlPvj>
   b650c:	4620      	mov	r0, r4
   b650e:	2114      	movs	r1, #20
   b6510:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b6514:	f7fd bdc3 	b.w	b409e <_ZdlPvj>
   b6518:	bd38      	pop	{r3, r4, r5, pc}

000b651a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
   b651a:	680b      	ldr	r3, [r1, #0]
   b651c:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b651e:	684b      	ldr	r3, [r1, #4]
   b6520:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b6522:	b113      	cbz	r3, b652a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b6524:	685a      	ldr	r2, [r3, #4]
   b6526:	3201      	adds	r2, #1
   b6528:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b652a:	4770      	bx	lr

000b652c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b652c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b652e:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b6530:	4668      	mov	r0, sp
   b6532:	460d      	mov	r5, r1
   b6534:	f7ff fff1 	bl	b651a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6538:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b653a:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b653c:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b653e:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b6540:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b6542:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b6544:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b6546:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b6548:	f7ff fdef 	bl	b612a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b654c:	b135      	cbz	r5, b655c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b654e:	1d28      	adds	r0, r5, #4
   b6550:	f7ff fdeb 	bl	b612a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6554:	2108      	movs	r1, #8
   b6556:	4628      	mov	r0, r5
   b6558:	f7fd fda1 	bl	b409e <_ZdlPvj>
        return p;
    }
   b655c:	4620      	mov	r0, r4
   b655e:	b003      	add	sp, #12
   b6560:	bd30      	pop	{r4, r5, pc}

000b6562 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b6562:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b6564:	b510      	push	{r4, lr}
      if (_M_empty())
   b6566:	b90a      	cbnz	r2, b656c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b6568:	f000 fe24 	bl	b71b4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   b656c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6570:	68c3      	ldr	r3, [r0, #12]
   b6572:	4718      	bx	r3

000b6574 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6574:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b6576:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b6578:	f100 0110 	add.w	r1, r0, #16
   b657c:	f7ff fff1 	bl	b6562 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b6580:	bd08      	pop	{r3, pc}

000b6582 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b6582:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b6584:	b510      	push	{r4, lr}
      if (_M_empty())
   b6586:	b90a      	cbnz	r2, b658c <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b6588:	f000 fe14 	bl	b71b4 <_ZSt25__throw_bad_function_callv>
    }
   b658c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6590:	68c3      	ldr	r3, [r0, #12]
   b6592:	4718      	bx	r3

000b6594 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6594:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b6596:	6800      	ldr	r0, [r0, #0]
   b6598:	f100 0110 	add.w	r1, r0, #16
   b659c:	f7ff fff1 	bl	b6582 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b65a0:	bd08      	pop	{r3, pc}
	...

000b65a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b65a4:	b538      	push	{r3, r4, r5, lr}
   b65a6:	2300      	movs	r3, #0
   b65a8:	4604      	mov	r4, r0
   b65aa:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b65ac:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b65ae:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b65b0:	f7fd fd71 	bl	b4096 <_Znwj>
   b65b4:	b128      	cbz	r0, b65c2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b65b6:	2301      	movs	r3, #1
   b65b8:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b65bc:	4b02      	ldr	r3, [pc, #8]	; (b65c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b65be:	6003      	str	r3, [r0, #0]
   b65c0:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b65c2:	6020      	str	r0, [r4, #0]
	}
   b65c4:	4620      	mov	r0, r4
   b65c6:	bd38      	pop	{r3, r4, r5, pc}
   b65c8:	000b83f8 	.word	0x000b83f8

000b65cc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b65cc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b65ce:	2300      	movs	r3, #0
   b65d0:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b65d2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b65d4:	4604      	mov	r4, r0
   b65d6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b65d8:	b12b      	cbz	r3, b65e6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b65da:	2202      	movs	r2, #2
   b65dc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b65de:	68eb      	ldr	r3, [r5, #12]
   b65e0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b65e2:	68ab      	ldr	r3, [r5, #8]
   b65e4:	60a3      	str	r3, [r4, #8]
    }
   b65e6:	4620      	mov	r0, r4
   b65e8:	bd38      	pop	{r3, r4, r5, pc}
	...

000b65ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b65ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   b65ee:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b65f0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b65f2:	4668      	mov	r0, sp
   b65f4:	f7ff ff5a 	bl	b64ac <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b65f8:	f04f 0302 	mov.w	r3, #2
   b65fc:	e8d4 2f4f 	ldrexb	r2, [r4]
   b6600:	2a00      	cmp	r2, #0
   b6602:	d103      	bne.n	b660c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b6604:	e8c4 3f41 	strexb	r1, r3, [r4]
   b6608:	2900      	cmp	r1, #0
   b660a:	d1f7      	bne.n	b65fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b660c:	d125      	bne.n	b665a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b660e:	f104 050c 	add.w	r5, r4, #12
   b6612:	4669      	mov	r1, sp
   b6614:	4628      	mov	r0, r5
   b6616:	f7ff ff49 	bl	b64ac <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b661a:	f3bf 8f5b 	dmb	ish
   b661e:	2301      	movs	r3, #1
   b6620:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b6622:	2000      	movs	r0, #0
   b6624:	f104 0308 	add.w	r3, r4, #8
   b6628:	f3bf 8f5b 	dmb	ish
   b662c:	e853 6f00 	ldrex	r6, [r3]
   b6630:	e843 0200 	strex	r2, r0, [r3]
   b6634:	2a00      	cmp	r2, #0
   b6636:	d1f9      	bne.n	b662c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b6638:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b663c:	b16e      	cbz	r6, b665a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b663e:	f7ff f9cb 	bl	b59d8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b6642:	b178      	cbz	r0, b6664 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b6644:	4629      	mov	r1, r5
   b6646:	4630      	mov	r0, r6
   b6648:	f7ff ff8b 	bl	b6562 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b664c:	4630      	mov	r0, r6
   b664e:	f7ff fd4f 	bl	b60f0 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b6652:	2110      	movs	r1, #16
   b6654:	4630      	mov	r0, r6
   b6656:	f7fd fd22 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   b665a:	4668      	mov	r0, sp
   b665c:	f7ff ff33 	bl	b64c6 <_ZN8particle5ErrorD1Ev>
    }
   b6660:	b009      	add	sp, #36	; 0x24
   b6662:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b6664:	4631      	mov	r1, r6
   b6666:	a802      	add	r0, sp, #8
   b6668:	f7ff ffb0 	bl	b65cc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b666c:	68e0      	ldr	r0, [r4, #12]
   b666e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6672:	b108      	cbz	r0, b6678 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b6674:	f001 fa9a 	bl	b7bac <strdup>
        type_(type) {
   b6678:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b667a:	2010      	movs	r0, #16
   b667c:	f8ad 501c 	strh.w	r5, [sp, #28]
   b6680:	f7fd fd09 	bl	b4096 <_Znwj>
   b6684:	4605      	mov	r5, r0
   b6686:	b1e8      	cbz	r0, b66c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b6688:	2700      	movs	r7, #0
   b668a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b668c:	2018      	movs	r0, #24
   b668e:	f7fd fd02 	bl	b4096 <_Znwj>
   b6692:	4604      	mov	r4, r0
   b6694:	b188      	cbz	r0, b66ba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b6696:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b6698:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b669a:	a802      	add	r0, sp, #8
   b669c:	f7ff fd4d 	bl	b613a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b66a0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b66a2:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b66a4:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b66a6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b66a8:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b66aa:	a906      	add	r1, sp, #24
   b66ac:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b66ae:	60e3      	str	r3, [r4, #12]
   b66b0:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b66b4:	9205      	str	r2, [sp, #20]
   b66b6:	f7ff fef9 	bl	b64ac <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b66ba:	4b08      	ldr	r3, [pc, #32]	; (b66dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b66bc:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b66be:	4b08      	ldr	r3, [pc, #32]	; (b66e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b66c0:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b66c2:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b66c4:	a806      	add	r0, sp, #24
   b66c6:	f7ff fefe 	bl	b64c6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b66ca:	a802      	add	r0, sp, #8
   b66cc:	f7ff fd10 	bl	b60f0 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b66d0:	2200      	movs	r2, #0
   b66d2:	4629      	mov	r1, r5
   b66d4:	4803      	ldr	r0, [pc, #12]	; (b66e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b66d6:	f7ff f987 	bl	b59e8 <application_thread_invoke>
   b66da:	e7b7      	b.n	b664c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b66dc:	000b6575 	.word	0x000b6575
   b66e0:	000b67f9 	.word	0x000b67f9
   b66e4:	000b6c5d 	.word	0x000b6c5d

000b66e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b66e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b66ec:	b08b      	sub	sp, #44	; 0x2c
   b66ee:	4605      	mov	r5, r0
   b66f0:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b66f4:	460f      	mov	r7, r1
   b66f6:	4690      	mov	r8, r2
   b66f8:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b66fa:	f7ff f9f9 	bl	b5af0 <spark_cloud_flag_connected>
   b66fe:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b6700:	4683      	mov	fp, r0
   b6702:	bb38      	cbnz	r0, b6754 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b6704:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b6708:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b670a:	a905      	add	r1, sp, #20
   b670c:	4630      	mov	r0, r6
   b670e:	f8ad 3018 	strh.w	r3, [sp, #24]
   b6712:	f7ff fecb 	bl	b64ac <_ZN8particle5ErrorC1EOS0_>
   b6716:	2014      	movs	r0, #20
   b6718:	f7fd fcbd 	bl	b4096 <_Znwj>
   b671c:	4604      	mov	r4, r0
   b671e:	b148      	cbz	r0, b6734 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b6720:	2302      	movs	r3, #2
   b6722:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b6724:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b6726:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b672a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b672c:	4631      	mov	r1, r6
   b672e:	300c      	adds	r0, #12
   b6730:	f7ff febc 	bl	b64ac <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6734:	4628      	mov	r0, r5
	: __shared_count(__p)
   b6736:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6738:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b673c:	f7ff ff32 	bl	b65a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b6740:	4630      	mov	r0, r6
   b6742:	f7ff fec0 	bl	b64c6 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b6746:	a805      	add	r0, sp, #20
   b6748:	f7ff febd 	bl	b64c6 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b674c:	4628      	mov	r0, r5
   b674e:	b00b      	add	sp, #44	; 0x2c
   b6750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b6754:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b6756:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b6758:	2014      	movs	r0, #20
   b675a:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b675e:	9307      	str	r3, [sp, #28]
   b6760:	f7fd fc99 	bl	b4096 <_Znwj>
   b6764:	4601      	mov	r1, r0
   b6766:	b118      	cbz	r0, b6770 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b6768:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b676c:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b676e:	7044      	strb	r4, [r0, #1]
   b6770:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6772:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b6774:	f7ff ff16 	bl	b65a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b6778:	4b1e      	ldr	r3, [pc, #120]	; (b67f4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b677a:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b677c:	2008      	movs	r0, #8
   b677e:	f7fd fc8a 	bl	b4096 <_Znwj>
   b6782:	4604      	mov	r4, r0
   b6784:	b110      	cbz	r0, b678c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b6786:	a903      	add	r1, sp, #12
   b6788:	f7ff fec7 	bl	b651a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b678c:	9600      	str	r6, [sp, #0]
   b678e:	fa5f f38a 	uxtb.w	r3, sl
   b6792:	464a      	mov	r2, r9
   b6794:	4641      	mov	r1, r8
   b6796:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b6798:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b679a:	f7ff f9b1 	bl	b5b00 <spark_send_event>
   b679e:	b9b8      	cbnz	r0, b67d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b67a0:	9b03      	ldr	r3, [sp, #12]
   b67a2:	785b      	ldrb	r3, [r3, #1]
   b67a4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b67a8:	b993      	cbnz	r3, b67d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b67aa:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b67ae:	a905      	add	r1, sp, #20
   b67b0:	a803      	add	r0, sp, #12
   b67b2:	9205      	str	r2, [sp, #20]
   b67b4:	f8ad 3018 	strh.w	r3, [sp, #24]
   b67b8:	f7ff ff18 	bl	b65ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b67bc:	a805      	add	r0, sp, #20
   b67be:	f7ff fe82 	bl	b64c6 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b67c2:	a805      	add	r0, sp, #20
   b67c4:	9909      	ldr	r1, [sp, #36]	; 0x24
   b67c6:	f7ff feb1 	bl	b652c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b67ca:	a806      	add	r0, sp, #24
   b67cc:	f7ff fcad 	bl	b612a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b67d0:	a903      	add	r1, sp, #12
   b67d2:	a805      	add	r0, sp, #20
   b67d4:	f7ff fea1 	bl	b651a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b67d8:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b67da:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b67dc:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b67de:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b67e0:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b67e2:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b67e4:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b67e6:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b67e8:	f7ff fc9f 	bl	b612a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b67ec:	a804      	add	r0, sp, #16
   b67ee:	f7ff fc9c 	bl	b612a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b67f2:	e7ab      	b.n	b674c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b67f4:	000b6875 	.word	0x000b6875

000b67f8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b67f8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b67fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b67fc:	4605      	mov	r5, r0
	switch (__op)
   b67fe:	d103      	bne.n	b6808 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b6800:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b6802:	6003      	str	r3, [r0, #0]
      }
   b6804:	2000      	movs	r0, #0
   b6806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b6808:	2a02      	cmp	r2, #2
   b680a:	d010      	beq.n	b682e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b680c:	2a03      	cmp	r2, #3
   b680e:	d1f9      	bne.n	b6804 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b6810:	6804      	ldr	r4, [r0, #0]
   b6812:	2c00      	cmp	r4, #0
   b6814:	d0f6      	beq.n	b6804 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b6816:	f104 0010 	add.w	r0, r4, #16
   b681a:	f7ff fe54 	bl	b64c6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b681e:	4620      	mov	r0, r4
   b6820:	f7ff fc66 	bl	b60f0 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b6824:	2118      	movs	r1, #24
   b6826:	4620      	mov	r0, r4
   b6828:	f7fd fc39 	bl	b409e <_ZdlPvj>
   b682c:	e7ea      	b.n	b6804 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b682e:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b6830:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6832:	f7fd fc30 	bl	b4096 <_Znwj>
   b6836:	4604      	mov	r4, r0
   b6838:	b150      	cbz	r0, b6850 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b683a:	4631      	mov	r1, r6
   b683c:	f7ff fec6 	bl	b65cc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b6840:	6930      	ldr	r0, [r6, #16]
   b6842:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6846:	b108      	cbz	r0, b684c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b6848:	f001 f9b0 	bl	b7bac <strdup>
        type_(type) {
   b684c:	6120      	str	r0, [r4, #16]
   b684e:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b6850:	602c      	str	r4, [r5, #0]
	}
   b6852:	e7d7      	b.n	b6804 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b6854 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b6854:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6856:	2300      	movs	r3, #0
   b6858:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b685a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b685c:	4604      	mov	r4, r0
   b685e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b6860:	b12b      	cbz	r3, b686e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b6862:	2202      	movs	r2, #2
   b6864:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b6866:	68eb      	ldr	r3, [r5, #12]
   b6868:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b686a:	68ab      	ldr	r3, [r5, #8]
   b686c:	60a3      	str	r3, [r4, #8]
    }
   b686e:	4620      	mov	r0, r4
   b6870:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6874 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b6874:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6876:	b089      	sub	sp, #36	; 0x24
   b6878:	4604      	mov	r4, r0
   b687a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b687c:	a801      	add	r0, sp, #4
   b687e:	4611      	mov	r1, r2
   b6880:	f7ff fe54 	bl	b652c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b6884:	b1a4      	cbz	r4, b68b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b6886:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6888:	b11d      	cbz	r5, b6892 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b688a:	4628      	mov	r0, r5
   b688c:	f001 f98e 	bl	b7bac <strdup>
   b6890:	4605      	mov	r5, r0
   b6892:	a801      	add	r0, sp, #4
   b6894:	a903      	add	r1, sp, #12
        type_(type) {
   b6896:	9503      	str	r5, [sp, #12]
   b6898:	f8ad 4010 	strh.w	r4, [sp, #16]
   b689c:	f7ff fea6 	bl	b65ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b68a0:	a803      	add	r0, sp, #12
   b68a2:	f7ff fe10 	bl	b64c6 <_ZN8particle5ErrorD1Ev>
   b68a6:	a802      	add	r0, sp, #8
   b68a8:	f7ff fc3f 	bl	b612a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b68ac:	b009      	add	sp, #36	; 0x24
   b68ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b68b0:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b68b2:	2301      	movs	r3, #1
   b68b4:	e8d5 2f4f 	ldrexb	r2, [r5]
   b68b8:	2a00      	cmp	r2, #0
   b68ba:	d103      	bne.n	b68c4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b68bc:	e8c5 3f41 	strexb	r1, r3, [r5]
   b68c0:	2900      	cmp	r1, #0
   b68c2:	d1f7      	bne.n	b68b4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b68c4:	d1ef      	bne.n	b68a6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b68c6:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b68c8:	f3bf 8f5b 	dmb	ish
   b68cc:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b68ce:	1d2b      	adds	r3, r5, #4
   b68d0:	f3bf 8f5b 	dmb	ish
   b68d4:	e853 6f00 	ldrex	r6, [r3]
   b68d8:	e843 4200 	strex	r2, r4, [r3]
   b68dc:	2a00      	cmp	r2, #0
   b68de:	d1f9      	bne.n	b68d4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b68e0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b68e4:	2e00      	cmp	r6, #0
   b68e6:	d0de      	beq.n	b68a6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b68e8:	4620      	mov	r0, r4
   b68ea:	f7ff f875 	bl	b59d8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b68ee:	4607      	mov	r7, r0
   b68f0:	b160      	cbz	r0, b690c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b68f2:	f105 010c 	add.w	r1, r5, #12
   b68f6:	4630      	mov	r0, r6
   b68f8:	f7ff fe43 	bl	b6582 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b68fc:	4630      	mov	r0, r6
   b68fe:	f7ff fbf7 	bl	b60f0 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b6902:	2110      	movs	r1, #16
   b6904:	4630      	mov	r0, r6
   b6906:	f7fd fbca 	bl	b409e <_ZdlPvj>
   b690a:	e7cc      	b.n	b68a6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b690c:	4631      	mov	r1, r6
   b690e:	a803      	add	r0, sp, #12
   b6910:	f7ff ffa0 	bl	b6854 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6914:	7b2b      	ldrb	r3, [r5, #12]
   b6916:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b691a:	2010      	movs	r0, #16
   b691c:	f7fd fbbb 	bl	b4096 <_Znwj>
   b6920:	4605      	mov	r5, r0
   b6922:	b1d0      	cbz	r0, b695a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b6924:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6926:	2014      	movs	r0, #20
   b6928:	f7fd fbb5 	bl	b4096 <_Znwj>
   b692c:	4604      	mov	r4, r0
   b692e:	b178      	cbz	r0, b6950 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b6930:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b6932:	4601      	mov	r1, r0
   b6934:	a803      	add	r0, sp, #12
   b6936:	f7ff fc00 	bl	b613a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b693a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b693c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b693e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6940:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b6942:	9205      	str	r2, [sp, #20]
   b6944:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6946:	60e3      	str	r3, [r4, #12]
   b6948:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b694c:	9206      	str	r2, [sp, #24]
   b694e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b6950:	4b06      	ldr	r3, [pc, #24]	; (b696c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b6952:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6954:	4b06      	ldr	r3, [pc, #24]	; (b6970 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6956:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6958:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b695a:	a803      	add	r0, sp, #12
   b695c:	f7ff fbc8 	bl	b60f0 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b6960:	2200      	movs	r2, #0
   b6962:	4629      	mov	r1, r5
   b6964:	4803      	ldr	r0, [pc, #12]	; (b6974 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b6966:	f7ff f83f 	bl	b59e8 <application_thread_invoke>
   b696a:	e7c7      	b.n	b68fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b696c:	000b6595 	.word	0x000b6595
   b6970:	000b6979 	.word	0x000b6979
   b6974:	000b6c5d 	.word	0x000b6c5d

000b6978 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b6978:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b697a:	b570      	push	{r4, r5, r6, lr}
   b697c:	4604      	mov	r4, r0
	switch (__op)
   b697e:	d103      	bne.n	b6988 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b6980:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b6982:	6003      	str	r3, [r0, #0]
      }
   b6984:	2000      	movs	r0, #0
   b6986:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b6988:	2a02      	cmp	r2, #2
   b698a:	d00c      	beq.n	b69a6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b698c:	2a03      	cmp	r2, #3
   b698e:	d1f9      	bne.n	b6984 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b6990:	6804      	ldr	r4, [r0, #0]
   b6992:	2c00      	cmp	r4, #0
   b6994:	d0f6      	beq.n	b6984 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b6996:	4620      	mov	r0, r4
   b6998:	f7ff fbaa 	bl	b60f0 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b699c:	2114      	movs	r1, #20
   b699e:	4620      	mov	r0, r4
   b69a0:	f7fd fb7d 	bl	b409e <_ZdlPvj>
   b69a4:	e7ee      	b.n	b6984 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b69a6:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b69a8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b69aa:	f7fd fb74 	bl	b4096 <_Znwj>
   b69ae:	4605      	mov	r5, r0
   b69b0:	b120      	cbz	r0, b69bc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b69b2:	4631      	mov	r1, r6
   b69b4:	f7ff ff4e 	bl	b6854 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b69b8:	7c33      	ldrb	r3, [r6, #16]
   b69ba:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b69bc:	6025      	str	r5, [r4, #0]
	}
   b69be:	e7e1      	b.n	b6984 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b69c0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b69c0:	4770      	bx	lr

000b69c2 <_ZN9IPAddressD0Ev>:
   b69c2:	b510      	push	{r4, lr}
   b69c4:	2118      	movs	r1, #24
   b69c6:	4604      	mov	r4, r0
   b69c8:	f7fd fb69 	bl	b409e <_ZdlPvj>
   b69cc:	4620      	mov	r0, r4
   b69ce:	bd10      	pop	{r4, pc}

000b69d0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b69d0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b69d2:	7d03      	ldrb	r3, [r0, #20]
   b69d4:	2b06      	cmp	r3, #6
{
   b69d6:	b08d      	sub	sp, #52	; 0x34
   b69d8:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b69da:	f100 0704 	add.w	r7, r0, #4
   b69de:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b69e2:	d012      	beq.n	b6a0a <_ZNK9IPAddress7printToER5Print+0x3a>
   b69e4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b69e8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b69ec:	220a      	movs	r2, #10
   b69ee:	4630      	mov	r0, r6
   b69f0:	f7ff fbf9 	bl	b61e6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b69f4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b69f6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b69f8:	d019      	beq.n	b6a2e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b69fa:	2c00      	cmp	r4, #0
   b69fc:	d0f4      	beq.n	b69e8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b69fe:	212e      	movs	r1, #46	; 0x2e
   b6a00:	4630      	mov	r0, r6
   b6a02:	f7ff fbe1 	bl	b61c8 <_ZN5Print5printEc>
   b6a06:	4404      	add	r4, r0
   b6a08:	e7ee      	b.n	b69e8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6a0a:	232f      	movs	r3, #47	; 0x2f
   b6a0c:	466a      	mov	r2, sp
   b6a0e:	4639      	mov	r1, r7
   b6a10:	200a      	movs	r0, #10
		buf[0] = 0;
   b6a12:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6a16:	f7fe fe7f 	bl	b5718 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b6a1a:	4668      	mov	r0, sp
   b6a1c:	f001 f8e3 	bl	b7be6 <strlen>
   b6a20:	6833      	ldr	r3, [r6, #0]
   b6a22:	4602      	mov	r2, r0
   b6a24:	68db      	ldr	r3, [r3, #12]
   b6a26:	4669      	mov	r1, sp
   b6a28:	4630      	mov	r0, r6
   b6a2a:	4798      	blx	r3
   b6a2c:	4604      	mov	r4, r0
    }
    return n;
}
   b6a2e:	4620      	mov	r0, r4
   b6a30:	b00d      	add	sp, #52	; 0x34
   b6a32:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6a34 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6a34:	b510      	push	{r4, lr}
   b6a36:	4b05      	ldr	r3, [pc, #20]	; (b6a4c <_ZN9IPAddressC1Ev+0x18>)
   b6a38:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b6a3a:	2211      	movs	r2, #17
   b6a3c:	f840 3b04 	str.w	r3, [r0], #4
   b6a40:	2100      	movs	r1, #0
   b6a42:	f001 f875 	bl	b7b30 <memset>
}
   b6a46:	4620      	mov	r0, r4
   b6a48:	bd10      	pop	{r4, pc}
   b6a4a:	bf00      	nop
   b6a4c:	000b8414 	.word	0x000b8414

000b6a50 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6a50:	4603      	mov	r3, r0
   b6a52:	4a07      	ldr	r2, [pc, #28]	; (b6a70 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6a54:	b510      	push	{r4, lr}
   b6a56:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b6a5a:	f101 0210 	add.w	r2, r1, #16
   b6a5e:	f851 4b04 	ldr.w	r4, [r1], #4
   b6a62:	f843 4b04 	str.w	r4, [r3], #4
   b6a66:	4291      	cmp	r1, r2
   b6a68:	d1f9      	bne.n	b6a5e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b6a6a:	780a      	ldrb	r2, [r1, #0]
   b6a6c:	701a      	strb	r2, [r3, #0]
}
   b6a6e:	bd10      	pop	{r4, pc}
   b6a70:	000b8414 	.word	0x000b8414

000b6a74 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b6a74:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b6a76:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b6a7a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b6a7e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b6a82:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b6a86:	2304      	movs	r3, #4
   b6a88:	6041      	str	r1, [r0, #4]
   b6a8a:	7503      	strb	r3, [r0, #20]
}
   b6a8c:	bd10      	pop	{r4, pc}
	...

000b6a90 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b6a90:	b507      	push	{r0, r1, r2, lr}
   b6a92:	4b06      	ldr	r3, [pc, #24]	; (b6aac <_ZN9IPAddressC1EPKh+0x1c>)
   b6a94:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b6a96:	78cb      	ldrb	r3, [r1, #3]
   b6a98:	9300      	str	r3, [sp, #0]
   b6a9a:	788b      	ldrb	r3, [r1, #2]
   b6a9c:	784a      	ldrb	r2, [r1, #1]
   b6a9e:	7809      	ldrb	r1, [r1, #0]
   b6aa0:	f7ff ffe8 	bl	b6a74 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b6aa4:	b003      	add	sp, #12
   b6aa6:	f85d fb04 	ldr.w	pc, [sp], #4
   b6aaa:	bf00      	nop
   b6aac:	000b8414 	.word	0x000b8414

000b6ab0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6ab0:	7441      	strb	r1, [r0, #17]
}
   b6ab2:	4770      	bx	lr

000b6ab4 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6ab4:	4770      	bx	lr

000b6ab6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b6ab6:	4770      	bx	lr

000b6ab8 <_ZN9USBSerial4readEv>:
{
   b6ab8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b6aba:	2100      	movs	r1, #0
   b6abc:	7c00      	ldrb	r0, [r0, #16]
   b6abe:	f7fe ff5b 	bl	b5978 <HAL_USB_USART_Receive_Data>
}
   b6ac2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6ac6:	bd08      	pop	{r3, pc}

000b6ac8 <_ZN9USBSerial4peekEv>:
{
   b6ac8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b6aca:	2101      	movs	r1, #1
   b6acc:	7c00      	ldrb	r0, [r0, #16]
   b6ace:	f7fe ff53 	bl	b5978 <HAL_USB_USART_Receive_Data>
}
   b6ad2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6ad6:	bd08      	pop	{r3, pc}

000b6ad8 <_ZN9USBSerial17availableForWriteEv>:
{
   b6ad8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b6ada:	7c00      	ldrb	r0, [r0, #16]
   b6adc:	f7fe ff44 	bl	b5968 <HAL_USB_USART_Available_Data_For_Write>
}
   b6ae0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6ae4:	bd08      	pop	{r3, pc}

000b6ae6 <_ZN9USBSerial9availableEv>:
{
   b6ae6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b6ae8:	7c00      	ldrb	r0, [r0, #16]
   b6aea:	f7fe ff35 	bl	b5958 <HAL_USB_USART_Available_Data>
}
   b6aee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6af2:	bd08      	pop	{r3, pc}

000b6af4 <_ZN9USBSerial5writeEh>:
{
   b6af4:	b513      	push	{r0, r1, r4, lr}
   b6af6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6af8:	7c00      	ldrb	r0, [r0, #16]
{
   b6afa:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6afc:	f7fe ff34 	bl	b5968 <HAL_USB_USART_Available_Data_For_Write>
   b6b00:	2800      	cmp	r0, #0
   b6b02:	9901      	ldr	r1, [sp, #4]
   b6b04:	dc01      	bgt.n	b6b0a <_ZN9USBSerial5writeEh+0x16>
   b6b06:	7c60      	ldrb	r0, [r4, #17]
   b6b08:	b120      	cbz	r0, b6b14 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b6b0a:	7c20      	ldrb	r0, [r4, #16]
   b6b0c:	f7fe ff3c 	bl	b5988 <HAL_USB_USART_Send_Data>
   b6b10:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b6b14:	b002      	add	sp, #8
   b6b16:	bd10      	pop	{r4, pc}

000b6b18 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b6b18:	7c00      	ldrb	r0, [r0, #16]
   b6b1a:	f7fe bf3d 	b.w	b5998 <HAL_USB_USART_Flush_Data>

000b6b1e <_ZN9USBSerialD0Ev>:
   b6b1e:	b510      	push	{r4, lr}
   b6b20:	2114      	movs	r1, #20
   b6b22:	4604      	mov	r4, r0
   b6b24:	f7fd fabb 	bl	b409e <_ZdlPvj>
   b6b28:	4620      	mov	r0, r4
   b6b2a:	bd10      	pop	{r4, pc}

000b6b2c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b6b2c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6b2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6b32:	4604      	mov	r4, r0
   b6b34:	4608      	mov	r0, r1
   b6b36:	2100      	movs	r1, #0
   b6b38:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6b3c:	4b04      	ldr	r3, [pc, #16]	; (b6b50 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b6b3e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6b40:	2301      	movs	r3, #1
  _serial = serial;
   b6b42:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6b44:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b6b46:	4611      	mov	r1, r2
   b6b48:	f7fe fef6 	bl	b5938 <HAL_USB_USART_Init>
}
   b6b4c:	4620      	mov	r0, r4
   b6b4e:	bd10      	pop	{r4, pc}
   b6b50:	000b8428 	.word	0x000b8428

000b6b54 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b6b54:	7c00      	ldrb	r0, [r0, #16]
   b6b56:	2200      	movs	r2, #0
   b6b58:	f7fe bef6 	b.w	b5948 <HAL_USB_USART_Begin>

000b6b5c <_Z19acquireSerialBufferv>:
{
   b6b5c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b6b5e:	2214      	movs	r2, #20
{
   b6b60:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b6b62:	2100      	movs	r1, #0
   b6b64:	f000 ffe4 	bl	b7b30 <memset>
}
   b6b68:	4620      	mov	r0, r4
   b6b6a:	bd10      	pop	{r4, pc}

000b6b6c <_Z16_fetch_usbserialv>:
{
   b6b6c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6b6e:	4c0f      	ldr	r4, [pc, #60]	; (b6bac <_Z16_fetch_usbserialv+0x40>)
{
   b6b70:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b6b72:	a803      	add	r0, sp, #12
   b6b74:	f7ff fff2 	bl	b6b5c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6b78:	7821      	ldrb	r1, [r4, #0]
   b6b7a:	f3bf 8f5b 	dmb	ish
   b6b7e:	f011 0101 	ands.w	r1, r1, #1
   b6b82:	d10f      	bne.n	b6ba4 <_Z16_fetch_usbserialv+0x38>
   b6b84:	4620      	mov	r0, r4
   b6b86:	9101      	str	r1, [sp, #4]
   b6b88:	f7fd fa98 	bl	b40bc <__cxa_guard_acquire>
   b6b8c:	9901      	ldr	r1, [sp, #4]
   b6b8e:	b148      	cbz	r0, b6ba4 <_Z16_fetch_usbserialv+0x38>
   b6b90:	aa03      	add	r2, sp, #12
   b6b92:	4807      	ldr	r0, [pc, #28]	; (b6bb0 <_Z16_fetch_usbserialv+0x44>)
   b6b94:	f7ff ffca 	bl	b6b2c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b6b98:	4620      	mov	r0, r4
   b6b9a:	f7fd fa94 	bl	b40c6 <__cxa_guard_release>
   b6b9e:	4805      	ldr	r0, [pc, #20]	; (b6bb4 <_Z16_fetch_usbserialv+0x48>)
   b6ba0:	f000 ffb2 	bl	b7b08 <atexit>
	return _usbserial;
}
   b6ba4:	4802      	ldr	r0, [pc, #8]	; (b6bb0 <_Z16_fetch_usbserialv+0x44>)
   b6ba6:	b008      	add	sp, #32
   b6ba8:	bd10      	pop	{r4, pc}
   b6baa:	bf00      	nop
   b6bac:	2003e700 	.word	0x2003e700
   b6bb0:	2003e704 	.word	0x2003e704
   b6bb4:	000b6ab5 	.word	0x000b6ab5

000b6bb8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b6bb8:	4770      	bx	lr

000b6bba <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6bba:	7441      	strb	r1, [r0, #17]
}
   b6bbc:	4770      	bx	lr

000b6bbe <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b6bbe:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b6bc0:	7c00      	ldrb	r0, [r0, #16]
   b6bc2:	f7fe fde1 	bl	b5788 <hal_usart_available_data_for_write>
}
   b6bc6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6bca:	bd08      	pop	{r3, pc}

000b6bcc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b6bcc:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b6bce:	7c00      	ldrb	r0, [r0, #16]
   b6bd0:	f7fe fdb2 	bl	b5738 <hal_usart_available>
}
   b6bd4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6bd8:	bd08      	pop	{r3, pc}

000b6bda <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b6bda:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6bdc:	7c00      	ldrb	r0, [r0, #16]
   b6bde:	f7fe fdbb 	bl	b5758 <hal_usart_peek>
}
   b6be2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6be6:	bd08      	pop	{r3, pc}

000b6be8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6be8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b6bea:	7c00      	ldrb	r0, [r0, #16]
   b6bec:	f7fe fdac 	bl	b5748 <hal_usart_read>
}
   b6bf0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6bf4:	bd08      	pop	{r3, pc}

000b6bf6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b6bf6:	7c00      	ldrb	r0, [r0, #16]
   b6bf8:	f7fe bdb6 	b.w	b5768 <hal_usart_flush>

000b6bfc <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6bfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6bfe:	7c45      	ldrb	r5, [r0, #17]
{
   b6c00:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6c02:	b12d      	cbz	r5, b6c10 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6c04:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b6c06:	b003      	add	sp, #12
   b6c08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6c0c:	f7fe bd8c 	b.w	b5728 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6c10:	7c00      	ldrb	r0, [r0, #16]
   b6c12:	9101      	str	r1, [sp, #4]
   b6c14:	f7fe fdb8 	bl	b5788 <hal_usart_available_data_for_write>
   b6c18:	2800      	cmp	r0, #0
   b6c1a:	9901      	ldr	r1, [sp, #4]
   b6c1c:	dcf2      	bgt.n	b6c04 <_ZN11USARTSerial5writeEh+0x8>
}
   b6c1e:	4628      	mov	r0, r5
   b6c20:	b003      	add	sp, #12
   b6c22:	bd30      	pop	{r4, r5, pc}

000b6c24 <_ZN11USARTSerialD0Ev>:
   b6c24:	b510      	push	{r4, lr}
   b6c26:	2114      	movs	r1, #20
   b6c28:	4604      	mov	r4, r0
   b6c2a:	f7fd fa38 	bl	b409e <_ZdlPvj>
   b6c2e:	4620      	mov	r0, r4
   b6c30:	bd10      	pop	{r4, pc}
	...

000b6c34 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b6c34:	b510      	push	{r4, lr}
   b6c36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6c3a:	4604      	mov	r4, r0
   b6c3c:	4608      	mov	r0, r1
   b6c3e:	4611      	mov	r1, r2
   b6c40:	2200      	movs	r2, #0
   b6c42:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6c46:	4b04      	ldr	r3, [pc, #16]	; (b6c58 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b6c48:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6c4a:	2301      	movs	r3, #1
  _serial = serial;
   b6c4c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6c4e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b6c50:	f7fe fda2 	bl	b5798 <hal_usart_init_ex>
}
   b6c54:	4620      	mov	r0, r4
   b6c56:	bd10      	pop	{r4, pc}
   b6c58:	000b8458 	.word	0x000b8458

000b6c5c <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b6c5c:	b510      	push	{r4, lr}
      if (_M_empty())
   b6c5e:	6883      	ldr	r3, [r0, #8]
   b6c60:	4604      	mov	r4, r0
   b6c62:	b90b      	cbnz	r3, b6c68 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b6c64:	f000 faa6 	bl	b71b4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6c68:	68c3      	ldr	r3, [r0, #12]
   b6c6a:	4798      	blx	r3
      if (_M_manager)
   b6c6c:	68a3      	ldr	r3, [r4, #8]
   b6c6e:	b11b      	cbz	r3, b6c78 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b6c70:	2203      	movs	r2, #3
   b6c72:	4621      	mov	r1, r4
   b6c74:	4620      	mov	r0, r4
   b6c76:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b6c78:	4620      	mov	r0, r4
   b6c7a:	2110      	movs	r1, #16
}
   b6c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b6c80:	f7fd ba0d 	b.w	b409e <_ZdlPvj>

000b6c84 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b6c84:	4770      	bx	lr

000b6c86 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b6c86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6c88:	4606      	mov	r6, r0
   b6c8a:	4615      	mov	r5, r2
   b6c8c:	460c      	mov	r4, r1
   b6c8e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6c90:	42bc      	cmp	r4, r7
   b6c92:	d006      	beq.n	b6ca2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6c94:	6833      	ldr	r3, [r6, #0]
   b6c96:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6c9a:	689b      	ldr	r3, [r3, #8]
   b6c9c:	4630      	mov	r0, r6
   b6c9e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6ca0:	e7f6      	b.n	b6c90 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b6ca2:	4628      	mov	r0, r5
   b6ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6ca6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b6ca6:	7c00      	ldrb	r0, [r0, #16]
   b6ca8:	2200      	movs	r2, #0
   b6caa:	f7fe bd95 	b.w	b57d8 <hal_i2c_write>

000b6cae <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b6cae:	7c00      	ldrb	r0, [r0, #16]
   b6cb0:	2100      	movs	r1, #0
   b6cb2:	f7fe bd99 	b.w	b57e8 <hal_i2c_available>

000b6cb6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b6cb6:	7c00      	ldrb	r0, [r0, #16]
   b6cb8:	2100      	movs	r1, #0
   b6cba:	f7fe bd9d 	b.w	b57f8 <hal_i2c_read>

000b6cbe <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b6cbe:	7c00      	ldrb	r0, [r0, #16]
   b6cc0:	2100      	movs	r1, #0
   b6cc2:	f7fe bda1 	b.w	b5808 <hal_i2c_peek>

000b6cc6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b6cc6:	7c00      	ldrb	r0, [r0, #16]
   b6cc8:	2100      	movs	r1, #0
   b6cca:	f7fe bda5 	b.w	b5818 <hal_i2c_flush>

000b6cce <_ZN7TwoWireD0Ev>:
   b6cce:	b510      	push	{r4, lr}
   b6cd0:	2114      	movs	r1, #20
   b6cd2:	4604      	mov	r4, r0
   b6cd4:	f7fd f9e3 	bl	b409e <_ZdlPvj>
   b6cd8:	4620      	mov	r0, r4
   b6cda:	bd10      	pop	{r4, pc}

000b6cdc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6cdc:	b538      	push	{r3, r4, r5, lr}
   b6cde:	4604      	mov	r4, r0
   b6ce0:	4615      	mov	r5, r2
   b6ce2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6ce6:	2200      	movs	r2, #0
   b6ce8:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6cec:	4b09      	ldr	r3, [pc, #36]	; (b6d14 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b6cee:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6cf0:	4608      	mov	r0, r1
   b6cf2:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b6cf4:	4629      	mov	r1, r5
   b6cf6:	f7fe fd9f 	bl	b5838 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6cfa:	30bf      	adds	r0, #191	; 0xbf
   b6cfc:	d108      	bne.n	b6d10 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b6cfe:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6d00:	07db      	lsls	r3, r3, #31
   b6d02:	d505      	bpl.n	b6d10 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b6d04:	6868      	ldr	r0, [r5, #4]
   b6d06:	f7fe ff13 	bl	b5b30 <free>
    free(conf.tx_buffer);
   b6d0a:	68e8      	ldr	r0, [r5, #12]
   b6d0c:	f7fe ff10 	bl	b5b30 <free>
}
   b6d10:	4620      	mov	r0, r4
   b6d12:	bd38      	pop	{r3, r4, r5, pc}
   b6d14:	000b8488 	.word	0x000b8488

000b6d18 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b6d18:	2300      	movs	r3, #0
   b6d1a:	7c00      	ldrb	r0, [r0, #16]
   b6d1c:	461a      	mov	r2, r3
   b6d1e:	4619      	mov	r1, r3
   b6d20:	f7fe bd42 	b.w	b57a8 <hal_i2c_begin>

000b6d24 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b6d24:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b6d26:	2200      	movs	r2, #0
   b6d28:	2314      	movs	r3, #20
   b6d2a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b6d2e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b6d32:	780b      	ldrb	r3, [r1, #0]
   b6d34:	f88d 3008 	strb.w	r3, [sp, #8]
   b6d38:	684b      	ldr	r3, [r1, #4]
   b6d3a:	9303      	str	r3, [sp, #12]
   b6d3c:	68cb      	ldr	r3, [r1, #12]
   b6d3e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b6d40:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b6d42:	7a0b      	ldrb	r3, [r1, #8]
   b6d44:	9305      	str	r3, [sp, #20]
   b6d46:	a901      	add	r1, sp, #4
   b6d48:	f7fe fd7e 	bl	b5848 <hal_i2c_request_ex>
}
   b6d4c:	b007      	add	sp, #28
   b6d4e:	f85d fb04 	ldr.w	pc, [sp], #4

000b6d52 <_ZN7TwoWire11requestFromEhjh>:
{
   b6d52:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b6d54:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b6d56:	f88d 1000 	strb.w	r1, [sp]
   b6d5a:	f04f 0164 	mov.w	r1, #100	; 0x64
   b6d5e:	9103      	str	r1, [sp, #12]
   b6d60:	bf18      	it	ne
   b6d62:	2301      	movne	r3, #1
   b6d64:	4669      	mov	r1, sp
    size_ = size;
   b6d66:	9201      	str	r2, [sp, #4]
   b6d68:	f88d 3008 	strb.w	r3, [sp, #8]
   b6d6c:	f7ff ffda 	bl	b6d24 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b6d70:	b005      	add	sp, #20
   b6d72:	f85d fb04 	ldr.w	pc, [sp], #4

000b6d76 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b6d76:	2301      	movs	r3, #1
   b6d78:	f7ff bfeb 	b.w	b6d52 <_ZN7TwoWire11requestFromEhjh>

000b6d7c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b6d7c:	7c00      	ldrb	r0, [r0, #16]
   b6d7e:	2200      	movs	r2, #0
   b6d80:	f7fe bd1a 	b.w	b57b8 <hal_i2c_begin_transmission>

000b6d84 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b6d84:	b2c9      	uxtb	r1, r1
   b6d86:	f7ff bff9 	b.w	b6d7c <_ZN7TwoWire17beginTransmissionEh>

000b6d8a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b6d8a:	7c00      	ldrb	r0, [r0, #16]
   b6d8c:	2200      	movs	r2, #0
   b6d8e:	f7fe bd1b 	b.w	b57c8 <hal_i2c_end_transmission>

000b6d92 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b6d92:	2101      	movs	r1, #1
   b6d94:	f7ff bff9 	b.w	b6d8a <_ZN7TwoWire15endTransmissionEh>

000b6d98 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b6d98:	2200      	movs	r2, #0
   b6d9a:	6840      	ldr	r0, [r0, #4]
   b6d9c:	4611      	mov	r1, r2
   b6d9e:	f7fe be57 	b.w	b5a50 <network_ready>

000b6da2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6da2:	2200      	movs	r2, #0
   b6da4:	6840      	ldr	r0, [r0, #4]
   b6da6:	4611      	mov	r1, r2
   b6da8:	f7fe be72 	b.w	b5a90 <network_listening>

000b6dac <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6dac:	2200      	movs	r2, #0
   b6dae:	6840      	ldr	r0, [r0, #4]
   b6db0:	4611      	mov	r1, r2
   b6db2:	f7fe be7d 	b.w	b5ab0 <network_get_listen_timeout>

000b6db6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6db6:	6840      	ldr	r0, [r0, #4]
   b6db8:	2200      	movs	r2, #0
   b6dba:	f7fe be71 	b.w	b5aa0 <network_set_listen_timeout>

000b6dbe <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6dbe:	6840      	ldr	r0, [r0, #4]
   b6dc0:	2200      	movs	r2, #0
   b6dc2:	f081 0101 	eor.w	r1, r1, #1
   b6dc6:	f7fe be5b 	b.w	b5a80 <network_listen>

000b6dca <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6dca:	2300      	movs	r3, #0
   b6dcc:	6840      	ldr	r0, [r0, #4]
   b6dce:	461a      	mov	r2, r3
   b6dd0:	4619      	mov	r1, r3
   b6dd2:	f7fe be4d 	b.w	b5a70 <network_off>

000b6dd6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6dd6:	2300      	movs	r3, #0
   b6dd8:	6840      	ldr	r0, [r0, #4]
   b6dda:	461a      	mov	r2, r3
   b6ddc:	4619      	mov	r1, r3
   b6dde:	f7fe be3f 	b.w	b5a60 <network_on>

000b6de2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6de2:	2200      	movs	r2, #0
   b6de4:	6840      	ldr	r0, [r0, #4]
   b6de6:	4611      	mov	r1, r2
   b6de8:	f7fe be22 	b.w	b5a30 <network_connecting>

000b6dec <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6dec:	6840      	ldr	r0, [r0, #4]
   b6dee:	2200      	movs	r2, #0
   b6df0:	2102      	movs	r1, #2
   b6df2:	f7fe be25 	b.w	b5a40 <network_disconnect>

000b6df6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6df6:	2300      	movs	r3, #0
   b6df8:	6840      	ldr	r0, [r0, #4]
   b6dfa:	461a      	mov	r2, r3
   b6dfc:	f7fe be10 	b.w	b5a20 <network_connect>

000b6e00 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b6e00:	4b02      	ldr	r3, [pc, #8]	; (b6e0c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b6e02:	2204      	movs	r2, #4
   b6e04:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b6e06:	4a02      	ldr	r2, [pc, #8]	; (b6e10 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b6e08:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b6e0a:	4770      	bx	lr
   b6e0c:	2003e718 	.word	0x2003e718
   b6e10:	000b84b0 	.word	0x000b84b0

000b6e14 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b6e14:	2300      	movs	r3, #0
   b6e16:	6840      	ldr	r0, [r0, #4]
   b6e18:	461a      	mov	r2, r3
   b6e1a:	f7fe be01 	b.w	b5a20 <network_connect>

000b6e1e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b6e1e:	6840      	ldr	r0, [r0, #4]
   b6e20:	2200      	movs	r2, #0
   b6e22:	2102      	movs	r1, #2
   b6e24:	f7fe be0c 	b.w	b5a40 <network_disconnect>

000b6e28 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b6e28:	2200      	movs	r2, #0
   b6e2a:	6840      	ldr	r0, [r0, #4]
   b6e2c:	4611      	mov	r1, r2
   b6e2e:	f7fe bdff 	b.w	b5a30 <network_connecting>

000b6e32 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b6e32:	2200      	movs	r2, #0
   b6e34:	6840      	ldr	r0, [r0, #4]
   b6e36:	4611      	mov	r1, r2
   b6e38:	f7fe be0a 	b.w	b5a50 <network_ready>

000b6e3c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6e3c:	2300      	movs	r3, #0
   b6e3e:	6840      	ldr	r0, [r0, #4]
   b6e40:	461a      	mov	r2, r3
   b6e42:	4619      	mov	r1, r3
   b6e44:	f7fe be0c 	b.w	b5a60 <network_on>

000b6e48 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b6e48:	2300      	movs	r3, #0
   b6e4a:	6840      	ldr	r0, [r0, #4]
   b6e4c:	461a      	mov	r2, r3
   b6e4e:	4619      	mov	r1, r3
   b6e50:	f7fe be0e 	b.w	b5a70 <network_off>

000b6e54 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b6e54:	6840      	ldr	r0, [r0, #4]
   b6e56:	2100      	movs	r1, #0
   b6e58:	f7fe be32 	b.w	b5ac0 <network_is_on>

000b6e5c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6e5c:	6840      	ldr	r0, [r0, #4]
   b6e5e:	2100      	movs	r1, #0
   b6e60:	f7fe be36 	b.w	b5ad0 <network_is_off>

000b6e64 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6e64:	6840      	ldr	r0, [r0, #4]
   b6e66:	2200      	movs	r2, #0
   b6e68:	f081 0101 	eor.w	r1, r1, #1
   b6e6c:	f7fe be08 	b.w	b5a80 <network_listen>

000b6e70 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b6e70:	6840      	ldr	r0, [r0, #4]
   b6e72:	2200      	movs	r2, #0
   b6e74:	f7fe be14 	b.w	b5aa0 <network_set_listen_timeout>

000b6e78 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6e78:	2200      	movs	r2, #0
   b6e7a:	6840      	ldr	r0, [r0, #4]
   b6e7c:	4611      	mov	r1, r2
   b6e7e:	f7fe be17 	b.w	b5ab0 <network_get_listen_timeout>

000b6e82 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b6e82:	2200      	movs	r2, #0
   b6e84:	6840      	ldr	r0, [r0, #4]
   b6e86:	4611      	mov	r1, r2
   b6e88:	f7fe be02 	b.w	b5a90 <network_listening>

000b6e8c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6e8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6e90:	b095      	sub	sp, #84	; 0x54
   b6e92:	4614      	mov	r4, r2
   b6e94:	460d      	mov	r5, r1
   b6e96:	4607      	mov	r7, r0
    IPAddress addr;
   b6e98:	f7ff fdcc 	bl	b6a34 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6e9c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6e9e:	221c      	movs	r2, #28
   b6ea0:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6ea2:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6ea4:	f000 fe44 	bl	b7b30 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6ea8:	2340      	movs	r3, #64	; 0x40
   b6eaa:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6eac:	4620      	mov	r0, r4
   b6eae:	466b      	mov	r3, sp
   b6eb0:	aa0c      	add	r2, sp, #48	; 0x30
   b6eb2:	2100      	movs	r1, #0
   b6eb4:	f7fe fbe0 	bl	b5678 <netdb_getaddrinfo>
    if (!r) {
   b6eb8:	4604      	mov	r4, r0
   b6eba:	2800      	cmp	r0, #0
   b6ebc:	d14b      	bne.n	b6f56 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6ebe:	4602      	mov	r2, r0
   b6ec0:	2101      	movs	r1, #1
   b6ec2:	6868      	ldr	r0, [r5, #4]
   b6ec4:	f7fe fdc4 	bl	b5a50 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6ec8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6eca:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6ecc:	4622      	mov	r2, r4
   b6ece:	6868      	ldr	r0, [r5, #4]
   b6ed0:	f7fe fdbe 	bl	b5a50 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6ed4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6ed6:	4681      	mov	r9, r0
        bool ok = false;
   b6ed8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6eda:	2e00      	cmp	r6, #0
   b6edc:	d03b      	beq.n	b6f56 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b6ede:	2900      	cmp	r1, #0
   b6ee0:	d139      	bne.n	b6f56 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b6ee2:	6873      	ldr	r3, [r6, #4]
   b6ee4:	2b02      	cmp	r3, #2
   b6ee6:	d003      	beq.n	b6ef0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6ee8:	2b0a      	cmp	r3, #10
   b6eea:	d011      	beq.n	b6f10 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6eec:	69f6      	ldr	r6, [r6, #28]
   b6eee:	e7f4      	b.n	b6eda <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b6ef0:	f1b8 0f00 	cmp.w	r8, #0
   b6ef4:	d0fa      	beq.n	b6eec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b6ef6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b6ef8:	a806      	add	r0, sp, #24
   b6efa:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b6efc:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b6efe:	f7ff fdc7 	bl	b6a90 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6f02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6f04:	1d3c      	adds	r4, r7, #4
   b6f06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6f08:	682b      	ldr	r3, [r5, #0]
   b6f0a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6f0c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b6f0e:	e7ed      	b.n	b6eec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b6f10:	f1b9 0f00 	cmp.w	r9, #0
   b6f14:	d0ea      	beq.n	b6eec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b6f16:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6f18:	2210      	movs	r2, #16
   b6f1a:	a801      	add	r0, sp, #4
   b6f1c:	f000 fe08 	bl	b7b30 <memset>
                    a.v = 6;
   b6f20:	2306      	movs	r3, #6
   b6f22:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6f26:	ad01      	add	r5, sp, #4
   b6f28:	f104 0308 	add.w	r3, r4, #8
   b6f2c:	3418      	adds	r4, #24
   b6f2e:	6818      	ldr	r0, [r3, #0]
   b6f30:	6859      	ldr	r1, [r3, #4]
   b6f32:	462a      	mov	r2, r5
   b6f34:	c203      	stmia	r2!, {r0, r1}
   b6f36:	3308      	adds	r3, #8
   b6f38:	42a3      	cmp	r3, r4
   b6f3a:	4615      	mov	r5, r2
   b6f3c:	d1f7      	bne.n	b6f2e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b6f3e:	a901      	add	r1, sp, #4
   b6f40:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b6f42:	ad07      	add	r5, sp, #28
   b6f44:	f7ff fd84 	bl	b6a50 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6f48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6f4a:	1d3c      	adds	r4, r7, #4
   b6f4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6f4e:	682b      	ldr	r3, [r5, #0]
   b6f50:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6f52:	4649      	mov	r1, r9
   b6f54:	e7ca      	b.n	b6eec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b6f56:	9800      	ldr	r0, [sp, #0]
   b6f58:	f7fe fb86 	bl	b5668 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6f5c:	4638      	mov	r0, r7
   b6f5e:	b015      	add	sp, #84	; 0x54
   b6f60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6f64 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6f64:	4b02      	ldr	r3, [pc, #8]	; (b6f70 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b6f66:	4a03      	ldr	r2, [pc, #12]	; (b6f74 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6f68:	601a      	str	r2, [r3, #0]
   b6f6a:	2200      	movs	r2, #0
   b6f6c:	605a      	str	r2, [r3, #4]

} // spark
   b6f6e:	4770      	bx	lr
   b6f70:	2003e720 	.word	0x2003e720
   b6f74:	000b84ec 	.word	0x000b84ec

000b6f78 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b6f78:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b6f7a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b6f7c:	d902      	bls.n	b6f84 <pinAvailable+0xc>
    return false;
   b6f7e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b6f80:	b002      	add	sp, #8
   b6f82:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b6f84:	f1a0 030b 	sub.w	r3, r0, #11
   b6f88:	2b02      	cmp	r3, #2
   b6f8a:	d81a      	bhi.n	b6fc2 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b6f8c:	4c17      	ldr	r4, [pc, #92]	; (b6fec <pinAvailable+0x74>)
   b6f8e:	7821      	ldrb	r1, [r4, #0]
   b6f90:	f3bf 8f5b 	dmb	ish
   b6f94:	f011 0101 	ands.w	r1, r1, #1
   b6f98:	d10b      	bne.n	b6fb2 <pinAvailable+0x3a>
   b6f9a:	4620      	mov	r0, r4
   b6f9c:	9101      	str	r1, [sp, #4]
   b6f9e:	f7fd f88d 	bl	b40bc <__cxa_guard_acquire>
   b6fa2:	9901      	ldr	r1, [sp, #4]
   b6fa4:	b128      	cbz	r0, b6fb2 <pinAvailable+0x3a>
   b6fa6:	4812      	ldr	r0, [pc, #72]	; (b6ff0 <pinAvailable+0x78>)
   b6fa8:	f7fe fe3e 	bl	b5c28 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b6fac:	4620      	mov	r0, r4
   b6fae:	f7fd f88a 	bl	b40c6 <__cxa_guard_release>
   b6fb2:	4b0f      	ldr	r3, [pc, #60]	; (b6ff0 <pinAvailable+0x78>)
   b6fb4:	7818      	ldrb	r0, [r3, #0]
   b6fb6:	f7fe fc7f 	bl	b58b8 <hal_spi_is_enabled>
   b6fba:	2800      	cmp	r0, #0
   b6fbc:	d1df      	bne.n	b6f7e <pinAvailable+0x6>
  return true; // 'pin' is available
   b6fbe:	2001      	movs	r0, #1
   b6fc0:	e7de      	b.n	b6f80 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b6fc2:	2801      	cmp	r0, #1
   b6fc4:	d809      	bhi.n	b6fda <pinAvailable+0x62>
   b6fc6:	f000 f8cf 	bl	b7168 <_Z19__fetch_global_Wirev>
   b6fca:	2100      	movs	r1, #0
   b6fcc:	7c00      	ldrb	r0, [r0, #16]
   b6fce:	f7fe fc2b 	bl	b5828 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b6fd2:	f080 0001 	eor.w	r0, r0, #1
   b6fd6:	b2c0      	uxtb	r0, r0
   b6fd8:	e7d2      	b.n	b6f80 <pinAvailable+0x8>
   b6fda:	3809      	subs	r0, #9
   b6fdc:	2801      	cmp	r0, #1
   b6fde:	d8ee      	bhi.n	b6fbe <pinAvailable+0x46>
   b6fe0:	f000 f882 	bl	b70e8 <_Z22__fetch_global_Serial1v>
   b6fe4:	7c00      	ldrb	r0, [r0, #16]
   b6fe6:	f7fe fbc7 	bl	b5778 <hal_usart_is_enabled>
   b6fea:	e7f2      	b.n	b6fd2 <pinAvailable+0x5a>
   b6fec:	2003e6b8 	.word	0x2003e6b8
   b6ff0:	2003e6bc 	.word	0x2003e6bc

000b6ff4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6ff4:	2823      	cmp	r0, #35	; 0x23
{
   b6ff6:	b538      	push	{r3, r4, r5, lr}
   b6ff8:	4604      	mov	r4, r0
   b6ffa:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6ffc:	d80a      	bhi.n	b7014 <pinMode+0x20>
   b6ffe:	29ff      	cmp	r1, #255	; 0xff
   b7000:	d008      	beq.n	b7014 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b7002:	f7ff ffb9 	bl	b6f78 <pinAvailable>
   b7006:	b128      	cbz	r0, b7014 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b7008:	4629      	mov	r1, r5
   b700a:	4620      	mov	r0, r4
}
   b700c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b7010:	f7fe bb42 	b.w	b5698 <HAL_Pin_Mode>
}
   b7014:	bd38      	pop	{r3, r4, r5, pc}

000b7016 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b7016:	b538      	push	{r3, r4, r5, lr}
   b7018:	4604      	mov	r4, r0
   b701a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b701c:	f7fe fb44 	bl	b56a8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b7020:	28ff      	cmp	r0, #255	; 0xff
   b7022:	d010      	beq.n	b7046 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b7024:	2806      	cmp	r0, #6
   b7026:	d804      	bhi.n	b7032 <digitalWrite+0x1c>
   b7028:	234d      	movs	r3, #77	; 0x4d
   b702a:	fa23 f000 	lsr.w	r0, r3, r0
   b702e:	07c3      	lsls	r3, r0, #31
   b7030:	d409      	bmi.n	b7046 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b7032:	4620      	mov	r0, r4
   b7034:	f7ff ffa0 	bl	b6f78 <pinAvailable>
   b7038:	b128      	cbz	r0, b7046 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b703a:	4629      	mov	r1, r5
   b703c:	4620      	mov	r0, r4
}
   b703e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b7042:	f7fe bb39 	b.w	b56b8 <HAL_GPIO_Write>
}
   b7046:	bd38      	pop	{r3, r4, r5, pc}

000b7048 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b7048:	b510      	push	{r4, lr}
   b704a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b704c:	f7fe fb2c 	bl	b56a8 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b7050:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b7052:	b2db      	uxtb	r3, r3
   b7054:	2b01      	cmp	r3, #1
   b7056:	d908      	bls.n	b706a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b7058:	4620      	mov	r0, r4
   b705a:	f7ff ff8d 	bl	b6f78 <pinAvailable>
   b705e:	b120      	cbz	r0, b706a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b7060:	4620      	mov	r0, r4
}
   b7062:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b7066:	f7fe bb2f 	b.w	b56c8 <HAL_GPIO_Read>
}
   b706a:	2000      	movs	r0, #0
   b706c:	bd10      	pop	{r4, pc}

000b706e <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   b706e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7072:	4690      	mov	r8, r2
   b7074:	461f      	mov	r7, r3
   b7076:	2407      	movs	r4, #7
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
   b7078:	4606      	mov	r6, r0
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   b707a:	460d      	mov	r5, r1
    if (bitOrder == LSBFIRST)
   b707c:	f1c4 0107 	rsb	r1, r4, #7
   b7080:	f1b8 0f00 	cmp.w	r8, #0
   b7084:	d112      	bne.n	b70ac <shiftOut+0x3e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   b7086:	fa47 f101 	asr.w	r1, r7, r1
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b708a:	f001 0101 	and.w	r1, r1, #1
   b708e:	4630      	mov	r0, r6
   b7090:	f7ff ffc1 	bl	b7016 <digitalWrite>
    digitalWrite(clockPin, HIGH);
   b7094:	2101      	movs	r1, #1
   b7096:	4628      	mov	r0, r5
   b7098:	f7ff ffbd 	bl	b7016 <digitalWrite>
    digitalWrite(clockPin, LOW);
   b709c:	2100      	movs	r1, #0
   b709e:	4628      	mov	r0, r5
   b70a0:	f7ff ffb9 	bl	b7016 <digitalWrite>
  for (i = 0; i < 8; i++)  {
   b70a4:	3c01      	subs	r4, #1
   b70a6:	d2e9      	bcs.n	b707c <shiftOut+0xe>
  }
}
   b70a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b70ac:	fa47 f104 	asr.w	r1, r7, r4
   b70b0:	e7eb      	b.n	b708a <shiftOut+0x1c>

000b70b2 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b70b2:	4770      	bx	lr

000b70b4 <_Z20acquireSerial1Bufferv>:
{
   b70b4:	b538      	push	{r3, r4, r5, lr}
   b70b6:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b70b8:	2514      	movs	r5, #20
   b70ba:	462a      	mov	r2, r5
   b70bc:	2100      	movs	r1, #0
   b70be:	f000 fd37 	bl	b7b30 <memset>
   b70c2:	8025      	strh	r5, [r4, #0]
   b70c4:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b70c6:	4907      	ldr	r1, [pc, #28]	; (b70e4 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b70c8:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b70ca:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b70cc:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b70ce:	f000 f86f 	bl	b71b0 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b70d2:	4904      	ldr	r1, [pc, #16]	; (b70e4 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b70d4:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b70d6:	4628      	mov	r0, r5
   b70d8:	f000 f86a 	bl	b71b0 <_ZnajRKSt9nothrow_t>
    };
   b70dc:	60e0      	str	r0, [r4, #12]
}
   b70de:	4620      	mov	r0, r4
   b70e0:	bd38      	pop	{r3, r4, r5, pc}
   b70e2:	bf00      	nop
   b70e4:	000b8520 	.word	0x000b8520

000b70e8 <_Z22__fetch_global_Serial1v>:
{
   b70e8:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b70ea:	4d0e      	ldr	r5, [pc, #56]	; (b7124 <_Z22__fetch_global_Serial1v+0x3c>)
   b70ec:	7829      	ldrb	r1, [r5, #0]
   b70ee:	f3bf 8f5b 	dmb	ish
   b70f2:	f011 0401 	ands.w	r4, r1, #1
{
   b70f6:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b70f8:	d111      	bne.n	b711e <_Z22__fetch_global_Serial1v+0x36>
   b70fa:	4628      	mov	r0, r5
   b70fc:	f7fc ffde 	bl	b40bc <__cxa_guard_acquire>
   b7100:	b168      	cbz	r0, b711e <_Z22__fetch_global_Serial1v+0x36>
   b7102:	a801      	add	r0, sp, #4
   b7104:	f7ff ffd6 	bl	b70b4 <_Z20acquireSerial1Bufferv>
   b7108:	aa01      	add	r2, sp, #4
   b710a:	4621      	mov	r1, r4
   b710c:	4806      	ldr	r0, [pc, #24]	; (b7128 <_Z22__fetch_global_Serial1v+0x40>)
   b710e:	f7ff fd91 	bl	b6c34 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b7112:	4628      	mov	r0, r5
   b7114:	f7fc ffd7 	bl	b40c6 <__cxa_guard_release>
   b7118:	4804      	ldr	r0, [pc, #16]	; (b712c <_Z22__fetch_global_Serial1v+0x44>)
   b711a:	f000 fcf5 	bl	b7b08 <atexit>
    return serial1;
}
   b711e:	4802      	ldr	r0, [pc, #8]	; (b7128 <_Z22__fetch_global_Serial1v+0x40>)
   b7120:	b007      	add	sp, #28
   b7122:	bd30      	pop	{r4, r5, pc}
   b7124:	2003e728 	.word	0x2003e728
   b7128:	2003e72c 	.word	0x2003e72c
   b712c:	000b70b3 	.word	0x000b70b3

000b7130 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7130:	4770      	bx	lr
	...

000b7134 <_Z17acquireWireBufferv>:
{
   b7134:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b7136:	4b0a      	ldr	r3, [pc, #40]	; (b7160 <_Z17acquireWireBufferv+0x2c>)
   b7138:	6003      	str	r3, [r0, #0]
   b713a:	2301      	movs	r3, #1
{
   b713c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b713e:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7140:	4908      	ldr	r1, [pc, #32]	; (b7164 <_Z17acquireWireBufferv+0x30>)
   b7142:	2020      	movs	r0, #32
   b7144:	f000 f834 	bl	b71b0 <_ZnajRKSt9nothrow_t>
	};
   b7148:	2520      	movs	r5, #32
   b714a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b714c:	4905      	ldr	r1, [pc, #20]	; (b7164 <_Z17acquireWireBufferv+0x30>)
	};
   b714e:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7150:	4628      	mov	r0, r5
   b7152:	f000 f82d 	bl	b71b0 <_ZnajRKSt9nothrow_t>
	};
   b7156:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b715a:	4620      	mov	r0, r4
   b715c:	bd38      	pop	{r3, r4, r5, pc}
   b715e:	bf00      	nop
   b7160:	00010018 	.word	0x00010018
   b7164:	000b8520 	.word	0x000b8520

000b7168 <_Z19__fetch_global_Wirev>:
{
   b7168:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b716a:	4d0e      	ldr	r5, [pc, #56]	; (b71a4 <_Z19__fetch_global_Wirev+0x3c>)
   b716c:	7829      	ldrb	r1, [r5, #0]
   b716e:	f3bf 8f5b 	dmb	ish
   b7172:	f011 0401 	ands.w	r4, r1, #1
{
   b7176:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7178:	d111      	bne.n	b719e <_Z19__fetch_global_Wirev+0x36>
   b717a:	4628      	mov	r0, r5
   b717c:	f7fc ff9e 	bl	b40bc <__cxa_guard_acquire>
   b7180:	b168      	cbz	r0, b719e <_Z19__fetch_global_Wirev+0x36>
   b7182:	4668      	mov	r0, sp
   b7184:	f7ff ffd6 	bl	b7134 <_Z17acquireWireBufferv>
   b7188:	466a      	mov	r2, sp
   b718a:	4621      	mov	r1, r4
   b718c:	4806      	ldr	r0, [pc, #24]	; (b71a8 <_Z19__fetch_global_Wirev+0x40>)
   b718e:	f7ff fda5 	bl	b6cdc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b7192:	4628      	mov	r0, r5
   b7194:	f7fc ff97 	bl	b40c6 <__cxa_guard_release>
   b7198:	4804      	ldr	r0, [pc, #16]	; (b71ac <_Z19__fetch_global_Wirev+0x44>)
   b719a:	f000 fcb5 	bl	b7b08 <atexit>
	return wire;
}
   b719e:	4802      	ldr	r0, [pc, #8]	; (b71a8 <_Z19__fetch_global_Wirev+0x40>)
   b71a0:	b007      	add	sp, #28
   b71a2:	bd30      	pop	{r4, r5, pc}
   b71a4:	2003e744 	.word	0x2003e744
   b71a8:	2003e748 	.word	0x2003e748
   b71ac:	000b7131 	.word	0x000b7131

000b71b0 <_ZnajRKSt9nothrow_t>:
   b71b0:	f7fc bf73 	b.w	b409a <_Znaj>

000b71b4 <_ZSt25__throw_bad_function_callv>:
   b71b4:	b508      	push	{r3, lr}
   b71b6:	f7fe fcd3 	bl	b5b60 <abort>
	...

000b71bc <__aeabi_drsub>:
   b71bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b71c0:	e002      	b.n	b71c8 <__adddf3>
   b71c2:	bf00      	nop

000b71c4 <__aeabi_dsub>:
   b71c4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b71c8 <__adddf3>:
   b71c8:	b530      	push	{r4, r5, lr}
   b71ca:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b71ce:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b71d2:	ea94 0f05 	teq	r4, r5
   b71d6:	bf08      	it	eq
   b71d8:	ea90 0f02 	teqeq	r0, r2
   b71dc:	bf1f      	itttt	ne
   b71de:	ea54 0c00 	orrsne.w	ip, r4, r0
   b71e2:	ea55 0c02 	orrsne.w	ip, r5, r2
   b71e6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b71ea:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b71ee:	f000 80e2 	beq.w	b73b6 <__adddf3+0x1ee>
   b71f2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b71f6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b71fa:	bfb8      	it	lt
   b71fc:	426d      	neglt	r5, r5
   b71fe:	dd0c      	ble.n	b721a <__adddf3+0x52>
   b7200:	442c      	add	r4, r5
   b7202:	ea80 0202 	eor.w	r2, r0, r2
   b7206:	ea81 0303 	eor.w	r3, r1, r3
   b720a:	ea82 0000 	eor.w	r0, r2, r0
   b720e:	ea83 0101 	eor.w	r1, r3, r1
   b7212:	ea80 0202 	eor.w	r2, r0, r2
   b7216:	ea81 0303 	eor.w	r3, r1, r3
   b721a:	2d36      	cmp	r5, #54	; 0x36
   b721c:	bf88      	it	hi
   b721e:	bd30      	pophi	{r4, r5, pc}
   b7220:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b7224:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b7228:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b722c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b7230:	d002      	beq.n	b7238 <__adddf3+0x70>
   b7232:	4240      	negs	r0, r0
   b7234:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7238:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b723c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b7240:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b7244:	d002      	beq.n	b724c <__adddf3+0x84>
   b7246:	4252      	negs	r2, r2
   b7248:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b724c:	ea94 0f05 	teq	r4, r5
   b7250:	f000 80a7 	beq.w	b73a2 <__adddf3+0x1da>
   b7254:	f1a4 0401 	sub.w	r4, r4, #1
   b7258:	f1d5 0e20 	rsbs	lr, r5, #32
   b725c:	db0d      	blt.n	b727a <__adddf3+0xb2>
   b725e:	fa02 fc0e 	lsl.w	ip, r2, lr
   b7262:	fa22 f205 	lsr.w	r2, r2, r5
   b7266:	1880      	adds	r0, r0, r2
   b7268:	f141 0100 	adc.w	r1, r1, #0
   b726c:	fa03 f20e 	lsl.w	r2, r3, lr
   b7270:	1880      	adds	r0, r0, r2
   b7272:	fa43 f305 	asr.w	r3, r3, r5
   b7276:	4159      	adcs	r1, r3
   b7278:	e00e      	b.n	b7298 <__adddf3+0xd0>
   b727a:	f1a5 0520 	sub.w	r5, r5, #32
   b727e:	f10e 0e20 	add.w	lr, lr, #32
   b7282:	2a01      	cmp	r2, #1
   b7284:	fa03 fc0e 	lsl.w	ip, r3, lr
   b7288:	bf28      	it	cs
   b728a:	f04c 0c02 	orrcs.w	ip, ip, #2
   b728e:	fa43 f305 	asr.w	r3, r3, r5
   b7292:	18c0      	adds	r0, r0, r3
   b7294:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b7298:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b729c:	d507      	bpl.n	b72ae <__adddf3+0xe6>
   b729e:	f04f 0e00 	mov.w	lr, #0
   b72a2:	f1dc 0c00 	rsbs	ip, ip, #0
   b72a6:	eb7e 0000 	sbcs.w	r0, lr, r0
   b72aa:	eb6e 0101 	sbc.w	r1, lr, r1
   b72ae:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b72b2:	d31b      	bcc.n	b72ec <__adddf3+0x124>
   b72b4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b72b8:	d30c      	bcc.n	b72d4 <__adddf3+0x10c>
   b72ba:	0849      	lsrs	r1, r1, #1
   b72bc:	ea5f 0030 	movs.w	r0, r0, rrx
   b72c0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b72c4:	f104 0401 	add.w	r4, r4, #1
   b72c8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b72cc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b72d0:	f080 809a 	bcs.w	b7408 <__adddf3+0x240>
   b72d4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b72d8:	bf08      	it	eq
   b72da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b72de:	f150 0000 	adcs.w	r0, r0, #0
   b72e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b72e6:	ea41 0105 	orr.w	r1, r1, r5
   b72ea:	bd30      	pop	{r4, r5, pc}
   b72ec:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b72f0:	4140      	adcs	r0, r0
   b72f2:	eb41 0101 	adc.w	r1, r1, r1
   b72f6:	3c01      	subs	r4, #1
   b72f8:	bf28      	it	cs
   b72fa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b72fe:	d2e9      	bcs.n	b72d4 <__adddf3+0x10c>
   b7300:	f091 0f00 	teq	r1, #0
   b7304:	bf04      	itt	eq
   b7306:	4601      	moveq	r1, r0
   b7308:	2000      	moveq	r0, #0
   b730a:	fab1 f381 	clz	r3, r1
   b730e:	bf08      	it	eq
   b7310:	3320      	addeq	r3, #32
   b7312:	f1a3 030b 	sub.w	r3, r3, #11
   b7316:	f1b3 0220 	subs.w	r2, r3, #32
   b731a:	da0c      	bge.n	b7336 <__adddf3+0x16e>
   b731c:	320c      	adds	r2, #12
   b731e:	dd08      	ble.n	b7332 <__adddf3+0x16a>
   b7320:	f102 0c14 	add.w	ip, r2, #20
   b7324:	f1c2 020c 	rsb	r2, r2, #12
   b7328:	fa01 f00c 	lsl.w	r0, r1, ip
   b732c:	fa21 f102 	lsr.w	r1, r1, r2
   b7330:	e00c      	b.n	b734c <__adddf3+0x184>
   b7332:	f102 0214 	add.w	r2, r2, #20
   b7336:	bfd8      	it	le
   b7338:	f1c2 0c20 	rsble	ip, r2, #32
   b733c:	fa01 f102 	lsl.w	r1, r1, r2
   b7340:	fa20 fc0c 	lsr.w	ip, r0, ip
   b7344:	bfdc      	itt	le
   b7346:	ea41 010c 	orrle.w	r1, r1, ip
   b734a:	4090      	lslle	r0, r2
   b734c:	1ae4      	subs	r4, r4, r3
   b734e:	bfa2      	ittt	ge
   b7350:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b7354:	4329      	orrge	r1, r5
   b7356:	bd30      	popge	{r4, r5, pc}
   b7358:	ea6f 0404 	mvn.w	r4, r4
   b735c:	3c1f      	subs	r4, #31
   b735e:	da1c      	bge.n	b739a <__adddf3+0x1d2>
   b7360:	340c      	adds	r4, #12
   b7362:	dc0e      	bgt.n	b7382 <__adddf3+0x1ba>
   b7364:	f104 0414 	add.w	r4, r4, #20
   b7368:	f1c4 0220 	rsb	r2, r4, #32
   b736c:	fa20 f004 	lsr.w	r0, r0, r4
   b7370:	fa01 f302 	lsl.w	r3, r1, r2
   b7374:	ea40 0003 	orr.w	r0, r0, r3
   b7378:	fa21 f304 	lsr.w	r3, r1, r4
   b737c:	ea45 0103 	orr.w	r1, r5, r3
   b7380:	bd30      	pop	{r4, r5, pc}
   b7382:	f1c4 040c 	rsb	r4, r4, #12
   b7386:	f1c4 0220 	rsb	r2, r4, #32
   b738a:	fa20 f002 	lsr.w	r0, r0, r2
   b738e:	fa01 f304 	lsl.w	r3, r1, r4
   b7392:	ea40 0003 	orr.w	r0, r0, r3
   b7396:	4629      	mov	r1, r5
   b7398:	bd30      	pop	{r4, r5, pc}
   b739a:	fa21 f004 	lsr.w	r0, r1, r4
   b739e:	4629      	mov	r1, r5
   b73a0:	bd30      	pop	{r4, r5, pc}
   b73a2:	f094 0f00 	teq	r4, #0
   b73a6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b73aa:	bf06      	itte	eq
   b73ac:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b73b0:	3401      	addeq	r4, #1
   b73b2:	3d01      	subne	r5, #1
   b73b4:	e74e      	b.n	b7254 <__adddf3+0x8c>
   b73b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b73ba:	bf18      	it	ne
   b73bc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b73c0:	d029      	beq.n	b7416 <__adddf3+0x24e>
   b73c2:	ea94 0f05 	teq	r4, r5
   b73c6:	bf08      	it	eq
   b73c8:	ea90 0f02 	teqeq	r0, r2
   b73cc:	d005      	beq.n	b73da <__adddf3+0x212>
   b73ce:	ea54 0c00 	orrs.w	ip, r4, r0
   b73d2:	bf04      	itt	eq
   b73d4:	4619      	moveq	r1, r3
   b73d6:	4610      	moveq	r0, r2
   b73d8:	bd30      	pop	{r4, r5, pc}
   b73da:	ea91 0f03 	teq	r1, r3
   b73de:	bf1e      	ittt	ne
   b73e0:	2100      	movne	r1, #0
   b73e2:	2000      	movne	r0, #0
   b73e4:	bd30      	popne	{r4, r5, pc}
   b73e6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b73ea:	d105      	bne.n	b73f8 <__adddf3+0x230>
   b73ec:	0040      	lsls	r0, r0, #1
   b73ee:	4149      	adcs	r1, r1
   b73f0:	bf28      	it	cs
   b73f2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b73f6:	bd30      	pop	{r4, r5, pc}
   b73f8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b73fc:	bf3c      	itt	cc
   b73fe:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b7402:	bd30      	popcc	{r4, r5, pc}
   b7404:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7408:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b740c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b7410:	f04f 0000 	mov.w	r0, #0
   b7414:	bd30      	pop	{r4, r5, pc}
   b7416:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b741a:	bf1a      	itte	ne
   b741c:	4619      	movne	r1, r3
   b741e:	4610      	movne	r0, r2
   b7420:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b7424:	bf1c      	itt	ne
   b7426:	460b      	movne	r3, r1
   b7428:	4602      	movne	r2, r0
   b742a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b742e:	bf06      	itte	eq
   b7430:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b7434:	ea91 0f03 	teqeq	r1, r3
   b7438:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b743c:	bd30      	pop	{r4, r5, pc}
   b743e:	bf00      	nop

000b7440 <__aeabi_ui2d>:
   b7440:	f090 0f00 	teq	r0, #0
   b7444:	bf04      	itt	eq
   b7446:	2100      	moveq	r1, #0
   b7448:	4770      	bxeq	lr
   b744a:	b530      	push	{r4, r5, lr}
   b744c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7450:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7454:	f04f 0500 	mov.w	r5, #0
   b7458:	f04f 0100 	mov.w	r1, #0
   b745c:	e750      	b.n	b7300 <__adddf3+0x138>
   b745e:	bf00      	nop

000b7460 <__aeabi_i2d>:
   b7460:	f090 0f00 	teq	r0, #0
   b7464:	bf04      	itt	eq
   b7466:	2100      	moveq	r1, #0
   b7468:	4770      	bxeq	lr
   b746a:	b530      	push	{r4, r5, lr}
   b746c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7470:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7474:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b7478:	bf48      	it	mi
   b747a:	4240      	negmi	r0, r0
   b747c:	f04f 0100 	mov.w	r1, #0
   b7480:	e73e      	b.n	b7300 <__adddf3+0x138>
   b7482:	bf00      	nop

000b7484 <__aeabi_f2d>:
   b7484:	0042      	lsls	r2, r0, #1
   b7486:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b748a:	ea4f 0131 	mov.w	r1, r1, rrx
   b748e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b7492:	bf1f      	itttt	ne
   b7494:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b7498:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b749c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b74a0:	4770      	bxne	lr
   b74a2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b74a6:	bf08      	it	eq
   b74a8:	4770      	bxeq	lr
   b74aa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b74ae:	bf04      	itt	eq
   b74b0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b74b4:	4770      	bxeq	lr
   b74b6:	b530      	push	{r4, r5, lr}
   b74b8:	f44f 7460 	mov.w	r4, #896	; 0x380
   b74bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b74c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b74c4:	e71c      	b.n	b7300 <__adddf3+0x138>
   b74c6:	bf00      	nop

000b74c8 <__aeabi_ul2d>:
   b74c8:	ea50 0201 	orrs.w	r2, r0, r1
   b74cc:	bf08      	it	eq
   b74ce:	4770      	bxeq	lr
   b74d0:	b530      	push	{r4, r5, lr}
   b74d2:	f04f 0500 	mov.w	r5, #0
   b74d6:	e00a      	b.n	b74ee <__aeabi_l2d+0x16>

000b74d8 <__aeabi_l2d>:
   b74d8:	ea50 0201 	orrs.w	r2, r0, r1
   b74dc:	bf08      	it	eq
   b74de:	4770      	bxeq	lr
   b74e0:	b530      	push	{r4, r5, lr}
   b74e2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b74e6:	d502      	bpl.n	b74ee <__aeabi_l2d+0x16>
   b74e8:	4240      	negs	r0, r0
   b74ea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b74ee:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b74f2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b74f6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b74fa:	f43f aed8 	beq.w	b72ae <__adddf3+0xe6>
   b74fe:	f04f 0203 	mov.w	r2, #3
   b7502:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b7506:	bf18      	it	ne
   b7508:	3203      	addne	r2, #3
   b750a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b750e:	bf18      	it	ne
   b7510:	3203      	addne	r2, #3
   b7512:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b7516:	f1c2 0320 	rsb	r3, r2, #32
   b751a:	fa00 fc03 	lsl.w	ip, r0, r3
   b751e:	fa20 f002 	lsr.w	r0, r0, r2
   b7522:	fa01 fe03 	lsl.w	lr, r1, r3
   b7526:	ea40 000e 	orr.w	r0, r0, lr
   b752a:	fa21 f102 	lsr.w	r1, r1, r2
   b752e:	4414      	add	r4, r2
   b7530:	e6bd      	b.n	b72ae <__adddf3+0xe6>
   b7532:	bf00      	nop

000b7534 <__aeabi_dmul>:
   b7534:	b570      	push	{r4, r5, r6, lr}
   b7536:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b753a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b753e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b7542:	bf1d      	ittte	ne
   b7544:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b7548:	ea94 0f0c 	teqne	r4, ip
   b754c:	ea95 0f0c 	teqne	r5, ip
   b7550:	f000 f8de 	bleq	b7710 <__aeabi_dmul+0x1dc>
   b7554:	442c      	add	r4, r5
   b7556:	ea81 0603 	eor.w	r6, r1, r3
   b755a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b755e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b7562:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b7566:	bf18      	it	ne
   b7568:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b756c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7570:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b7574:	d038      	beq.n	b75e8 <__aeabi_dmul+0xb4>
   b7576:	fba0 ce02 	umull	ip, lr, r0, r2
   b757a:	f04f 0500 	mov.w	r5, #0
   b757e:	fbe1 e502 	umlal	lr, r5, r1, r2
   b7582:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b7586:	fbe0 e503 	umlal	lr, r5, r0, r3
   b758a:	f04f 0600 	mov.w	r6, #0
   b758e:	fbe1 5603 	umlal	r5, r6, r1, r3
   b7592:	f09c 0f00 	teq	ip, #0
   b7596:	bf18      	it	ne
   b7598:	f04e 0e01 	orrne.w	lr, lr, #1
   b759c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b75a0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b75a4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b75a8:	d204      	bcs.n	b75b4 <__aeabi_dmul+0x80>
   b75aa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b75ae:	416d      	adcs	r5, r5
   b75b0:	eb46 0606 	adc.w	r6, r6, r6
   b75b4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b75b8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b75bc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b75c0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b75c4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b75c8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b75cc:	bf88      	it	hi
   b75ce:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b75d2:	d81e      	bhi.n	b7612 <__aeabi_dmul+0xde>
   b75d4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b75d8:	bf08      	it	eq
   b75da:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b75de:	f150 0000 	adcs.w	r0, r0, #0
   b75e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b75e6:	bd70      	pop	{r4, r5, r6, pc}
   b75e8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b75ec:	ea46 0101 	orr.w	r1, r6, r1
   b75f0:	ea40 0002 	orr.w	r0, r0, r2
   b75f4:	ea81 0103 	eor.w	r1, r1, r3
   b75f8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b75fc:	bfc2      	ittt	gt
   b75fe:	ebd4 050c 	rsbsgt	r5, r4, ip
   b7602:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b7606:	bd70      	popgt	{r4, r5, r6, pc}
   b7608:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b760c:	f04f 0e00 	mov.w	lr, #0
   b7610:	3c01      	subs	r4, #1
   b7612:	f300 80ab 	bgt.w	b776c <__aeabi_dmul+0x238>
   b7616:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b761a:	bfde      	ittt	le
   b761c:	2000      	movle	r0, #0
   b761e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b7622:	bd70      	pople	{r4, r5, r6, pc}
   b7624:	f1c4 0400 	rsb	r4, r4, #0
   b7628:	3c20      	subs	r4, #32
   b762a:	da35      	bge.n	b7698 <__aeabi_dmul+0x164>
   b762c:	340c      	adds	r4, #12
   b762e:	dc1b      	bgt.n	b7668 <__aeabi_dmul+0x134>
   b7630:	f104 0414 	add.w	r4, r4, #20
   b7634:	f1c4 0520 	rsb	r5, r4, #32
   b7638:	fa00 f305 	lsl.w	r3, r0, r5
   b763c:	fa20 f004 	lsr.w	r0, r0, r4
   b7640:	fa01 f205 	lsl.w	r2, r1, r5
   b7644:	ea40 0002 	orr.w	r0, r0, r2
   b7648:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b764c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b7650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b7654:	fa21 f604 	lsr.w	r6, r1, r4
   b7658:	eb42 0106 	adc.w	r1, r2, r6
   b765c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7660:	bf08      	it	eq
   b7662:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7666:	bd70      	pop	{r4, r5, r6, pc}
   b7668:	f1c4 040c 	rsb	r4, r4, #12
   b766c:	f1c4 0520 	rsb	r5, r4, #32
   b7670:	fa00 f304 	lsl.w	r3, r0, r4
   b7674:	fa20 f005 	lsr.w	r0, r0, r5
   b7678:	fa01 f204 	lsl.w	r2, r1, r4
   b767c:	ea40 0002 	orr.w	r0, r0, r2
   b7680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b7688:	f141 0100 	adc.w	r1, r1, #0
   b768c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7690:	bf08      	it	eq
   b7692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7696:	bd70      	pop	{r4, r5, r6, pc}
   b7698:	f1c4 0520 	rsb	r5, r4, #32
   b769c:	fa00 f205 	lsl.w	r2, r0, r5
   b76a0:	ea4e 0e02 	orr.w	lr, lr, r2
   b76a4:	fa20 f304 	lsr.w	r3, r0, r4
   b76a8:	fa01 f205 	lsl.w	r2, r1, r5
   b76ac:	ea43 0302 	orr.w	r3, r3, r2
   b76b0:	fa21 f004 	lsr.w	r0, r1, r4
   b76b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b76b8:	fa21 f204 	lsr.w	r2, r1, r4
   b76bc:	ea20 0002 	bic.w	r0, r0, r2
   b76c0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b76c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b76c8:	bf08      	it	eq
   b76ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b76ce:	bd70      	pop	{r4, r5, r6, pc}
   b76d0:	f094 0f00 	teq	r4, #0
   b76d4:	d10f      	bne.n	b76f6 <__aeabi_dmul+0x1c2>
   b76d6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b76da:	0040      	lsls	r0, r0, #1
   b76dc:	eb41 0101 	adc.w	r1, r1, r1
   b76e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b76e4:	bf08      	it	eq
   b76e6:	3c01      	subeq	r4, #1
   b76e8:	d0f7      	beq.n	b76da <__aeabi_dmul+0x1a6>
   b76ea:	ea41 0106 	orr.w	r1, r1, r6
   b76ee:	f095 0f00 	teq	r5, #0
   b76f2:	bf18      	it	ne
   b76f4:	4770      	bxne	lr
   b76f6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b76fa:	0052      	lsls	r2, r2, #1
   b76fc:	eb43 0303 	adc.w	r3, r3, r3
   b7700:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b7704:	bf08      	it	eq
   b7706:	3d01      	subeq	r5, #1
   b7708:	d0f7      	beq.n	b76fa <__aeabi_dmul+0x1c6>
   b770a:	ea43 0306 	orr.w	r3, r3, r6
   b770e:	4770      	bx	lr
   b7710:	ea94 0f0c 	teq	r4, ip
   b7714:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b7718:	bf18      	it	ne
   b771a:	ea95 0f0c 	teqne	r5, ip
   b771e:	d00c      	beq.n	b773a <__aeabi_dmul+0x206>
   b7720:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7724:	bf18      	it	ne
   b7726:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b772a:	d1d1      	bne.n	b76d0 <__aeabi_dmul+0x19c>
   b772c:	ea81 0103 	eor.w	r1, r1, r3
   b7730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7734:	f04f 0000 	mov.w	r0, #0
   b7738:	bd70      	pop	{r4, r5, r6, pc}
   b773a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b773e:	bf06      	itte	eq
   b7740:	4610      	moveq	r0, r2
   b7742:	4619      	moveq	r1, r3
   b7744:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7748:	d019      	beq.n	b777e <__aeabi_dmul+0x24a>
   b774a:	ea94 0f0c 	teq	r4, ip
   b774e:	d102      	bne.n	b7756 <__aeabi_dmul+0x222>
   b7750:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b7754:	d113      	bne.n	b777e <__aeabi_dmul+0x24a>
   b7756:	ea95 0f0c 	teq	r5, ip
   b775a:	d105      	bne.n	b7768 <__aeabi_dmul+0x234>
   b775c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b7760:	bf1c      	itt	ne
   b7762:	4610      	movne	r0, r2
   b7764:	4619      	movne	r1, r3
   b7766:	d10a      	bne.n	b777e <__aeabi_dmul+0x24a>
   b7768:	ea81 0103 	eor.w	r1, r1, r3
   b776c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7770:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b7774:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b7778:	f04f 0000 	mov.w	r0, #0
   b777c:	bd70      	pop	{r4, r5, r6, pc}
   b777e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b7782:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b7786:	bd70      	pop	{r4, r5, r6, pc}

000b7788 <__aeabi_ddiv>:
   b7788:	b570      	push	{r4, r5, r6, lr}
   b778a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b778e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b7792:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b7796:	bf1d      	ittte	ne
   b7798:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b779c:	ea94 0f0c 	teqne	r4, ip
   b77a0:	ea95 0f0c 	teqne	r5, ip
   b77a4:	f000 f8a7 	bleq	b78f6 <__aeabi_ddiv+0x16e>
   b77a8:	eba4 0405 	sub.w	r4, r4, r5
   b77ac:	ea81 0e03 	eor.w	lr, r1, r3
   b77b0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b77b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b77b8:	f000 8088 	beq.w	b78cc <__aeabi_ddiv+0x144>
   b77bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b77c0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b77c4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b77c8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b77cc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b77d0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b77d4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b77d8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b77dc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b77e0:	429d      	cmp	r5, r3
   b77e2:	bf08      	it	eq
   b77e4:	4296      	cmpeq	r6, r2
   b77e6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b77ea:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b77ee:	d202      	bcs.n	b77f6 <__aeabi_ddiv+0x6e>
   b77f0:	085b      	lsrs	r3, r3, #1
   b77f2:	ea4f 0232 	mov.w	r2, r2, rrx
   b77f6:	1ab6      	subs	r6, r6, r2
   b77f8:	eb65 0503 	sbc.w	r5, r5, r3
   b77fc:	085b      	lsrs	r3, r3, #1
   b77fe:	ea4f 0232 	mov.w	r2, r2, rrx
   b7802:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b7806:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b780a:	ebb6 0e02 	subs.w	lr, r6, r2
   b780e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7812:	bf22      	ittt	cs
   b7814:	1ab6      	subcs	r6, r6, r2
   b7816:	4675      	movcs	r5, lr
   b7818:	ea40 000c 	orrcs.w	r0, r0, ip
   b781c:	085b      	lsrs	r3, r3, #1
   b781e:	ea4f 0232 	mov.w	r2, r2, rrx
   b7822:	ebb6 0e02 	subs.w	lr, r6, r2
   b7826:	eb75 0e03 	sbcs.w	lr, r5, r3
   b782a:	bf22      	ittt	cs
   b782c:	1ab6      	subcs	r6, r6, r2
   b782e:	4675      	movcs	r5, lr
   b7830:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b7834:	085b      	lsrs	r3, r3, #1
   b7836:	ea4f 0232 	mov.w	r2, r2, rrx
   b783a:	ebb6 0e02 	subs.w	lr, r6, r2
   b783e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7842:	bf22      	ittt	cs
   b7844:	1ab6      	subcs	r6, r6, r2
   b7846:	4675      	movcs	r5, lr
   b7848:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b784c:	085b      	lsrs	r3, r3, #1
   b784e:	ea4f 0232 	mov.w	r2, r2, rrx
   b7852:	ebb6 0e02 	subs.w	lr, r6, r2
   b7856:	eb75 0e03 	sbcs.w	lr, r5, r3
   b785a:	bf22      	ittt	cs
   b785c:	1ab6      	subcs	r6, r6, r2
   b785e:	4675      	movcs	r5, lr
   b7860:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b7864:	ea55 0e06 	orrs.w	lr, r5, r6
   b7868:	d018      	beq.n	b789c <__aeabi_ddiv+0x114>
   b786a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b786e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b7872:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b7876:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b787a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b787e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b7882:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b7886:	d1c0      	bne.n	b780a <__aeabi_ddiv+0x82>
   b7888:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b788c:	d10b      	bne.n	b78a6 <__aeabi_ddiv+0x11e>
   b788e:	ea41 0100 	orr.w	r1, r1, r0
   b7892:	f04f 0000 	mov.w	r0, #0
   b7896:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b789a:	e7b6      	b.n	b780a <__aeabi_ddiv+0x82>
   b789c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b78a0:	bf04      	itt	eq
   b78a2:	4301      	orreq	r1, r0
   b78a4:	2000      	moveq	r0, #0
   b78a6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b78aa:	bf88      	it	hi
   b78ac:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b78b0:	f63f aeaf 	bhi.w	b7612 <__aeabi_dmul+0xde>
   b78b4:	ebb5 0c03 	subs.w	ip, r5, r3
   b78b8:	bf04      	itt	eq
   b78ba:	ebb6 0c02 	subseq.w	ip, r6, r2
   b78be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b78c2:	f150 0000 	adcs.w	r0, r0, #0
   b78c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b78ca:	bd70      	pop	{r4, r5, r6, pc}
   b78cc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b78d0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b78d4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b78d8:	bfc2      	ittt	gt
   b78da:	ebd4 050c 	rsbsgt	r5, r4, ip
   b78de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b78e2:	bd70      	popgt	{r4, r5, r6, pc}
   b78e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b78e8:	f04f 0e00 	mov.w	lr, #0
   b78ec:	3c01      	subs	r4, #1
   b78ee:	e690      	b.n	b7612 <__aeabi_dmul+0xde>
   b78f0:	ea45 0e06 	orr.w	lr, r5, r6
   b78f4:	e68d      	b.n	b7612 <__aeabi_dmul+0xde>
   b78f6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b78fa:	ea94 0f0c 	teq	r4, ip
   b78fe:	bf08      	it	eq
   b7900:	ea95 0f0c 	teqeq	r5, ip
   b7904:	f43f af3b 	beq.w	b777e <__aeabi_dmul+0x24a>
   b7908:	ea94 0f0c 	teq	r4, ip
   b790c:	d10a      	bne.n	b7924 <__aeabi_ddiv+0x19c>
   b790e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b7912:	f47f af34 	bne.w	b777e <__aeabi_dmul+0x24a>
   b7916:	ea95 0f0c 	teq	r5, ip
   b791a:	f47f af25 	bne.w	b7768 <__aeabi_dmul+0x234>
   b791e:	4610      	mov	r0, r2
   b7920:	4619      	mov	r1, r3
   b7922:	e72c      	b.n	b777e <__aeabi_dmul+0x24a>
   b7924:	ea95 0f0c 	teq	r5, ip
   b7928:	d106      	bne.n	b7938 <__aeabi_ddiv+0x1b0>
   b792a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b792e:	f43f aefd 	beq.w	b772c <__aeabi_dmul+0x1f8>
   b7932:	4610      	mov	r0, r2
   b7934:	4619      	mov	r1, r3
   b7936:	e722      	b.n	b777e <__aeabi_dmul+0x24a>
   b7938:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b793c:	bf18      	it	ne
   b793e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7942:	f47f aec5 	bne.w	b76d0 <__aeabi_dmul+0x19c>
   b7946:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b794a:	f47f af0d 	bne.w	b7768 <__aeabi_dmul+0x234>
   b794e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b7952:	f47f aeeb 	bne.w	b772c <__aeabi_dmul+0x1f8>
   b7956:	e712      	b.n	b777e <__aeabi_dmul+0x24a>

000b7958 <__gedf2>:
   b7958:	f04f 3cff 	mov.w	ip, #4294967295
   b795c:	e006      	b.n	b796c <__cmpdf2+0x4>
   b795e:	bf00      	nop

000b7960 <__ledf2>:
   b7960:	f04f 0c01 	mov.w	ip, #1
   b7964:	e002      	b.n	b796c <__cmpdf2+0x4>
   b7966:	bf00      	nop

000b7968 <__cmpdf2>:
   b7968:	f04f 0c01 	mov.w	ip, #1
   b796c:	f84d cd04 	str.w	ip, [sp, #-4]!
   b7970:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b7974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7978:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b797c:	bf18      	it	ne
   b797e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b7982:	d01b      	beq.n	b79bc <__cmpdf2+0x54>
   b7984:	b001      	add	sp, #4
   b7986:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b798a:	bf0c      	ite	eq
   b798c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b7990:	ea91 0f03 	teqne	r1, r3
   b7994:	bf02      	ittt	eq
   b7996:	ea90 0f02 	teqeq	r0, r2
   b799a:	2000      	moveq	r0, #0
   b799c:	4770      	bxeq	lr
   b799e:	f110 0f00 	cmn.w	r0, #0
   b79a2:	ea91 0f03 	teq	r1, r3
   b79a6:	bf58      	it	pl
   b79a8:	4299      	cmppl	r1, r3
   b79aa:	bf08      	it	eq
   b79ac:	4290      	cmpeq	r0, r2
   b79ae:	bf2c      	ite	cs
   b79b0:	17d8      	asrcs	r0, r3, #31
   b79b2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b79b6:	f040 0001 	orr.w	r0, r0, #1
   b79ba:	4770      	bx	lr
   b79bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b79c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b79c4:	d102      	bne.n	b79cc <__cmpdf2+0x64>
   b79c6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b79ca:	d107      	bne.n	b79dc <__cmpdf2+0x74>
   b79cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b79d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b79d4:	d1d6      	bne.n	b7984 <__cmpdf2+0x1c>
   b79d6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b79da:	d0d3      	beq.n	b7984 <__cmpdf2+0x1c>
   b79dc:	f85d 0b04 	ldr.w	r0, [sp], #4
   b79e0:	4770      	bx	lr
   b79e2:	bf00      	nop

000b79e4 <__aeabi_cdrcmple>:
   b79e4:	4684      	mov	ip, r0
   b79e6:	4610      	mov	r0, r2
   b79e8:	4662      	mov	r2, ip
   b79ea:	468c      	mov	ip, r1
   b79ec:	4619      	mov	r1, r3
   b79ee:	4663      	mov	r3, ip
   b79f0:	e000      	b.n	b79f4 <__aeabi_cdcmpeq>
   b79f2:	bf00      	nop

000b79f4 <__aeabi_cdcmpeq>:
   b79f4:	b501      	push	{r0, lr}
   b79f6:	f7ff ffb7 	bl	b7968 <__cmpdf2>
   b79fa:	2800      	cmp	r0, #0
   b79fc:	bf48      	it	mi
   b79fe:	f110 0f00 	cmnmi.w	r0, #0
   b7a02:	bd01      	pop	{r0, pc}

000b7a04 <__aeabi_dcmpeq>:
   b7a04:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7a08:	f7ff fff4 	bl	b79f4 <__aeabi_cdcmpeq>
   b7a0c:	bf0c      	ite	eq
   b7a0e:	2001      	moveq	r0, #1
   b7a10:	2000      	movne	r0, #0
   b7a12:	f85d fb08 	ldr.w	pc, [sp], #8
   b7a16:	bf00      	nop

000b7a18 <__aeabi_dcmplt>:
   b7a18:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7a1c:	f7ff ffea 	bl	b79f4 <__aeabi_cdcmpeq>
   b7a20:	bf34      	ite	cc
   b7a22:	2001      	movcc	r0, #1
   b7a24:	2000      	movcs	r0, #0
   b7a26:	f85d fb08 	ldr.w	pc, [sp], #8
   b7a2a:	bf00      	nop

000b7a2c <__aeabi_dcmple>:
   b7a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7a30:	f7ff ffe0 	bl	b79f4 <__aeabi_cdcmpeq>
   b7a34:	bf94      	ite	ls
   b7a36:	2001      	movls	r0, #1
   b7a38:	2000      	movhi	r0, #0
   b7a3a:	f85d fb08 	ldr.w	pc, [sp], #8
   b7a3e:	bf00      	nop

000b7a40 <__aeabi_dcmpge>:
   b7a40:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7a44:	f7ff ffce 	bl	b79e4 <__aeabi_cdrcmple>
   b7a48:	bf94      	ite	ls
   b7a4a:	2001      	movls	r0, #1
   b7a4c:	2000      	movhi	r0, #0
   b7a4e:	f85d fb08 	ldr.w	pc, [sp], #8
   b7a52:	bf00      	nop

000b7a54 <__aeabi_dcmpgt>:
   b7a54:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7a58:	f7ff ffc4 	bl	b79e4 <__aeabi_cdrcmple>
   b7a5c:	bf34      	ite	cc
   b7a5e:	2001      	movcc	r0, #1
   b7a60:	2000      	movcs	r0, #0
   b7a62:	f85d fb08 	ldr.w	pc, [sp], #8
   b7a66:	bf00      	nop

000b7a68 <__aeabi_d2f>:
   b7a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b7a6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b7a70:	bf24      	itt	cs
   b7a72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b7a76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b7a7a:	d90d      	bls.n	b7a98 <__aeabi_d2f+0x30>
   b7a7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b7a80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b7a84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b7a88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b7a8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b7a90:	bf08      	it	eq
   b7a92:	f020 0001 	biceq.w	r0, r0, #1
   b7a96:	4770      	bx	lr
   b7a98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b7a9c:	d121      	bne.n	b7ae2 <__aeabi_d2f+0x7a>
   b7a9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b7aa2:	bfbc      	itt	lt
   b7aa4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b7aa8:	4770      	bxlt	lr
   b7aaa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7aae:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b7ab2:	f1c2 0218 	rsb	r2, r2, #24
   b7ab6:	f1c2 0c20 	rsb	ip, r2, #32
   b7aba:	fa10 f30c 	lsls.w	r3, r0, ip
   b7abe:	fa20 f002 	lsr.w	r0, r0, r2
   b7ac2:	bf18      	it	ne
   b7ac4:	f040 0001 	orrne.w	r0, r0, #1
   b7ac8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b7acc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b7ad0:	fa03 fc0c 	lsl.w	ip, r3, ip
   b7ad4:	ea40 000c 	orr.w	r0, r0, ip
   b7ad8:	fa23 f302 	lsr.w	r3, r3, r2
   b7adc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b7ae0:	e7cc      	b.n	b7a7c <__aeabi_d2f+0x14>
   b7ae2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b7ae6:	d107      	bne.n	b7af8 <__aeabi_d2f+0x90>
   b7ae8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b7aec:	bf1e      	ittt	ne
   b7aee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b7af2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b7af6:	4770      	bxne	lr
   b7af8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b7afc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b7b00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b7b04:	4770      	bx	lr
   b7b06:	bf00      	nop

000b7b08 <atexit>:
   b7b08:	2300      	movs	r3, #0
   b7b0a:	4601      	mov	r1, r0
   b7b0c:	461a      	mov	r2, r3
   b7b0e:	4618      	mov	r0, r3
   b7b10:	f000 b872 	b.w	b7bf8 <__register_exitproc>

000b7b14 <memcpy>:
   b7b14:	440a      	add	r2, r1
   b7b16:	4291      	cmp	r1, r2
   b7b18:	f100 33ff 	add.w	r3, r0, #4294967295
   b7b1c:	d100      	bne.n	b7b20 <memcpy+0xc>
   b7b1e:	4770      	bx	lr
   b7b20:	b510      	push	{r4, lr}
   b7b22:	f811 4b01 	ldrb.w	r4, [r1], #1
   b7b26:	f803 4f01 	strb.w	r4, [r3, #1]!
   b7b2a:	4291      	cmp	r1, r2
   b7b2c:	d1f9      	bne.n	b7b22 <memcpy+0xe>
   b7b2e:	bd10      	pop	{r4, pc}

000b7b30 <memset>:
   b7b30:	4402      	add	r2, r0
   b7b32:	4603      	mov	r3, r0
   b7b34:	4293      	cmp	r3, r2
   b7b36:	d100      	bne.n	b7b3a <memset+0xa>
   b7b38:	4770      	bx	lr
   b7b3a:	f803 1b01 	strb.w	r1, [r3], #1
   b7b3e:	e7f9      	b.n	b7b34 <memset+0x4>

000b7b40 <srand>:
   b7b40:	b538      	push	{r3, r4, r5, lr}
   b7b42:	4b10      	ldr	r3, [pc, #64]	; (b7b84 <srand+0x44>)
   b7b44:	681d      	ldr	r5, [r3, #0]
   b7b46:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7b48:	4604      	mov	r4, r0
   b7b4a:	b9b3      	cbnz	r3, b7b7a <srand+0x3a>
   b7b4c:	2018      	movs	r0, #24
   b7b4e:	f7fd ffe7 	bl	b5b20 <malloc>
   b7b52:	4602      	mov	r2, r0
   b7b54:	63a8      	str	r0, [r5, #56]	; 0x38
   b7b56:	b920      	cbnz	r0, b7b62 <srand+0x22>
   b7b58:	4b0b      	ldr	r3, [pc, #44]	; (b7b88 <srand+0x48>)
   b7b5a:	480c      	ldr	r0, [pc, #48]	; (b7b8c <srand+0x4c>)
   b7b5c:	2142      	movs	r1, #66	; 0x42
   b7b5e:	f7fe f80f 	bl	b5b80 <__assert_func>
   b7b62:	490b      	ldr	r1, [pc, #44]	; (b7b90 <srand+0x50>)
   b7b64:	4b0b      	ldr	r3, [pc, #44]	; (b7b94 <srand+0x54>)
   b7b66:	e9c0 1300 	strd	r1, r3, [r0]
   b7b6a:	4b0b      	ldr	r3, [pc, #44]	; (b7b98 <srand+0x58>)
   b7b6c:	6083      	str	r3, [r0, #8]
   b7b6e:	230b      	movs	r3, #11
   b7b70:	8183      	strh	r3, [r0, #12]
   b7b72:	2100      	movs	r1, #0
   b7b74:	2001      	movs	r0, #1
   b7b76:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b7b7a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7b7c:	2200      	movs	r2, #0
   b7b7e:	611c      	str	r4, [r3, #16]
   b7b80:	615a      	str	r2, [r3, #20]
   b7b82:	bd38      	pop	{r3, r4, r5, pc}
   b7b84:	2003e59c 	.word	0x2003e59c
   b7b88:	000b8521 	.word	0x000b8521
   b7b8c:	000b8538 	.word	0x000b8538
   b7b90:	abcd330e 	.word	0xabcd330e
   b7b94:	e66d1234 	.word	0xe66d1234
   b7b98:	0005deec 	.word	0x0005deec

000b7b9c <strcpy>:
   b7b9c:	4603      	mov	r3, r0
   b7b9e:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7ba2:	f803 2b01 	strb.w	r2, [r3], #1
   b7ba6:	2a00      	cmp	r2, #0
   b7ba8:	d1f9      	bne.n	b7b9e <strcpy+0x2>
   b7baa:	4770      	bx	lr

000b7bac <strdup>:
   b7bac:	4b02      	ldr	r3, [pc, #8]	; (b7bb8 <strdup+0xc>)
   b7bae:	4601      	mov	r1, r0
   b7bb0:	6818      	ldr	r0, [r3, #0]
   b7bb2:	f000 b803 	b.w	b7bbc <_strdup_r>
   b7bb6:	bf00      	nop
   b7bb8:	2003e59c 	.word	0x2003e59c

000b7bbc <_strdup_r>:
   b7bbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7bbe:	4604      	mov	r4, r0
   b7bc0:	4608      	mov	r0, r1
   b7bc2:	460d      	mov	r5, r1
   b7bc4:	f000 f80f 	bl	b7be6 <strlen>
   b7bc8:	1c42      	adds	r2, r0, #1
   b7bca:	4611      	mov	r1, r2
   b7bcc:	4620      	mov	r0, r4
   b7bce:	9201      	str	r2, [sp, #4]
   b7bd0:	f7fd ffce 	bl	b5b70 <_malloc_r>
   b7bd4:	4604      	mov	r4, r0
   b7bd6:	b118      	cbz	r0, b7be0 <_strdup_r+0x24>
   b7bd8:	9a01      	ldr	r2, [sp, #4]
   b7bda:	4629      	mov	r1, r5
   b7bdc:	f7ff ff9a 	bl	b7b14 <memcpy>
   b7be0:	4620      	mov	r0, r4
   b7be2:	b003      	add	sp, #12
   b7be4:	bd30      	pop	{r4, r5, pc}

000b7be6 <strlen>:
   b7be6:	4603      	mov	r3, r0
   b7be8:	f813 2b01 	ldrb.w	r2, [r3], #1
   b7bec:	2a00      	cmp	r2, #0
   b7bee:	d1fb      	bne.n	b7be8 <strlen+0x2>
   b7bf0:	1a18      	subs	r0, r3, r0
   b7bf2:	3801      	subs	r0, #1
   b7bf4:	4770      	bx	lr
	...

000b7bf8 <__register_exitproc>:
   b7bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7bfc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b7cb8 <__register_exitproc+0xc0>
   b7c00:	4606      	mov	r6, r0
   b7c02:	f8d8 0000 	ldr.w	r0, [r8]
   b7c06:	461f      	mov	r7, r3
   b7c08:	460d      	mov	r5, r1
   b7c0a:	4691      	mov	r9, r2
   b7c0c:	f000 f856 	bl	b7cbc <__retarget_lock_acquire_recursive>
   b7c10:	4b25      	ldr	r3, [pc, #148]	; (b7ca8 <__register_exitproc+0xb0>)
   b7c12:	681c      	ldr	r4, [r3, #0]
   b7c14:	b934      	cbnz	r4, b7c24 <__register_exitproc+0x2c>
   b7c16:	4c25      	ldr	r4, [pc, #148]	; (b7cac <__register_exitproc+0xb4>)
   b7c18:	601c      	str	r4, [r3, #0]
   b7c1a:	4b25      	ldr	r3, [pc, #148]	; (b7cb0 <__register_exitproc+0xb8>)
   b7c1c:	b113      	cbz	r3, b7c24 <__register_exitproc+0x2c>
   b7c1e:	681b      	ldr	r3, [r3, #0]
   b7c20:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7c24:	6863      	ldr	r3, [r4, #4]
   b7c26:	2b1f      	cmp	r3, #31
   b7c28:	dd07      	ble.n	b7c3a <__register_exitproc+0x42>
   b7c2a:	f8d8 0000 	ldr.w	r0, [r8]
   b7c2e:	f000 f847 	bl	b7cc0 <__retarget_lock_release_recursive>
   b7c32:	f04f 30ff 	mov.w	r0, #4294967295
   b7c36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7c3a:	b34e      	cbz	r6, b7c90 <__register_exitproc+0x98>
   b7c3c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b7c40:	b988      	cbnz	r0, b7c66 <__register_exitproc+0x6e>
   b7c42:	4b1c      	ldr	r3, [pc, #112]	; (b7cb4 <__register_exitproc+0xbc>)
   b7c44:	b923      	cbnz	r3, b7c50 <__register_exitproc+0x58>
   b7c46:	f8d8 0000 	ldr.w	r0, [r8]
   b7c4a:	f000 f838 	bl	b7cbe <__retarget_lock_release>
   b7c4e:	e7f0      	b.n	b7c32 <__register_exitproc+0x3a>
   b7c50:	f44f 7084 	mov.w	r0, #264	; 0x108
   b7c54:	f7fd ff64 	bl	b5b20 <malloc>
   b7c58:	2800      	cmp	r0, #0
   b7c5a:	d0f4      	beq.n	b7c46 <__register_exitproc+0x4e>
   b7c5c:	2300      	movs	r3, #0
   b7c5e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b7c62:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b7c66:	6863      	ldr	r3, [r4, #4]
   b7c68:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b7c6c:	2201      	movs	r2, #1
   b7c6e:	409a      	lsls	r2, r3
   b7c70:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b7c74:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b7c78:	4313      	orrs	r3, r2
   b7c7a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b7c7e:	2e02      	cmp	r6, #2
   b7c80:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b7c84:	bf02      	ittt	eq
   b7c86:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b7c8a:	4313      	orreq	r3, r2
   b7c8c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b7c90:	6863      	ldr	r3, [r4, #4]
   b7c92:	f8d8 0000 	ldr.w	r0, [r8]
   b7c96:	1c5a      	adds	r2, r3, #1
   b7c98:	3302      	adds	r3, #2
   b7c9a:	6062      	str	r2, [r4, #4]
   b7c9c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b7ca0:	f000 f80e 	bl	b7cc0 <__retarget_lock_release_recursive>
   b7ca4:	2000      	movs	r0, #0
   b7ca6:	e7c6      	b.n	b7c36 <__register_exitproc+0x3e>
   b7ca8:	2003e7e8 	.word	0x2003e7e8
   b7cac:	2003e75c 	.word	0x2003e75c
   b7cb0:	00000000 	.word	0x00000000
   b7cb4:	000b5b21 	.word	0x000b5b21
   b7cb8:	2003e600 	.word	0x2003e600

000b7cbc <__retarget_lock_acquire_recursive>:
   b7cbc:	4770      	bx	lr

000b7cbe <__retarget_lock_release>:
   b7cbe:	4770      	bx	lr

000b7cc0 <__retarget_lock_release_recursive>:
   b7cc0:	4770      	bx	lr

000b7cc2 <link_code_end>:
	...

000b7cc4 <dynalib_user>:
   b7cc4:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b7cd4:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b7ce4:	7620 7269 7574 6c61 4200 454d 3832 2030      virtual.BME280 
   b7cf4:	7461 6120 6464 6572 7373 3020 2578 3230     at address 0x%02
   b7d04:	2058 6166 6c69 6465 7420 206f 7473 7261     X failed to star
   b7d14:	0074 6f4e 2074 7570 6c62 7369 6968 676e     t.Not publishing
   b7d24:	203a 4e00 746f 6320 6e6f 656e 7463 6465     : .Not connected
   b7d34:	202c 7562 2074 6f77 6c75 2064 7570 6c62     , but would publ
   b7d44:	7369 3a68 0020 7550 6c62 7369 6968 676e     ish: .Publishing
   b7d54:	7420 6d65 4670 203a 2500 322e 0a66 2500      tempF: .%.2f..%
   b7d64:	322e 0066 6574 706d 0046 6c43 736f 6465     .2f.tempF.Closed
   b7d74:	2e2e 0a2e 3a54 2520 322e 4666 520a 3a48     ....T: %.2fF.RH:
   b7d84:	2e25 6632 2525 0020 704f 6e65 7328 6868     %.2f%% .Open(shh
   b7d94:	0a29 3a54 2520 322e 4666 520a 3a48 2e25     ).T: %.2fF.RH:%.
   b7da4:	6632 2525 0020 704f 6e65 0a21 3a54 2520     2f%% .Open!.T: %
   b7db4:	322e 4666 520a 3a48 2e25 6632 2525 0020     .2fF.RH:%.2f%% .
   b7dc4:	7325 6400 6665 7561 746c 0020 534d 0042     %s.default .MSB.
   b7dd4:	534c 0042 533c 4950 6553 7474 6e69 7367     LSB.<SPISettings
   b7de4:	6420 6665 7561 746c 003e 533c 4950 6553      default>.<SPISe
   b7df4:	7474 6e69 7367 2520 2573 2075 7325 4d20     ttings %s%u %s M
   b7e04:	444f 2545 3e75 0000                         ODE%u>..

000b7e0c <_ZTVN8particle11SPISettingsE>:
	...
   b7e14:	44a5 000b 4495 000b 4497 000b               .D...D...D..

000b7e20 <_ZTV16Adafruit_SSD1306>:
	...
   b7e28:	4ee1 000b 4f71 000b 55dd 000b 6171 000b     .N..qO...U..qa..
   b7e38:	4ee5 000b 52f5 000b 4d6d 000b 4bfd 000b     .N...R..mM...K..
   b7e48:	53b3 000b 5451 000b 5487 000b 54a3 000b     .S..QT...T...T..

000b7e58 <_ZL4font>:
   b7e58:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b7e68:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b7e78:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b7e88:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b7e98:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b7ea8:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b7eb8:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b7ec8:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b7ed8:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b7ee8:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b7ef8:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b7f08:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b7f18:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b7f28:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b7f38:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b7f48:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b7f58:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b7f68:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b7f78:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b7f88:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b7f98:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b7fa8:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b7fb8:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b7fc8:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b7fd8:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b7fe8:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b7ff8:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b8008:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b8018:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b8028:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b8038:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b8048:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b8058:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b8068:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b8078:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b8088:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b8098:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b80a8:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b80b8:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b80c8:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b80d8:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b80e8:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   b80f8:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b8108:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b8118:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   b8128:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b8138:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   b8148:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   b8158:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   b8168:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b8178:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b8188:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b8198:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b81a8:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b81b8:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b81c8:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   b81d8:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   b81e8:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   b81f8:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   b8208:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   b8218:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   b8228:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   b8238:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   b8248:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   b8258:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   b8268:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   b8278:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   b8288:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   b8298:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   b82a8:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   b82b8:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   b82c8:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   b82d8:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   b82e8:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   b82f8:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   b8308:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   b8318:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   b8328:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   b8338:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   b8348:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000b8354 <_ZTV12Adafruit_GFX>:
	...
   b8364:	55dd 000b 6171 000b 40a5 000b 52f5 000b     .U..qa...@...R..
   b8374:	541b 000b 5437 000b 53b3 000b 5451 000b     .T..7T...S..QT..
   b8384:	5487 000b 54a3 000b                         .T...T..

000b838c <_ZTVN5spark13EthernetClassE>:
	...
   b8394:	5bff 000b 5bf5 000b 5beb 000b 5be1 000b     .[...[...[...[..
   b83a4:	5bd5 000b 5bc9 000b 6e55 000b 6e5d 000b     .[...[..Un..]n..
   b83b4:	5bbd 000b 5bb5 000b 5bab 000b 5ba1 000b     .[...[...[...[..
   b83c4:	6e8d 000b                                   .n..

000b83c8 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b83c8:	0800 1810 2820 3830 7061 0070 5925 252d     .... (08app.%Y-%
   b83d8:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   b83e8:	7361 7463 6d69 0065                         asctime.

000b83f0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b83f8:	6491 000b 6497 000b 64d5 000b 64a5 000b     .d...d...d...d..
   b8408:	6493 000b                                   .d..

000b840c <_ZTV9IPAddress>:
	...
   b8414:	69d1 000b 69c1 000b 69c3 000b               .i...i...i..

000b8420 <_ZTV9USBSerial>:
	...
   b8428:	6ab7 000b 6b1f 000b 6af5 000b 6171 000b     .j...k...j..qa..
   b8438:	6ae7 000b 6ab9 000b 6ac9 000b 6b19 000b     .j...j...j...k..
   b8448:	6ad9 000b 6ab1 000b                         .j...j..

000b8450 <_ZTV11USARTSerial>:
	...
   b8458:	6bb9 000b 6c25 000b 6bfd 000b 6171 000b     .k..%l...k..qa..
   b8468:	6bcd 000b 6be9 000b 6bdb 000b 6bf7 000b     .k...k...k...k..
   b8478:	6bbb 000b 6bbf 000b                         .k...k..

000b8480 <_ZTV7TwoWire>:
	...
   b8488:	6c85 000b 6ccf 000b 6ca7 000b 6c87 000b     .l...l...l...l..
   b8498:	6caf 000b 6cb7 000b 6cbf 000b 6cc7 000b     .l...l...l...l..

000b84a8 <_ZTVN5spark9WiFiClassE>:
	...
   b84b0:	6df7 000b 6ded 000b 6de3 000b 6d99 000b     .m...m...m...m..
   b84c0:	6dd7 000b 6dcb 000b 6e55 000b 6e5d 000b     .m...m..Un..]n..
   b84d0:	6dbf 000b 6db7 000b 6dad 000b 6da3 000b     .m...m...m...m..
   b84e0:	6e8d 000b                                   .n..

000b84e4 <_ZTVN5spark12NetworkClassE>:
	...
   b84ec:	6e15 000b 6e1f 000b 6e29 000b 6e33 000b     .n...n..)n..3n..
   b84fc:	6e3d 000b 6e49 000b 6e55 000b 6e5d 000b     =n..In..Un..]n..
   b850c:	6e65 000b 6e71 000b 6e79 000b 6e83 000b     en..qn..yn...n..
   b851c:	6e8d 000b                                   .n..

000b8520 <_ZSt7nothrow>:
   b8520:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b8530:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   b8540:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   b8550:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   b8560:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   b8570:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   b8580:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   b8590:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   b85a0:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   b85b0:	646e 632e                                    nd.c.

000b85b5 <link_const_variable_data_end>:
   b85b5:	00          	.byte	0x00
	...

000b85b8 <link_constructors_location>:
   b85b8:	000b443d 	.word	0x000b443d
   b85bc:	000b5c09 	.word	0x000b5c09
   b85c0:	000b5f75 	.word	0x000b5f75
   b85c4:	000b6161 	.word	0x000b6161
   b85c8:	000b6285 	.word	0x000b6285
   b85cc:	000b6295 	.word	0x000b6295
   b85d0:	000b634d 	.word	0x000b634d
   b85d4:	000b6e01 	.word	0x000b6e01
   b85d8:	000b6f65 	.word	0x000b6f65

000b85dc <link_constructors_end>:
   b85dc:	00000000 	.word	0x00000000
