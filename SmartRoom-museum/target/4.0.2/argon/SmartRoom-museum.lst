
c:/Users/nick/Documents/IoT/SmartRoom/SmartRoom-museum/target/4.0.2/argon/SmartRoom-museum.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005080  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b90a0  000b90a0  000090a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b90c4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000004a0  2003e0bc  000b90c8  0001e0bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000294  2003e560  2003e560  0002e560  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000b9568  000b9568  00029568  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b9590  000b9590  00029590  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001348cf  00000000  00000000  00029594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00015634  00000000  00000000  0015de63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0003dc4f  00000000  00000000  00173497  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000031d8  00000000  00000000  001b10e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000aa30  00000000  00000000  001b42be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003ee8c  00000000  00000000  001becee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000486d4  00000000  00000000  001fdb7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00138225  00000000  00000000  0024624e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00008eb0  00000000  00000000  0037e474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f004 f9ab 	bl	b838c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f004 f9b3 	bl	b83a8 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e0bc 	.word	0x2003e0bc
   b404c:	000b90c8 	.word	0x000b90c8
   b4050:	2003e55c 	.word	0x2003e55c
   b4054:	2003e560 	.word	0x2003e560
   b4058:	2003e7f1 	.word	0x2003e7f1

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f002 fcdb 	bl	b6a1c <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b9070 	.word	0x000b9070
   b4080:	000b9094 	.word	0x000b9094

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b9d4 	b.w	b4430 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fa59 	bl	b4540 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f002 bc7b 	b.w	b698c <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f001 bf77 	b.w	b5f88 <malloc>

000b409a <_Znaj>:
   b409a:	f001 bf75 	b.w	b5f88 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f001 bf7b 	b.w	b5f98 <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f001 fec0 	bl	b5e30 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b5af1 	.word	0x000b5af1
   b40b8:	000b8528 	.word	0x000b8528

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   b40cc:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b40ce:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   b40d0:	4606      	mov	r6, r0
   b40d2:	4615      	mov	r5, r2
        if (n < 0 && base == 10) {
   b40d4:	da0b      	bge.n	b40ee <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
   b40d6:	2a0a      	cmp	r2, #10
   b40d8:	d109      	bne.n	b40ee <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
            t = print('-');
   b40da:	212d      	movs	r1, #45	; 0x2d
   b40dc:	f002 fb38 	bl	b6750 <_ZN5Print5printEc>
            val = -n;
   b40e0:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b40e2:	b2ea      	uxtb	r2, r5
   b40e4:	4630      	mov	r0, r6
    }
}
   b40e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
   b40ea:	f002 bb4a 	b.w	b6782 <_ZN5Print11printNumberEmh>
            val = n;
   b40ee:	4621      	mov	r1, r4
   b40f0:	e7f7      	b.n	b40e2 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x16>

000b40f2 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40f2:	b40e      	push	{r1, r2, r3}
   b40f4:	b503      	push	{r0, r1, lr}
   b40f6:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b40f8:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40fa:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40fe:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4100:	f002 fb5d 	bl	b67be <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b4104:	b002      	add	sp, #8
   b4106:	f85d eb04 	ldr.w	lr, [sp], #4
   b410a:	b003      	add	sp, #12
   b410c:	4770      	bx	lr
	...

000b4110 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b4110:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b4112:	6984      	ldr	r4, [r0, #24]
   b4114:	4b0a      	ldr	r3, [pc, #40]	; (b4140 <_ZN9TCPClientD1Ev+0x30>)
   b4116:	6003      	str	r3, [r0, #0]
   b4118:	4605      	mov	r5, r0
   b411a:	b17c      	cbz	r4, b413c <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b411c:	6863      	ldr	r3, [r4, #4]
   b411e:	3b01      	subs	r3, #1
   b4120:	6063      	str	r3, [r4, #4]
   b4122:	b95b      	cbnz	r3, b413c <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b4124:	6823      	ldr	r3, [r4, #0]
   b4126:	4620      	mov	r0, r4
   b4128:	689b      	ldr	r3, [r3, #8]
   b412a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b412c:	68a3      	ldr	r3, [r4, #8]
   b412e:	3b01      	subs	r3, #1
   b4130:	60a3      	str	r3, [r4, #8]
   b4132:	b91b      	cbnz	r3, b413c <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b4134:	6823      	ldr	r3, [r4, #0]
   b4136:	4620      	mov	r0, r4
   b4138:	68db      	ldr	r3, [r3, #12]
   b413a:	4798      	blx	r3
   b413c:	4628      	mov	r0, r5
   b413e:	bd38      	pop	{r3, r4, r5, pc}
   b4140:	000b8e28 	.word	0x000b8e28

000b4144 <_ZN9TCPClientD0Ev>:
   b4144:	b510      	push	{r4, lr}
   b4146:	4604      	mov	r4, r0
   b4148:	f7ff ffe2 	bl	b4110 <_ZN9TCPClientD1Ev>
   b414c:	4620      	mov	r0, r4
   b414e:	211c      	movs	r1, #28
   b4150:	f7ff ffa5 	bl	b409e <_ZdlPvj>
   b4154:	4620      	mov	r0, r4
   b4156:	bd10      	pop	{r4, pc}

000b4158 <_Z6setHueibiii>:
TCPClient HueClient;

bool setHue(int lightNum, bool HueOn, int HueColor, int HueBright, int HueSat);
bool getHue(int lightNum);

bool setHue(int lightNum, bool HueOn, int HueColor, int HueBright, int HueSat) {
   b4158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b415c:	b08c      	sub	sp, #48	; 0x30
   b415e:	4605      	mov	r5, r0
   b4160:	460f      	mov	r7, r1

  static int PrevLightNum,PrevOn, PrevColor, PrevBright, PrevSat;

  String command = "";  
   b4162:	4668      	mov	r0, sp
   b4164:	4977      	ldr	r1, [pc, #476]	; (b4344 <_Z6setHueibiii+0x1ec>)
bool setHue(int lightNum, bool HueOn, int HueColor, int HueBright, int HueSat) {
   b4166:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
   b416a:	4614      	mov	r4, r2
   b416c:	461e      	mov	r6, r3
  String command = "";  
   b416e:	f002 f9d6 	bl	b651e <_ZN6StringC1EPK19__FlashStringHelper>

  if((lightNum==PrevLightNum)&&(HueOn==PrevOn)&&(HueColor==PrevColor)&&(HueBright==PrevBright)&&(HueSat==PrevSat)) {
   b4172:	f8df e228 	ldr.w	lr, [pc, #552]	; b439c <_Z6setHueibiii+0x244>
   b4176:	4974      	ldr	r1, [pc, #464]	; (b4348 <_Z6setHueibiii+0x1f0>)
   b4178:	f8de 3000 	ldr.w	r3, [lr]
   b417c:	4873      	ldr	r0, [pc, #460]	; (b434c <_Z6setHueibiii+0x1f4>)
   b417e:	4a74      	ldr	r2, [pc, #464]	; (b4350 <_Z6setHueibiii+0x1f8>)
   b4180:	f8df c21c 	ldr.w	ip, [pc, #540]	; b43a0 <_Z6setHueibiii+0x248>
   b4184:	42ab      	cmp	r3, r5
   b4186:	d119      	bne.n	b41bc <_Z6setHueibiii+0x64>
   b4188:	680b      	ldr	r3, [r1, #0]
   b418a:	42bb      	cmp	r3, r7
   b418c:	d116      	bne.n	b41bc <_Z6setHueibiii+0x64>
   b418e:	6803      	ldr	r3, [r0, #0]
   b4190:	42a3      	cmp	r3, r4
   b4192:	d113      	bne.n	b41bc <_Z6setHueibiii+0x64>
   b4194:	6813      	ldr	r3, [r2, #0]
   b4196:	42b3      	cmp	r3, r6
   b4198:	d110      	bne.n	b41bc <_Z6setHueibiii+0x64>
   b419a:	f8dc 3000 	ldr.w	r3, [ip]
   b419e:	4543      	cmp	r3, r8
   b41a0:	d10c      	bne.n	b41bc <_Z6setHueibiii+0x64>
    Serial.printf("No Change - Cancelling CMD\n");
   b41a2:	f002 fd59 	bl	b6c58 <_Z16_fetch_usbserialv>
   b41a6:	496b      	ldr	r1, [pc, #428]	; (b4354 <_Z6setHueibiii+0x1fc>)
   b41a8:	f7ff ffa3 	bl	b40f2 <_ZN5Print6printfEPKcz>
    return false;
   b41ac:	2400      	movs	r4, #0
  String command = "";  
   b41ae:	4668      	mov	r0, sp
   b41b0:	f002 f96a 	bl	b6488 <_ZN6StringD1Ev>
    HueClient.stop();
    return true;  // command executed
  }
  else
    return false;  // command failed
}
   b41b4:	4620      	mov	r0, r4
   b41b6:	b00c      	add	sp, #48	; 0x30
   b41b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  PrevLightNum = lightNum;
   b41bc:	f8ce 5000 	str.w	r5, [lr]
  PrevOn = HueOn;
   b41c0:	600f      	str	r7, [r1, #0]
  PrevColor=HueColor;
   b41c2:	6004      	str	r4, [r0, #0]
  PrevBright=HueBright;
   b41c4:	6016      	str	r6, [r2, #0]
  PrevSat=HueSat;
   b41c6:	f8cc 8000 	str.w	r8, [ip]
  if(HueOn == true) {
   b41ca:	2f00      	cmp	r7, #0
   b41cc:	f000 80b5 	beq.w	b433a <_Z6setHueibiii+0x1e2>
    command = "{\"on\":true,\"sat\":";
   b41d0:	4961      	ldr	r1, [pc, #388]	; (b4358 <_Z6setHueibiii+0x200>)
   b41d2:	4668      	mov	r0, sp
   b41d4:	f002 f9f6 	bl	b65c4 <_ZN6StringaSEPKc>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b41d8:	4669      	mov	r1, sp
   b41da:	a808      	add	r0, sp, #32
   b41dc:	f002 f9df 	bl	b659e <_ZN6StringC1ERKS_>
    command = command + String(HueSat) + ",\"bri\":";
   b41e0:	220a      	movs	r2, #10
   b41e2:	4641      	mov	r1, r8
   b41e4:	a804      	add	r0, sp, #16
   b41e6:	f002 f9ff 	bl	b65e8 <_ZN6StringC1Eih>
   b41ea:	a904      	add	r1, sp, #16
   b41ec:	a808      	add	r0, sp, #32
   b41ee:	f002 fa32 	bl	b6656 <_ZplRK15StringSumHelperRK6String>
   b41f2:	495a      	ldr	r1, [pc, #360]	; (b435c <_Z6setHueibiii+0x204>)
   b41f4:	f002 fa3b 	bl	b666e <_ZplRK15StringSumHelperPKc>
   b41f8:	4601      	mov	r1, r0
   b41fa:	4668      	mov	r0, sp
   b41fc:	f002 f9c0 	bl	b6580 <_ZN6StringaSERKS_>
   b4200:	a804      	add	r0, sp, #16
   b4202:	f002 f941 	bl	b6488 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4206:	a808      	add	r0, sp, #32
   b4208:	f002 f93e 	bl	b6488 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   b420c:	4669      	mov	r1, sp
   b420e:	a808      	add	r0, sp, #32
   b4210:	f002 f9c5 	bl	b659e <_ZN6StringC1ERKS_>
    command = command + String(HueBright) + ",\"hue\":";
   b4214:	220a      	movs	r2, #10
   b4216:	4631      	mov	r1, r6
   b4218:	a804      	add	r0, sp, #16
   b421a:	f002 f9e5 	bl	b65e8 <_ZN6StringC1Eih>
   b421e:	a904      	add	r1, sp, #16
   b4220:	a808      	add	r0, sp, #32
   b4222:	f002 fa18 	bl	b6656 <_ZplRK15StringSumHelperRK6String>
   b4226:	494e      	ldr	r1, [pc, #312]	; (b4360 <_Z6setHueibiii+0x208>)
   b4228:	f002 fa21 	bl	b666e <_ZplRK15StringSumHelperPKc>
   b422c:	4601      	mov	r1, r0
   b422e:	4668      	mov	r0, sp
   b4230:	f002 f9a6 	bl	b6580 <_ZN6StringaSERKS_>
   b4234:	a804      	add	r0, sp, #16
   b4236:	f002 f927 	bl	b6488 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b423a:	a808      	add	r0, sp, #32
   b423c:	f002 f924 	bl	b6488 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   b4240:	4669      	mov	r1, sp
   b4242:	a808      	add	r0, sp, #32
   b4244:	f002 f9ab 	bl	b659e <_ZN6StringC1ERKS_>
    command = command + String(HueColor) + "}";
   b4248:	220a      	movs	r2, #10
   b424a:	4621      	mov	r1, r4
   b424c:	a804      	add	r0, sp, #16
   b424e:	f002 f9cb 	bl	b65e8 <_ZN6StringC1Eih>
   b4252:	a904      	add	r1, sp, #16
   b4254:	a808      	add	r0, sp, #32
   b4256:	f002 f9fe 	bl	b6656 <_ZplRK15StringSumHelperRK6String>
   b425a:	4942      	ldr	r1, [pc, #264]	; (b4364 <_Z6setHueibiii+0x20c>)
   b425c:	f002 fa07 	bl	b666e <_ZplRK15StringSumHelperPKc>
   b4260:	4601      	mov	r1, r0
   b4262:	4668      	mov	r0, sp
   b4264:	f002 f98c 	bl	b6580 <_ZN6StringaSERKS_>
   b4268:	a804      	add	r0, sp, #16
   b426a:	f002 f90d 	bl	b6488 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b426e:	a808      	add	r0, sp, #32
   b4270:	f002 f90a 	bl	b6488 <_ZN6StringD1Ev>
  if (HueClient.connect(hueHubIP, hueHubPort)) {
   b4274:	493c      	ldr	r1, [pc, #240]	; (b4368 <_Z6setHueibiii+0x210>)
   b4276:	483d      	ldr	r0, [pc, #244]	; (b436c <_Z6setHueibiii+0x214>)
   b4278:	2300      	movs	r3, #0
   b427a:	2250      	movs	r2, #80	; 0x50
   b427c:	f002 fea6 	bl	b6fcc <_ZN9TCPClient7connectEPKctm>
   b4280:	4604      	mov	r4, r0
   b4282:	2800      	cmp	r0, #0
   b4284:	d093      	beq.n	b41ae <_Z6setHueibiii+0x56>
      Serial.println("Sending Command to Hue");
   b4286:	f002 fce7 	bl	b6c58 <_Z16_fetch_usbserialv>
   b428a:	4939      	ldr	r1, [pc, #228]	; (b4370 <_Z6setHueibiii+0x218>)
   b428c:	f002 fa6f 	bl	b676e <_ZN5Print7printlnEPKc>
      Serial.println(command);
   b4290:	f002 fce2 	bl	b6c58 <_Z16_fetch_usbserialv>
   b4294:	9900      	ldr	r1, [sp, #0]
   b4296:	f002 fa6a 	bl	b676e <_ZN5Print7printlnEPKc>
      HueClient.print("PUT /api/");
   b429a:	4936      	ldr	r1, [pc, #216]	; (b4374 <_Z6setHueibiii+0x21c>)
   b429c:	4833      	ldr	r0, [pc, #204]	; (b436c <_Z6setHueibiii+0x214>)
   b429e:	f002 fa53 	bl	b6748 <_ZN5Print5printEPKc>
      HueClient.print(hueUsername);
   b42a2:	4935      	ldr	r1, [pc, #212]	; (b4378 <_Z6setHueibiii+0x220>)
   b42a4:	4831      	ldr	r0, [pc, #196]	; (b436c <_Z6setHueibiii+0x214>)
   b42a6:	f002 fa4f 	bl	b6748 <_ZN5Print5printEPKc>
      HueClient.print("/lights/");
   b42aa:	4934      	ldr	r1, [pc, #208]	; (b437c <_Z6setHueibiii+0x224>)
   b42ac:	482f      	ldr	r0, [pc, #188]	; (b436c <_Z6setHueibiii+0x214>)
   b42ae:	f002 fa4b 	bl	b6748 <_ZN5Print5printEPKc>
size_t Print::print(T n, int base)
   b42b2:	220a      	movs	r2, #10
   b42b4:	482d      	ldr	r0, [pc, #180]	; (b436c <_Z6setHueibiii+0x214>)
   b42b6:	4629      	mov	r1, r5
   b42b8:	f7ff ff08 	bl	b40cc <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
      HueClient.println("/state HTTP/1.1");
   b42bc:	4930      	ldr	r1, [pc, #192]	; (b4380 <_Z6setHueibiii+0x228>)
   b42be:	482b      	ldr	r0, [pc, #172]	; (b436c <_Z6setHueibiii+0x214>)
   b42c0:	f002 fa55 	bl	b676e <_ZN5Print7printlnEPKc>
      HueClient.println("keep-alive");
   b42c4:	492f      	ldr	r1, [pc, #188]	; (b4384 <_Z6setHueibiii+0x22c>)
   b42c6:	4829      	ldr	r0, [pc, #164]	; (b436c <_Z6setHueibiii+0x214>)
   b42c8:	f002 fa51 	bl	b676e <_ZN5Print7printlnEPKc>
      HueClient.print("Host: ");
   b42cc:	492e      	ldr	r1, [pc, #184]	; (b4388 <_Z6setHueibiii+0x230>)
   b42ce:	4827      	ldr	r0, [pc, #156]	; (b436c <_Z6setHueibiii+0x214>)
   b42d0:	f002 fa3a 	bl	b6748 <_ZN5Print5printEPKc>
      HueClient.println(hueHubIP);
   b42d4:	4924      	ldr	r1, [pc, #144]	; (b4368 <_Z6setHueibiii+0x210>)
   b42d6:	4825      	ldr	r0, [pc, #148]	; (b436c <_Z6setHueibiii+0x214>)
   b42d8:	f002 fa49 	bl	b676e <_ZN5Print7printlnEPKc>
      HueClient.print("Content-Length: ");
   b42dc:	492b      	ldr	r1, [pc, #172]	; (b438c <_Z6setHueibiii+0x234>)
   b42de:	4823      	ldr	r0, [pc, #140]	; (b436c <_Z6setHueibiii+0x214>)
   b42e0:	f002 fa32 	bl	b6748 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   b42e4:	220a      	movs	r2, #10
   b42e6:	9902      	ldr	r1, [sp, #8]
   b42e8:	4820      	ldr	r0, [pc, #128]	; (b436c <_Z6setHueibiii+0x214>)
   b42ea:	f002 fa4a 	bl	b6782 <_ZN5Print11printNumberEmh>
        n += println();
   b42ee:	481f      	ldr	r0, [pc, #124]	; (b436c <_Z6setHueibiii+0x214>)
   b42f0:	f002 fa31 	bl	b6756 <_ZN5Print7printlnEv>
      HueClient.println("Content-Type: text/plain;charset=UTF-8");
   b42f4:	4926      	ldr	r1, [pc, #152]	; (b4390 <_Z6setHueibiii+0x238>)
   b42f6:	481d      	ldr	r0, [pc, #116]	; (b436c <_Z6setHueibiii+0x214>)
   b42f8:	f002 fa39 	bl	b676e <_ZN5Print7printlnEPKc>
      HueClient.println();  // blank line before body
   b42fc:	481b      	ldr	r0, [pc, #108]	; (b436c <_Z6setHueibiii+0x214>)
   b42fe:	f002 fa2a 	bl	b6756 <_ZN5Print7printlnEv>
      HueClient.println(command);  // Hue command
   b4302:	9900      	ldr	r1, [sp, #0]
   b4304:	4819      	ldr	r0, [pc, #100]	; (b436c <_Z6setHueibiii+0x214>)
   b4306:	f002 fa32 	bl	b676e <_ZN5Print7printlnEPKc>
      Serial.println("From Hue");
   b430a:	f002 fca5 	bl	b6c58 <_Z16_fetch_usbserialv>
   b430e:	4921      	ldr	r1, [pc, #132]	; (b4394 <_Z6setHueibiii+0x23c>)
   b4310:	f002 fa2d 	bl	b676e <_ZN5Print7printlnEPKc>
      Serial.println(HueClient.readString()); // To close connection
   b4314:	f002 fca0 	bl	b6c58 <_Z16_fetch_usbserialv>
   b4318:	4914      	ldr	r1, [pc, #80]	; (b436c <_Z6setHueibiii+0x214>)
   b431a:	4604      	mov	r4, r0
   b431c:	a808      	add	r0, sp, #32
   b431e:	f002 fa95 	bl	b684c <_ZN6Stream10readStringEv>
   b4322:	9908      	ldr	r1, [sp, #32]
   b4324:	4620      	mov	r0, r4
   b4326:	f002 fa22 	bl	b676e <_ZN5Print7printlnEPKc>
   b432a:	a808      	add	r0, sp, #32
   b432c:	f002 f8ac 	bl	b6488 <_ZN6StringD1Ev>
    HueClient.stop();
   b4330:	480e      	ldr	r0, [pc, #56]	; (b436c <_Z6setHueibiii+0x214>)
   b4332:	f003 f801 	bl	b7338 <_ZN9TCPClient4stopEv>
    return true;  // command executed
   b4336:	2401      	movs	r4, #1
   b4338:	e739      	b.n	b41ae <_Z6setHueibiii+0x56>
    command = "{\"on\":false}";
   b433a:	4917      	ldr	r1, [pc, #92]	; (b4398 <_Z6setHueibiii+0x240>)
   b433c:	4668      	mov	r0, sp
   b433e:	f002 f941 	bl	b65c4 <_ZN6StringaSEPKc>
   b4342:	e797      	b.n	b4274 <_Z6setHueibiii+0x11c>
   b4344:	000b8676 	.word	0x000b8676
   b4348:	2003e610 	.word	0x2003e610
   b434c:	2003e618 	.word	0x2003e618
   b4350:	2003e608 	.word	0x2003e608
   b4354:	000b853d 	.word	0x000b853d
   b4358:	000b8559 	.word	0x000b8559
   b435c:	000b856b 	.word	0x000b856b
   b4360:	000b8573 	.word	0x000b8573
   b4364:	000b8586 	.word	0x000b8586
   b4368:	000b8711 	.word	0x000b8711
   b436c:	2003e570 	.word	0x2003e570
   b4370:	000b8588 	.word	0x000b8588
   b4374:	000b859f 	.word	0x000b859f
   b4378:	000b86e8 	.word	0x000b86e8
   b437c:	000b85a9 	.word	0x000b85a9
   b4380:	000b85b2 	.word	0x000b85b2
   b4384:	000b85c2 	.word	0x000b85c2
   b4388:	000b85cd 	.word	0x000b85cd
   b438c:	000b85d4 	.word	0x000b85d4
   b4390:	000b85e5 	.word	0x000b85e5
   b4394:	000b860c 	.word	0x000b860c
   b4398:	000b857b 	.word	0x000b857b
   b439c:	2003e60c 	.word	0x2003e60c
   b43a0:	2003e614 	.word	0x2003e614

000b43a4 <_Z6setLED12SwitchColors>:
  }
  lockDoor(lockdown);

}

void setLED(SwitchColors color){
   b43a4:	b510      	push	{r4, lr}
  switch(color){
   b43a6:	4604      	mov	r4, r0
   b43a8:	b158      	cbz	r0, b43c2 <_Z6setLED12SwitchColors+0x1e>
   b43aa:	2801      	cmp	r0, #1
   b43ac:	d017      	beq.n	b43de <_Z6setLED12SwitchColors+0x3a>
      digitalWrite(LEDPINR, LEDOFF);
      digitalWrite(LEDPING, LEDON);
      digitalWrite(LEDPINB, LEDOFF);
      break;
    default:                            // blue
      digitalWrite(LEDPINR, LEDOFF);
   b43ae:	2100      	movs	r1, #0
   b43b0:	2004      	movs	r0, #4
   b43b2:	f003 f95e 	bl	b7672 <digitalWrite>
      digitalWrite(LEDPING, LEDOFF);
   b43b6:	2100      	movs	r1, #0
   b43b8:	2003      	movs	r0, #3
   b43ba:	f003 f95a 	bl	b7672 <digitalWrite>
      digitalWrite(LEDPINB, LEDON);
   b43be:	2101      	movs	r1, #1
   b43c0:	e008      	b.n	b43d4 <_Z6setLED12SwitchColors+0x30>
      digitalWrite(LEDPINR, LEDON);    // turn on the red light,
   b43c2:	2101      	movs	r1, #1
      digitalWrite(LEDPINR, LEDOFF);
   b43c4:	2004      	movs	r0, #4
   b43c6:	f003 f954 	bl	b7672 <digitalWrite>
      digitalWrite(LEDPING, LEDON);
   b43ca:	4621      	mov	r1, r4
   b43cc:	2003      	movs	r0, #3
   b43ce:	f003 f950 	bl	b7672 <digitalWrite>
      digitalWrite(LEDPINB, LEDOFF);
   b43d2:	2100      	movs	r1, #0
      break;
  }
}
   b43d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      digitalWrite(LEDPINB, LEDON);
   b43d8:	2005      	movs	r0, #5
   b43da:	f003 b94a 	b.w	b7672 <digitalWrite>
      digitalWrite(LEDPINR, LEDOFF);
   b43de:	2100      	movs	r1, #0
   b43e0:	e7f0      	b.n	b43c4 <_Z6setLED12SwitchColors+0x20>
	...

000b43e4 <_Z8initPinsv>:

// sets pin states for current breadboard wiring
void initPins(){
   b43e4:	b507      	push	{r0, r1, r2, lr}
  pinMode(LEDPINR, OUTPUT);
   b43e6:	2101      	movs	r1, #1
   b43e8:	2004      	movs	r0, #4
   b43ea:	f003 f931 	bl	b7650 <pinMode>
  pinMode(LEDPING, OUTPUT);  
   b43ee:	2101      	movs	r1, #1
   b43f0:	2003      	movs	r0, #3
   b43f2:	f003 f92d 	bl	b7650 <pinMode>
  pinMode(LEDPINB, OUTPUT);
   b43f6:	2101      	movs	r1, #1
   b43f8:	2005      	movs	r0, #5
   b43fa:	f003 f929 	bl	b7650 <pinMode>
  pinMode(BUTTPIN, INPUT_PULLDOWN);
   b43fe:	2103      	movs	r1, #3
   b4400:	2006      	movs	r0, #6
   b4402:	f003 f925 	bl	b7650 <pinMode>
  setLED(SW_GREEN);
   b4406:	2001      	movs	r0, #1
   b4408:	f7ff ffcc 	bl	b43a4 <_Z6setLED12SwitchColors>
  myServo.attach(SERVO_PIN);
   b440c:	2300      	movs	r3, #0
   b440e:	22b4      	movs	r2, #180	; 0xb4
   b4410:	e9cd 3200 	strd	r3, r2, [sp]
   b4414:	210e      	movs	r1, #14
   b4416:	f44f 6316 	mov.w	r3, #2400	; 0x960
   b441a:	f44f 7208 	mov.w	r2, #544	; 0x220
   b441e:	4803      	ldr	r0, [pc, #12]	; (b442c <_Z8initPinsv+0x48>)
   b4420:	f001 ffa8 	bl	b6374 <_ZN5Servo6attachEtttss>
}
   b4424:	b003      	add	sp, #12
   b4426:	f85d fb04 	ldr.w	pc, [sp], #4
   b442a:	bf00      	nop
   b442c:	2003e688 	.word	0x2003e688

000b4430 <setup>:
void setup() {
   b4430:	b530      	push	{r4, r5, lr}
   b4432:	b095      	sub	sp, #84	; 0x54
  initPins();
   b4434:	f7ff ffd6 	bl	b43e4 <_Z8initPinsv>
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b4438:	4c34      	ldr	r4, [pc, #208]	; (b450c <setup+0xdc>)
    Serial.printf(".");
   b443a:	4d35      	ldr	r5, [pc, #212]	; (b4510 <setup+0xe0>)
  Serial.begin(9600);
   b443c:	f002 fc0c 	bl	b6c58 <_Z16_fetch_usbserialv>
   b4440:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4444:	f002 fbfc 	bl	b6c40 <_ZN9USBSerial5beginEl>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b4448:	2300      	movs	r3, #0
   b444a:	461a      	mov	r2, r3
   b444c:	4619      	mov	r1, r3
   b444e:	6860      	ldr	r0, [r4, #4]
   b4450:	f001 fd42 	bl	b5ed8 <network_on>

    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
   b4454:	2238      	movs	r2, #56	; 0x38
   b4456:	2100      	movs	r1, #0
   b4458:	a806      	add	r0, sp, #24
   b445a:	f003 ffa5 	bl	b83a8 <memset>
        creds.size = sizeof(creds);
   b445e:	234c      	movs	r3, #76	; 0x4c
   b4460:	9301      	str	r3, [sp, #4]
        creds.ssid = ssid;
   b4462:	4b2c      	ldr	r3, [pc, #176]	; (b4514 <setup+0xe4>)
   b4464:	9302      	str	r3, [sp, #8]
        creds.ssid_len = ssidLen;
        creds.password = password;
   b4466:	220a      	movs	r2, #10
   b4468:	2300      	movs	r3, #0
   b446a:	e9cd 2303 	strd	r2, r3, [sp, #12]
        creds.password_len = passwordLen;
        creds.security = WLanSecurityType(security);
        creds.cipher = WLanSecurityCipher(cipher);
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b446e:	4619      	mov	r1, r3
   b4470:	aa01      	add	r2, sp, #4
   b4472:	6860      	ldr	r0, [r4, #4]
        creds.password_len = passwordLen;
   b4474:	9305      	str	r3, [sp, #20]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4476:	f001 fd4f 	bl	b5f18 <network_set_credentials>
  Serial.printf("About to attempt to connect...\n");
   b447a:	f002 fbed 	bl	b6c58 <_Z16_fetch_usbserialv>
   b447e:	4926      	ldr	r1, [pc, #152]	; (b4518 <setup+0xe8>)
   b4480:	f7ff fe37 	bl	b40f2 <_ZN5Print6printfEPKcz>
        network_connect(*this, flags, 0, NULL);
   b4484:	2300      	movs	r3, #0
   b4486:	6860      	ldr	r0, [r4, #4]
   b4488:	461a      	mov	r2, r3
   b448a:	4619      	mov	r1, r3
   b448c:	f001 fd04 	bl	b5e98 <network_connect>
        return network_connecting(*this, 0, NULL);
   b4490:	2200      	movs	r2, #0
   b4492:	6860      	ldr	r0, [r4, #4]
   b4494:	4611      	mov	r1, r2
   b4496:	f001 fd07 	bl	b5ea8 <network_connecting>
  while(WiFi.connecting()) {
   b449a:	b140      	cbz	r0, b44ae <setup+0x7e>
    Serial.printf(".");
   b449c:	f002 fbdc 	bl	b6c58 <_Z16_fetch_usbserialv>
   b44a0:	4629      	mov	r1, r5
   b44a2:	f7ff fe26 	bl	b40f2 <_ZN5Print6printfEPKcz>
    delay(250);
   b44a6:	20fa      	movs	r0, #250	; 0xfa
   b44a8:	f002 fa45 	bl	b6936 <delay>
  while(WiFi.connecting()) {
   b44ac:	e7f0      	b.n	b4490 <setup+0x60>
  Wire.begin();
   b44ae:	f003 f989 	bl	b77c4 <_Z19__fetch_global_Wirev>
   b44b2:	f002 fc93 	bl	b6ddc <_ZN7TwoWire5beginEv>
  status = bme.begin (bmeAddress);
   b44b6:	4819      	ldr	r0, [pc, #100]	; (b451c <setup+0xec>)
   b44b8:	2176      	movs	r1, #118	; 0x76
   b44ba:	f000 fd90 	bl	b4fde <_ZN15Adafruit_BME2805beginEh>
   b44be:	4b18      	ldr	r3, [pc, #96]	; (b4520 <setup+0xf0>)
   b44c0:	7018      	strb	r0, [r3, #0]
  if (status == false) {
   b44c2:	b928      	cbnz	r0, b44d0 <setup+0xa0>
    Serial.printf ("BME280 at address 0x%02X failed to start", bmeAddress) ;
   b44c4:	f002 fbc8 	bl	b6c58 <_Z16_fetch_usbserialv>
   b44c8:	4916      	ldr	r1, [pc, #88]	; (b4524 <setup+0xf4>)
   b44ca:	2276      	movs	r2, #118	; 0x76
   b44cc:	f7ff fe11 	bl	b40f2 <_ZN5Print6printfEPKcz>
  display.begin(SSD1306_SWITCHCAPVCC, displayAddress);
   b44d0:	223c      	movs	r2, #60	; 0x3c
   b44d2:	4815      	ldr	r0, [pc, #84]	; (b4528 <setup+0xf8>)
   b44d4:	2102      	movs	r1, #2
   b44d6:	f001 f831 	bl	b553c <_ZN16Adafruit_SSD13065beginEhh>
  display.setTextColor(WHITE);
   b44da:	4813      	ldr	r0, [pc, #76]	; (b4528 <setup+0xf8>)
   b44dc:	2101      	movs	r1, #1
   b44de:	f001 fab3 	bl	b5a48 <_ZN12Adafruit_GFX12setTextColorEt>
  display.setTextSize(2);
   b44e2:	2102      	movs	r1, #2
   b44e4:	4810      	ldr	r0, [pc, #64]	; (b4528 <setup+0xf8>)
   b44e6:	f001 faaa 	bl	b5a3e <_ZN12Adafruit_GFX11setTextSizeEh>
  display.clearDisplay();
   b44ea:	480f      	ldr	r0, [pc, #60]	; (b4528 <setup+0xf8>)
   b44ec:	f000 ff5a 	bl	b53a4 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   b44f0:	480d      	ldr	r0, [pc, #52]	; (b4528 <setup+0xf8>)
   b44f2:	f000 ffb3 	bl	b545c <_ZN16Adafruit_SSD13067displayEv>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b44f6:	f001 fd37 	bl	b5f68 <spark_cloud_flag_connected>
  if (Particle.connected()){
   b44fa:	b120      	cbz	r0, b4506 <setup+0xd6>
    Serial.printf("Connected!\n");
   b44fc:	f002 fbac 	bl	b6c58 <_Z16_fetch_usbserialv>
   b4500:	490a      	ldr	r1, [pc, #40]	; (b452c <setup+0xfc>)
   b4502:	f7ff fdf6 	bl	b40f2 <_ZN5Print6printfEPKcz>
}
   b4506:	b015      	add	sp, #84	; 0x54
   b4508:	bd30      	pop	{r4, r5, pc}
   b450a:	bf00      	nop
   b450c:	2003e71c 	.word	0x2003e71c
   b4510:	000b8640 	.word	0x000b8640
   b4514:	000b8615 	.word	0x000b8615
   b4518:	000b8620 	.word	0x000b8620
   b451c:	2003e620 	.word	0x2003e620
   b4520:	2003e6a4 	.word	0x2003e6a4
   b4524:	000b8642 	.word	0x000b8642
   b4528:	2003e5e4 	.word	0x2003e5e4
   b452c:	000b866b 	.word	0x000b866b

000b4530 <_Z8lockDoorb>:

void lockDoor(bool lockedIn){
  if (lockedIn){
   b4530:	4601      	mov	r1, r0
   b4532:	b100      	cbz	r0, b4536 <_Z8lockDoorb+0x6>
    myServo.write(LOCKED);
   b4534:	215a      	movs	r1, #90	; 0x5a
  } else {
    myServo.write(UNLOCKED);
   b4536:	4801      	ldr	r0, [pc, #4]	; (b453c <_Z8lockDoorb+0xc>)
   b4538:	f001 bedf 	b.w	b62fa <_ZN5Servo5writeEi>
   b453c:	2003e688 	.word	0x2003e688

000b4540 <loop>:
void loop() {
   b4540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  tempC = bme.readTemperature();  // deg C
   b4544:	4884      	ldr	r0, [pc, #528]	; (b4758 <loop+0x218>)
   b4546:	4c85      	ldr	r4, [pc, #532]	; (b475c <loop+0x21c>)
  humidRH = bme.readHumidity();   // %RH
   b4548:	4f85      	ldr	r7, [pc, #532]	; (b4760 <loop+0x220>)
  tempF = map(tempC, 0.0, 100.0, 32.0, 212.0);
   b454a:	4d86      	ldr	r5, [pc, #536]	; (b4764 <loop+0x224>)
void loop() {
   b454c:	b088      	sub	sp, #32
  tempC = bme.readTemperature();  // deg C
   b454e:	f000 fc73 	bl	b4e38 <_ZN15Adafruit_BME28015readTemperatureEv>
   b4552:	ee10 0a10 	vmov	r0, s0
   b4556:	f003 fbd1 	bl	b7cfc <__aeabi_f2d>
   b455a:	e9c4 0100 	strd	r0, r1, [r4]
  humidRH = bme.readHumidity();   // %RH
   b455e:	487e      	ldr	r0, [pc, #504]	; (b4758 <loop+0x218>)
   b4560:	f000 fc9a 	bl	b4e98 <_ZN15Adafruit_BME28012readHumidityEv>
  tempF = map(tempC, 0.0, 100.0, 32.0, 212.0);
   b4564:	ed9f 4b74 	vldr	d4, [pc, #464]	; b4738 <loop+0x1f8>
   b4568:	ed9f 3b75 	vldr	d3, [pc, #468]	; b4740 <loop+0x200>
   b456c:	ed9f 2b76 	vldr	d2, [pc, #472]	; b4748 <loop+0x208>
   b4570:	ed9f 1b77 	vldr	d1, [pc, #476]	; b4750 <loop+0x210>
  humidRH = bme.readHumidity();   // %RH
   b4574:	ed87 0a00 	vstr	s0, [r7]
  tempF = map(tempC, 0.0, 100.0, 32.0, 212.0);
   b4578:	ed94 0b00 	vldr	d0, [r4]
   b457c:	f002 f998 	bl	b68b0 <_Z3mapddddd>
   b4580:	ec51 0b10 	vmov	r0, r1, d0
   b4584:	f003 feac 	bl	b82e0 <__aeabi_d2f>
  if (millis() - hueTick > hueDelay){
   b4588:	4c77      	ldr	r4, [pc, #476]	; (b4768 <loop+0x228>)
  tempF = map(tempC, 0.0, 100.0, 32.0, 212.0);
   b458a:	6028      	str	r0, [r5, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b458c:	f001 fab8 	bl	b5b00 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - hueTick > hueDelay){
   b4590:	6823      	ldr	r3, [r4, #0]
   b4592:	1ac0      	subs	r0, r0, r3
   b4594:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b4598:	d930      	bls.n	b45fc <loop+0xbc>
   b459a:	f001 fab1 	bl	b5b00 <HAL_Timer_Get_Milli_Seconds>
    r = map((int)(tempF*100), minTemp*100, maxTemp*100, 32, 255);
   b459e:	edd5 7a00 	vldr	s15, [r5]
   b45a2:	ed9f 7a72 	vldr	s14, [pc, #456]	; b476c <loop+0x22c>
    b = 0, g = 0;
   b45a6:	4a72      	ldr	r2, [pc, #456]	; (b4770 <loop+0x230>)
    hueTick = millis();
   b45a8:	6020      	str	r0, [r4, #0]
    b = 0, g = 0;
   b45aa:	2300      	movs	r3, #0
    r = map((int)(tempF*100), minTemp*100, maxTemp*100, 32, 255);
   b45ac:	ee67 7a87 	vmul.f32	s15, s15, s14
    b = 0, g = 0;
   b45b0:	6013      	str	r3, [r2, #0]
    hue = (g - b) / 255.0;
   b45b2:	4c70      	ldr	r4, [pc, #448]	; (b4774 <loop+0x234>)
    b = 0, g = 0;
   b45b4:	4a70      	ldr	r2, [pc, #448]	; (b4778 <loop+0x238>)
    hue = (g - b) / 255.0;
   b45b6:	6023      	str	r3, [r4, #0]
    r = map((int)(tempF*100), minTemp*100, maxTemp*100, 32, 255);
   b45b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    b = 0, g = 0;
   b45bc:	6013      	str	r3, [r2, #0]
    r = map((int)(tempF*100), minTemp*100, maxTemp*100, 32, 255);
   b45be:	23ff      	movs	r3, #255	; 0xff
   b45c0:	9300      	str	r3, [sp, #0]
   b45c2:	f641 6278 	movw	r2, #7800	; 0x1e78
   b45c6:	2320      	movs	r3, #32
   b45c8:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
   b45cc:	ee17 0a90 	vmov	r0, s15
   b45d0:	f002 f962 	bl	b6898 <_Z3mapiiiii>
   b45d4:	4b69      	ldr	r3, [pc, #420]	; (b477c <loop+0x23c>)
    if (hue != lastHue || r != lastR){
   b45d6:	6822      	ldr	r2, [r4, #0]
    r = map((int)(tempF*100), minTemp*100, maxTemp*100, 32, 255);
   b45d8:	6018      	str	r0, [r3, #0]
    if (hue != lastHue || r != lastR){
   b45da:	4b69      	ldr	r3, [pc, #420]	; (b4780 <loop+0x240>)
   b45dc:	6819      	ldr	r1, [r3, #0]
   b45de:	428a      	cmp	r2, r1
   b45e0:	4968      	ldr	r1, [pc, #416]	; (b4784 <loop+0x244>)
   b45e2:	d102      	bne.n	b45ea <loop+0xaa>
   b45e4:	680c      	ldr	r4, [r1, #0]
   b45e6:	42a0      	cmp	r0, r4
   b45e8:	d008      	beq.n	b45fc <loop+0xbc>
      lastHue = hue;
   b45ea:	601a      	str	r2, [r3, #0]
      setHue(BULB,true,hue,r,255);
   b45ec:	23ff      	movs	r3, #255	; 0xff
      lastR = r;
   b45ee:	6008      	str	r0, [r1, #0]
      setHue(BULB,true,hue,r,255);
   b45f0:	9300      	str	r3, [sp, #0]
   b45f2:	2101      	movs	r1, #1
   b45f4:	4603      	mov	r3, r0
   b45f6:	2005      	movs	r0, #5
   b45f8:	f7ff fdae 	bl	b4158 <_Z6setHueibiii>
  if (millis() - publishTick > publishDelay){   // check for publish delay
   b45fc:	4c62      	ldr	r4, [pc, #392]	; (b4788 <loop+0x248>)
   b45fe:	f001 fa7f 	bl	b5b00 <HAL_Timer_Get_Milli_Seconds>
   b4602:	6823      	ldr	r3, [r4, #0]
   b4604:	1ac0      	subs	r0, r0, r3
   b4606:	f247 5330 	movw	r3, #30000	; 0x7530
   b460a:	4298      	cmp	r0, r3
   b460c:	d922      	bls.n	b4654 <loop+0x114>
   b460e:	f001 fa77 	bl	b5b00 <HAL_Timer_Get_Milli_Seconds>
    publishTick = millis();                    // reset timer
   b4612:	6020      	str	r0, [r4, #0]
    PublishString = String::format("%.2f;%.2f", tempF, humidRH);
   b4614:	6828      	ldr	r0, [r5, #0]
   b4616:	4c5d      	ldr	r4, [pc, #372]	; (b478c <loop+0x24c>)
   b4618:	f003 fb70 	bl	b7cfc <__aeabi_f2d>
   b461c:	4602      	mov	r2, r0
   b461e:	460b      	mov	r3, r1
   b4620:	6838      	ldr	r0, [r7, #0]
   b4622:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b4626:	f003 fb69 	bl	b7cfc <__aeabi_f2d>
   b462a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b462e:	e9cd 0100 	strd	r0, r1, [sp]
   b4632:	4957      	ldr	r1, [pc, #348]	; (b4790 <loop+0x250>)
   b4634:	a804      	add	r0, sp, #16
   b4636:	f002 f82f 	bl	b6698 <_ZN6String6formatEPKcz>
   b463a:	a904      	add	r1, sp, #16
   b463c:	4620      	mov	r0, r4
   b463e:	f001 ffb9 	bl	b65b4 <_ZN6StringaSEOS_>
   b4642:	a804      	add	r0, sp, #16
   b4644:	f001 ff20 	bl	b6488 <_ZN6StringD1Ev>
      Serial.printf("Not live: %s\n", PublishString.c_str());
   b4648:	f002 fb06 	bl	b6c58 <_Z16_fetch_usbserialv>
   b464c:	6822      	ldr	r2, [r4, #0]
   b464e:	4951      	ldr	r1, [pc, #324]	; (b4794 <loop+0x254>)
   b4650:	f7ff fd4f 	bl	b40f2 <_ZN5Print6printfEPKcz>
  if (millis() - switchTick > switchDelay){   // check for publish delay
   b4654:	f8df 8168 	ldr.w	r8, [pc, #360]	; b47c0 <loop+0x280>
   b4658:	4e4f      	ldr	r6, [pc, #316]	; (b4798 <loop+0x258>)
   b465a:	4c50      	ldr	r4, [pc, #320]	; (b479c <loop+0x25c>)
   b465c:	f001 fa50 	bl	b5b00 <HAL_Timer_Get_Milli_Seconds>
   b4660:	f8d8 3000 	ldr.w	r3, [r8]
   b4664:	1ac0      	subs	r0, r0, r3
   b4666:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   b466a:	d90e      	bls.n	b468a <loop+0x14a>
    if (digitalRead(BUTTPIN)){    // if the switch is pressed,
   b466c:	2006      	movs	r0, #6
   b466e:	f003 f819 	bl	b76a4 <digitalRead>
   b4672:	b150      	cbz	r0, b468a <loop+0x14a>
   b4674:	f001 fa44 	bl	b5b00 <HAL_Timer_Get_Milli_Seconds>
      override = !override;
   b4678:	7833      	ldrb	r3, [r6, #0]
      switchTick = millis();
   b467a:	f8c8 0000 	str.w	r0, [r8]
      override = !override;
   b467e:	f083 0301 	eor.w	r3, r3, #1
   b4682:	7033      	strb	r3, [r6, #0]
      if (override){
   b4684:	b10b      	cbz	r3, b468a <loop+0x14a>
        lockdown = false;
   b4686:	2300      	movs	r3, #0
   b4688:	7023      	strb	r3, [r4, #0]
   b468a:	f001 fa39 	bl	b5b00 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - displayTick > displayDelay){
   b468e:	4b44      	ldr	r3, [pc, #272]	; (b47a0 <loop+0x260>)
   b4690:	681b      	ldr	r3, [r3, #0]
   b4692:	1ac0      	subs	r0, r0, r3
   b4694:	280a      	cmp	r0, #10
   b4696:	d92b      	bls.n	b46f0 <loop+0x1b0>
      DisplayString = String::format("Closed...\nT: %.2fF\nRH:%.2f%% ", tempF, humidRH);
   b4698:	6828      	ldr	r0, [r5, #0]
   b469a:	f003 fb2f 	bl	b7cfc <__aeabi_f2d>
   b469e:	4602      	mov	r2, r0
   b46a0:	460b      	mov	r3, r1
   b46a2:	6838      	ldr	r0, [r7, #0]
   b46a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b46a8:	f003 fb28 	bl	b7cfc <__aeabi_f2d>
    if (lockdown){
   b46ac:	7827      	ldrb	r7, [r4, #0]
   b46ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b46b2:	b357      	cbz	r7, b470a <loop+0x1ca>
      DisplayString = String::format("Closed...\nT: %.2fF\nRH:%.2f%% ", tempF, humidRH);
   b46b4:	e9cd 0100 	strd	r0, r1, [sp]
   b46b8:	493a      	ldr	r1, [pc, #232]	; (b47a4 <loop+0x264>)
        DisplayString = String::format("Open!\nT: %.2fF\nRH:%.2f%% ", tempF, humidRH);
   b46ba:	a804      	add	r0, sp, #16
   b46bc:	f001 ffec 	bl	b6698 <_ZN6String6formatEPKcz>
   b46c0:	a904      	add	r1, sp, #16
   b46c2:	4839      	ldr	r0, [pc, #228]	; (b47a8 <loop+0x268>)
   b46c4:	f001 ff76 	bl	b65b4 <_ZN6StringaSEOS_>
   b46c8:	a804      	add	r0, sp, #16
   b46ca:	f001 fedd 	bl	b6488 <_ZN6StringD1Ev>
    display.clearDisplay();
   b46ce:	4837      	ldr	r0, [pc, #220]	; (b47ac <loop+0x26c>)
   b46d0:	f000 fe68 	bl	b53a4 <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.setCursor(0, 5);
   b46d4:	4835      	ldr	r0, [pc, #212]	; (b47ac <loop+0x26c>)
   b46d6:	2205      	movs	r2, #5
   b46d8:	2100      	movs	r1, #0
   b46da:	f001 f9ad 	bl	b5a38 <_ZN12Adafruit_GFX9setCursorEss>
	const char * c_str() const { return buffer; }
   b46de:	4b32      	ldr	r3, [pc, #200]	; (b47a8 <loop+0x268>)
    display.printf("%s", DisplayString.c_str());
   b46e0:	4933      	ldr	r1, [pc, #204]	; (b47b0 <loop+0x270>)
   b46e2:	681a      	ldr	r2, [r3, #0]
   b46e4:	4831      	ldr	r0, [pc, #196]	; (b47ac <loop+0x26c>)
   b46e6:	f7ff fd04 	bl	b40f2 <_ZN5Print6printfEPKcz>
    display.display();
   b46ea:	4830      	ldr	r0, [pc, #192]	; (b47ac <loop+0x26c>)
   b46ec:	f000 feb6 	bl	b545c <_ZN16Adafruit_SSD13067displayEv>
  if (override){
   b46f0:	7830      	ldrb	r0, [r6, #0]
   b46f2:	b190      	cbz	r0, b471a <loop+0x1da>
    lockdown = false;
   b46f4:	2300      	movs	r3, #0
   b46f6:	7023      	strb	r3, [r4, #0]
    setLED(SW_BLUE);
   b46f8:	2002      	movs	r0, #2
    setLED(SW_RED);
   b46fa:	f7ff fe53 	bl	b43a4 <_Z6setLED12SwitchColors>
  lockDoor(lockdown);
   b46fe:	7820      	ldrb	r0, [r4, #0]
}
   b4700:	b008      	add	sp, #32
   b4702:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  lockDoor(lockdown);
   b4706:	f7ff bf13 	b.w	b4530 <_Z8lockDoorb>
      if (override){
   b470a:	7837      	ldrb	r7, [r6, #0]
        DisplayString = String::format("Open(shh)\nT: %.2fF\nRH:%.2f%% ", tempF, humidRH);
   b470c:	e9cd 0100 	strd	r0, r1, [sp]
      if (override){
   b4710:	b10f      	cbz	r7, b4716 <loop+0x1d6>
        DisplayString = String::format("Open(shh)\nT: %.2fF\nRH:%.2f%% ", tempF, humidRH);
   b4712:	4928      	ldr	r1, [pc, #160]	; (b47b4 <loop+0x274>)
   b4714:	e7d1      	b.n	b46ba <loop+0x17a>
        DisplayString = String::format("Open!\nT: %.2fF\nRH:%.2f%% ", tempF, humidRH);
   b4716:	4928      	ldr	r1, [pc, #160]	; (b47b8 <loop+0x278>)
   b4718:	e7cf      	b.n	b46ba <loop+0x17a>
  } else if (tempF < fireTemp){
   b471a:	ed95 7a00 	vldr	s14, [r5]
   b471e:	eddf 7a27 	vldr	s15, [pc, #156]	; b47bc <loop+0x27c>
   b4722:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b4726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    lockdown = true;
   b472a:	bf55      	itete	pl
   b472c:	2301      	movpl	r3, #1
    lockdown = false;
   b472e:	7020      	strbmi	r0, [r4, #0]
    lockdown = true;
   b4730:	7023      	strbpl	r3, [r4, #0]
    setLED(SW_GREEN);
   b4732:	2001      	movmi	r0, #1
    lockdown = true;
   b4734:	e7e1      	b.n	b46fa <loop+0x1ba>
   b4736:	bf00      	nop
   b4738:	00000000 	.word	0x00000000
   b473c:	406a8000 	.word	0x406a8000
   b4740:	00000000 	.word	0x00000000
   b4744:	40400000 	.word	0x40400000
   b4748:	00000000 	.word	0x00000000
   b474c:	40590000 	.word	0x40590000
	...
   b4758:	2003e620 	.word	0x2003e620
   b475c:	2003e6b0 	.word	0x2003e6b0
   b4760:	2003e684 	.word	0x2003e684
   b4764:	2003e6b8 	.word	0x2003e6b8
   b4768:	2003e680 	.word	0x2003e680
   b476c:	42c80000 	.word	0x42c80000
   b4770:	2003e61c 	.word	0x2003e61c
   b4774:	2003e66c 	.word	0x2003e66c
   b4778:	2003e668 	.word	0x2003e668
   b477c:	2003e6a0 	.word	0x2003e6a0
   b4780:	2003e0d4 	.word	0x2003e0d4
   b4784:	2003e0d8 	.word	0x2003e0d8
   b4788:	2003e69c 	.word	0x2003e69c
   b478c:	2003e5ac 	.word	0x2003e5ac
   b4790:	000b8677 	.word	0x000b8677
   b4794:	000b8681 	.word	0x000b8681
   b4798:	2003e698 	.word	0x2003e698
   b479c:	2003e0dc 	.word	0x2003e0dc
   b47a0:	2003e664 	.word	0x2003e664
   b47a4:	000b868f 	.word	0x000b868f
   b47a8:	2003e560 	.word	0x2003e560
   b47ac:	2003e5e4 	.word	0x2003e5e4
   b47b0:	000b86e5 	.word	0x000b86e5
   b47b4:	000b86ad 	.word	0x000b86ad
   b47b8:	000b86cb 	.word	0x000b86cb
   b47bc:	42960000 	.word	0x42960000
   b47c0:	2003e6a8 	.word	0x2003e6a8

000b47c4 <_GLOBAL__sub_I_SystemMode>:

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b47c4:	4b1f      	ldr	r3, [pc, #124]	; (b4844 <_GLOBAL__sub_I_SystemMode+0x80>)
   b47c6:	2200      	movs	r2, #0
  }
   b47c8:	b510      	push	{r4, lr}
   b47ca:	e9c3 2200 	strd	r2, r2, [r3]
String hueCmd;  // Hue command
   b47ce:	4c1e      	ldr	r4, [pc, #120]	; (b4848 <_GLOBAL__sub_I_SystemMode+0x84>)
    SleepResult() {}
   b47d0:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b47d4:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b47d6:	2002      	movs	r0, #2
   b47d8:	f001 fb3a 	bl	b5e50 <set_system_mode>
   b47dc:	4621      	mov	r1, r4
   b47de:	481b      	ldr	r0, [pc, #108]	; (b484c <_GLOBAL__sub_I_SystemMode+0x88>)
   b47e0:	f001 fe9d 	bl	b651e <_ZN6StringC1EPK19__FlashStringHelper>
int HueRainbow[] = {HueRed, HueOrange, HueYellow, HueGreen, HueBlue, HueIndigo, HueViolet};
   b47e4:	4a1a      	ldr	r2, [pc, #104]	; (b4850 <_GLOBAL__sub_I_SystemMode+0x8c>)
   b47e6:	4b1b      	ldr	r3, [pc, #108]	; (b4854 <_GLOBAL__sub_I_SystemMode+0x90>)
   b47e8:	6812      	ldr	r2, [r2, #0]
   b47ea:	601a      	str	r2, [r3, #0]
   b47ec:	4a1a      	ldr	r2, [pc, #104]	; (b4858 <_GLOBAL__sub_I_SystemMode+0x94>)
TCPClient HueClient;
   b47ee:	481b      	ldr	r0, [pc, #108]	; (b485c <_GLOBAL__sub_I_SystemMode+0x98>)
int HueRainbow[] = {HueRed, HueOrange, HueYellow, HueGreen, HueBlue, HueIndigo, HueViolet};
   b47f0:	6812      	ldr	r2, [r2, #0]
   b47f2:	605a      	str	r2, [r3, #4]
   b47f4:	4a1a      	ldr	r2, [pc, #104]	; (b4860 <_GLOBAL__sub_I_SystemMode+0x9c>)
   b47f6:	6812      	ldr	r2, [r2, #0]
   b47f8:	609a      	str	r2, [r3, #8]
   b47fa:	4a1a      	ldr	r2, [pc, #104]	; (b4864 <_GLOBAL__sub_I_SystemMode+0xa0>)
   b47fc:	6812      	ldr	r2, [r2, #0]
   b47fe:	60da      	str	r2, [r3, #12]
   b4800:	4a19      	ldr	r2, [pc, #100]	; (b4868 <_GLOBAL__sub_I_SystemMode+0xa4>)
   b4802:	6812      	ldr	r2, [r2, #0]
   b4804:	611a      	str	r2, [r3, #16]
   b4806:	4a19      	ldr	r2, [pc, #100]	; (b486c <_GLOBAL__sub_I_SystemMode+0xa8>)
   b4808:	6812      	ldr	r2, [r2, #0]
   b480a:	615a      	str	r2, [r3, #20]
   b480c:	4a18      	ldr	r2, [pc, #96]	; (b4870 <_GLOBAL__sub_I_SystemMode+0xac>)
   b480e:	6812      	ldr	r2, [r2, #0]
   b4810:	619a      	str	r2, [r3, #24]
TCPClient HueClient;
   b4812:	f002 fddb 	bl	b73cc <_ZN9TCPClientC1Ev>
 *  Date:     06-FEB-2022
 */

#include "application.h"

TCPClient WemoClient;
   b4816:	4817      	ldr	r0, [pc, #92]	; (b4874 <_GLOBAL__sub_I_SystemMode+0xb0>)
   b4818:	f002 fdd8 	bl	b73cc <_ZN9TCPClientC1Ev>
static Adafruit_SSD1306 display(OLED_RESET);  // OLED_RESET in "SmartRoom.h"
   b481c:	2109      	movs	r1, #9
   b481e:	4816      	ldr	r0, [pc, #88]	; (b4878 <_GLOBAL__sub_I_SystemMode+0xb4>)
   b4820:	f000 fdaa 	bl	b5378 <_ZN16Adafruit_SSD1306C1Ea>
Adafruit_BME280 bme;
   b4824:	4815      	ldr	r0, [pc, #84]	; (b487c <_GLOBAL__sub_I_SystemMode+0xb8>)
   b4826:	f000 f863 	bl	b48f0 <_ZN15Adafruit_BME280C1Ev>
String PublishString;
   b482a:	4621      	mov	r1, r4
   b482c:	4814      	ldr	r0, [pc, #80]	; (b4880 <_GLOBAL__sub_I_SystemMode+0xbc>)
   b482e:	f001 fe76 	bl	b651e <_ZN6StringC1EPK19__FlashStringHelper>
String DisplayString;
   b4832:	4621      	mov	r1, r4
   b4834:	4813      	ldr	r0, [pc, #76]	; (b4884 <_GLOBAL__sub_I_SystemMode+0xc0>)
   b4836:	f001 fe72 	bl	b651e <_ZN6StringC1EPK19__FlashStringHelper>
   b483a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
Servo myServo;
   b483e:	4812      	ldr	r0, [pc, #72]	; (b4888 <_GLOBAL__sub_I_SystemMode+0xc4>)
   b4840:	f001 bd84 	b.w	b634c <_ZN5ServoC1Ev>
   b4844:	2003e5bc 	.word	0x2003e5bc
   b4848:	000b8676 	.word	0x000b8676
   b484c:	2003e670 	.word	0x2003e670
   b4850:	2003e5a8 	.word	0x2003e5a8
   b4854:	2003e58c 	.word	0x2003e58c
   b4858:	2003e0c8 	.word	0x2003e0c8
   b485c:	2003e570 	.word	0x2003e570
   b4860:	2003e0d0 	.word	0x2003e0d0
   b4864:	2003e0c0 	.word	0x2003e0c0
   b4868:	2003e0bc 	.word	0x2003e0bc
   b486c:	2003e0c4 	.word	0x2003e0c4
   b4870:	2003e0cc 	.word	0x2003e0cc
   b4874:	2003e5c8 	.word	0x2003e5c8
   b4878:	2003e5e4 	.word	0x2003e5e4
   b487c:	2003e620 	.word	0x2003e620
   b4880:	2003e5ac 	.word	0x2003e5ac
   b4884:	2003e560 	.word	0x2003e560
   b4888:	2003e688 	.word	0x2003e688

000b488c <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b488c:	4770      	bx	lr

000b488e <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b488e:	b510      	push	{r4, lr}
  }
   b4890:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b4892:	4604      	mov	r4, r0
  }
   b4894:	f7ff fc03 	bl	b409e <_ZdlPvj>
   b4898:	4620      	mov	r0, r4
   b489a:	bd10      	pop	{r4, pc}

000b489c <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b489c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b489e:	4604      	mov	r4, r0
   b48a0:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b48a2:	7922      	ldrb	r2, [r4, #4]
   b48a4:	68a3      	ldr	r3, [r4, #8]
   b48a6:	b132      	cbz	r2, b48b6 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b48a8:	b9a3      	cbnz	r3, b48d4 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b48aa:	490b      	ldr	r1, [pc, #44]	; (b48d8 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b48ac:	b002      	add	sp, #8
   b48ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b48b2:	f001 bf49 	b.w	b6748 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b48b6:	4a09      	ldr	r2, [pc, #36]	; (b48dc <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b48b8:	7b26      	ldrb	r6, [r4, #12]
   b48ba:	4d09      	ldr	r5, [pc, #36]	; (b48e0 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b48bc:	4909      	ldr	r1, [pc, #36]	; (b48e4 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b48be:	7b64      	ldrb	r4, [r4, #13]
   b48c0:	2e01      	cmp	r6, #1
   b48c2:	bf18      	it	ne
   b48c4:	4629      	movne	r1, r5
   b48c6:	e9cd 1400 	strd	r1, r4, [sp]
   b48ca:	4907      	ldr	r1, [pc, #28]	; (b48e8 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b48cc:	f7ff fc11 	bl	b40f2 <_ZN5Print6printfEPKcz>
  }
   b48d0:	b002      	add	sp, #8
   b48d2:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b48d4:	4a05      	ldr	r2, [pc, #20]	; (b48ec <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b48d6:	e7ef      	b.n	b48b8 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b48d8:	000b872e 	.word	0x000b872e
   b48dc:	000b8676 	.word	0x000b8676
   b48e0:	000b872a 	.word	0x000b872a
   b48e4:	000b8726 	.word	0x000b8726
   b48e8:	000b8744 	.word	0x000b8744
   b48ec:	000b871d 	.word	0x000b871d

000b48f0 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   b48f0:	f04f 33ff 	mov.w	r3, #4294967295
   b48f4:	6103      	str	r3, [r0, #16]
{ }
   b48f6:	4770      	bx	lr

000b48f8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b48f8:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b48fa:	4c0b      	ldr	r4, [pc, #44]	; (b4928 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b48fc:	7821      	ldrb	r1, [r4, #0]
   b48fe:	f3bf 8f5b 	dmb	ish
   b4902:	f011 0101 	ands.w	r1, r1, #1
   b4906:	d10b      	bne.n	b4920 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b4908:	4620      	mov	r0, r4
   b490a:	9101      	str	r1, [sp, #4]
   b490c:	f7ff fbd6 	bl	b40bc <__cxa_guard_acquire>
   b4910:	9901      	ldr	r1, [sp, #4]
   b4912:	b128      	cbz	r0, b4920 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b4914:	4805      	ldr	r0, [pc, #20]	; (b492c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b4916:	f001 fbb3 	bl	b6080 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b491a:	4620      	mov	r0, r4
   b491c:	f7ff fbd3 	bl	b40c6 <__cxa_guard_release>
        return instance;
    }
   b4920:	4802      	ldr	r0, [pc, #8]	; (b492c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b4922:	b002      	add	sp, #8
   b4924:	bd10      	pop	{r4, pc}
   b4926:	bf00      	nop
   b4928:	2003e6bc 	.word	0x2003e6bc
   b492c:	2003e6c0 	.word	0x2003e6c0

000b4930 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>:
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
   b4930:	b508      	push	{r3, lr}
        instance().endTransaction();
   b4932:	f7ff ffe1 	bl	b48f8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
   b4936:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().endTransaction();
   b493a:	f001 bbe7 	b.w	b610c <_ZN8SPIClass14endTransactionEv>

000b493e <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>:
    int32_t beginTransaction(const particle::SPISettings& settings) {
   b493e:	b507      	push	{r0, r1, r2, lr}
   b4940:	9001      	str	r0, [sp, #4]
        return instance().beginTransaction(settings);
   b4942:	f7ff ffd9 	bl	b48f8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4946:	9901      	ldr	r1, [sp, #4]
    }
   b4948:	b003      	add	sp, #12
   b494a:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().beginTransaction(settings);
   b494e:	f001 bbf7 	b.w	b6140 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b4952 <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   b4952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   b4956:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b495a:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   b495c:	4605      	mov	r5, r0
   b495e:	460f      	mov	r7, r1
    if (_sck == -1)
   b4960:	d106      	bne.n	b4970 <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b4962:	f7ff ffc9 	bl	b48f8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4966:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   b4968:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b496c:	f001 bcae 	b.w	b62cc <_ZN8SPIClass8transferEh>
    uint8_t reply = 0;
   b4970:	2400      	movs	r4, #0
    for (int i=7; i>=0; i--) {
   b4972:	2607      	movs	r6, #7
        digitalWrite(_mosi, x & (1<<i));
   b4974:	f04f 0801 	mov.w	r8, #1
        digitalWrite(_sck, LOW);
   b4978:	f995 0013 	ldrsb.w	r0, [r5, #19]
   b497c:	2100      	movs	r1, #0
   b497e:	b280      	uxth	r0, r0
   b4980:	f002 fe77 	bl	b7672 <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   b4984:	f995 0011 	ldrsb.w	r0, [r5, #17]
   b4988:	fa08 f106 	lsl.w	r1, r8, r6
   b498c:	4039      	ands	r1, r7
   b498e:	b280      	uxth	r0, r0
   b4990:	f002 fe6f 	bl	b7672 <digitalWrite>
        digitalWrite(_sck, HIGH);
   b4994:	f995 0013 	ldrsb.w	r0, [r5, #19]
   b4998:	2101      	movs	r1, #1
   b499a:	b280      	uxth	r0, r0
   b499c:	f002 fe69 	bl	b7672 <digitalWrite>
        if (digitalRead(_miso))
   b49a0:	f995 0012 	ldrsb.w	r0, [r5, #18]
        reply <<= 1;
   b49a4:	0064      	lsls	r4, r4, #1
        if (digitalRead(_miso))
   b49a6:	b280      	uxth	r0, r0
        reply <<= 1;
   b49a8:	b2e4      	uxtb	r4, r4
        if (digitalRead(_miso))
   b49aa:	f002 fe7b 	bl	b76a4 <digitalRead>
   b49ae:	b108      	cbz	r0, b49b4 <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   b49b0:	f044 0401 	orr.w	r4, r4, #1
    for (int i=7; i>=0; i--) {
   b49b4:	3e01      	subs	r6, #1
   b49b6:	d2df      	bcs.n	b4978 <_ZN15Adafruit_BME2807spixferEh+0x26>
}
   b49b8:	4620      	mov	r0, r4
   b49ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b49c0 <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   b49c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   b49c2:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b49c6:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
   b49c8:	4604      	mov	r4, r0
   b49ca:	460e      	mov	r6, r1
   b49cc:	4615      	mov	r5, r2
    if (_cs == -1) {
   b49ce:	d113      	bne.n	b49f8 <_ZN15Adafruit_BME2806write8Ehh+0x38>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b49d0:	7901      	ldrb	r1, [r0, #4]
   b49d2:	6800      	ldr	r0, [r0, #0]
   b49d4:	f002 fa34 	bl	b6e40 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b49d8:	6820      	ldr	r0, [r4, #0]
   b49da:	6803      	ldr	r3, [r0, #0]
   b49dc:	4631      	mov	r1, r6
   b49de:	689b      	ldr	r3, [r3, #8]
   b49e0:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   b49e2:	6820      	ldr	r0, [r4, #0]
   b49e4:	6803      	ldr	r3, [r0, #0]
   b49e6:	4629      	mov	r1, r5
   b49e8:	689b      	ldr	r3, [r3, #8]
   b49ea:	4798      	blx	r3
        _wire -> endTransmission();
   b49ec:	6820      	ldr	r0, [r4, #0]
        spixfer(value);
        digitalWrite(_cs, HIGH);
    if (_sck == -1)
        SPI.endTransaction(); // release the SPI bus
    }
}
   b49ee:	b004      	add	sp, #16
   b49f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _wire -> endTransmission();
   b49f4:	f002 ba2f 	b.w	b6e56 <_ZN7TwoWire15endTransmissionEv>
        if (_sck == -1)
   b49f8:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b49fc:	3301      	adds	r3, #1
   b49fe:	d10c      	bne.n	b4a1a <_ZN15Adafruit_BME2806write8Ehh+0x5a>
      dataMode_{dataMode}
   b4a00:	4b16      	ldr	r3, [pc, #88]	; (b4a5c <_ZN15Adafruit_BME2806write8Ehh+0x9c>)
   b4a02:	9300      	str	r3, [sp, #0]
   b4a04:	2300      	movs	r3, #0
   b4a06:	f88d 3004 	strb.w	r3, [sp, #4]
   b4a0a:	4b15      	ldr	r3, [pc, #84]	; (b4a60 <_ZN15Adafruit_BME2806write8Ehh+0xa0>)
   b4a0c:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b4a0e:	4668      	mov	r0, sp
   b4a10:	2301      	movs	r3, #1
   b4a12:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4a16:	f7ff ff92 	bl	b493e <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b4a1a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4a1e:	2100      	movs	r1, #0
   b4a20:	b280      	uxth	r0, r0
   b4a22:	f002 fe26 	bl	b7672 <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   b4a26:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   b4a2a:	4620      	mov	r0, r4
   b4a2c:	f7ff ff91 	bl	b4952 <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   b4a30:	4629      	mov	r1, r5
   b4a32:	4620      	mov	r0, r4
   b4a34:	f7ff ff8d 	bl	b4952 <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   b4a38:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4a3c:	2101      	movs	r1, #1
   b4a3e:	b280      	uxth	r0, r0
   b4a40:	f002 fe17 	bl	b7672 <digitalWrite>
    if (_sck == -1)
   b4a44:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b4a48:	3301      	adds	r3, #1
   b4a4a:	d104      	bne.n	b4a56 <_ZN15Adafruit_BME2806write8Ehh+0x96>
}
   b4a4c:	b004      	add	sp, #16
   b4a4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        SPI.endTransaction(); // release the SPI bus
   b4a52:	f7ff bf6d 	b.w	b4930 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
}
   b4a56:	b004      	add	sp, #16
   b4a58:	bd70      	pop	{r4, r5, r6, pc}
   b4a5a:	bf00      	nop
   b4a5c:	000b876c 	.word	0x000b876c
   b4a60:	0007a120 	.word	0x0007a120

000b4a64 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
		 standby_duration  duration) {
   b4a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.osrs_t   = tempSampling;
   b4a66:	00db      	lsls	r3, r3, #3
   b4a68:	f002 0207 	and.w	r2, r2, #7
   b4a6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
   b4a70:	4313      	orrs	r3, r2
   b4a72:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
		 standby_duration  duration) {
   b4a76:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.osrs_t   = tempSampling;
   b4a7a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    _humReg.osrs_h    = humSampling;
   b4a7e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 standby_duration  duration) {
   b4a82:	f89d 501c 	ldrb.w	r5, [sp, #28]
   b4a86:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _humReg.osrs_h    = humSampling;
   b4a8a:	f366 1347 	bfi	r3, r6, #5, #3
   b4a8e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.t_sb   = duration;
   b4a92:	00ed      	lsls	r5, r5, #3
   b4a94:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   b4a98:	f007 0707 	and.w	r7, r7, #7
   b4a9c:	f005 0538 	and.w	r5, r5, #56	; 0x38
   b4aa0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   b4aa4:	433d      	orrs	r5, r7
		 standby_duration  duration) {
   b4aa6:	4604      	mov	r4, r0
    _configReg.t_sb   = duration;
   b4aa8:	431d      	orrs	r5, r3
   b4aaa:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   b4aae:	f006 0207 	and.w	r2, r6, #7
   b4ab2:	21f2      	movs	r1, #242	; 0xf2
   b4ab4:	f7ff ff84 	bl	b49c0 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   b4ab8:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   b4abc:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   b4ac0:	f002 0107 	and.w	r1, r2, #7
   b4ac4:	009b      	lsls	r3, r3, #2
   b4ac6:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   b4aca:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   b4ace:	4620      	mov	r0, r4
   b4ad0:	21f5      	movs	r1, #245	; 0xf5
   b4ad2:	f7ff ff75 	bl	b49c0 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   b4ad6:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   b4ada:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   b4ade:	f002 0107 	and.w	r1, r2, #7
   b4ae2:	009b      	lsls	r3, r3, #2
   b4ae4:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   b4ae8:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   b4aec:	4620      	mov	r0, r4
   b4aee:	21f4      	movs	r1, #244	; 0xf4
}
   b4af0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   b4af4:	f7ff bf64 	b.w	b49c0 <_ZN15Adafruit_BME2806write8Ehh>

000b4af8 <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   b4af8:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
   b4afa:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b4afe:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
   b4b00:	b085      	sub	sp, #20
   b4b02:	4604      	mov	r4, r0
   b4b04:	460d      	mov	r5, r1
    if (_cs == -1) {
   b4b06:	d118      	bne.n	b4b3a <_ZN15Adafruit_BME2805read8Eh+0x42>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b4b08:	7901      	ldrb	r1, [r0, #4]
   b4b0a:	6800      	ldr	r0, [r0, #0]
   b4b0c:	f002 f998 	bl	b6e40 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b4b10:	6820      	ldr	r0, [r4, #0]
   b4b12:	6803      	ldr	r3, [r0, #0]
   b4b14:	4629      	mov	r1, r5
   b4b16:	689b      	ldr	r3, [r3, #8]
   b4b18:	4798      	blx	r3
        _wire -> endTransmission();
   b4b1a:	6820      	ldr	r0, [r4, #0]
   b4b1c:	f002 f99b 	bl	b6e56 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   b4b20:	7921      	ldrb	r1, [r4, #4]
   b4b22:	6820      	ldr	r0, [r4, #0]
   b4b24:	2201      	movs	r2, #1
   b4b26:	f002 f988 	bl	b6e3a <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   b4b2a:	6820      	ldr	r0, [r4, #0]
   b4b2c:	6803      	ldr	r3, [r0, #0]
   b4b2e:	695b      	ldr	r3, [r3, #20]
   b4b30:	4798      	blx	r3
   b4b32:	b2c5      	uxtb	r5, r0
        digitalWrite(_cs, HIGH);
        if (_sck == -1)
            SPI.endTransaction(); // release the SPI bus
    }
    return value;
}
   b4b34:	4628      	mov	r0, r5
   b4b36:	b005      	add	sp, #20
   b4b38:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b4b3a:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4b3e:	3301      	adds	r3, #1
   b4b40:	d10c      	bne.n	b4b5c <_ZN15Adafruit_BME2805read8Eh+0x64>
   b4b42:	4b15      	ldr	r3, [pc, #84]	; (b4b98 <_ZN15Adafruit_BME2805read8Eh+0xa0>)
   b4b44:	9300      	str	r3, [sp, #0]
   b4b46:	2300      	movs	r3, #0
   b4b48:	f88d 3004 	strb.w	r3, [sp, #4]
   b4b4c:	4b13      	ldr	r3, [pc, #76]	; (b4b9c <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   b4b4e:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b4b50:	4668      	mov	r0, sp
   b4b52:	2301      	movs	r3, #1
   b4b54:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4b58:	f7ff fef1 	bl	b493e <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b4b5c:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4b60:	2100      	movs	r1, #0
   b4b62:	b280      	uxth	r0, r0
   b4b64:	f002 fd85 	bl	b7672 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b4b68:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b4b6c:	4620      	mov	r0, r4
   b4b6e:	f7ff fef0 	bl	b4952 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   b4b72:	2100      	movs	r1, #0
   b4b74:	4620      	mov	r0, r4
   b4b76:	f7ff feec 	bl	b4952 <_ZN15Adafruit_BME2807spixferEh>
   b4b7a:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   b4b7c:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4b80:	2101      	movs	r1, #1
   b4b82:	b280      	uxth	r0, r0
   b4b84:	f002 fd75 	bl	b7672 <digitalWrite>
        if (_sck == -1)
   b4b88:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b4b8c:	3301      	adds	r3, #1
   b4b8e:	d1d1      	bne.n	b4b34 <_ZN15Adafruit_BME2805read8Eh+0x3c>
            SPI.endTransaction(); // release the SPI bus
   b4b90:	f7ff fece 	bl	b4930 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   b4b94:	e7ce      	b.n	b4b34 <_ZN15Adafruit_BME2805read8Eh+0x3c>
   b4b96:	bf00      	nop
   b4b98:	000b876c 	.word	0x000b876c
   b4b9c:	0007a120 	.word	0x0007a120

000b4ba0 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   b4ba0:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   b4ba2:	21f3      	movs	r1, #243	; 0xf3
   b4ba4:	f7ff ffa8 	bl	b4af8 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   b4ba8:	f000 0001 	and.w	r0, r0, #1
   b4bac:	bd08      	pop	{r3, pc}
	...

000b4bb0 <_ZN15Adafruit_BME2806read16Eh>:
{
   b4bb0:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   b4bb2:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b4bb6:	3301      	adds	r3, #1
{
   b4bb8:	b085      	sub	sp, #20
   b4bba:	4604      	mov	r4, r0
   b4bbc:	460d      	mov	r5, r1
    if (_cs == -1) {
   b4bbe:	d11f      	bne.n	b4c00 <_ZN15Adafruit_BME2806read16Eh+0x50>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b4bc0:	7901      	ldrb	r1, [r0, #4]
   b4bc2:	6800      	ldr	r0, [r0, #0]
   b4bc4:	f002 f93c 	bl	b6e40 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b4bc8:	6820      	ldr	r0, [r4, #0]
   b4bca:	6803      	ldr	r3, [r0, #0]
   b4bcc:	4629      	mov	r1, r5
   b4bce:	689b      	ldr	r3, [r3, #8]
   b4bd0:	4798      	blx	r3
        _wire -> endTransmission();
   b4bd2:	6820      	ldr	r0, [r4, #0]
   b4bd4:	f002 f93f 	bl	b6e56 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   b4bd8:	7921      	ldrb	r1, [r4, #4]
   b4bda:	6820      	ldr	r0, [r4, #0]
   b4bdc:	2202      	movs	r2, #2
   b4bde:	f002 f92c 	bl	b6e3a <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   b4be2:	6820      	ldr	r0, [r4, #0]
   b4be4:	6803      	ldr	r3, [r0, #0]
   b4be6:	695b      	ldr	r3, [r3, #20]
   b4be8:	4798      	blx	r3
   b4bea:	4605      	mov	r5, r0
   b4bec:	6820      	ldr	r0, [r4, #0]
   b4bee:	6803      	ldr	r3, [r0, #0]
   b4bf0:	695b      	ldr	r3, [r3, #20]
   b4bf2:	4798      	blx	r3
   b4bf4:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b4bf8:	b285      	uxth	r5, r0
}
   b4bfa:	4628      	mov	r0, r5
   b4bfc:	b005      	add	sp, #20
   b4bfe:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b4c00:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4c04:	3301      	adds	r3, #1
   b4c06:	d10c      	bne.n	b4c22 <_ZN15Adafruit_BME2806read16Eh+0x72>
   b4c08:	4b18      	ldr	r3, [pc, #96]	; (b4c6c <_ZN15Adafruit_BME2806read16Eh+0xbc>)
   b4c0a:	9300      	str	r3, [sp, #0]
   b4c0c:	2300      	movs	r3, #0
   b4c0e:	f88d 3004 	strb.w	r3, [sp, #4]
   b4c12:	4b17      	ldr	r3, [pc, #92]	; (b4c70 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   b4c14:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b4c16:	4668      	mov	r0, sp
   b4c18:	2301      	movs	r3, #1
   b4c1a:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4c1e:	f7ff fe8e 	bl	b493e <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b4c22:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4c26:	2100      	movs	r1, #0
   b4c28:	b280      	uxth	r0, r0
   b4c2a:	f002 fd22 	bl	b7672 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b4c2e:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b4c32:	4620      	mov	r0, r4
   b4c34:	f7ff fe8d 	bl	b4952 <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   b4c38:	2100      	movs	r1, #0
   b4c3a:	4620      	mov	r0, r4
   b4c3c:	f7ff fe89 	bl	b4952 <_ZN15Adafruit_BME2807spixferEh>
   b4c40:	2100      	movs	r1, #0
   b4c42:	4605      	mov	r5, r0
   b4c44:	4620      	mov	r0, r4
   b4c46:	f7ff fe84 	bl	b4952 <_ZN15Adafruit_BME2807spixferEh>
   b4c4a:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b4c4e:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   b4c50:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4c54:	2101      	movs	r1, #1
   b4c56:	b280      	uxth	r0, r0
   b4c58:	f002 fd0b 	bl	b7672 <digitalWrite>
        if (_sck == -1)
   b4c5c:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b4c60:	3301      	adds	r3, #1
   b4c62:	d1ca      	bne.n	b4bfa <_ZN15Adafruit_BME2806read16Eh+0x4a>
            SPI.endTransaction(); // release the SPI bus
   b4c64:	f7ff fe64 	bl	b4930 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   b4c68:	e7c7      	b.n	b4bfa <_ZN15Adafruit_BME2806read16Eh+0x4a>
   b4c6a:	bf00      	nop
   b4c6c:	000b876c 	.word	0x000b876c
   b4c70:	0007a120 	.word	0x0007a120

000b4c74 <_ZN15Adafruit_BME2809read16_LEEh>:
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   b4c74:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   b4c76:	f7ff ff9b 	bl	b4bb0 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   b4c7a:	ba40      	rev16	r0, r0
}
   b4c7c:	b280      	uxth	r0, r0
   b4c7e:	bd08      	pop	{r3, pc}

000b4c80 <_ZN15Adafruit_BME28016readCoefficientsEv>:
{
   b4c80:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b4c82:	2188      	movs	r1, #136	; 0x88
{
   b4c84:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b4c86:	f7ff fff5 	bl	b4c74 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   b4c8a:	218a      	movs	r1, #138	; 0x8a
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b4c8c:	82a0      	strh	r0, [r4, #20]
    return (int16_t)read16_LE(reg);
   b4c8e:	4620      	mov	r0, r4
   b4c90:	f7ff fff0 	bl	b4c74 <_ZN15Adafruit_BME2809read16_LEEh>
   b4c94:	218c      	movs	r1, #140	; 0x8c
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   b4c96:	82e0      	strh	r0, [r4, #22]
    return (int16_t)read16_LE(reg);
   b4c98:	4620      	mov	r0, r4
   b4c9a:	f7ff ffeb 	bl	b4c74 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b4c9e:	218e      	movs	r1, #142	; 0x8e
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   b4ca0:	8320      	strh	r0, [r4, #24]
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b4ca2:	4620      	mov	r0, r4
   b4ca4:	f7ff ffe6 	bl	b4c74 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   b4ca8:	2190      	movs	r1, #144	; 0x90
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b4caa:	8360      	strh	r0, [r4, #26]
    return (int16_t)read16_LE(reg);
   b4cac:	4620      	mov	r0, r4
   b4cae:	f7ff ffe1 	bl	b4c74 <_ZN15Adafruit_BME2809read16_LEEh>
   b4cb2:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   b4cb4:	83a0      	strh	r0, [r4, #28]
    return (int16_t)read16_LE(reg);
   b4cb6:	4620      	mov	r0, r4
   b4cb8:	f7ff ffdc 	bl	b4c74 <_ZN15Adafruit_BME2809read16_LEEh>
   b4cbc:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   b4cbe:	83e0      	strh	r0, [r4, #30]
    return (int16_t)read16_LE(reg);
   b4cc0:	4620      	mov	r0, r4
   b4cc2:	f7ff ffd7 	bl	b4c74 <_ZN15Adafruit_BME2809read16_LEEh>
   b4cc6:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   b4cc8:	8420      	strh	r0, [r4, #32]
    return (int16_t)read16_LE(reg);
   b4cca:	4620      	mov	r0, r4
   b4ccc:	f7ff ffd2 	bl	b4c74 <_ZN15Adafruit_BME2809read16_LEEh>
   b4cd0:	2198      	movs	r1, #152	; 0x98
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   b4cd2:	8460      	strh	r0, [r4, #34]	; 0x22
    return (int16_t)read16_LE(reg);
   b4cd4:	4620      	mov	r0, r4
   b4cd6:	f7ff ffcd 	bl	b4c74 <_ZN15Adafruit_BME2809read16_LEEh>
   b4cda:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   b4cdc:	84a0      	strh	r0, [r4, #36]	; 0x24
    return (int16_t)read16_LE(reg);
   b4cde:	4620      	mov	r0, r4
   b4ce0:	f7ff ffc8 	bl	b4c74 <_ZN15Adafruit_BME2809read16_LEEh>
   b4ce4:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   b4ce6:	84e0      	strh	r0, [r4, #38]	; 0x26
    return (int16_t)read16_LE(reg);
   b4ce8:	4620      	mov	r0, r4
   b4cea:	f7ff ffc3 	bl	b4c74 <_ZN15Adafruit_BME2809read16_LEEh>
   b4cee:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   b4cf0:	8520      	strh	r0, [r4, #40]	; 0x28
    return (int16_t)read16_LE(reg);
   b4cf2:	4620      	mov	r0, r4
   b4cf4:	f7ff ffbe 	bl	b4c74 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4cf8:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   b4cfa:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4cfc:	4620      	mov	r0, r4
   b4cfe:	f7ff fefb 	bl	b4af8 <_ZN15Adafruit_BME2805read8Eh>
    return (int16_t)read16_LE(reg);
   b4d02:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4d04:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    return (int16_t)read16_LE(reg);
   b4d08:	4620      	mov	r0, r4
   b4d0a:	f7ff ffb3 	bl	b4c74 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b4d0e:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   b4d10:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b4d12:	4620      	mov	r0, r4
   b4d14:	f7ff fef0 	bl	b4af8 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   b4d18:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b4d1a:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   b4d1e:	4620      	mov	r0, r4
   b4d20:	f7ff feea 	bl	b4af8 <_ZN15Adafruit_BME2805read8Eh>
   b4d24:	21e5      	movs	r1, #229	; 0xe5
   b4d26:	4605      	mov	r5, r0
   b4d28:	4620      	mov	r0, r4
   b4d2a:	f7ff fee5 	bl	b4af8 <_ZN15Adafruit_BME2805read8Eh>
   b4d2e:	f000 030f 	and.w	r3, r0, #15
   b4d32:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   b4d36:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   b4d38:	21e6      	movs	r1, #230	; 0xe6
   b4d3a:	4620      	mov	r0, r4
   b4d3c:	f7ff fedc 	bl	b4af8 <_ZN15Adafruit_BME2805read8Eh>
   b4d40:	21e5      	movs	r1, #229	; 0xe5
   b4d42:	4605      	mov	r5, r0
   b4d44:	4620      	mov	r0, r4
   b4d46:	f7ff fed7 	bl	b4af8 <_ZN15Adafruit_BME2805read8Eh>
   b4d4a:	f3c0 1307 	ubfx	r3, r0, #4, #8
   b4d4e:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   b4d52:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   b4d54:	21e7      	movs	r1, #231	; 0xe7
   b4d56:	4620      	mov	r0, r4
   b4d58:	f7ff fece 	bl	b4af8 <_ZN15Adafruit_BME2805read8Eh>
   b4d5c:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
}
   b4d60:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4d64 <_ZN15Adafruit_BME2806read24Eh>:
{
   b4d64:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   b4d66:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b4d6a:	3301      	adds	r3, #1
{
   b4d6c:	b085      	sub	sp, #20
   b4d6e:	4604      	mov	r4, r0
   b4d70:	460d      	mov	r5, r1
    if (_cs == -1) {
   b4d72:	d123      	bne.n	b4dbc <_ZN15Adafruit_BME2806read24Eh+0x58>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b4d74:	7901      	ldrb	r1, [r0, #4]
   b4d76:	6800      	ldr	r0, [r0, #0]
   b4d78:	f002 f862 	bl	b6e40 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b4d7c:	6820      	ldr	r0, [r4, #0]
   b4d7e:	6803      	ldr	r3, [r0, #0]
   b4d80:	4629      	mov	r1, r5
   b4d82:	689b      	ldr	r3, [r3, #8]
   b4d84:	4798      	blx	r3
        _wire -> endTransmission();
   b4d86:	6820      	ldr	r0, [r4, #0]
   b4d88:	f002 f865 	bl	b6e56 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   b4d8c:	7921      	ldrb	r1, [r4, #4]
   b4d8e:	6820      	ldr	r0, [r4, #0]
   b4d90:	2203      	movs	r2, #3
   b4d92:	f002 f852 	bl	b6e3a <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   b4d96:	6820      	ldr	r0, [r4, #0]
   b4d98:	6803      	ldr	r3, [r0, #0]
   b4d9a:	695b      	ldr	r3, [r3, #20]
   b4d9c:	4798      	blx	r3
        value <<= 8;
   b4d9e:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   b4da0:	6820      	ldr	r0, [r4, #0]
   b4da2:	6803      	ldr	r3, [r0, #0]
   b4da4:	695b      	ldr	r3, [r3, #20]
   b4da6:	4798      	blx	r3
   b4da8:	4328      	orrs	r0, r5
        value <<= 8;
   b4daa:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   b4dac:	6820      	ldr	r0, [r4, #0]
   b4dae:	6803      	ldr	r3, [r0, #0]
   b4db0:	695b      	ldr	r3, [r3, #20]
   b4db2:	4798      	blx	r3
   b4db4:	4305      	orrs	r5, r0
}
   b4db6:	4628      	mov	r0, r5
   b4db8:	b005      	add	sp, #20
   b4dba:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b4dbc:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4dc0:	3301      	adds	r3, #1
   b4dc2:	d10c      	bne.n	b4dde <_ZN15Adafruit_BME2806read24Eh+0x7a>
   b4dc4:	4b1a      	ldr	r3, [pc, #104]	; (b4e30 <_ZN15Adafruit_BME2806read24Eh+0xcc>)
   b4dc6:	9300      	str	r3, [sp, #0]
   b4dc8:	2300      	movs	r3, #0
   b4dca:	f88d 3004 	strb.w	r3, [sp, #4]
   b4dce:	4b19      	ldr	r3, [pc, #100]	; (b4e34 <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   b4dd0:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b4dd2:	4668      	mov	r0, sp
   b4dd4:	2301      	movs	r3, #1
   b4dd6:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4dda:	f7ff fdb0 	bl	b493e <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b4dde:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4de2:	2100      	movs	r1, #0
   b4de4:	b280      	uxth	r0, r0
   b4de6:	f002 fc44 	bl	b7672 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b4dea:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b4dee:	4620      	mov	r0, r4
   b4df0:	f7ff fdaf 	bl	b4952 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   b4df4:	2100      	movs	r1, #0
   b4df6:	4620      	mov	r0, r4
   b4df8:	f7ff fdab 	bl	b4952 <_ZN15Adafruit_BME2807spixferEh>
        value |= spixfer(0);
   b4dfc:	2100      	movs	r1, #0
        value <<= 8;
   b4dfe:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   b4e00:	4620      	mov	r0, r4
   b4e02:	f7ff fda6 	bl	b4952 <_ZN15Adafruit_BME2807spixferEh>
   b4e06:	4328      	orrs	r0, r5
        value <<= 8;
   b4e08:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   b4e0a:	2100      	movs	r1, #0
   b4e0c:	4620      	mov	r0, r4
   b4e0e:	f7ff fda0 	bl	b4952 <_ZN15Adafruit_BME2807spixferEh>
   b4e12:	4305      	orrs	r5, r0
        digitalWrite(_cs, HIGH);
   b4e14:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4e18:	2101      	movs	r1, #1
   b4e1a:	b280      	uxth	r0, r0
   b4e1c:	f002 fc29 	bl	b7672 <digitalWrite>
        if (_sck == -1)
   b4e20:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b4e24:	3301      	adds	r3, #1
   b4e26:	d1c6      	bne.n	b4db6 <_ZN15Adafruit_BME2806read24Eh+0x52>
            SPI.endTransaction(); // release the SPI bus
   b4e28:	f7ff fd82 	bl	b4930 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
    return value;
   b4e2c:	e7c3      	b.n	b4db6 <_ZN15Adafruit_BME2806read24Eh+0x52>
   b4e2e:	bf00      	nop
   b4e30:	000b876c 	.word	0x000b876c
   b4e34:	0007a120 	.word	0x0007a120

000b4e38 <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   b4e38:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   b4e3a:	21fa      	movs	r1, #250	; 0xfa
{
   b4e3c:	4604      	mov	r4, r0
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   b4e3e:	f7ff ff91 	bl	b4d64 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   b4e42:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b4e46:	d01f      	beq.n	b4e88 <_ZN15Adafruit_BME28015readTemperatureEv+0x50>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4e48:	8aa1      	ldrh	r1, [r4, #20]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   b4e4a:	ed9f 7a11 	vldr	s14, [pc, #68]	; b4e90 <_ZN15Adafruit_BME28015readTemperatureEv+0x58>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4e4e:	004b      	lsls	r3, r1, #1
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b4e50:	ebc1 2220 	rsb	r2, r1, r0, asr #8
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4e54:	ebc3 11e0 	rsb	r1, r3, r0, asr #7
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
   b4e58:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4e5c:	4359      	muls	r1, r3
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b4e5e:	fb02 f302 	mul.w	r3, r2, r2
            ((int32_t)_bme280_calib.dig_T3)) >> 14;
   b4e62:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   b4e66:	131b      	asrs	r3, r3, #12
   b4e68:	4353      	muls	r3, r2
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b4e6a:	139b      	asrs	r3, r3, #14
    t_fine = var1 + var2;
   b4e6c:	eb03 23e1 	add.w	r3, r3, r1, asr #11
   b4e70:	60e3      	str	r3, [r4, #12]
    float T = (t_fine * 5 + 128) >> 8;
   b4e72:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b4e76:	3380      	adds	r3, #128	; 0x80
   b4e78:	121b      	asrs	r3, r3, #8
   b4e7a:	ee07 3a90 	vmov	s15, r3
   b4e7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return T/100;
   b4e82:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   b4e86:	bd10      	pop	{r4, pc}
        return NAN;
   b4e88:	ed9f 0a02 	vldr	s0, [pc, #8]	; b4e94 <_ZN15Adafruit_BME28015readTemperatureEv+0x5c>
   b4e8c:	e7fb      	b.n	b4e86 <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
   b4e8e:	bf00      	nop
   b4e90:	42c80000 	.word	0x42c80000
   b4e94:	7fc00000 	.word	0x7fc00000

000b4e98 <_ZN15Adafruit_BME28012readHumidityEv>:
/*!
    @brief  Returns the humidity from the sensor
    @returns the humidity value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readHumidity(void) {
   b4e98:	b538      	push	{r3, r4, r5, lr}
   b4e9a:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   b4e9c:	f7ff ffcc 	bl	b4e38 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   b4ea0:	21fd      	movs	r1, #253	; 0xfd
   b4ea2:	4620      	mov	r0, r4
   b4ea4:	f7ff fe84 	bl	b4bb0 <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   b4ea8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   b4eac:	d038      	beq.n	b4f20 <_ZN15Adafruit_BME28012readHumidityEv+0x88>
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
   b4eae:	68e1      	ldr	r1, [r4, #12]

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   b4eb0:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
    v_x1_u32r = (t_fine - ((int32_t)76800));
   b4eb4:	f5a1 3596 	sub.w	r5, r1, #76800	; 0x12c00
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   b4eb8:	f9b4 1032 	ldrsh.w	r1, [r4, #50]	; 0x32
   b4ebc:	0509      	lsls	r1, r1, #20
   b4ebe:	ebc1 3380 	rsb	r3, r1, r0, lsl #14
   b4ec2:	fb05 3312 	mls	r3, r5, r2, r3
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   b4ec6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   b4eca:	13da      	asrs	r2, r3, #15
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4ecc:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4ed0:	f994 1036 	ldrsb.w	r1, [r4, #54]	; 0x36
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4ed4:	436b      	muls	r3, r5
   b4ed6:	12db      	asrs	r3, r3, #11
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4ed8:	4369      	muls	r1, r5
   b4eda:	1289      	asrs	r1, r1, #10
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4edc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4ee0:	434b      	muls	r3, r1
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4ee2:	129b      	asrs	r3, r3, #10
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   b4ee4:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	; 0x2e
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4ee8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   b4eec:	434b      	muls	r3, r1
   b4eee:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   b4ef2:	139b      	asrs	r3, r3, #14
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   b4ef4:	4353      	muls	r3, r2

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   b4ef6:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   b4ef8:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   b4efc:	4352      	muls	r2, r2
   b4efe:	11d2      	asrs	r2, r2, #7
   b4f00:	434a      	muls	r2, r1
   b4f02:	eba3 1322 	sub.w	r3, r3, r2, asr #4

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   b4f06:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
   b4f0a:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   b4f0e:	bfa8      	it	ge
   b4f10:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
    float h = (v_x1_u32r>>12);
   b4f14:	131b      	asrs	r3, r3, #12
   b4f16:	ee00 3a10 	vmov	s0, r3
    return  h / 1024.0;
   b4f1a:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
}
   b4f1e:	bd38      	pop	{r3, r4, r5, pc}
        return NAN;
   b4f20:	ed9f 0a01 	vldr	s0, [pc, #4]	; b4f28 <_ZN15Adafruit_BME28012readHumidityEv+0x90>
   b4f24:	e7fb      	b.n	b4f1e <_ZN15Adafruit_BME28012readHumidityEv+0x86>
   b4f26:	bf00      	nop
   b4f28:	7fc00000 	.word	0x7fc00000

000b4f2c <_ZN15Adafruit_BME2804initEv>:
{
   b4f2c:	b530      	push	{r4, r5, lr}
   b4f2e:	4604      	mov	r4, r0
    if (_cs == -1) {
   b4f30:	f990 0010 	ldrsb.w	r0, [r0, #16]
   b4f34:	1c42      	adds	r2, r0, #1
{
   b4f36:	b085      	sub	sp, #20
    if (_cs == -1) {
   b4f38:	d119      	bne.n	b4f6e <_ZN15Adafruit_BME2804initEv+0x42>
        _wire -> begin();
   b4f3a:	6820      	ldr	r0, [r4, #0]
   b4f3c:	f001 ff4e 	bl	b6ddc <_ZN7TwoWire5beginEv>
    _sensorID = read8(BME280_REGISTER_CHIPID);
   b4f40:	21d0      	movs	r1, #208	; 0xd0
   b4f42:	4620      	mov	r0, r4
   b4f44:	f7ff fdd8 	bl	b4af8 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   b4f48:	2860      	cmp	r0, #96	; 0x60
    _sensorID = read8(BME280_REGISTER_CHIPID);
   b4f4a:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   b4f4c:	d145      	bne.n	b4fda <_ZN15Adafruit_BME2804initEv+0xae>
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   b4f4e:	4620      	mov	r0, r4
   b4f50:	22b6      	movs	r2, #182	; 0xb6
   b4f52:	21e0      	movs	r1, #224	; 0xe0
   b4f54:	f7ff fd34 	bl	b49c0 <_ZN15Adafruit_BME2806write8Ehh>
    delay(300);
   b4f58:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b4f5c:	f001 fceb 	bl	b6936 <delay>
    while (isReadingCalibration())
   b4f60:	4620      	mov	r0, r4
   b4f62:	f7ff fe1d 	bl	b4ba0 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   b4f66:	4605      	mov	r5, r0
   b4f68:	b328      	cbz	r0, b4fb6 <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   b4f6a:	2064      	movs	r0, #100	; 0x64
   b4f6c:	e7f6      	b.n	b4f5c <_ZN15Adafruit_BME2804initEv+0x30>
        digitalWrite(_cs, HIGH);
   b4f6e:	2101      	movs	r1, #1
   b4f70:	b280      	uxth	r0, r0
   b4f72:	f002 fb7e 	bl	b7672 <digitalWrite>
        pinMode(_cs, OUTPUT);
   b4f76:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4f7a:	2101      	movs	r1, #1
   b4f7c:	b280      	uxth	r0, r0
   b4f7e:	f002 fb67 	bl	b7650 <pinMode>
        if (_sck == -1) {
   b4f82:	f994 0013 	ldrsb.w	r0, [r4, #19]
   b4f86:	1c43      	adds	r3, r0, #1
   b4f88:	d104      	bne.n	b4f94 <_ZN15Adafruit_BME2804initEv+0x68>
        instance().begin();
   b4f8a:	f7ff fcb5 	bl	b48f8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4f8e:	f001 f881 	bl	b6094 <_ZN8SPIClass5beginEv>
    }
   b4f92:	e7d5      	b.n	b4f40 <_ZN15Adafruit_BME2804initEv+0x14>
            pinMode(_sck, OUTPUT);
   b4f94:	2101      	movs	r1, #1
   b4f96:	b280      	uxth	r0, r0
   b4f98:	f002 fb5a 	bl	b7650 <pinMode>
            pinMode(_mosi, OUTPUT);
   b4f9c:	f994 0011 	ldrsb.w	r0, [r4, #17]
   b4fa0:	2101      	movs	r1, #1
   b4fa2:	b280      	uxth	r0, r0
   b4fa4:	f002 fb54 	bl	b7650 <pinMode>
            pinMode(_miso, INPUT);
   b4fa8:	f994 0012 	ldrsb.w	r0, [r4, #18]
   b4fac:	2100      	movs	r1, #0
   b4fae:	b280      	uxth	r0, r0
   b4fb0:	f002 fb4e 	bl	b7650 <pinMode>
   b4fb4:	e7c4      	b.n	b4f40 <_ZN15Adafruit_BME2804initEv+0x14>
    readCoefficients(); // read trimming parameters, see DS 4.2.2
   b4fb6:	4620      	mov	r0, r4
   b4fb8:	f7ff fe62 	bl	b4c80 <_ZN15Adafruit_BME28016readCoefficientsEv>
    setSampling(); // use defaults
   b4fbc:	2305      	movs	r3, #5
   b4fbe:	9300      	str	r3, [sp, #0]
   b4fc0:	461a      	mov	r2, r3
   b4fc2:	2103      	movs	r1, #3
   b4fc4:	4620      	mov	r0, r4
   b4fc6:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b4fca:	f7ff fd4b 	bl	b4a64 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    delay(100);
   b4fce:	2064      	movs	r0, #100	; 0x64
   b4fd0:	f001 fcb1 	bl	b6936 <delay>
    return true;
   b4fd4:	2001      	movs	r0, #1
}
   b4fd6:	b005      	add	sp, #20
   b4fd8:	bd30      	pop	{r4, r5, pc}
        return false;
   b4fda:	2000      	movs	r0, #0
   b4fdc:	e7fb      	b.n	b4fd6 <_ZN15Adafruit_BME2804initEv+0xaa>

000b4fde <_ZN15Adafruit_BME2805beginEh>:
{
   b4fde:	b510      	push	{r4, lr}
	_i2caddr = addr;
   b4fe0:	7101      	strb	r1, [r0, #4]
{
   b4fe2:	4604      	mov	r4, r0
	_wire = &Wire;
   b4fe4:	f002 fbee 	bl	b77c4 <_Z19__fetch_global_Wirev>
   b4fe8:	6020      	str	r0, [r4, #0]
	return init();
   b4fea:	4620      	mov	r0, r4
}
   b4fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return init();
   b4ff0:	f7ff bf9c 	b.w	b4f2c <_ZN15Adafruit_BME2804initEv>

000b4ff4 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b4ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   b4ff6:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b4ff8:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b4ffc:	2d02      	cmp	r5, #2
   b4ffe:	d069      	beq.n	b50d4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xe0>
   b5000:	2d03      	cmp	r5, #3
   b5002:	f000 8099 	beq.w	b5138 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x144>
   b5006:	2d01      	cmp	r5, #1
   b5008:	d16c      	bne.n	b50e4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf0>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   b500a:	8905      	ldrh	r5, [r0, #8]
   b500c:	43d2      	mvns	r2, r2
   b500e:	442a      	add	r2, r5
   b5010:	b212      	sxth	r2, r2


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   b5012:	2a00      	cmp	r2, #0
   b5014:	db5d      	blt.n	b50d2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b5016:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b501a:	4295      	cmp	r5, r2
   b501c:	dd59      	ble.n	b50d2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   b501e:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   b5020:	bfbe      	ittt	lt
   b5022:	185b      	addlt	r3, r3, r1
   b5024:	b21b      	sxthlt	r3, r3
    __y = 0;
   b5026:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   b5028:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b502c:	18cd      	adds	r5, r1, r3
   b502e:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b5030:	bfc4      	itt	gt
   b5032:	1a43      	subgt	r3, r0, r1
   b5034:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   b5036:	2b00      	cmp	r3, #0
   b5038:	dd4b      	ble.n	b50d2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   b503a:	f3c1 00c4 	ubfx	r0, r1, #3, #5
   b503e:	f8df c120 	ldr.w	ip, [pc, #288]	; b5160 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>
   b5042:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   b5046:	f011 0107 	ands.w	r1, r1, #7
  register uint8_t h = __h;
   b504a:	b2db      	uxtb	r3, r3
  pBuf += x;
   b504c:	eb0c 0002 	add.w	r0, ip, r2
  if(mod) {
   b5050:	d01a      	beq.n	b5088 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x94>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   b5052:	f1c1 0508 	rsb	r5, r1, #8

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   b5056:	4e40      	ldr	r6, [pc, #256]	; (b5158 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x164>)
    mod = 8-mod;
   b5058:	b2ed      	uxtb	r5, r5

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   b505a:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b505c:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b505e:	bf3f      	itttt	cc
   b5060:	eba5 0e03 	subcc.w	lr, r5, r3
   b5064:	26ff      	movcc	r6, #255	; 0xff
   b5066:	fa46 f60e 	asrcc.w	r6, r6, lr
   b506a:	4037      	andcc	r7, r6
    }

    if(color == WHITE) { 
      *pBuf |= mask;
   b506c:	f81c 6002 	ldrb.w	r6, [ip, r2]
    if(color == WHITE) { 
   b5070:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b5072:	bf0c      	ite	eq
   b5074:	433e      	orreq	r6, r7
    } else {
      *pBuf &= ~mask;
   b5076:	43be      	bicne	r6, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   b5078:	42ab      	cmp	r3, r5
   b507a:	f80c 6002 	strb.w	r6, [ip, r2]
   b507e:	d328      	bcc.n	b50d2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

    h -= mod;
   b5080:	3908      	subs	r1, #8
   b5082:	440b      	add	r3, r1
   b5084:	b2db      	uxtb	r3, r3

    pBuf += SSD1306_LCDWIDTH;
   b5086:	3080      	adds	r0, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   b5088:	2b07      	cmp	r3, #7
   b508a:	d919      	bls.n	b50c0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xcc>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b508c:	2c01      	cmp	r4, #1
   b508e:	f04f 35ff 	mov.w	r5, #4294967295
   b5092:	bf18      	it	ne
   b5094:	2500      	movne	r5, #0
   b5096:	b2ed      	uxtb	r5, r5
   b5098:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b509c:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   b509e:	3a08      	subs	r2, #8
   b50a0:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b50a2:	2a07      	cmp	r2, #7
      *pBuf = val;
   b50a4:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b50a8:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b50ac:	d8f7      	bhi.n	b509e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
      pBuf += SSD1306_LCDWIDTH;
   b50ae:	f1a3 0208 	sub.w	r2, r3, #8
   b50b2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b50b6:	3201      	adds	r2, #1
   b50b8:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b50bc:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   b50c0:	b13b      	cbz	r3, b50d2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   b50c2:	4a26      	ldr	r2, [pc, #152]	; (b515c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   b50c4:	5cd2      	ldrb	r2, [r2, r3]
    if(color == WHITE) { 
      *pBuf |= mask;
   b50c6:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b50c8:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b50ca:	bf0c      	ite	eq
   b50cc:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   b50ce:	4393      	bicne	r3, r2
   b50d0:	7003      	strb	r3, [r0, #0]
}
   b50d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b50d4:	8945      	ldrh	r5, [r0, #10]
   b50d6:	43d2      	mvns	r2, r2
   b50d8:	442a      	add	r2, r5
      x -= (w-1);
   b50da:	18cd      	adds	r5, r1, r3
   b50dc:	8901      	ldrh	r1, [r0, #8]
   b50de:	1b49      	subs	r1, r1, r5
      y = HEIGHT - y - 1;
   b50e0:	b212      	sxth	r2, r2
      x -= (w-1);
   b50e2:	b209      	sxth	r1, r1
  if(y < 0 || y >= HEIGHT) { return; }
   b50e4:	2a00      	cmp	r2, #0
   b50e6:	dbf4      	blt.n	b50d2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b50e8:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b50ec:	4295      	cmp	r5, r2
   b50ee:	ddf0      	ble.n	b50d2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  if(x < 0) { 
   b50f0:	2900      	cmp	r1, #0
    w += x;
   b50f2:	bfbe      	ittt	lt
   b50f4:	185b      	addlt	r3, r3, r1
   b50f6:	b21b      	sxthlt	r3, r3
    x = 0;
   b50f8:	2100      	movlt	r1, #0
  if( (x + w) > WIDTH) { 
   b50fa:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b50fe:	18ce      	adds	r6, r1, r3
   b5100:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b5102:	bfc4      	itt	gt
   b5104:	1a6b      	subgt	r3, r5, r1
   b5106:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b5108:	2b00      	cmp	r3, #0
   b510a:	dde2      	ble.n	b50d2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b510c:	10d0      	asrs	r0, r2, #3
  pBuf += x;
   b510e:	2580      	movs	r5, #128	; 0x80
   b5110:	fb10 1105 	smlabb	r1, r0, r5, r1
   b5114:	4812      	ldr	r0, [pc, #72]	; (b5160 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)
   b5116:	4401      	add	r1, r0
  register uint8_t mask = 1 << (y&7);
   b5118:	f002 0007 	and.w	r0, r2, #7
   b511c:	2201      	movs	r2, #1
   b511e:	4082      	lsls	r2, r0
  if(color == WHITE) { 
   b5120:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b5122:	b2d2      	uxtb	r2, r2
  if(color == WHITE) { 
   b5124:	440b      	add	r3, r1
   b5126:	d10c      	bne.n	b5142 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
    while(w--) { *pBuf++ |= mask; }
   b5128:	428b      	cmp	r3, r1
   b512a:	d0d2      	beq.n	b50d2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b512c:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5130:	4310      	orrs	r0, r2
   b5132:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5136:	e7f7      	b.n	b5128 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x134>
      y -= (w-1);
   b5138:	18cd      	adds	r5, r1, r3
   b513a:	8941      	ldrh	r1, [r0, #10]
   b513c:	1b49      	subs	r1, r1, r5
   b513e:	b209      	sxth	r1, r1
      break;
   b5140:	e767      	b.n	b5012 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
    mask = ~mask;
   b5142:	43d2      	mvns	r2, r2
   b5144:	b2d2      	uxtb	r2, r2
    while(w--) { *pBuf++ &= mask; }
   b5146:	428b      	cmp	r3, r1
   b5148:	d0c3      	beq.n	b50d2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b514a:	f811 0b01 	ldrb.w	r0, [r1], #1
   b514e:	4010      	ands	r0, r2
   b5150:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5154:	e7f7      	b.n	b5146 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   b5156:	bf00      	nop
   b5158:	2003e0e5 	.word	0x2003e0e5
   b515c:	2003e0dd 	.word	0x2003e0dd
   b5160:	2003e0ed 	.word	0x2003e0ed

000b5164 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b5164:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(rotation) { 
   b5166:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b5168:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b516c:	2d02      	cmp	r5, #2
   b516e:	d034      	beq.n	b51da <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x76>
   b5170:	2d03      	cmp	r5, #3
   b5172:	f000 809b 	beq.w	b52ac <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x148>
   b5176:	2d01      	cmp	r5, #1
   b5178:	d137      	bne.n	b51ea <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x86>
      x -= (h-1);
   b517a:	18d5      	adds	r5, r2, r3
   b517c:	8902      	ldrh	r2, [r0, #8]
   b517e:	1b52      	subs	r2, r2, r5
   b5180:	b212      	sxth	r2, r2
  if(y < 0 || y >= HEIGHT) { return; }
   b5182:	2900      	cmp	r1, #0
   b5184:	f2c0 8091 	blt.w	b52aa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b5188:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b518c:	428d      	cmp	r5, r1
   b518e:	f340 808c 	ble.w	b52aa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(x < 0) { 
   b5192:	2a00      	cmp	r2, #0
    w += x;
   b5194:	bfbe      	ittt	lt
   b5196:	189b      	addlt	r3, r3, r2
   b5198:	b21b      	sxthlt	r3, r3
    x = 0;
   b519a:	2200      	movlt	r2, #0
  if( (x + w) > WIDTH) { 
   b519c:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b51a0:	18d6      	adds	r6, r2, r3
   b51a2:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b51a4:	bfc4      	itt	gt
   b51a6:	1aab      	subgt	r3, r5, r2
   b51a8:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b51aa:	2b00      	cmp	r3, #0
   b51ac:	dd7d      	ble.n	b52aa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b51ae:	10c8      	asrs	r0, r1, #3
  pBuf += x;
   b51b0:	2580      	movs	r5, #128	; 0x80
   b51b2:	fb10 2205 	smlabb	r2, r0, r5, r2
   b51b6:	4845      	ldr	r0, [pc, #276]	; (b52cc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>)
   b51b8:	4402      	add	r2, r0
  register uint8_t mask = 1 << (y&7);
   b51ba:	f001 0007 	and.w	r0, r1, #7
   b51be:	2101      	movs	r1, #1
   b51c0:	4081      	lsls	r1, r0
  if(color == WHITE) { 
   b51c2:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b51c4:	b2c9      	uxtb	r1, r1
  if(color == WHITE) { 
   b51c6:	4413      	add	r3, r2
   b51c8:	d175      	bne.n	b52b6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
    while(w--) { *pBuf++ |= mask; }
   b51ca:	429a      	cmp	r2, r3
   b51cc:	d06d      	beq.n	b52aa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b51ce:	f812 0b01 	ldrb.w	r0, [r2], #1
   b51d2:	4308      	orrs	r0, r1
   b51d4:	f802 0c01 	strb.w	r0, [r2, #-1]
   b51d8:	e7f7      	b.n	b51ca <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x66>
      x = WIDTH - x - 1;
   b51da:	8905      	ldrh	r5, [r0, #8]
   b51dc:	43c9      	mvns	r1, r1
   b51de:	4429      	add	r1, r5
      y -= (h-1);
   b51e0:	18d5      	adds	r5, r2, r3
   b51e2:	8942      	ldrh	r2, [r0, #10]
   b51e4:	1b52      	subs	r2, r2, r5
      x = WIDTH - x - 1;
   b51e6:	b209      	sxth	r1, r1
      y -= (h-1);
   b51e8:	b212      	sxth	r2, r2
  if(x < 0 || x >= WIDTH) { return; }
   b51ea:	2900      	cmp	r1, #0
   b51ec:	db5d      	blt.n	b52aa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b51ee:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b51f2:	428d      	cmp	r5, r1
   b51f4:	dd59      	ble.n	b52aa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(__y < 0) { 
   b51f6:	2a00      	cmp	r2, #0
    __h += __y;
   b51f8:	bfbe      	ittt	lt
   b51fa:	189b      	addlt	r3, r3, r2
   b51fc:	b21b      	sxthlt	r3, r3
    __y = 0;
   b51fe:	2200      	movlt	r2, #0
  if( (__y + __h) > HEIGHT) { 
   b5200:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b5204:	18d5      	adds	r5, r2, r3
   b5206:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b5208:	bfc4      	itt	gt
   b520a:	1a83      	subgt	r3, r0, r2
   b520c:	b21b      	sxthgt	r3, r3
  if(__h <= 0) { 
   b520e:	2b00      	cmp	r3, #0
   b5210:	dd4b      	ble.n	b52aa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += x;
   b5212:	f3c2 00c4 	ubfx	r0, r2, #3, #5
   b5216:	f8df c0b4 	ldr.w	ip, [pc, #180]	; b52cc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>
   b521a:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  if(mod) {
   b521e:	f012 0207 	ands.w	r2, r2, #7
  register uint8_t h = __h;
   b5222:	b2db      	uxtb	r3, r3
  pBuf += x;
   b5224:	eb0c 0001 	add.w	r0, ip, r1
  if(mod) {
   b5228:	d01a      	beq.n	b5260 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfc>
    mod = 8-mod;
   b522a:	f1c2 0508 	rsb	r5, r2, #8
    register uint8_t mask = premask[mod];
   b522e:	4e28      	ldr	r6, [pc, #160]	; (b52d0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    mod = 8-mod;
   b5230:	b2ed      	uxtb	r5, r5
    if( h < mod) { 
   b5232:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b5234:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b5236:	bf3f      	itttt	cc
   b5238:	eba5 0e03 	subcc.w	lr, r5, r3
   b523c:	26ff      	movcc	r6, #255	; 0xff
   b523e:	fa46 f60e 	asrcc.w	r6, r6, lr
   b5242:	4037      	andcc	r7, r6
      *pBuf |= mask;
   b5244:	f81c 6001 	ldrb.w	r6, [ip, r1]
    if(color == WHITE) { 
   b5248:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b524a:	bf0c      	ite	eq
   b524c:	433e      	orreq	r6, r7
      *pBuf &= ~mask;
   b524e:	43be      	bicne	r6, r7
    if(h<mod) { return; }
   b5250:	42ab      	cmp	r3, r5
   b5252:	f80c 6001 	strb.w	r6, [ip, r1]
   b5256:	d328      	bcc.n	b52aa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    h -= mod;
   b5258:	3a08      	subs	r2, #8
   b525a:	4413      	add	r3, r2
   b525c:	b2db      	uxtb	r3, r3
    pBuf += SSD1306_LCDWIDTH;
   b525e:	3080      	adds	r0, #128	; 0x80
  if(h >= 8) { 
   b5260:	2b07      	cmp	r3, #7
   b5262:	d919      	bls.n	b5298 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x134>
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b5264:	2c01      	cmp	r4, #1
   b5266:	f04f 35ff 	mov.w	r5, #4294967295
   b526a:	bf18      	it	ne
   b526c:	2500      	movne	r5, #0
   b526e:	b2ed      	uxtb	r5, r5
   b5270:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b5274:	461a      	mov	r2, r3
      h -= 8;
   b5276:	3a08      	subs	r2, #8
   b5278:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b527a:	2a07      	cmp	r2, #7
      *pBuf = val;
   b527c:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b5280:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b5284:	d8f7      	bhi.n	b5276 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x112>
      pBuf += SSD1306_LCDWIDTH;
   b5286:	f1a3 0208 	sub.w	r2, r3, #8
   b528a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b528e:	3201      	adds	r2, #1
   b5290:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b5294:	f003 0307 	and.w	r3, r3, #7
  if(h) {
   b5298:	b13b      	cbz	r3, b52aa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    register uint8_t mask = postmask[mod];
   b529a:	4a0e      	ldr	r2, [pc, #56]	; (b52d4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)
   b529c:	5cd2      	ldrb	r2, [r2, r3]
      *pBuf |= mask;
   b529e:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b52a0:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b52a2:	bf0c      	ite	eq
   b52a4:	4313      	orreq	r3, r2
      *pBuf &= ~mask;
   b52a6:	4393      	bicne	r3, r2
   b52a8:	7003      	strb	r3, [r0, #0]
}
   b52aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b52ac:	8945      	ldrh	r5, [r0, #10]
   b52ae:	43c9      	mvns	r1, r1
   b52b0:	4429      	add	r1, r5
   b52b2:	b209      	sxth	r1, r1
      break;
   b52b4:	e765      	b.n	b5182 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
    mask = ~mask;
   b52b6:	43c9      	mvns	r1, r1
   b52b8:	b2c9      	uxtb	r1, r1
    while(w--) { *pBuf++ &= mask; }
   b52ba:	429a      	cmp	r2, r3
   b52bc:	d0f5      	beq.n	b52aa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b52be:	f812 0b01 	ldrb.w	r0, [r2], #1
   b52c2:	4008      	ands	r0, r1
   b52c4:	f802 0c01 	strb.w	r0, [r2, #-1]
   b52c8:	e7f7      	b.n	b52ba <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   b52ca:	bf00      	nop
   b52cc:	2003e0ed 	.word	0x2003e0ed
   b52d0:	2003e0e5 	.word	0x2003e0e5
   b52d4:	2003e0dd 	.word	0x2003e0dd

000b52d8 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   b52d8:	4770      	bx	lr
	...

000b52dc <_ZN16Adafruit_SSD13069drawPixelEsst>:
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b52dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b52de:	1e0d      	subs	r5, r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b52e0:	4606      	mov	r6, r0
   b52e2:	4614      	mov	r4, r2
   b52e4:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b52e6:	db2d      	blt.n	b5344 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b52e8:	f000 fbb3 	bl	b5a52 <_ZN12Adafruit_GFX5widthEv>
   b52ec:	42a8      	cmp	r0, r5
   b52ee:	dd29      	ble.n	b5344 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b52f0:	2c00      	cmp	r4, #0
   b52f2:	db27      	blt.n	b5344 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b52f4:	4630      	mov	r0, r6
   b52f6:	f000 fbaf 	bl	b5a58 <_ZN12Adafruit_GFX6heightEv>
   b52fa:	42a0      	cmp	r0, r4
   b52fc:	dd22      	ble.n	b5344 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
  switch (getRotation()) {
   b52fe:	4630      	mov	r0, r6
   b5300:	f000 fba5 	bl	b5a4e <_ZN12Adafruit_GFX11getRotationEv>
   b5304:	2802      	cmp	r0, #2
   b5306:	d01e      	beq.n	b5346 <_ZN16Adafruit_SSD13069drawPixelEsst+0x6a>
   b5308:	2803      	cmp	r0, #3
   b530a:	d025      	beq.n	b5358 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
   b530c:	2801      	cmp	r0, #1
   b530e:	d104      	bne.n	b531a <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
   b5310:	8933      	ldrh	r3, [r6, #8]
   b5312:	43e2      	mvns	r2, r4
   b5314:	441a      	add	r2, r3
    break;
   b5316:	462c      	mov	r4, r5
    x = WIDTH - x - 1;
   b5318:	b215      	sxth	r5, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b531a:	2c00      	cmp	r4, #0
   b531c:	4622      	mov	r2, r4
   b531e:	bfb8      	it	lt
   b5320:	1de2      	addlt	r2, r4, #7
   b5322:	10d2      	asrs	r2, r2, #3
   b5324:	2180      	movs	r1, #128	; 0x80
   b5326:	fb12 5501 	smlabb	r5, r2, r1, r5
   b532a:	490e      	ldr	r1, [pc, #56]	; (b5364 <_ZN16Adafruit_SSD13069drawPixelEsst+0x88>)
   b532c:	2201      	movs	r2, #1
   b532e:	f004 0407 	and.w	r4, r4, #7
   b5332:	574b      	ldrsb	r3, [r1, r5]
   b5334:	fa02 f404 	lsl.w	r4, r2, r4
   b5338:	b264      	sxtb	r4, r4
  if (color == WHITE) 
   b533a:	4297      	cmp	r7, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b533c:	bf0c      	ite	eq
   b533e:	4323      	orreq	r3, r4
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   b5340:	43a3      	bicne	r3, r4
   b5342:	554b      	strb	r3, [r1, r5]
}
   b5344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x = WIDTH - x - 1;
   b5346:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   b5348:	8972      	ldrh	r2, [r6, #10]
    x = WIDTH - x - 1;
   b534a:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   b534c:	43e4      	mvns	r4, r4
    x = WIDTH - x - 1;
   b534e:	1b4d      	subs	r5, r1, r5
    y = HEIGHT - y - 1;
   b5350:	4414      	add	r4, r2
    x = WIDTH - x - 1;
   b5352:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
   b5354:	b224      	sxth	r4, r4
    break;
   b5356:	e7e0      	b.n	b531a <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    y = HEIGHT - y - 1;
   b5358:	8973      	ldrh	r3, [r6, #10]
   b535a:	3b01      	subs	r3, #1
   b535c:	1b5b      	subs	r3, r3, r5
    break;
   b535e:	4625      	mov	r5, r4
    y = HEIGHT - y - 1;
   b5360:	b21c      	sxth	r4, r3
    break;
   b5362:	e7da      	b.n	b531a <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
   b5364:	2003e0ed 	.word	0x2003e0ed

000b5368 <_ZN16Adafruit_SSD1306D0Ev>:
   b5368:	b510      	push	{r4, lr}
   b536a:	2124      	movs	r1, #36	; 0x24
   b536c:	4604      	mov	r4, r0
   b536e:	f7fe fe96 	bl	b409e <_ZdlPvj>
   b5372:	4620      	mov	r0, r4
   b5374:	bd10      	pop	{r4, pc}
	...

000b5378 <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b5378:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b537a:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b537c:	4604      	mov	r4, r0
   b537e:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b5380:	2180      	movs	r1, #128	; 0x80
   b5382:	f000 fa8b 	bl	b589c <_ZN12Adafruit_GFXC1Ess>
   b5386:	4b06      	ldr	r3, [pc, #24]	; (b53a0 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   b5388:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   b538a:	23ff      	movs	r3, #255	; 0xff
   b538c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   b5390:	7763      	strb	r3, [r4, #29]
   b5392:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b5396:	83e3      	strh	r3, [r4, #30]
  rst = reset;
   b5398:	f884 5020 	strb.w	r5, [r4, #32]
}
   b539c:	4620      	mov	r0, r4
   b539e:	bd38      	pop	{r3, r4, r5, pc}
   b53a0:	000b8780 	.word	0x000b8780

000b53a4 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   b53a4:	4802      	ldr	r0, [pc, #8]	; (b53b0 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   b53a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b53aa:	2100      	movs	r1, #0
   b53ac:	f002 bffc 	b.w	b83a8 <memset>
   b53b0:	2003e0ed 	.word	0x2003e0ed

000b53b4 <_ZN16Adafruit_SSD130612fastSPIwriteEh>:
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
   b53b4:	b507      	push	{r0, r1, r2, lr}
  if(hwSPI) {
   b53b6:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   b53ba:	b143      	cbz	r3, b53ce <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x1a>
   b53bc:	9101      	str	r1, [sp, #4]
        return instance().transfer(data);
   b53be:	f7ff fa9b 	bl	b48f8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b53c2:	9901      	ldr	r1, [sp, #4]
}
   b53c4:	b003      	add	sp, #12
   b53c6:	f85d eb04 	ldr.w	lr, [sp], #4
   b53ca:	f000 bf7f 	b.w	b62cc <_ZN8SPIClass8transferEh>
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b53ce:	460b      	mov	r3, r1
   b53d0:	7f81      	ldrb	r1, [r0, #30]
   b53d2:	7f40      	ldrb	r0, [r0, #29]
   b53d4:	2201      	movs	r2, #1
}
   b53d6:	b003      	add	sp, #12
   b53d8:	f85d eb04 	ldr.w	lr, [sp], #4
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b53dc:	f002 b975 	b.w	b76ca <shiftOut>

000b53e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b53e0:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   b53e2:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b53e6:	3301      	adds	r3, #1
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b53e8:	4604      	mov	r4, r0
   b53ea:	460d      	mov	r5, r1
  if (sid != -1)
   b53ec:	d01d      	beq.n	b542a <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x4a>
    digitalWrite(cs, HIGH);
   b53ee:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   b53f2:	2101      	movs	r1, #1
   b53f4:	b280      	uxth	r0, r0
   b53f6:	f002 f93c 	bl	b7672 <digitalWrite>
    digitalWrite(dc, LOW);
   b53fa:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b53fe:	2100      	movs	r1, #0
   b5400:	b280      	uxth	r0, r0
   b5402:	f002 f936 	bl	b7672 <digitalWrite>
    digitalWrite(cs, LOW);
   b5406:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b540a:	2100      	movs	r1, #0
   b540c:	b280      	uxth	r0, r0
   b540e:	f002 f930 	bl	b7672 <digitalWrite>
    fastSPIwrite(c);
   b5412:	4629      	mov	r1, r5
   b5414:	4620      	mov	r0, r4
   b5416:	f7ff ffcd 	bl	b53b4 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    digitalWrite(cs, HIGH);
   b541a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b541e:	2101      	movs	r1, #1
}
   b5420:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(cs, HIGH);
   b5424:	b280      	uxth	r0, r0
   b5426:	f002 b924 	b.w	b7672 <digitalWrite>
    Wire.beginTransmission(_i2caddr);
   b542a:	f002 f9cb 	bl	b77c4 <_Z19__fetch_global_Wirev>
   b542e:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b5432:	f001 fd09 	bl	b6e48 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   b5436:	f002 f9c5 	bl	b77c4 <_Z19__fetch_global_Wirev>
   b543a:	6803      	ldr	r3, [r0, #0]
   b543c:	2100      	movs	r1, #0
   b543e:	689b      	ldr	r3, [r3, #8]
   b5440:	4798      	blx	r3
    Wire.write(c);
   b5442:	f002 f9bf 	bl	b77c4 <_Z19__fetch_global_Wirev>
   b5446:	6803      	ldr	r3, [r0, #0]
   b5448:	4629      	mov	r1, r5
   b544a:	689b      	ldr	r3, [r3, #8]
   b544c:	4798      	blx	r3
    Wire.endTransmission();
   b544e:	f002 f9b9 	bl	b77c4 <_Z19__fetch_global_Wirev>
}
   b5452:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();
   b5456:	f001 bcfe 	b.w	b6e56 <_ZN7TwoWire15endTransmissionEv>
	...

000b545c <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b545c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   b545e:	2121      	movs	r1, #33	; 0x21
void Adafruit_SSD1306::display(void) {
   b5460:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   b5462:	f7ff ffbd 	bl	b53e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   b5466:	2100      	movs	r1, #0
   b5468:	4620      	mov	r0, r4
   b546a:	f7ff ffb9 	bl	b53e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   b546e:	217f      	movs	r1, #127	; 0x7f
   b5470:	4620      	mov	r0, r4
   b5472:	f7ff ffb5 	bl	b53e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_PAGEADDR);
   b5476:	2122      	movs	r1, #34	; 0x22
   b5478:	4620      	mov	r0, r4
   b547a:	f7ff ffb1 	bl	b53e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   b547e:	2100      	movs	r1, #0
   b5480:	4620      	mov	r0, r4
   b5482:	f7ff ffad 	bl	b53e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   b5486:	2107      	movs	r1, #7
   b5488:	4620      	mov	r0, r4
   b548a:	f7ff ffa9 	bl	b53e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (sid != -1)
   b548e:	f994 301d 	ldrsb.w	r3, [r4, #29]
   b5492:	4f29      	ldr	r7, [pc, #164]	; (b5538 <_ZN16Adafruit_SSD13067displayEv+0xdc>)
   b5494:	3301      	adds	r3, #1
   b5496:	d02a      	beq.n	b54ee <_ZN16Adafruit_SSD13067displayEv+0x92>
    digitalWrite(cs, HIGH);
   b5498:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b549c:	2101      	movs	r1, #1
   b549e:	b280      	uxth	r0, r0
   b54a0:	f002 f8e7 	bl	b7672 <digitalWrite>
    digitalWrite(dc, HIGH);
   b54a4:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b54a8:	2101      	movs	r1, #1
   b54aa:	b280      	uxth	r0, r0
   b54ac:	f002 f8e1 	bl	b7672 <digitalWrite>
    digitalWrite(cs, LOW);
   b54b0:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b54b4:	2100      	movs	r1, #0
   b54b6:	b280      	uxth	r0, r0
   b54b8:	f002 f8db 	bl	b7672 <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b54bc:	2001      	movs	r0, #1
   b54be:	f000 fb17 	bl	b5af0 <HAL_Delay_Microseconds>
   b54c2:	f44f 6580 	mov.w	r5, #1024	; 0x400
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b54c6:	3d01      	subs	r5, #1
      fastSPIwrite(buffer[i]);
   b54c8:	f817 1b01 	ldrb.w	r1, [r7], #1
   b54cc:	4620      	mov	r0, r4
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b54ce:	b2ad      	uxth	r5, r5
      fastSPIwrite(buffer[i]);
   b54d0:	f7ff ff70 	bl	b53b4 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b54d4:	2d00      	cmp	r5, #0
   b54d6:	d1f6      	bne.n	b54c6 <_ZN16Adafruit_SSD13067displayEv+0x6a>
   b54d8:	2001      	movs	r0, #1
   b54da:	f000 fb09 	bl	b5af0 <HAL_Delay_Microseconds>
    digitalWrite(cs, HIGH);
   b54de:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b54e2:	2101      	movs	r1, #1
}
   b54e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    digitalWrite(cs, HIGH);
   b54e8:	b280      	uxth	r0, r0
   b54ea:	f002 b8c2 	b.w	b7672 <digitalWrite>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b54ee:	2500      	movs	r5, #0
      Wire.beginTransmission(_i2caddr);
   b54f0:	f002 f968 	bl	b77c4 <_Z19__fetch_global_Wirev>
   b54f4:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b54f8:	f001 fca6 	bl	b6e48 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   b54fc:	f002 f962 	bl	b77c4 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b5500:	6803      	ldr	r3, [r0, #0]
   b5502:	2140      	movs	r1, #64	; 0x40
   b5504:	689b      	ldr	r3, [r3, #8]
   b5506:	4798      	blx	r3
      for (uint8_t x=0; x<16; x++) {
   b5508:	f105 0610 	add.w	r6, r5, #16
   b550c:	b2b6      	uxth	r6, r6
		Wire.write(buffer[i]);
   b550e:	f002 f959 	bl	b77c4 <_Z19__fetch_global_Wirev>
   b5512:	6803      	ldr	r3, [r0, #0]
   b5514:	5d79      	ldrb	r1, [r7, r5]
   b5516:	689b      	ldr	r3, [r3, #8]
   b5518:	4798      	blx	r3
		i++;
   b551a:	1c6b      	adds	r3, r5, #1
   b551c:	b29d      	uxth	r5, r3
      for (uint8_t x=0; x<16; x++) {
   b551e:	42ae      	cmp	r6, r5
   b5520:	d1f5      	bne.n	b550e <_ZN16Adafruit_SSD13067displayEv+0xb2>
	Wire.endTransmission();
   b5522:	f002 f94f 	bl	b77c4 <_Z19__fetch_global_Wirev>
   b5526:	f001 fc96 	bl	b6e56 <_ZN7TwoWire15endTransmissionEv>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b552a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b552e:	d100      	bne.n	b5532 <_ZN16Adafruit_SSD13067displayEv+0xd6>
}
   b5530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b5532:	4635      	mov	r5, r6
   b5534:	e7dc      	b.n	b54f0 <_ZN16Adafruit_SSD13067displayEv+0x94>
   b5536:	bf00      	nop
   b5538:	2003e0ed 	.word	0x2003e0ed

000b553c <_ZN16Adafruit_SSD13065beginEhh>:
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b553c:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1){
   b553e:	f990 301d 	ldrsb.w	r3, [r0, #29]
  _vccstate = vccstate;
   b5542:	7701      	strb	r1, [r0, #28]
  if (sid != -1){
   b5544:	3301      	adds	r3, #1
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b5546:	4604      	mov	r4, r0
   b5548:	460d      	mov	r5, r1
  _i2caddr = i2caddr;
   b554a:	76c2      	strb	r2, [r0, #27]
  if (sid != -1){
   b554c:	f000 80c9 	beq.w	b56e2 <_ZN16Adafruit_SSD13065beginEhh+0x1a6>
    pinMode(dc, OUTPUT);
   b5550:	f990 001f 	ldrsb.w	r0, [r0, #31]
   b5554:	2101      	movs	r1, #1
   b5556:	b280      	uxth	r0, r0
   b5558:	f002 f87a 	bl	b7650 <pinMode>
    pinMode(cs, OUTPUT);
   b555c:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5560:	2101      	movs	r1, #1
   b5562:	b280      	uxth	r0, r0
   b5564:	f002 f874 	bl	b7650 <pinMode>
    if (!hwSPI){
   b5568:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b556c:	2b00      	cmp	r3, #0
   b556e:	f000 80a6 	beq.w	b56be <_ZN16Adafruit_SSD13065beginEhh+0x182>
        digitalWrite(cs, HIGH);
   b5572:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5576:	2101      	movs	r1, #1
   b5578:	b280      	uxth	r0, r0
   b557a:	f002 f87a 	bl	b7672 <digitalWrite>
        instance().setBitOrder(order);
   b557e:	f7ff f9bb 	bl	b48f8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5582:	2101      	movs	r1, #1
   b5584:	f000 fd9a 	bl	b60bc <_ZN8SPIClass11setBitOrderEh>
        instance().setClockDivider(divider);
   b5588:	f7ff f9b6 	bl	b48f8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b558c:	2110      	movs	r1, #16
   b558e:	f000 fe77 	bl	b6280 <_ZN8SPIClass15setClockDividerEh>
        instance().setDataMode(mode);
   b5592:	f7ff f9b1 	bl	b48f8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5596:	2100      	movs	r1, #0
   b5598:	f000 fda4 	bl	b60e4 <_ZN8SPIClass11setDataModeEh>
        instance().begin();
   b559c:	f7ff f9ac 	bl	b48f8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b55a0:	f000 fd78 	bl	b6094 <_ZN8SPIClass5beginEv>
  pinMode(rst, OUTPUT);
   b55a4:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b55a8:	2101      	movs	r1, #1
   b55aa:	b280      	uxth	r0, r0
   b55ac:	f002 f850 	bl	b7650 <pinMode>
  digitalWrite(rst, HIGH);
   b55b0:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b55b4:	2101      	movs	r1, #1
   b55b6:	b280      	uxth	r0, r0
   b55b8:	f002 f85b 	bl	b7672 <digitalWrite>
  delay(1);
   b55bc:	2001      	movs	r0, #1
   b55be:	f001 f9ba 	bl	b6936 <delay>
  digitalWrite(rst, LOW);
   b55c2:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b55c6:	2100      	movs	r1, #0
   b55c8:	b280      	uxth	r0, r0
   b55ca:	f002 f852 	bl	b7672 <digitalWrite>
  delay(10);
   b55ce:	200a      	movs	r0, #10
   b55d0:	f001 f9b1 	bl	b6936 <delay>
  digitalWrite(rst, HIGH);
   b55d4:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b55d8:	2101      	movs	r1, #1
   b55da:	b280      	uxth	r0, r0
   b55dc:	f002 f849 	bl	b7672 <digitalWrite>
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   b55e0:	4620      	mov	r0, r4
   b55e2:	21ae      	movs	r1, #174	; 0xae
   b55e4:	f7ff fefc 	bl	b53e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   b55e8:	4620      	mov	r0, r4
   b55ea:	21d5      	movs	r1, #213	; 0xd5
   b55ec:	f7ff fef8 	bl	b53e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   b55f0:	4620      	mov	r0, r4
   b55f2:	2180      	movs	r1, #128	; 0x80
   b55f4:	f7ff fef4 	bl	b53e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   b55f8:	4620      	mov	r0, r4
   b55fa:	21a8      	movs	r1, #168	; 0xa8
   b55fc:	f7ff fef0 	bl	b53e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   b5600:	4620      	mov	r0, r4
   b5602:	213f      	movs	r1, #63	; 0x3f
   b5604:	f7ff feec 	bl	b53e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   b5608:	4620      	mov	r0, r4
   b560a:	21d3      	movs	r1, #211	; 0xd3
   b560c:	f7ff fee8 	bl	b53e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   b5610:	4620      	mov	r0, r4
   b5612:	2100      	movs	r1, #0
   b5614:	f7ff fee4 	bl	b53e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   b5618:	4620      	mov	r0, r4
   b561a:	2140      	movs	r1, #64	; 0x40
   b561c:	f7ff fee0 	bl	b53e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   b5620:	218d      	movs	r1, #141	; 0x8d
   b5622:	4620      	mov	r0, r4
   b5624:	f7ff fedc 	bl	b53e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b5628:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   b562a:	bf0c      	ite	eq
   b562c:	2110      	moveq	r1, #16
      { ssd1306_command(0x14); }
   b562e:	2114      	movne	r1, #20
   b5630:	4620      	mov	r0, r4
   b5632:	f7ff fed5 	bl	b53e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   b5636:	4620      	mov	r0, r4
   b5638:	2120      	movs	r1, #32
   b563a:	f7ff fed1 	bl	b53e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   b563e:	4620      	mov	r0, r4
   b5640:	2100      	movs	r1, #0
   b5642:	f7ff fecd 	bl	b53e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   b5646:	4620      	mov	r0, r4
   b5648:	21a1      	movs	r1, #161	; 0xa1
   b564a:	f7ff fec9 	bl	b53e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   b564e:	4620      	mov	r0, r4
   b5650:	21c8      	movs	r1, #200	; 0xc8
   b5652:	f7ff fec5 	bl	b53e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   b5656:	4620      	mov	r0, r4
   b5658:	21da      	movs	r1, #218	; 0xda
   b565a:	f7ff fec1 	bl	b53e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   b565e:	4620      	mov	r0, r4
   b5660:	2112      	movs	r1, #18
   b5662:	f7ff febd 	bl	b53e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   b5666:	2181      	movs	r1, #129	; 0x81
   b5668:	4620      	mov	r0, r4
   b566a:	f7ff feb9 	bl	b53e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b566e:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   b5670:	bf0c      	ite	eq
   b5672:	219f      	moveq	r1, #159	; 0x9f
      { ssd1306_command(0xCF); }
   b5674:	21cf      	movne	r1, #207	; 0xcf
   b5676:	4620      	mov	r0, r4
   b5678:	f7ff feb2 	bl	b53e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   b567c:	21d9      	movs	r1, #217	; 0xd9
   b567e:	4620      	mov	r0, r4
   b5680:	f7ff feae 	bl	b53e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b5684:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   b5686:	bf0c      	ite	eq
   b5688:	2122      	moveq	r1, #34	; 0x22
      { ssd1306_command(0xF1); }
   b568a:	21f1      	movne	r1, #241	; 0xf1
   b568c:	4620      	mov	r0, r4
   b568e:	f7ff fea7 	bl	b53e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   b5692:	4620      	mov	r0, r4
   b5694:	21db      	movs	r1, #219	; 0xdb
   b5696:	f7ff fea3 	bl	b53e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   b569a:	4620      	mov	r0, r4
   b569c:	2140      	movs	r1, #64	; 0x40
   b569e:	f7ff fe9f 	bl	b53e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   b56a2:	4620      	mov	r0, r4
   b56a4:	21a4      	movs	r1, #164	; 0xa4
   b56a6:	f7ff fe9b 	bl	b53e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   b56aa:	4620      	mov	r0, r4
   b56ac:	21a6      	movs	r1, #166	; 0xa6
   b56ae:	f7ff fe97 	bl	b53e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b56b2:	4620      	mov	r0, r4
   b56b4:	21af      	movs	r1, #175	; 0xaf
}
   b56b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b56ba:	f7ff be91 	b.w	b53e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    	pinMode(sid, OUTPUT);
   b56be:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b56c2:	2101      	movs	r1, #1
   b56c4:	b280      	uxth	r0, r0
   b56c6:	f001 ffc3 	bl	b7650 <pinMode>
    	pinMode(sclk, OUTPUT);
   b56ca:	f994 001e 	ldrsb.w	r0, [r4, #30]
   b56ce:	2101      	movs	r1, #1
   b56d0:	b280      	uxth	r0, r0
   b56d2:	f001 ffbd 	bl	b7650 <pinMode>
    if (hwSPI){
   b56d6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b56da:	2b00      	cmp	r3, #0
   b56dc:	f43f af62 	beq.w	b55a4 <_ZN16Adafruit_SSD13065beginEhh+0x68>
   b56e0:	e747      	b.n	b5572 <_ZN16Adafruit_SSD13065beginEhh+0x36>
    Wire.begin();
   b56e2:	f002 f86f 	bl	b77c4 <_Z19__fetch_global_Wirev>
   b56e6:	f001 fb79 	bl	b6ddc <_ZN7TwoWire5beginEv>
   b56ea:	e75b      	b.n	b55a4 <_ZN16Adafruit_SSD13065beginEhh+0x68>

000b56ec <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   b56ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b56f0:	b085      	sub	sp, #20
   b56f2:	461f      	mov	r7, r3
   b56f4:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b56f8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b56fc:	eba8 0902 	sub.w	r9, r8, r2
   b5700:	eba7 0a01 	sub.w	sl, r7, r1
   b5704:	f1b9 0f00 	cmp.w	r9, #0
   b5708:	bfb8      	it	lt
   b570a:	f1c9 0900 	rsblt	r9, r9, #0
   b570e:	f1ba 0f00 	cmp.w	sl, #0
   b5712:	bfb8      	it	lt
   b5714:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   b5718:	45d1      	cmp	r9, sl
			    uint16_t color) {
   b571a:	4683      	mov	fp, r0
   b571c:	460c      	mov	r4, r1
   b571e:	4615      	mov	r5, r2
  if (steep) {
   b5720:	dd04      	ble.n	b572c <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
   b5722:	463a      	mov	r2, r7
    swap(x0, y0);
   b5724:	462c      	mov	r4, r5
    swap(x1, y1);
   b5726:	4647      	mov	r7, r8
    swap(x0, y0);
   b5728:	460d      	mov	r5, r1
    swap(x1, y1);
   b572a:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   b572c:	42bc      	cmp	r4, r7
   b572e:	dd05      	ble.n	b573c <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
   b5730:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   b5732:	4645      	mov	r5, r8
   b5734:	4690      	mov	r8, r2
  if (x0 > x1) {
   b5736:	4622      	mov	r2, r4
   b5738:	463c      	mov	r4, r7
   b573a:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   b573c:	1b3e      	subs	r6, r7, r4
   b573e:	b2b2      	uxth	r2, r6
   b5740:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   b5742:	eba8 0205 	sub.w	r2, r8, r5
   b5746:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b574a:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
   b574e:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b5752:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   b5756:	4545      	cmp	r5, r8
   b5758:	bfb4      	ite	lt
   b575a:	2201      	movlt	r2, #1
   b575c:	f04f 32ff 	movge.w	r2, #4294967295
  dy = abs(y1 - y0);
   b5760:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
   b5762:	1076      	asrs	r6, r6, #1
    ystep = -1;
   b5764:	9202      	str	r2, [sp, #8]
  }

  for (; x0<=x1; x0++) {
   b5766:	42bc      	cmp	r4, r7
   b5768:	dc1c      	bgt.n	b57a4 <_ZN12Adafruit_GFX8drawLineEsssst+0xb8>
    if (steep) {
      drawPixel(y0, x0, color);
   b576a:	f8db 2000 	ldr.w	r2, [fp]
   b576e:	9303      	str	r3, [sp, #12]
    if (steep) {
   b5770:	45d1      	cmp	r9, sl
      drawPixel(y0, x0, color);
   b5772:	f8d2 8010 	ldr.w	r8, [r2, #16]
   b5776:	bfc7      	ittee	gt
   b5778:	4629      	movgt	r1, r5
   b577a:	4622      	movgt	r2, r4
    } else {
      drawPixel(x0, y0, color);
   b577c:	462a      	movle	r2, r5
   b577e:	4621      	movle	r1, r4
   b5780:	4658      	mov	r0, fp
   b5782:	47c0      	blx	r8
    }
    err -= dy;
   b5784:	9a01      	ldr	r2, [sp, #4]
      drawPixel(x0, y0, color);
   b5786:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   b5788:	1ab6      	subs	r6, r6, r2
   b578a:	b2b1      	uxth	r1, r6
   b578c:	b236      	sxth	r6, r6
    if (err < 0) {
   b578e:	2e00      	cmp	r6, #0
   b5790:	da05      	bge.n	b579e <_ZN12Adafruit_GFX8drawLineEsssst+0xb2>
      y0 += ystep;
   b5792:	9a02      	ldr	r2, [sp, #8]
   b5794:	4415      	add	r5, r2
      err += dx;
   b5796:	9a00      	ldr	r2, [sp, #0]
   b5798:	1856      	adds	r6, r2, r1
      y0 += ystep;
   b579a:	b22d      	sxth	r5, r5
      err += dx;
   b579c:	b236      	sxth	r6, r6
  for (; x0<=x1; x0++) {
   b579e:	3401      	adds	r4, #1
   b57a0:	b224      	sxth	r4, r4
   b57a2:	e7e0      	b.n	b5766 <_ZN12Adafruit_GFX8drawLineEsssst+0x7a>
    }
  }
}
   b57a4:	b005      	add	sp, #20
   b57a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b57aa <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   b57aa:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b57ae:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   b57b2:	6807      	ldr	r7, [r0, #0]
			    uint16_t color) {
   b57b4:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   b57b8:	f8cd 8000 	str.w	r8, [sp]
			    uint16_t color) {
   b57bc:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   b57be:	69ff      	ldr	r7, [r7, #28]
			    uint16_t color) {
   b57c0:	4616      	mov	r6, r2
   b57c2:	468a      	mov	sl, r1
   b57c4:	461d      	mov	r5, r3
  drawFastHLine(x, y, w, color);
   b57c6:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   b57c8:	6823      	ldr	r3, [r4, #0]
   b57ca:	f8cd 8000 	str.w	r8, [sp]
   b57ce:	f109 32ff 	add.w	r2, r9, #4294967295
   b57d2:	4432      	add	r2, r6
   b57d4:	69df      	ldr	r7, [r3, #28]
   b57d6:	4651      	mov	r1, sl
   b57d8:	462b      	mov	r3, r5
   b57da:	4620      	mov	r0, r4
   b57dc:	b212      	sxth	r2, r2
   b57de:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   b57e0:	6823      	ldr	r3, [r4, #0]
   b57e2:	f8cd 8000 	str.w	r8, [sp]
   b57e6:	699f      	ldr	r7, [r3, #24]
   b57e8:	4632      	mov	r2, r6
   b57ea:	464b      	mov	r3, r9
   b57ec:	4651      	mov	r1, sl
   b57ee:	4620      	mov	r0, r4
   b57f0:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   b57f2:	1e6b      	subs	r3, r5, #1
   b57f4:	eb03 010a 	add.w	r1, r3, sl
   b57f8:	6823      	ldr	r3, [r4, #0]
   b57fa:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   b57fe:	699d      	ldr	r5, [r3, #24]
   b5800:	4632      	mov	r2, r6
   b5802:	464b      	mov	r3, r9
   b5804:	b209      	sxth	r1, r1
   b5806:	4620      	mov	r0, r4
   b5808:	46ac      	mov	ip, r5
}
   b580a:	b002      	add	sp, #8
   b580c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawFastVLine(x+w-1, y, h, color);
   b5810:	4760      	bx	ip

000b5812 <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   b5812:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   b5814:	3b01      	subs	r3, #1
   b5816:	4413      	add	r3, r2
   b5818:	6804      	ldr	r4, [r0, #0]
   b581a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b581e:	9501      	str	r5, [sp, #4]
   b5820:	b21b      	sxth	r3, r3
   b5822:	9300      	str	r3, [sp, #0]
   b5824:	6964      	ldr	r4, [r4, #20]
   b5826:	460b      	mov	r3, r1
   b5828:	47a0      	blx	r4
}
   b582a:	b003      	add	sp, #12
   b582c:	bd30      	pop	{r4, r5, pc}

000b582e <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   b582e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   b5830:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b5834:	6804      	ldr	r4, [r0, #0]
   b5836:	e9cd 2500 	strd	r2, r5, [sp]
   b583a:	3b01      	subs	r3, #1
   b583c:	440b      	add	r3, r1
   b583e:	6964      	ldr	r4, [r4, #20]
   b5840:	b21b      	sxth	r3, r3
   b5842:	47a0      	blx	r4
}
   b5844:	b003      	add	sp, #12
   b5846:	bd30      	pop	{r4, r5, pc}

000b5848 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   b5848:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b584c:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b5850:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b5854:	4605      	mov	r5, r0
   b5856:	4692      	mov	sl, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   b5858:	460c      	mov	r4, r1
   b585a:	18ce      	adds	r6, r1, r3
   b585c:	42b4      	cmp	r4, r6
   b585e:	da0b      	bge.n	b5878 <_ZN12Adafruit_GFX8fillRectEsssst+0x30>
    drawFastVLine(i, y, h, color);
   b5860:	682b      	ldr	r3, [r5, #0]
   b5862:	f8cd 8000 	str.w	r8, [sp]
   b5866:	699f      	ldr	r7, [r3, #24]
   b5868:	4621      	mov	r1, r4
   b586a:	464b      	mov	r3, r9
   b586c:	4652      	mov	r2, sl
   b586e:	4628      	mov	r0, r5
   b5870:	3401      	adds	r4, #1
   b5872:	47b8      	blx	r7
  for (int16_t i=x; i<x+w; i++) {
   b5874:	b224      	sxth	r4, r4
   b5876:	e7f1      	b.n	b585c <_ZN12Adafruit_GFX8fillRectEsssst+0x14>
  }
}
   b5878:	b002      	add	sp, #8
   b587a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b587e <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   b587e:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   b5880:	6802      	ldr	r2, [r0, #0]
   b5882:	9101      	str	r1, [sp, #4]
   b5884:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b5888:	9100      	str	r1, [sp, #0]
   b588a:	6a54      	ldr	r4, [r2, #36]	; 0x24
   b588c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5890:	2200      	movs	r2, #0
   b5892:	4611      	mov	r1, r2
   b5894:	47a0      	blx	r4
}
   b5896:	b002      	add	sp, #8
   b5898:	bd10      	pop	{r4, pc}

000b589a <_ZN12Adafruit_GFX13invertDisplayEb>:
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
  // Do nothing, must be subclassed if supported
}
   b589a:	4770      	bx	lr

000b589c <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b589c:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   b589e:	8142      	strh	r2, [r0, #10]
  _height   = HEIGHT;
   b58a0:	81c2      	strh	r2, [r0, #14]
  textcolor = textbgcolor = 0xFFFF;
   b58a2:	f04f 32ff 	mov.w	r2, #4294967295
    Print() : write_error(0) {}
   b58a6:	2400      	movs	r4, #0
  WIDTH(w), HEIGHT(h)
   b58a8:	4d05      	ldr	r5, [pc, #20]	; (b58c0 <_ZN12Adafruit_GFXC1Ess+0x24>)
  textcolor = textbgcolor = 0xFFFF;
   b58aa:	6142      	str	r2, [r0, #20]
  textsize  = 1;
   b58ac:	2201      	movs	r2, #1
   b58ae:	6044      	str	r4, [r0, #4]
  WIDTH(w), HEIGHT(h)
   b58b0:	6005      	str	r5, [r0, #0]
   b58b2:	8101      	strh	r1, [r0, #8]
  _width    = WIDTH;
   b58b4:	8181      	strh	r1, [r0, #12]
  cursor_y  = cursor_x    = 0;
   b58b6:	6104      	str	r4, [r0, #16]
  textsize  = 1;
   b58b8:	8302      	strh	r2, [r0, #24]
  wrap      = true;
   b58ba:	7682      	strb	r2, [r0, #26]
}
   b58bc:	bd30      	pop	{r4, r5, pc}
   b58be:	bf00      	nop
   b58c0:	000b8cb4 	.word	0x000b8cb4

000b58c4 <_ZN12Adafruit_GFX8drawCharEsshtth>:
			    uint16_t color, uint16_t bg, uint8_t size) {
   b58c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b58c8:	ed2d 8b02 	vpush	{d8}
   b58cc:	b08d      	sub	sp, #52	; 0x34
   b58ce:	4607      	mov	r7, r0
   b58d0:	9104      	str	r1, [sp, #16]
   b58d2:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   b58d6:	9105      	str	r1, [sp, #20]
   b58d8:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   b58dc:	9106      	str	r1, [sp, #24]
  if((x >= _width)            || // Clip right
   b58de:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   b58e2:	9804      	ldr	r0, [sp, #16]
			    uint16_t color, uint16_t bg, uint8_t size) {
   b58e4:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
  if((x >= _width)            || // Clip right
   b58e8:	4281      	cmp	r1, r0
   b58ea:	dd52      	ble.n	b5992 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
   b58ec:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
   b58f0:	4291      	cmp	r1, r2
   b58f2:	dd4e      	ble.n	b5992 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((x + 6 * size - 1) < 0) || // Clip left
   b58f4:	2106      	movs	r1, #6
   b58f6:	fb11 0405 	smlabb	r4, r1, r5, r0
     (y >= _height)           || // Clip bottom
   b58fa:	2c00      	cmp	r4, #0
   b58fc:	dd49      	ble.n	b5992 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((y + 8 * size - 1) < 0))   // Clip top
   b58fe:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
     ((x + 6 * size - 1) < 0) || // Clip left
   b5902:	2c00      	cmp	r4, #0
   b5904:	dd45      	ble.n	b5992 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
      line = pgm_read_byte(font+(c*5)+i);
   b5906:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b590a:	930b      	str	r3, [sp, #44]	; 0x2c
   b590c:	b293      	uxth	r3, r2
   b590e:	9307      	str	r3, [sp, #28]
   b5910:	3308      	adds	r3, #8
   b5912:	b29b      	uxth	r3, r3
   b5914:	9108      	str	r1, [sp, #32]
  for (int8_t i=0; i<6; i++ ) {
   b5916:	2400      	movs	r4, #0
   b5918:	9309      	str	r3, [sp, #36]	; 0x24
    if (i == 5) 
   b591a:	2c05      	cmp	r4, #5
      line = pgm_read_byte(font+(c*5)+i);
   b591c:	bf1c      	itt	ne
   b591e:	4b2c      	ldrne	r3, [pc, #176]	; (b59d0 <_ZN12Adafruit_GFX8drawCharEsshtth+0x10c>)
   b5920:	9a0b      	ldrne	r2, [sp, #44]	; 0x2c
   b5922:	9e07      	ldr	r6, [sp, #28]
   b5924:	bf16      	itet	ne
   b5926:	191b      	addne	r3, r3, r4
      line = 0x0;
   b5928:	2300      	moveq	r3, #0
      line = pgm_read_byte(font+(c*5)+i);
   b592a:	5c9b      	ldrbne	r3, [r3, r2]
      line = 0x0;
   b592c:	9303      	str	r3, [sp, #12]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b592e:	9a04      	ldr	r2, [sp, #16]
   b5930:	b2ab      	uxth	r3, r5
   b5932:	930a      	str	r3, [sp, #40]	; 0x28
   b5934:	fb04 f305 	mul.w	r3, r4, r5
   b5938:	fa13 f382 	uxtah	r3, r3, r2
   b593c:	b21b      	sxth	r3, r3
          drawPixel(x+i, y+j, bg);
   b593e:	eb04 0a02 	add.w	sl, r4, r2
          fillRect(x+i*size, y+j*size, size, size, bg);
   b5942:	ee08 3a10 	vmov	s16, r3
   b5946:	46b0      	mov	r8, r6
   b5948:	fa0f f985 	sxth.w	r9, r5
          drawPixel(x+i, y+j, bg);
   b594c:	fa0f fa8a 	sxth.w	sl, sl
      if (line & 0x1) {
   b5950:	9b03      	ldr	r3, [sp, #12]
   b5952:	07db      	lsls	r3, r3, #31
   b5954:	d52f      	bpl.n	b59b6 <_ZN12Adafruit_GFX8drawCharEsshtth+0xf2>
        if (size == 1) // default size
   b5956:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b5958:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b595a:	d11f      	bne.n	b599c <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
          drawPixel(x+i, y+j, color);
   b595c:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b5960:	9b05      	ldr	r3, [sp, #20]
          drawPixel(x+i, y+j, bg);
   b5962:	b232      	sxth	r2, r6
   b5964:	4651      	mov	r1, sl
   b5966:	4638      	mov	r0, r7
   b5968:	47d8      	blx	fp
      line >>= 1;
   b596a:	9b03      	ldr	r3, [sp, #12]
   b596c:	085b      	lsrs	r3, r3, #1
   b596e:	9303      	str	r3, [sp, #12]
    for (int8_t j = 0; j<8; j++) {
   b5970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b5972:	3601      	adds	r6, #1
   b5974:	4498      	add	r8, r3
   b5976:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5978:	b2b6      	uxth	r6, r6
   b597a:	42b3      	cmp	r3, r6
   b597c:	fa1f f888 	uxth.w	r8, r8
   b5980:	d1e6      	bne.n	b5950 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
  for (int8_t i=0; i<6; i++ ) {
   b5982:	9b08      	ldr	r3, [sp, #32]
   b5984:	3b01      	subs	r3, #1
   b5986:	3401      	adds	r4, #1
   b5988:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b598c:	b264      	sxtb	r4, r4
   b598e:	9308      	str	r3, [sp, #32]
   b5990:	d1c3      	bne.n	b591a <_ZN12Adafruit_GFX8drawCharEsshtth+0x56>
}
   b5992:	b00d      	add	sp, #52	; 0x34
   b5994:	ecbd 8b02 	vpop	{d8}
   b5998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fillRect(x+(i*size), y+(j*size), size, size, color);
   b599c:	9a05      	ldr	r2, [sp, #20]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b599e:	e9cd 9200 	strd	r9, r2, [sp]
   b59a2:	ee18 1a10 	vmov	r1, s16
   b59a6:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   b59aa:	fa0f f288 	sxth.w	r2, r8
   b59ae:	464b      	mov	r3, r9
   b59b0:	4638      	mov	r0, r7
   b59b2:	47d8      	blx	fp
   b59b4:	e7d9      	b.n	b596a <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
      } else if (bg != color) {
   b59b6:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   b59ba:	4293      	cmp	r3, r2
   b59bc:	d0d5      	beq.n	b596a <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
        if (size == 1) // default size
   b59be:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b59c0:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b59c2:	d103      	bne.n	b59cc <_ZN12Adafruit_GFX8drawCharEsshtth+0x108>
          drawPixel(x+i, y+j, bg);
   b59c4:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b59c8:	9b06      	ldr	r3, [sp, #24]
   b59ca:	e7ca      	b.n	b5962 <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
          fillRect(x+i*size, y+j*size, size, size, bg);
   b59cc:	9a06      	ldr	r2, [sp, #24]
   b59ce:	e7e6      	b.n	b599e <_ZN12Adafruit_GFX8drawCharEsshtth+0xda>
   b59d0:	000b87b0 	.word	0x000b87b0

000b59d4 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b59d4:	b530      	push	{r4, r5, lr}
  if (c == '\n') {
   b59d6:	290a      	cmp	r1, #10
size_t Adafruit_GFX::write(uint8_t c) {
   b59d8:	b085      	sub	sp, #20
   b59da:	4604      	mov	r4, r0
  if (c == '\n') {
   b59dc:	d107      	bne.n	b59ee <_ZN12Adafruit_GFX5writeEh+0x1a>
    cursor_y += textsize*8;
   b59de:	7e02      	ldrb	r2, [r0, #24]
      cursor_y += textsize*8;
   b59e0:	8a63      	ldrh	r3, [r4, #18]
   b59e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b59e6:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   b59e8:	2300      	movs	r3, #0
   b59ea:	8223      	strh	r3, [r4, #16]
   b59ec:	e021      	b.n	b5a32 <_ZN12Adafruit_GFX5writeEh+0x5e>
  } else if (c == '\r') {
   b59ee:	290d      	cmp	r1, #13
   b59f0:	d01f      	beq.n	b5a32 <_ZN12Adafruit_GFX5writeEh+0x5e>
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   b59f2:	7e03      	ldrb	r3, [r0, #24]
   b59f4:	9302      	str	r3, [sp, #8]
   b59f6:	8ac3      	ldrh	r3, [r0, #22]
   b59f8:	9301      	str	r3, [sp, #4]
   b59fa:	8a83      	ldrh	r3, [r0, #20]
   b59fc:	9300      	str	r3, [sp, #0]
   b59fe:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   b5a02:	460b      	mov	r3, r1
   b5a04:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   b5a08:	f7ff ff5c 	bl	b58c4 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   b5a0c:	7e20      	ldrb	r0, [r4, #24]
   b5a0e:	8a23      	ldrh	r3, [r4, #16]
   b5a10:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   b5a14:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b5a18:	7ea1      	ldrb	r1, [r4, #26]
    cursor_x += textsize*6;
   b5a1a:	b21b      	sxth	r3, r3
   b5a1c:	4602      	mov	r2, r0
   b5a1e:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b5a20:	b139      	cbz	r1, b5a32 <_ZN12Adafruit_GFX5writeEh+0x5e>
   b5a22:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   b5a26:	f06f 0505 	mvn.w	r5, #5
   b5a2a:	fb05 1100 	mla	r1, r5, r0, r1
   b5a2e:	428b      	cmp	r3, r1
   b5a30:	dcd6      	bgt.n	b59e0 <_ZN12Adafruit_GFX5writeEh+0xc>
}
   b5a32:	2001      	movs	r0, #1
   b5a34:	b005      	add	sp, #20
   b5a36:	bd30      	pop	{r4, r5, pc}

000b5a38 <_ZN12Adafruit_GFX9setCursorEss>:
  cursor_x = x;
   b5a38:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   b5a3a:	8242      	strh	r2, [r0, #18]
}
   b5a3c:	4770      	bx	lr

000b5a3e <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize = (s > 0) ? s : 1;
   b5a3e:	2901      	cmp	r1, #1
   b5a40:	bf38      	it	cc
   b5a42:	2101      	movcc	r1, #1
   b5a44:	7601      	strb	r1, [r0, #24]
}
   b5a46:	4770      	bx	lr

000b5a48 <_ZN12Adafruit_GFX12setTextColorEt>:
  textcolor = textbgcolor = c;
   b5a48:	82c1      	strh	r1, [r0, #22]
   b5a4a:	8281      	strh	r1, [r0, #20]
}
   b5a4c:	4770      	bx	lr

000b5a4e <_ZN12Adafruit_GFX11getRotationEv>:
}
   b5a4e:	7e40      	ldrb	r0, [r0, #25]
   b5a50:	4770      	bx	lr

000b5a52 <_ZN12Adafruit_GFX5widthEv>:
}
   b5a52:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   b5a56:	4770      	bx	lr

000b5a58 <_ZN12Adafruit_GFX6heightEv>:
}
   b5a58:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   b5a5c:	4770      	bx	lr
	...

000b5a60 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5a60:	b508      	push	{r3, lr}
   b5a62:	4b02      	ldr	r3, [pc, #8]	; (b5a6c <netdb_freeaddrinfo+0xc>)
   b5a64:	681b      	ldr	r3, [r3, #0]
   b5a66:	689b      	ldr	r3, [r3, #8]
   b5a68:	9301      	str	r3, [sp, #4]
   b5a6a:	bd08      	pop	{r3, pc}
   b5a6c:	00030268 	.word	0x00030268

000b5a70 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5a70:	b508      	push	{r3, lr}
   b5a72:	4b02      	ldr	r3, [pc, #8]	; (b5a7c <netdb_getaddrinfo+0xc>)
   b5a74:	681b      	ldr	r3, [r3, #0]
   b5a76:	68db      	ldr	r3, [r3, #12]
   b5a78:	9301      	str	r3, [sp, #4]
   b5a7a:	bd08      	pop	{r3, pc}
   b5a7c:	00030268 	.word	0x00030268

000b5a80 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b5a80:	b508      	push	{r3, lr}
   b5a82:	4b02      	ldr	r3, [pc, #8]	; (b5a8c <HAL_Validate_Pin_Function+0xc>)
   b5a84:	681b      	ldr	r3, [r3, #0]
   b5a86:	685b      	ldr	r3, [r3, #4]
   b5a88:	9301      	str	r3, [sp, #4]
   b5a8a:	bd08      	pop	{r3, pc}
   b5a8c:	0003022c 	.word	0x0003022c

000b5a90 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b5a90:	b508      	push	{r3, lr}
   b5a92:	4b02      	ldr	r3, [pc, #8]	; (b5a9c <HAL_Pin_Mode+0xc>)
   b5a94:	681b      	ldr	r3, [r3, #0]
   b5a96:	689b      	ldr	r3, [r3, #8]
   b5a98:	9301      	str	r3, [sp, #4]
   b5a9a:	bd08      	pop	{r3, pc}
   b5a9c:	0003022c 	.word	0x0003022c

000b5aa0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b5aa0:	b508      	push	{r3, lr}
   b5aa2:	4b02      	ldr	r3, [pc, #8]	; (b5aac <HAL_Get_Pin_Mode+0xc>)
   b5aa4:	681b      	ldr	r3, [r3, #0]
   b5aa6:	68db      	ldr	r3, [r3, #12]
   b5aa8:	9301      	str	r3, [sp, #4]
   b5aaa:	bd08      	pop	{r3, pc}
   b5aac:	0003022c 	.word	0x0003022c

000b5ab0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b5ab0:	b508      	push	{r3, lr}
   b5ab2:	4b02      	ldr	r3, [pc, #8]	; (b5abc <HAL_GPIO_Write+0xc>)
   b5ab4:	681b      	ldr	r3, [r3, #0]
   b5ab6:	691b      	ldr	r3, [r3, #16]
   b5ab8:	9301      	str	r3, [sp, #4]
   b5aba:	bd08      	pop	{r3, pc}
   b5abc:	0003022c 	.word	0x0003022c

000b5ac0 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b5ac0:	b508      	push	{r3, lr}
   b5ac2:	4b02      	ldr	r3, [pc, #8]	; (b5acc <HAL_GPIO_Read+0xc>)
   b5ac4:	681b      	ldr	r3, [r3, #0]
   b5ac6:	695b      	ldr	r3, [r3, #20]
   b5ac8:	9301      	str	r3, [sp, #4]
   b5aca:	bd08      	pop	{r3, pc}
   b5acc:	0003022c 	.word	0x0003022c

000b5ad0 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b5ad0:	b508      	push	{r3, lr}
   b5ad2:	4b02      	ldr	r3, [pc, #8]	; (b5adc <if_index_to_name+0xc>)
   b5ad4:	681b      	ldr	r3, [r3, #0]
   b5ad6:	695b      	ldr	r3, [r3, #20]
   b5ad8:	9301      	str	r3, [sp, #4]
   b5ada:	bd08      	pop	{r3, pc}
   b5adc:	0003026c 	.word	0x0003026c

000b5ae0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5ae0:	b508      	push	{r3, lr}
   b5ae2:	4b02      	ldr	r3, [pc, #8]	; (b5aec <HAL_RNG_GetRandomNumber+0xc>)
   b5ae4:	681b      	ldr	r3, [r3, #0]
   b5ae6:	685b      	ldr	r3, [r3, #4]
   b5ae8:	9301      	str	r3, [sp, #4]
   b5aea:	bd08      	pop	{r3, pc}
   b5aec:	00030218 	.word	0x00030218

000b5af0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b5af0:	b508      	push	{r3, lr}
   b5af2:	4b02      	ldr	r3, [pc, #8]	; (b5afc <HAL_Delay_Microseconds+0xc>)
   b5af4:	681b      	ldr	r3, [r3, #0]
   b5af6:	68db      	ldr	r3, [r3, #12]
   b5af8:	9301      	str	r3, [sp, #4]
   b5afa:	bd08      	pop	{r3, pc}
   b5afc:	00030218 	.word	0x00030218

000b5b00 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5b00:	b508      	push	{r3, lr}
   b5b02:	4b02      	ldr	r3, [pc, #8]	; (b5b0c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5b04:	681b      	ldr	r3, [r3, #0]
   b5b06:	695b      	ldr	r3, [r3, #20]
   b5b08:	9301      	str	r3, [sp, #4]
   b5b0a:	bd08      	pop	{r3, pc}
   b5b0c:	00030218 	.word	0x00030218

000b5b10 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5b10:	b508      	push	{r3, lr}
   b5b12:	4b02      	ldr	r3, [pc, #8]	; (b5b1c <os_mutex_recursive_create+0xc>)
   b5b14:	681b      	ldr	r3, [r3, #0]
   b5b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5b18:	9301      	str	r3, [sp, #4]
   b5b1a:	bd08      	pop	{r3, pc}
   b5b1c:	00030248 	.word	0x00030248

000b5b20 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5b20:	b508      	push	{r3, lr}
   b5b22:	4b02      	ldr	r3, [pc, #8]	; (b5b2c <inet_inet_ntop+0xc>)
   b5b24:	681b      	ldr	r3, [r3, #0]
   b5b26:	695b      	ldr	r3, [r3, #20]
   b5b28:	9301      	str	r3, [sp, #4]
   b5b2a:	bd08      	pop	{r3, pc}
   b5b2c:	00030264 	.word	0x00030264

000b5b30 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b5b30:	b508      	push	{r3, lr}
   b5b32:	4b02      	ldr	r3, [pc, #8]	; (b5b3c <inet_htonl+0xc>)
   b5b34:	681b      	ldr	r3, [r3, #0]
   b5b36:	6a1b      	ldr	r3, [r3, #32]
   b5b38:	9301      	str	r3, [sp, #4]
   b5b3a:	bd08      	pop	{r3, pc}
   b5b3c:	00030264 	.word	0x00030264

000b5b40 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b5b40:	b508      	push	{r3, lr}
   b5b42:	4b02      	ldr	r3, [pc, #8]	; (b5b4c <inet_htons+0xc>)
   b5b44:	681b      	ldr	r3, [r3, #0]
   b5b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5b48:	9301      	str	r3, [sp, #4]
   b5b4a:	bd08      	pop	{r3, pc}
   b5b4c:	00030264 	.word	0x00030264

000b5b50 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5b50:	b508      	push	{r3, lr}
   b5b52:	4b02      	ldr	r3, [pc, #8]	; (b5b5c <hal_usart_write+0xc>)
   b5b54:	681b      	ldr	r3, [r3, #0]
   b5b56:	68db      	ldr	r3, [r3, #12]
   b5b58:	9301      	str	r3, [sp, #4]
   b5b5a:	bd08      	pop	{r3, pc}
   b5b5c:	0003023c 	.word	0x0003023c

000b5b60 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5b60:	b508      	push	{r3, lr}
   b5b62:	4b02      	ldr	r3, [pc, #8]	; (b5b6c <hal_usart_available+0xc>)
   b5b64:	681b      	ldr	r3, [r3, #0]
   b5b66:	691b      	ldr	r3, [r3, #16]
   b5b68:	9301      	str	r3, [sp, #4]
   b5b6a:	bd08      	pop	{r3, pc}
   b5b6c:	0003023c 	.word	0x0003023c

000b5b70 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5b70:	b508      	push	{r3, lr}
   b5b72:	4b02      	ldr	r3, [pc, #8]	; (b5b7c <hal_usart_read+0xc>)
   b5b74:	681b      	ldr	r3, [r3, #0]
   b5b76:	695b      	ldr	r3, [r3, #20]
   b5b78:	9301      	str	r3, [sp, #4]
   b5b7a:	bd08      	pop	{r3, pc}
   b5b7c:	0003023c 	.word	0x0003023c

000b5b80 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5b80:	b508      	push	{r3, lr}
   b5b82:	4b02      	ldr	r3, [pc, #8]	; (b5b8c <hal_usart_peek+0xc>)
   b5b84:	681b      	ldr	r3, [r3, #0]
   b5b86:	699b      	ldr	r3, [r3, #24]
   b5b88:	9301      	str	r3, [sp, #4]
   b5b8a:	bd08      	pop	{r3, pc}
   b5b8c:	0003023c 	.word	0x0003023c

000b5b90 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5b90:	b508      	push	{r3, lr}
   b5b92:	4b02      	ldr	r3, [pc, #8]	; (b5b9c <hal_usart_flush+0xc>)
   b5b94:	681b      	ldr	r3, [r3, #0]
   b5b96:	69db      	ldr	r3, [r3, #28]
   b5b98:	9301      	str	r3, [sp, #4]
   b5b9a:	bd08      	pop	{r3, pc}
   b5b9c:	0003023c 	.word	0x0003023c

000b5ba0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5ba0:	b508      	push	{r3, lr}
   b5ba2:	4b02      	ldr	r3, [pc, #8]	; (b5bac <hal_usart_is_enabled+0xc>)
   b5ba4:	681b      	ldr	r3, [r3, #0]
   b5ba6:	6a1b      	ldr	r3, [r3, #32]
   b5ba8:	9301      	str	r3, [sp, #4]
   b5baa:	bd08      	pop	{r3, pc}
   b5bac:	0003023c 	.word	0x0003023c

000b5bb0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5bb0:	b508      	push	{r3, lr}
   b5bb2:	4b02      	ldr	r3, [pc, #8]	; (b5bbc <hal_usart_available_data_for_write+0xc>)
   b5bb4:	681b      	ldr	r3, [r3, #0]
   b5bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5bb8:	9301      	str	r3, [sp, #4]
   b5bba:	bd08      	pop	{r3, pc}
   b5bbc:	0003023c 	.word	0x0003023c

000b5bc0 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5bc0:	b508      	push	{r3, lr}
   b5bc2:	4b02      	ldr	r3, [pc, #8]	; (b5bcc <hal_usart_init_ex+0xc>)
   b5bc4:	681b      	ldr	r3, [r3, #0]
   b5bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5bc8:	9301      	str	r3, [sp, #4]
   b5bca:	bd08      	pop	{r3, pc}
   b5bcc:	0003023c 	.word	0x0003023c

000b5bd0 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b5bd0:	b508      	push	{r3, lr}
   b5bd2:	4b02      	ldr	r3, [pc, #8]	; (b5bdc <hal_i2c_begin+0xc>)
   b5bd4:	681b      	ldr	r3, [r3, #0]
   b5bd6:	68db      	ldr	r3, [r3, #12]
   b5bd8:	9301      	str	r3, [sp, #4]
   b5bda:	bd08      	pop	{r3, pc}
   b5bdc:	00030228 	.word	0x00030228

000b5be0 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b5be0:	b508      	push	{r3, lr}
   b5be2:	4b02      	ldr	r3, [pc, #8]	; (b5bec <hal_i2c_begin_transmission+0xc>)
   b5be4:	681b      	ldr	r3, [r3, #0]
   b5be6:	699b      	ldr	r3, [r3, #24]
   b5be8:	9301      	str	r3, [sp, #4]
   b5bea:	bd08      	pop	{r3, pc}
   b5bec:	00030228 	.word	0x00030228

000b5bf0 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b5bf0:	b508      	push	{r3, lr}
   b5bf2:	4b02      	ldr	r3, [pc, #8]	; (b5bfc <hal_i2c_end_transmission+0xc>)
   b5bf4:	681b      	ldr	r3, [r3, #0]
   b5bf6:	69db      	ldr	r3, [r3, #28]
   b5bf8:	9301      	str	r3, [sp, #4]
   b5bfa:	bd08      	pop	{r3, pc}
   b5bfc:	00030228 	.word	0x00030228

000b5c00 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5c00:	b508      	push	{r3, lr}
   b5c02:	4b02      	ldr	r3, [pc, #8]	; (b5c0c <hal_i2c_write+0xc>)
   b5c04:	681b      	ldr	r3, [r3, #0]
   b5c06:	6a1b      	ldr	r3, [r3, #32]
   b5c08:	9301      	str	r3, [sp, #4]
   b5c0a:	bd08      	pop	{r3, pc}
   b5c0c:	00030228 	.word	0x00030228

000b5c10 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5c10:	b508      	push	{r3, lr}
   b5c12:	4b02      	ldr	r3, [pc, #8]	; (b5c1c <hal_i2c_available+0xc>)
   b5c14:	681b      	ldr	r3, [r3, #0]
   b5c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5c18:	9301      	str	r3, [sp, #4]
   b5c1a:	bd08      	pop	{r3, pc}
   b5c1c:	00030228 	.word	0x00030228

000b5c20 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5c20:	b508      	push	{r3, lr}
   b5c22:	4b02      	ldr	r3, [pc, #8]	; (b5c2c <hal_i2c_read+0xc>)
   b5c24:	681b      	ldr	r3, [r3, #0]
   b5c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5c28:	9301      	str	r3, [sp, #4]
   b5c2a:	bd08      	pop	{r3, pc}
   b5c2c:	00030228 	.word	0x00030228

000b5c30 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5c30:	b508      	push	{r3, lr}
   b5c32:	4b02      	ldr	r3, [pc, #8]	; (b5c3c <hal_i2c_peek+0xc>)
   b5c34:	681b      	ldr	r3, [r3, #0]
   b5c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5c38:	9301      	str	r3, [sp, #4]
   b5c3a:	bd08      	pop	{r3, pc}
   b5c3c:	00030228 	.word	0x00030228

000b5c40 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5c40:	b508      	push	{r3, lr}
   b5c42:	4b02      	ldr	r3, [pc, #8]	; (b5c4c <hal_i2c_flush+0xc>)
   b5c44:	681b      	ldr	r3, [r3, #0]
   b5c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5c48:	9301      	str	r3, [sp, #4]
   b5c4a:	bd08      	pop	{r3, pc}
   b5c4c:	00030228 	.word	0x00030228

000b5c50 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5c50:	b508      	push	{r3, lr}
   b5c52:	4b02      	ldr	r3, [pc, #8]	; (b5c5c <hal_i2c_is_enabled+0xc>)
   b5c54:	681b      	ldr	r3, [r3, #0]
   b5c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5c58:	9301      	str	r3, [sp, #4]
   b5c5a:	bd08      	pop	{r3, pc}
   b5c5c:	00030228 	.word	0x00030228

000b5c60 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5c60:	b508      	push	{r3, lr}
   b5c62:	4b02      	ldr	r3, [pc, #8]	; (b5c6c <hal_i2c_init+0xc>)
   b5c64:	681b      	ldr	r3, [r3, #0]
   b5c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5c68:	9301      	str	r3, [sp, #4]
   b5c6a:	bd08      	pop	{r3, pc}
   b5c6c:	00030228 	.word	0x00030228

000b5c70 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b5c70:	b508      	push	{r3, lr}
   b5c72:	4b02      	ldr	r3, [pc, #8]	; (b5c7c <hal_i2c_request_ex+0xc>)
   b5c74:	681b      	ldr	r3, [r3, #0]
   b5c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5c78:	9301      	str	r3, [sp, #4]
   b5c7a:	bd08      	pop	{r3, pc}
   b5c7c:	00030228 	.word	0x00030228

000b5c80 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b5c80:	b508      	push	{r3, lr}
   b5c82:	4b02      	ldr	r3, [pc, #8]	; (b5c8c <sock_setsockopt+0xc>)
   b5c84:	681b      	ldr	r3, [r3, #0]
   b5c86:	699b      	ldr	r3, [r3, #24]
   b5c88:	9301      	str	r3, [sp, #4]
   b5c8a:	bd08      	pop	{r3, pc}
   b5c8c:	00030238 	.word	0x00030238

000b5c90 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b5c90:	b508      	push	{r3, lr}
   b5c92:	4b02      	ldr	r3, [pc, #8]	; (b5c9c <sock_close+0xc>)
   b5c94:	681b      	ldr	r3, [r3, #0]
   b5c96:	69db      	ldr	r3, [r3, #28]
   b5c98:	9301      	str	r3, [sp, #4]
   b5c9a:	bd08      	pop	{r3, pc}
   b5c9c:	00030238 	.word	0x00030238

000b5ca0 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b5ca0:	b508      	push	{r3, lr}
   b5ca2:	4b02      	ldr	r3, [pc, #8]	; (b5cac <sock_connect+0xc>)
   b5ca4:	681b      	ldr	r3, [r3, #0]
   b5ca6:	6a1b      	ldr	r3, [r3, #32]
   b5ca8:	9301      	str	r3, [sp, #4]
   b5caa:	bd08      	pop	{r3, pc}
   b5cac:	00030238 	.word	0x00030238

000b5cb0 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b5cb0:	b508      	push	{r3, lr}
   b5cb2:	4b02      	ldr	r3, [pc, #8]	; (b5cbc <sock_recv+0xc>)
   b5cb4:	681b      	ldr	r3, [r3, #0]
   b5cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5cb8:	9301      	str	r3, [sp, #4]
   b5cba:	bd08      	pop	{r3, pc}
   b5cbc:	00030238 	.word	0x00030238

000b5cc0 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b5cc0:	b508      	push	{r3, lr}
   b5cc2:	4b02      	ldr	r3, [pc, #8]	; (b5ccc <sock_send+0xc>)
   b5cc4:	681b      	ldr	r3, [r3, #0]
   b5cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5cc8:	9301      	str	r3, [sp, #4]
   b5cca:	bd08      	pop	{r3, pc}
   b5ccc:	00030238 	.word	0x00030238

000b5cd0 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b5cd0:	b508      	push	{r3, lr}
   b5cd2:	4b02      	ldr	r3, [pc, #8]	; (b5cdc <sock_socket+0xc>)
   b5cd4:	681b      	ldr	r3, [r3, #0]
   b5cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b5cd8:	9301      	str	r3, [sp, #4]
   b5cda:	bd08      	pop	{r3, pc}
   b5cdc:	00030238 	.word	0x00030238

000b5ce0 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b5ce0:	b508      	push	{r3, lr}
   b5ce2:	4b02      	ldr	r3, [pc, #8]	; (b5cec <hal_spi_begin+0xc>)
   b5ce4:	681b      	ldr	r3, [r3, #0]
   b5ce6:	681b      	ldr	r3, [r3, #0]
   b5ce8:	9301      	str	r3, [sp, #4]
   b5cea:	bd08      	pop	{r3, pc}
   b5cec:	00030230 	.word	0x00030230

000b5cf0 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   b5cf0:	b508      	push	{r3, lr}
   b5cf2:	4b02      	ldr	r3, [pc, #8]	; (b5cfc <hal_spi_set_bit_order+0xc>)
   b5cf4:	681b      	ldr	r3, [r3, #0]
   b5cf6:	689b      	ldr	r3, [r3, #8]
   b5cf8:	9301      	str	r3, [sp, #4]
   b5cfa:	bd08      	pop	{r3, pc}
   b5cfc:	00030230 	.word	0x00030230

000b5d00 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   b5d00:	b508      	push	{r3, lr}
   b5d02:	4b02      	ldr	r3, [pc, #8]	; (b5d0c <hal_spi_set_data_mode+0xc>)
   b5d04:	681b      	ldr	r3, [r3, #0]
   b5d06:	68db      	ldr	r3, [r3, #12]
   b5d08:	9301      	str	r3, [sp, #4]
   b5d0a:	bd08      	pop	{r3, pc}
   b5d0c:	00030230 	.word	0x00030230

000b5d10 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   b5d10:	b508      	push	{r3, lr}
   b5d12:	4b02      	ldr	r3, [pc, #8]	; (b5d1c <hal_spi_set_clock_divider+0xc>)
   b5d14:	681b      	ldr	r3, [r3, #0]
   b5d16:	691b      	ldr	r3, [r3, #16]
   b5d18:	9301      	str	r3, [sp, #4]
   b5d1a:	bd08      	pop	{r3, pc}
   b5d1c:	00030230 	.word	0x00030230

000b5d20 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b5d20:	b508      	push	{r3, lr}
   b5d22:	4b02      	ldr	r3, [pc, #8]	; (b5d2c <hal_spi_transfer+0xc>)
   b5d24:	681b      	ldr	r3, [r3, #0]
   b5d26:	695b      	ldr	r3, [r3, #20]
   b5d28:	9301      	str	r3, [sp, #4]
   b5d2a:	bd08      	pop	{r3, pc}
   b5d2c:	00030230 	.word	0x00030230

000b5d30 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5d30:	b508      	push	{r3, lr}
   b5d32:	4b02      	ldr	r3, [pc, #8]	; (b5d3c <hal_spi_init+0xc>)
   b5d34:	681b      	ldr	r3, [r3, #0]
   b5d36:	69db      	ldr	r3, [r3, #28]
   b5d38:	9301      	str	r3, [sp, #4]
   b5d3a:	bd08      	pop	{r3, pc}
   b5d3c:	00030230 	.word	0x00030230

000b5d40 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5d40:	b508      	push	{r3, lr}
   b5d42:	4b02      	ldr	r3, [pc, #8]	; (b5d4c <hal_spi_is_enabled+0xc>)
   b5d44:	681b      	ldr	r3, [r3, #0]
   b5d46:	6a1b      	ldr	r3, [r3, #32]
   b5d48:	9301      	str	r3, [sp, #4]
   b5d4a:	bd08      	pop	{r3, pc}
   b5d4c:	00030230 	.word	0x00030230

000b5d50 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b5d50:	b508      	push	{r3, lr}
   b5d52:	4b02      	ldr	r3, [pc, #8]	; (b5d5c <hal_spi_info+0xc>)
   b5d54:	681b      	ldr	r3, [r3, #0]
   b5d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5d58:	9301      	str	r3, [sp, #4]
   b5d5a:	bd08      	pop	{r3, pc}
   b5d5c:	00030230 	.word	0x00030230

000b5d60 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b5d60:	b508      	push	{r3, lr}
   b5d62:	4b02      	ldr	r3, [pc, #8]	; (b5d6c <hal_spi_set_settings+0xc>)
   b5d64:	681b      	ldr	r3, [r3, #0]
   b5d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5d68:	9301      	str	r3, [sp, #4]
   b5d6a:	bd08      	pop	{r3, pc}
   b5d6c:	00030230 	.word	0x00030230

000b5d70 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b5d70:	b508      	push	{r3, lr}
   b5d72:	4b02      	ldr	r3, [pc, #8]	; (b5d7c <hal_spi_acquire+0xc>)
   b5d74:	681b      	ldr	r3, [r3, #0]
   b5d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5d78:	9301      	str	r3, [sp, #4]
   b5d7a:	bd08      	pop	{r3, pc}
   b5d7c:	00030230 	.word	0x00030230

000b5d80 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b5d80:	b508      	push	{r3, lr}
   b5d82:	4b02      	ldr	r3, [pc, #8]	; (b5d8c <hal_spi_release+0xc>)
   b5d84:	681b      	ldr	r3, [r3, #0]
   b5d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5d88:	9301      	str	r3, [sp, #4]
   b5d8a:	bd08      	pop	{r3, pc}
   b5d8c:	00030230 	.word	0x00030230

000b5d90 <HAL_Servo_Attach>:
DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
DYNALIB_FN(2, hal_peripherals, HAL_Tone_Get_Frequency, uint32_t(uint8_t))
DYNALIB_FN(3, hal_peripherals, HAL_Tone_Is_Stopped, bool(uint8_t))

DYNALIB_FN(4, hal_peripherals, HAL_Servo_Attach, void(uint16_t))
   b5d90:	b508      	push	{r3, lr}
   b5d92:	4b02      	ldr	r3, [pc, #8]	; (b5d9c <HAL_Servo_Attach+0xc>)
   b5d94:	681b      	ldr	r3, [r3, #0]
   b5d96:	691b      	ldr	r3, [r3, #16]
   b5d98:	9301      	str	r3, [sp, #4]
   b5d9a:	bd08      	pop	{r3, pc}
   b5d9c:	00030224 	.word	0x00030224

000b5da0 <HAL_Servo_Detach>:
DYNALIB_FN(5, hal_peripherals, HAL_Servo_Detach, void(uint16_t))
   b5da0:	b508      	push	{r3, lr}
   b5da2:	4b02      	ldr	r3, [pc, #8]	; (b5dac <HAL_Servo_Detach+0xc>)
   b5da4:	681b      	ldr	r3, [r3, #0]
   b5da6:	695b      	ldr	r3, [r3, #20]
   b5da8:	9301      	str	r3, [sp, #4]
   b5daa:	bd08      	pop	{r3, pc}
   b5dac:	00030224 	.word	0x00030224

000b5db0 <HAL_Servo_Write_Pulse_Width>:
DYNALIB_FN(6, hal_peripherals, HAL_Servo_Write_Pulse_Width, void(uint16_t, uint16_t))
   b5db0:	b508      	push	{r3, lr}
   b5db2:	4b02      	ldr	r3, [pc, #8]	; (b5dbc <HAL_Servo_Write_Pulse_Width+0xc>)
   b5db4:	681b      	ldr	r3, [r3, #0]
   b5db6:	699b      	ldr	r3, [r3, #24]
   b5db8:	9301      	str	r3, [sp, #4]
   b5dba:	bd08      	pop	{r3, pc}
   b5dbc:	00030224 	.word	0x00030224

000b5dc0 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5dc0:	b508      	push	{r3, lr}
   b5dc2:	4b02      	ldr	r3, [pc, #8]	; (b5dcc <HAL_USB_USART_Init+0xc>)
   b5dc4:	681b      	ldr	r3, [r3, #0]
   b5dc6:	681b      	ldr	r3, [r3, #0]
   b5dc8:	9301      	str	r3, [sp, #4]
   b5dca:	bd08      	pop	{r3, pc}
   b5dcc:	0003024c 	.word	0x0003024c

000b5dd0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b5dd0:	b508      	push	{r3, lr}
   b5dd2:	4b02      	ldr	r3, [pc, #8]	; (b5ddc <HAL_USB_USART_Begin+0xc>)
   b5dd4:	681b      	ldr	r3, [r3, #0]
   b5dd6:	685b      	ldr	r3, [r3, #4]
   b5dd8:	9301      	str	r3, [sp, #4]
   b5dda:	bd08      	pop	{r3, pc}
   b5ddc:	0003024c 	.word	0x0003024c

000b5de0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5de0:	b508      	push	{r3, lr}
   b5de2:	4b02      	ldr	r3, [pc, #8]	; (b5dec <HAL_USB_USART_Available_Data+0xc>)
   b5de4:	681b      	ldr	r3, [r3, #0]
   b5de6:	691b      	ldr	r3, [r3, #16]
   b5de8:	9301      	str	r3, [sp, #4]
   b5dea:	bd08      	pop	{r3, pc}
   b5dec:	0003024c 	.word	0x0003024c

000b5df0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5df0:	b508      	push	{r3, lr}
   b5df2:	4b02      	ldr	r3, [pc, #8]	; (b5dfc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5df4:	681b      	ldr	r3, [r3, #0]
   b5df6:	695b      	ldr	r3, [r3, #20]
   b5df8:	9301      	str	r3, [sp, #4]
   b5dfa:	bd08      	pop	{r3, pc}
   b5dfc:	0003024c 	.word	0x0003024c

000b5e00 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5e00:	b508      	push	{r3, lr}
   b5e02:	4b02      	ldr	r3, [pc, #8]	; (b5e0c <HAL_USB_USART_Receive_Data+0xc>)
   b5e04:	681b      	ldr	r3, [r3, #0]
   b5e06:	699b      	ldr	r3, [r3, #24]
   b5e08:	9301      	str	r3, [sp, #4]
   b5e0a:	bd08      	pop	{r3, pc}
   b5e0c:	0003024c 	.word	0x0003024c

000b5e10 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5e10:	b508      	push	{r3, lr}
   b5e12:	4b02      	ldr	r3, [pc, #8]	; (b5e1c <HAL_USB_USART_Send_Data+0xc>)
   b5e14:	681b      	ldr	r3, [r3, #0]
   b5e16:	69db      	ldr	r3, [r3, #28]
   b5e18:	9301      	str	r3, [sp, #4]
   b5e1a:	bd08      	pop	{r3, pc}
   b5e1c:	0003024c 	.word	0x0003024c

000b5e20 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5e20:	b508      	push	{r3, lr}
   b5e22:	4b02      	ldr	r3, [pc, #8]	; (b5e2c <HAL_USB_USART_Flush_Data+0xc>)
   b5e24:	681b      	ldr	r3, [r3, #0]
   b5e26:	6a1b      	ldr	r3, [r3, #32]
   b5e28:	9301      	str	r3, [sp, #4]
   b5e2a:	bd08      	pop	{r3, pc}
   b5e2c:	0003024c 	.word	0x0003024c

000b5e30 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b5e30:	b508      	push	{r3, lr}
   b5e32:	4b02      	ldr	r3, [pc, #8]	; (b5e3c <panic_+0xc>)
   b5e34:	681b      	ldr	r3, [r3, #0]
   b5e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5e38:	9301      	str	r3, [sp, #4]
   b5e3a:	bd08      	pop	{r3, pc}
   b5e3c:	00030260 	.word	0x00030260

000b5e40 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b5e40:	b508      	push	{r3, lr}
   b5e42:	4b02      	ldr	r3, [pc, #8]	; (b5e4c <log_message+0xc>)
   b5e44:	681b      	ldr	r3, [r3, #0]
   b5e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5e48:	9301      	str	r3, [sp, #4]
   b5e4a:	bd08      	pop	{r3, pc}
   b5e4c:	00030260 	.word	0x00030260

000b5e50 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5e50:	b508      	push	{r3, lr}
   b5e52:	4b02      	ldr	r3, [pc, #8]	; (b5e5c <set_system_mode+0xc>)
   b5e54:	681b      	ldr	r3, [r3, #0]
   b5e56:	685b      	ldr	r3, [r3, #4]
   b5e58:	9301      	str	r3, [sp, #4]
   b5e5a:	bd08      	pop	{r3, pc}
   b5e5c:	00030220 	.word	0x00030220

000b5e60 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5e60:	b508      	push	{r3, lr}
   b5e62:	4b02      	ldr	r3, [pc, #8]	; (b5e6c <system_delay_ms+0xc>)
   b5e64:	681b      	ldr	r3, [r3, #0]
   b5e66:	695b      	ldr	r3, [r3, #20]
   b5e68:	9301      	str	r3, [sp, #4]
   b5e6a:	bd08      	pop	{r3, pc}
   b5e6c:	00030220 	.word	0x00030220

000b5e70 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5e70:	b508      	push	{r3, lr}
   b5e72:	4b03      	ldr	r3, [pc, #12]	; (b5e80 <system_ctrl_set_app_request_handler+0x10>)
   b5e74:	681b      	ldr	r3, [r3, #0]
   b5e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b5e7a:	9301      	str	r3, [sp, #4]
   b5e7c:	bd08      	pop	{r3, pc}
   b5e7e:	0000      	.short	0x0000
   b5e80:	00030220 	.word	0x00030220

000b5e84 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5e84:	b508      	push	{r3, lr}
   b5e86:	4b03      	ldr	r3, [pc, #12]	; (b5e94 <system_ctrl_set_result+0x10>)
   b5e88:	681b      	ldr	r3, [r3, #0]
   b5e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b5e8e:	9301      	str	r3, [sp, #4]
   b5e90:	bd08      	pop	{r3, pc}
   b5e92:	0000      	.short	0x0000
   b5e94:	00030220 	.word	0x00030220

000b5e98 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b5e98:	b508      	push	{r3, lr}
   b5e9a:	4b02      	ldr	r3, [pc, #8]	; (b5ea4 <network_connect+0xc>)
   b5e9c:	681b      	ldr	r3, [r3, #0]
   b5e9e:	685b      	ldr	r3, [r3, #4]
   b5ea0:	9301      	str	r3, [sp, #4]
   b5ea2:	bd08      	pop	{r3, pc}
   b5ea4:	00030240 	.word	0x00030240

000b5ea8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b5ea8:	b508      	push	{r3, lr}
   b5eaa:	4b02      	ldr	r3, [pc, #8]	; (b5eb4 <network_connecting+0xc>)
   b5eac:	681b      	ldr	r3, [r3, #0]
   b5eae:	689b      	ldr	r3, [r3, #8]
   b5eb0:	9301      	str	r3, [sp, #4]
   b5eb2:	bd08      	pop	{r3, pc}
   b5eb4:	00030240 	.word	0x00030240

000b5eb8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b5eb8:	b508      	push	{r3, lr}
   b5eba:	4b02      	ldr	r3, [pc, #8]	; (b5ec4 <network_disconnect+0xc>)
   b5ebc:	681b      	ldr	r3, [r3, #0]
   b5ebe:	68db      	ldr	r3, [r3, #12]
   b5ec0:	9301      	str	r3, [sp, #4]
   b5ec2:	bd08      	pop	{r3, pc}
   b5ec4:	00030240 	.word	0x00030240

000b5ec8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b5ec8:	b508      	push	{r3, lr}
   b5eca:	4b02      	ldr	r3, [pc, #8]	; (b5ed4 <network_ready+0xc>)
   b5ecc:	681b      	ldr	r3, [r3, #0]
   b5ece:	691b      	ldr	r3, [r3, #16]
   b5ed0:	9301      	str	r3, [sp, #4]
   b5ed2:	bd08      	pop	{r3, pc}
   b5ed4:	00030240 	.word	0x00030240

000b5ed8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b5ed8:	b508      	push	{r3, lr}
   b5eda:	4b02      	ldr	r3, [pc, #8]	; (b5ee4 <network_on+0xc>)
   b5edc:	681b      	ldr	r3, [r3, #0]
   b5ede:	695b      	ldr	r3, [r3, #20]
   b5ee0:	9301      	str	r3, [sp, #4]
   b5ee2:	bd08      	pop	{r3, pc}
   b5ee4:	00030240 	.word	0x00030240

000b5ee8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5ee8:	b508      	push	{r3, lr}
   b5eea:	4b02      	ldr	r3, [pc, #8]	; (b5ef4 <network_off+0xc>)
   b5eec:	681b      	ldr	r3, [r3, #0]
   b5eee:	699b      	ldr	r3, [r3, #24]
   b5ef0:	9301      	str	r3, [sp, #4]
   b5ef2:	bd08      	pop	{r3, pc}
   b5ef4:	00030240 	.word	0x00030240

000b5ef8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5ef8:	b508      	push	{r3, lr}
   b5efa:	4b02      	ldr	r3, [pc, #8]	; (b5f04 <network_listen+0xc>)
   b5efc:	681b      	ldr	r3, [r3, #0]
   b5efe:	69db      	ldr	r3, [r3, #28]
   b5f00:	9301      	str	r3, [sp, #4]
   b5f02:	bd08      	pop	{r3, pc}
   b5f04:	00030240 	.word	0x00030240

000b5f08 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5f08:	b508      	push	{r3, lr}
   b5f0a:	4b02      	ldr	r3, [pc, #8]	; (b5f14 <network_listening+0xc>)
   b5f0c:	681b      	ldr	r3, [r3, #0]
   b5f0e:	6a1b      	ldr	r3, [r3, #32]
   b5f10:	9301      	str	r3, [sp, #4]
   b5f12:	bd08      	pop	{r3, pc}
   b5f14:	00030240 	.word	0x00030240

000b5f18 <network_set_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
   b5f18:	b508      	push	{r3, lr}
   b5f1a:	4b02      	ldr	r3, [pc, #8]	; (b5f24 <network_set_credentials+0xc>)
   b5f1c:	681b      	ldr	r3, [r3, #0]
   b5f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5f20:	9301      	str	r3, [sp, #4]
   b5f22:	bd08      	pop	{r3, pc}
   b5f24:	00030240 	.word	0x00030240

000b5f28 <network_set_listen_timeout>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5f28:	b508      	push	{r3, lr}
   b5f2a:	4b02      	ldr	r3, [pc, #8]	; (b5f34 <network_set_listen_timeout+0xc>)
   b5f2c:	681b      	ldr	r3, [r3, #0]
   b5f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5f30:	9301      	str	r3, [sp, #4]
   b5f32:	bd08      	pop	{r3, pc}
   b5f34:	00030240 	.word	0x00030240

000b5f38 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5f38:	b508      	push	{r3, lr}
   b5f3a:	4b02      	ldr	r3, [pc, #8]	; (b5f44 <network_get_listen_timeout+0xc>)
   b5f3c:	681b      	ldr	r3, [r3, #0]
   b5f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5f40:	9301      	str	r3, [sp, #4]
   b5f42:	bd08      	pop	{r3, pc}
   b5f44:	00030240 	.word	0x00030240

000b5f48 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5f48:	b508      	push	{r3, lr}
   b5f4a:	4b02      	ldr	r3, [pc, #8]	; (b5f54 <network_is_on+0xc>)
   b5f4c:	681b      	ldr	r3, [r3, #0]
   b5f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5f50:	9301      	str	r3, [sp, #4]
   b5f52:	bd08      	pop	{r3, pc}
   b5f54:	00030240 	.word	0x00030240

000b5f58 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5f58:	b508      	push	{r3, lr}
   b5f5a:	4b02      	ldr	r3, [pc, #8]	; (b5f64 <network_is_off+0xc>)
   b5f5c:	681b      	ldr	r3, [r3, #0]
   b5f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5f60:	9301      	str	r3, [sp, #4]
   b5f62:	bd08      	pop	{r3, pc}
   b5f64:	00030240 	.word	0x00030240

000b5f68 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b5f68:	b508      	push	{r3, lr}
   b5f6a:	4b02      	ldr	r3, [pc, #8]	; (b5f74 <spark_cloud_flag_connected+0xc>)
   b5f6c:	681b      	ldr	r3, [r3, #0]
   b5f6e:	695b      	ldr	r3, [r3, #20]
   b5f70:	9301      	str	r3, [sp, #4]
   b5f72:	bd08      	pop	{r3, pc}
   b5f74:	00030244 	.word	0x00030244

000b5f78 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5f78:	b508      	push	{r3, lr}
   b5f7a:	4b02      	ldr	r3, [pc, #8]	; (b5f84 <spark_set_random_seed_from_cloud_handler+0xc>)
   b5f7c:	681b      	ldr	r3, [r3, #0]
   b5f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5f80:	9301      	str	r3, [sp, #4]
   b5f82:	bd08      	pop	{r3, pc}
   b5f84:	00030244 	.word	0x00030244

000b5f88 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5f88:	b508      	push	{r3, lr}
   b5f8a:	4b02      	ldr	r3, [pc, #8]	; (b5f94 <malloc+0xc>)
   b5f8c:	681b      	ldr	r3, [r3, #0]
   b5f8e:	681b      	ldr	r3, [r3, #0]
   b5f90:	9301      	str	r3, [sp, #4]
   b5f92:	bd08      	pop	{r3, pc}
   b5f94:	0003021c 	.word	0x0003021c

000b5f98 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5f98:	b508      	push	{r3, lr}
   b5f9a:	4b02      	ldr	r3, [pc, #8]	; (b5fa4 <free+0xc>)
   b5f9c:	681b      	ldr	r3, [r3, #0]
   b5f9e:	685b      	ldr	r3, [r3, #4]
   b5fa0:	9301      	str	r3, [sp, #4]
   b5fa2:	bd08      	pop	{r3, pc}
   b5fa4:	0003021c 	.word	0x0003021c

000b5fa8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b5fa8:	b508      	push	{r3, lr}
   b5faa:	4b02      	ldr	r3, [pc, #8]	; (b5fb4 <realloc+0xc>)
   b5fac:	681b      	ldr	r3, [r3, #0]
   b5fae:	689b      	ldr	r3, [r3, #8]
   b5fb0:	9301      	str	r3, [sp, #4]
   b5fb2:	bd08      	pop	{r3, pc}
   b5fb4:	0003021c 	.word	0x0003021c

000b5fb8 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b5fb8:	b508      	push	{r3, lr}
   b5fba:	4b02      	ldr	r3, [pc, #8]	; (b5fc4 <vsnprintf+0xc>)
   b5fbc:	681b      	ldr	r3, [r3, #0]
   b5fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5fc0:	9301      	str	r3, [sp, #4]
   b5fc2:	bd08      	pop	{r3, pc}
   b5fc4:	0003021c 	.word	0x0003021c

000b5fc8 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b5fc8:	b508      	push	{r3, lr}
   b5fca:	4b02      	ldr	r3, [pc, #8]	; (b5fd4 <__errno+0xc>)
   b5fcc:	681b      	ldr	r3, [r3, #0]
   b5fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5fd0:	9301      	str	r3, [sp, #4]
   b5fd2:	bd08      	pop	{r3, pc}
   b5fd4:	0003021c 	.word	0x0003021c

000b5fd8 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5fd8:	b508      	push	{r3, lr}
   b5fda:	4b02      	ldr	r3, [pc, #8]	; (b5fe4 <__assert_func+0xc>)
   b5fdc:	681b      	ldr	r3, [r3, #0]
   b5fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5fe0:	9301      	str	r3, [sp, #4]
   b5fe2:	bd08      	pop	{r3, pc}
   b5fe4:	0003021c 	.word	0x0003021c

000b5fe8 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5fe8:	b508      	push	{r3, lr}
   b5fea:	4b02      	ldr	r3, [pc, #8]	; (b5ff4 <newlib_impure_ptr_callback+0xc>)
   b5fec:	681b      	ldr	r3, [r3, #0]
   b5fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5ff0:	9301      	str	r3, [sp, #4]
   b5ff2:	bd08      	pop	{r3, pc}
   b5ff4:	0003021c 	.word	0x0003021c

000b5ff8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5ff8:	2200      	movs	r2, #0
   b5ffa:	6840      	ldr	r0, [r0, #4]
   b5ffc:	4611      	mov	r1, r2
   b5ffe:	f7ff bf83 	b.w	b5f08 <network_listening>

000b6002 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6002:	2200      	movs	r2, #0
   b6004:	6840      	ldr	r0, [r0, #4]
   b6006:	4611      	mov	r1, r2
   b6008:	f7ff bf96 	b.w	b5f38 <network_get_listen_timeout>

000b600c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b600c:	6840      	ldr	r0, [r0, #4]
   b600e:	2200      	movs	r2, #0
   b6010:	f7ff bf8a 	b.w	b5f28 <network_set_listen_timeout>

000b6014 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6014:	6840      	ldr	r0, [r0, #4]
   b6016:	2200      	movs	r2, #0
   b6018:	f081 0101 	eor.w	r1, r1, #1
   b601c:	f7ff bf6c 	b.w	b5ef8 <network_listen>

000b6020 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6020:	2300      	movs	r3, #0
   b6022:	6840      	ldr	r0, [r0, #4]
   b6024:	461a      	mov	r2, r3
   b6026:	4619      	mov	r1, r3
   b6028:	f7ff bf5e 	b.w	b5ee8 <network_off>

000b602c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b602c:	2300      	movs	r3, #0
   b602e:	6840      	ldr	r0, [r0, #4]
   b6030:	461a      	mov	r2, r3
   b6032:	4619      	mov	r1, r3
   b6034:	f7ff bf50 	b.w	b5ed8 <network_on>

000b6038 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b6038:	2200      	movs	r2, #0
   b603a:	6840      	ldr	r0, [r0, #4]
   b603c:	4611      	mov	r1, r2
   b603e:	f7ff bf43 	b.w	b5ec8 <network_ready>

000b6042 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6042:	2200      	movs	r2, #0
   b6044:	6840      	ldr	r0, [r0, #4]
   b6046:	4611      	mov	r1, r2
   b6048:	f7ff bf2e 	b.w	b5ea8 <network_connecting>

000b604c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b604c:	6840      	ldr	r0, [r0, #4]
   b604e:	2200      	movs	r2, #0
   b6050:	2102      	movs	r1, #2
   b6052:	f7ff bf31 	b.w	b5eb8 <network_disconnect>

000b6056 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6056:	2300      	movs	r3, #0
   b6058:	6840      	ldr	r0, [r0, #4]
   b605a:	461a      	mov	r2, r3
   b605c:	f7ff bf1c 	b.w	b5e98 <network_connect>

000b6060 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b6060:	4b02      	ldr	r3, [pc, #8]	; (b606c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b6062:	2203      	movs	r2, #3
   b6064:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b6066:	4a02      	ldr	r2, [pc, #8]	; (b6070 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b6068:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b606a:	4770      	bx	lr
   b606c:	2003e6c8 	.word	0x2003e6c8
   b6070:	000b8cec 	.word	0x000b8cec

000b6074 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b6074:	2100      	movs	r1, #0
   b6076:	f7ff be83 	b.w	b5d80 <hal_spi_release>

000b607a <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b607a:	2100      	movs	r1, #0
   b607c:	f7ff be78 	b.w	b5d70 <hal_spi_acquire>

000b6080 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b6080:	b510      	push	{r4, lr}
   b6082:	4604      	mov	r4, r0
   b6084:	4608      	mov	r0, r1
{
    _spi = spi;
   b6086:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b6088:	f7ff fe52 	bl	b5d30 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b608c:	2300      	movs	r3, #0
   b608e:	6063      	str	r3, [r4, #4]
}
   b6090:	4620      	mov	r0, r4
   b6092:	bd10      	pop	{r4, pc}

000b6094 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b6094:	b513      	push	{r0, r1, r4, lr}
   b6096:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b6098:	7800      	ldrb	r0, [r0, #0]
   b609a:	f7ff ffee 	bl	b607a <_ZN8SPIClass4lockEv.isra.0>
   b609e:	b958      	cbnz	r0, b60b8 <_ZN8SPIClass5beginEv+0x24>
   b60a0:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b60a2:	9001      	str	r0, [sp, #4]
   b60a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b60a8:	f7ff fe1a 	bl	b5ce0 <hal_spi_begin>
        unlock();
   b60ac:	9801      	ldr	r0, [sp, #4]
    }
}
   b60ae:	b002      	add	sp, #8
   b60b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b60b4:	f7ff bfde 	b.w	b6074 <_ZN8SPIClass6unlockEv.isra.0>
   b60b8:	b002      	add	sp, #8
   b60ba:	bd10      	pop	{r4, pc}

000b60bc <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   b60bc:	b513      	push	{r0, r1, r4, lr}
   b60be:	4604      	mov	r4, r0
    if (!lock())
   b60c0:	7800      	ldrb	r0, [r0, #0]
{
   b60c2:	9101      	str	r1, [sp, #4]
    if (!lock())
   b60c4:	f7ff ffd9 	bl	b607a <_ZN8SPIClass4lockEv.isra.0>
   b60c8:	9901      	ldr	r1, [sp, #4]
   b60ca:	b948      	cbnz	r0, b60e0 <_ZN8SPIClass11setBitOrderEh+0x24>
   b60cc:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   b60ce:	9001      	str	r0, [sp, #4]
   b60d0:	f7ff fe0e 	bl	b5cf0 <hal_spi_set_bit_order>
        unlock();
   b60d4:	9801      	ldr	r0, [sp, #4]
    }
}
   b60d6:	b002      	add	sp, #8
   b60d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b60dc:	f7ff bfca 	b.w	b6074 <_ZN8SPIClass6unlockEv.isra.0>
   b60e0:	b002      	add	sp, #8
   b60e2:	bd10      	pop	{r4, pc}

000b60e4 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   b60e4:	b513      	push	{r0, r1, r4, lr}
   b60e6:	4604      	mov	r4, r0
    if (!lock())
   b60e8:	7800      	ldrb	r0, [r0, #0]
{
   b60ea:	9101      	str	r1, [sp, #4]
    if (!lock())
   b60ec:	f7ff ffc5 	bl	b607a <_ZN8SPIClass4lockEv.isra.0>
   b60f0:	9901      	ldr	r1, [sp, #4]
   b60f2:	b948      	cbnz	r0, b6108 <_ZN8SPIClass11setDataModeEh+0x24>
   b60f4:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
   b60f6:	9001      	str	r0, [sp, #4]
   b60f8:	f7ff fe02 	bl	b5d00 <hal_spi_set_data_mode>
        unlock();
   b60fc:	9801      	ldr	r0, [sp, #4]
    }
}
   b60fe:	b002      	add	sp, #8
   b6100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6104:	f7ff bfb6 	b.w	b6074 <_ZN8SPIClass6unlockEv.isra.0>
   b6108:	b002      	add	sp, #8
   b610a:	bd10      	pop	{r4, pc}

000b610c <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b610c:	7800      	ldrb	r0, [r0, #0]
   b610e:	f7ff bfb1 	b.w	b6074 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b6114 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b6114:	0840      	lsrs	r0, r0, #1
{
   b6116:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b6118:	6018      	str	r0, [r3, #0]
   b611a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b611c:	6818      	ldr	r0, [r3, #0]
   b611e:	4288      	cmp	r0, r1
   b6120:	b2e5      	uxtb	r5, r4
   b6122:	d906      	bls.n	b6132 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b6124:	3401      	adds	r4, #1
   b6126:	2c08      	cmp	r4, #8
   b6128:	d002      	beq.n	b6130 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b612a:	0840      	lsrs	r0, r0, #1
   b612c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b612e:	e7f5      	b.n	b611c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b6130:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b6132:	4b02      	ldr	r3, [pc, #8]	; (b613c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b6134:	5d5b      	ldrb	r3, [r3, r5]
   b6136:	7013      	strb	r3, [r2, #0]
}
   b6138:	bd30      	pop	{r4, r5, pc}
   b613a:	bf00      	nop
   b613c:	000b8d20 	.word	0x000b8d20

000b6140 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b6140:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6144:	4606      	mov	r6, r0
   b6146:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b6148:	7800      	ldrb	r0, [r0, #0]
{
   b614a:	460c      	mov	r4, r1
    CHECK(lock());
   b614c:	f7ff ff95 	bl	b607a <_ZN8SPIClass4lockEv.isra.0>
   b6150:	2800      	cmp	r0, #0
   b6152:	db1b      	blt.n	b618c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b6154:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b6156:	2214      	movs	r2, #20
   b6158:	2100      	movs	r1, #0
   b615a:	a809      	add	r0, sp, #36	; 0x24
   b615c:	f002 f924 	bl	b83a8 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b6160:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b6162:	2200      	movs	r2, #0
   b6164:	a909      	add	r1, sp, #36	; 0x24
   b6166:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b6168:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b616c:	f7ff fdf0 	bl	b5d50 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b6170:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b6174:	b113      	cbz	r3, b617c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b6176:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b617a:	b155      	cbz	r5, b6192 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b617c:	2700      	movs	r7, #0
   b617e:	46b9      	mov	r9, r7
   b6180:	46b8      	mov	r8, r7
   b6182:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b6184:	7923      	ldrb	r3, [r4, #4]
   b6186:	b15d      	cbz	r5, b61a0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b6188:	b1c3      	cbz	r3, b61bc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b618a:	2000      	movs	r0, #0
}
   b618c:	b00f      	add	sp, #60	; 0x3c
   b618e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b6192:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b6196:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b619a:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b619e:	e7f1      	b.n	b6184 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b61a0:	2b00      	cmp	r3, #0
   b61a2:	d135      	bne.n	b6210 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b61a4:	68a3      	ldr	r3, [r4, #8]
   b61a6:	4543      	cmp	r3, r8
   b61a8:	d108      	bne.n	b61bc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b61aa:	f88d 9020 	strb.w	r9, [sp, #32]
   b61ae:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b61b2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b61b6:	89a3      	ldrh	r3, [r4, #12]
   b61b8:	429a      	cmp	r2, r3
   b61ba:	d0e6      	beq.n	b618a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b61bc:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b61be:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b61c0:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b61c4:	980a      	ldr	r0, [sp, #40]	; 0x28
   b61c6:	ab04      	add	r3, sp, #16
   b61c8:	f10d 020f 	add.w	r2, sp, #15
   b61cc:	f7ff ffa2 	bl	b6114 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b61d0:	7921      	ldrb	r1, [r4, #4]
   b61d2:	b985      	cbnz	r5, b61f6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b61d4:	b989      	cbnz	r1, b61fa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b61d6:	68a3      	ldr	r3, [r4, #8]
   b61d8:	4543      	cmp	r3, r8
   b61da:	d30e      	bcc.n	b61fa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b61dc:	f88d 9020 	strb.w	r9, [sp, #32]
   b61e0:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b61e4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b61e8:	89a3      	ldrh	r3, [r4, #12]
   b61ea:	429a      	cmp	r2, r3
   b61ec:	d105      	bne.n	b61fa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b61ee:	9b04      	ldr	r3, [sp, #16]
   b61f0:	4543      	cmp	r3, r8
   b61f2:	d102      	bne.n	b61fa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b61f4:	e7c9      	b.n	b618a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b61f6:	2900      	cmp	r1, #0
   b61f8:	d1f9      	bne.n	b61ee <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b61fa:	2300      	movs	r3, #0
   b61fc:	9301      	str	r3, [sp, #4]
   b61fe:	7b63      	ldrb	r3, [r4, #13]
   b6200:	9300      	str	r3, [sp, #0]
   b6202:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b6206:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b6208:	7830      	ldrb	r0, [r6, #0]
   b620a:	f7ff fda9 	bl	b5d60 <hal_spi_set_settings>
   b620e:	e7bc      	b.n	b618a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b6210:	e9cd 5500 	strd	r5, r5, [sp]
   b6214:	462b      	mov	r3, r5
   b6216:	462a      	mov	r2, r5
   b6218:	2101      	movs	r1, #1
   b621a:	e7f5      	b.n	b6208 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b621c <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   b621c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6220:	b088      	sub	sp, #32
    unsigned clock = 0;
   b6222:	2300      	movs	r3, #0
{
   b6224:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   b6226:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   b6228:	9302      	str	r3, [sp, #8]
{
   b622a:	460e      	mov	r6, r1
   b622c:	4617      	mov	r7, r2
    if (!lock())
   b622e:	f7ff ff24 	bl	b607a <_ZN8SPIClass4lockEv.isra.0>
   b6232:	4605      	mov	r5, r0
   b6234:	bb00      	cbnz	r0, b6278 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   b6236:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   b623a:	4601      	mov	r1, r0
   b623c:	2214      	movs	r2, #20
   b623e:	a803      	add	r0, sp, #12
   b6240:	f002 f8b2 	bl	b83a8 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b6244:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b6246:	462a      	mov	r2, r5
   b6248:	a903      	add	r1, sp, #12
   b624a:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   b624c:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   b6250:	f7ff fd7e 	bl	b5d50 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b6254:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   b6256:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b625a:	ab02      	add	r3, sp, #8
   b625c:	f10d 0207 	add.w	r2, sp, #7
   b6260:	fb07 f106 	mul.w	r1, r7, r6
   b6264:	f7ff ff56 	bl	b6114 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   b6268:	7820      	ldrb	r0, [r4, #0]
   b626a:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b626e:	f7ff fd4f 	bl	b5d10 <hal_spi_set_clock_divider>
        unlock();
   b6272:	7820      	ldrb	r0, [r4, #0]
   b6274:	f7ff fefe 	bl	b6074 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   b6278:	9802      	ldr	r0, [sp, #8]
   b627a:	b008      	add	sp, #32
   b627c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6280 <_ZN8SPIClass15setClockDividerEh>:
{
   b6280:	b538      	push	{r3, r4, r5, lr}
   b6282:	4604      	mov	r4, r0
    if (!lock())
   b6284:	7800      	ldrb	r0, [r0, #0]
{
   b6286:	460d      	mov	r5, r1
    if (!lock())
   b6288:	f7ff fef7 	bl	b607a <_ZN8SPIClass4lockEv.isra.0>
   b628c:	4603      	mov	r3, r0
   b628e:	b9d0      	cbnz	r0, b62c6 <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   b6290:	6861      	ldr	r1, [r4, #4]
   b6292:	b199      	cbz	r1, b62bc <_ZN8SPIClass15setClockDividerEh+0x3c>
   b6294:	4a0c      	ldr	r2, [pc, #48]	; (b62c8 <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   b6296:	f812 0b01 	ldrb.w	r0, [r2], #1
   b629a:	4285      	cmp	r5, r0
   b629c:	d002      	beq.n	b62a4 <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   b629e:	3301      	adds	r3, #1
   b62a0:	2b08      	cmp	r3, #8
   b62a2:	d1f8      	bne.n	b6296 <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   b62a4:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   b62a6:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   b62a8:	2201      	movs	r2, #1
   b62aa:	40d9      	lsrs	r1, r3
   b62ac:	4620      	mov	r0, r4
   b62ae:	f7ff ffb5 	bl	b621c <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   b62b2:	7820      	ldrb	r0, [r4, #0]
}
   b62b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   b62b8:	f7ff bedc 	b.w	b6074 <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   b62bc:	7820      	ldrb	r0, [r4, #0]
   b62be:	4629      	mov	r1, r5
   b62c0:	f7ff fd26 	bl	b5d10 <hal_spi_set_clock_divider>
   b62c4:	e7f5      	b.n	b62b2 <_ZN8SPIClass15setClockDividerEh+0x32>
}
   b62c6:	bd38      	pop	{r3, r4, r5, pc}
   b62c8:	000b8d20 	.word	0x000b8d20

000b62cc <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   b62cc:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b62ce:	7800      	ldrb	r0, [r0, #0]
   b62d0:	f7ff fd26 	bl	b5d20 <hal_spi_transfer>
}
   b62d4:	b2c0      	uxtb	r0, r0
   b62d6:	bd08      	pop	{r3, pc}

000b62d8 <_ZN5Servo17writeMicrosecondsEt>:
    /**
     * @brief Check if this instance is attached to a servo.
     * @return true if this instance is attached to a servo, false otherwise.
     * @see Servo::attachedPin()
     */
    bool attached() const { return this->pin != NOT_ATTACHED; }
   b62d8:	f9b0 2000 	ldrsh.w	r2, [r0]
}

void Servo::writeMicroseconds(uint16_t pulseWidth)
{

  if (!this->attached())
   b62dc:	1c53      	adds	r3, r2, #1
   b62de:	d00b      	beq.n	b62f8 <_ZN5Servo17writeMicrosecondsEt+0x20>
  {
    return;
  }

  pulseWidth = constrain(pulseWidth, this->minPW, this->maxPW);
   b62e0:	8843      	ldrh	r3, [r0, #2]
   b62e2:	8880      	ldrh	r0, [r0, #4]
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   b62e4:	428b      	cmp	r3, r1
   b62e6:	d803      	bhi.n	b62f0 <_ZN5Servo17writeMicrosecondsEt+0x18>
   b62e8:	4288      	cmp	r0, r1
   b62ea:	4603      	mov	r3, r0
   b62ec:	bf28      	it	cs
   b62ee:	460b      	movcs	r3, r1

  HAL_Servo_Write_Pulse_Width(this->pin, pulseWidth);
   b62f0:	4619      	mov	r1, r3
   b62f2:	b290      	uxth	r0, r2
   b62f4:	f7ff bd5c 	b.w	b5db0 <HAL_Servo_Write_Pulse_Width>
}
   b62f8:	4770      	bx	lr

000b62fa <_ZN5Servo5writeEi>:
{
   b62fa:	b513      	push	{r0, r1, r4, lr}
   b62fc:	4604      	mov	r4, r0
   b62fe:	4608      	mov	r0, r1
   b6300:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
   b6304:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   b6308:	4288      	cmp	r0, r1
   b630a:	db10      	blt.n	b632e <_ZN5Servo5writeEi+0x34>
   b630c:	4290      	cmp	r0, r2
   b630e:	bfa8      	it	ge
   b6310:	4610      	movge	r0, r2
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   b6312:	88a3      	ldrh	r3, [r4, #4]
   b6314:	9300      	str	r3, [sp, #0]
   b6316:	8863      	ldrh	r3, [r4, #2]
   b6318:	f000 fabe 	bl	b6898 <_Z3mapiiiii>
   b631c:	68e1      	ldr	r1, [r4, #12]
   b631e:	4401      	add	r1, r0
   b6320:	b289      	uxth	r1, r1
   b6322:	4620      	mov	r0, r4
}
   b6324:	b002      	add	sp, #8
   b6326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   b632a:	f7ff bfd5 	b.w	b62d8 <_ZN5Servo17writeMicrosecondsEt>
   b632e:	4608      	mov	r0, r1
   b6330:	e7ef      	b.n	b6312 <_ZN5Servo5writeEi+0x18>
	...

000b6334 <_ZN5Servo11resetFieldsEv>:
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
   b6334:	4a04      	ldr	r2, [pc, #16]	; (b6348 <_ZN5Servo11resetFieldsEv+0x14>)
   b6336:	f44f 6316 	mov.w	r3, #2400	; 0x960
   b633a:	e9c0 2300 	strd	r2, r3, [r0]
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
   b633e:	23b4      	movs	r3, #180	; 0xb4
   b6340:	8103      	strh	r3, [r0, #8]
  this->trim = 0;
   b6342:	2300      	movs	r3, #0
   b6344:	60c3      	str	r3, [r0, #12]
}
   b6346:	4770      	bx	lr
   b6348:	0220ffff 	.word	0x0220ffff

000b634c <_ZN5ServoC1Ev>:
Servo::Servo()
   b634c:	b508      	push	{r3, lr}
  this->resetFields();
   b634e:	f7ff fff1 	bl	b6334 <_ZN5Servo11resetFieldsEv>
}
   b6352:	bd08      	pop	{r3, pc}

000b6354 <_ZN5Servo6detachEv>:
{
   b6354:	b510      	push	{r4, lr}
   b6356:	4604      	mov	r4, r0
   b6358:	f9b0 0000 	ldrsh.w	r0, [r0]
  if (!this->attached())
   b635c:	1c43      	adds	r3, r0, #1
   b635e:	d007      	beq.n	b6370 <_ZN5Servo6detachEv+0x1c>
  HAL_Servo_Detach(this->pin);
   b6360:	b280      	uxth	r0, r0
   b6362:	f7ff fd1d 	bl	b5da0 <HAL_Servo_Detach>
  this->resetFields();
   b6366:	4620      	mov	r0, r4
   b6368:	f7ff ffe4 	bl	b6334 <_ZN5Servo11resetFieldsEv>
  return true;
   b636c:	2001      	movs	r0, #1
}
   b636e:	bd10      	pop	{r4, pc}
    return false;
   b6370:	2000      	movs	r0, #0
   b6372:	e7fc      	b.n	b636e <_ZN5Servo6detachEv+0x1a>

000b6374 <_ZN5Servo6attachEtttss>:
{
   b6374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6378:	460d      	mov	r5, r1
   b637a:	4604      	mov	r4, r0
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   b637c:	2102      	movs	r1, #2
   b637e:	4628      	mov	r0, r5
{
   b6380:	4690      	mov	r8, r2
   b6382:	461f      	mov	r7, r3
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   b6384:	f7ff fb7c 	bl	b5a80 <HAL_Validate_Pin_Function>
   b6388:	2802      	cmp	r0, #2
   b638a:	d003      	beq.n	b6394 <_ZN5Servo6attachEtttss+0x20>
    return false;
   b638c:	2600      	movs	r6, #0
}
   b638e:	4630      	mov	r0, r6
   b6390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!pinAvailable(pin))
   b6394:	4628      	mov	r0, r5
   b6396:	f001 f91d 	bl	b75d4 <pinAvailable>
   b639a:	4606      	mov	r6, r0
   b639c:	2800      	cmp	r0, #0
   b639e:	d0f5      	beq.n	b638c <_ZN5Servo6attachEtttss+0x18>
  if (this->attached())
   b63a0:	f9b4 3000 	ldrsh.w	r3, [r4]
   b63a4:	3301      	adds	r3, #1
   b63a6:	d002      	beq.n	b63ae <_ZN5Servo6attachEtttss+0x3a>
    this->detach();
   b63a8:	4620      	mov	r0, r4
   b63aa:	f7ff ffd3 	bl	b6354 <_ZN5Servo6detachEv>
  this->minAngle = minAngle;
   b63ae:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
   b63b2:	80e3      	strh	r3, [r4, #6]
  this->maxAngle = maxAngle;
   b63b4:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
  this->pin = pin;
   b63b8:	8025      	strh	r5, [r4, #0]
  this->minPW = minPW;
   b63ba:	f8a4 8002 	strh.w	r8, [r4, #2]
  this->maxPW = maxPW;
   b63be:	80a7      	strh	r7, [r4, #4]
  this->maxAngle = maxAngle;
   b63c0:	8123      	strh	r3, [r4, #8]
  HAL_Servo_Attach(this->pin);
   b63c2:	4628      	mov	r0, r5
   b63c4:	f7ff fce4 	bl	b5d90 <HAL_Servo_Attach>
  return true;
   b63c8:	e7e1      	b.n	b638e <_ZN5Servo6attachEtttss+0x1a>
	...

000b63cc <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b63cc:	4b05      	ldr	r3, [pc, #20]	; (b63e4 <_GLOBAL__sub_I_System+0x18>)
   b63ce:	2202      	movs	r2, #2
   b63d0:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b63d2:	4b05      	ldr	r3, [pc, #20]	; (b63e8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b63d4:	4a05      	ldr	r2, [pc, #20]	; (b63ec <_GLOBAL__sub_I_System+0x20>)
   b63d6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b63d8:	2000      	movs	r0, #0
   b63da:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b63de:	f7ff bd37 	b.w	b5e50 <set_system_mode>
   b63e2:	bf00      	nop
   b63e4:	2003e6dc 	.word	0x2003e6dc
   b63e8:	2003e6d0 	.word	0x2003e6d0
   b63ec:	ffff0000 	.word	0xffff0000

000b63f0 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b63f0:	b510      	push	{r4, lr}
   b63f2:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b63f4:	f002 f820 	bl	b8438 <strlen>
   b63f8:	3801      	subs	r0, #1
   b63fa:	1823      	adds	r3, r4, r0
   b63fc:	4620      	mov	r0, r4
	while(i<j){
   b63fe:	4283      	cmp	r3, r0
   b6400:	d906      	bls.n	b6410 <_Z11str_reversePc+0x20>
		c = *i;
   b6402:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b6404:	7819      	ldrb	r1, [r3, #0]
   b6406:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b640a:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b640e:	e7f6      	b.n	b63fe <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b6410:	bd10      	pop	{r4, pc}

000b6412 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b6412:	b570      	push	{r4, r5, r6, lr}
   b6414:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b6416:	1e91      	subs	r1, r2, #2
   b6418:	2922      	cmp	r1, #34	; 0x22
   b641a:	d81d      	bhi.n	b6458 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b641c:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b641e:	b930      	cbnz	r0, b642e <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b6420:	4423      	add	r3, r4
            *ptr++ = '0';
   b6422:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b6424:	429d      	cmp	r5, r3
   b6426:	d210      	bcs.n	b644a <ultoa+0x38>
            *ptr++ = '0';
   b6428:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b642c:	e7fa      	b.n	b6424 <ultoa+0x12>
            result.quot = a/radix;
   b642e:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b6432:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b6436:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b6438:	2809      	cmp	r0, #9
                *ptr += '0';
   b643a:	bf94      	ite	ls
   b643c:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b643e:	3157      	addhi	r1, #87	; 0x57
   b6440:	b2c9      	uxtb	r1, r1
   b6442:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b6446:	4630      	mov	r0, r6
	while(a){
   b6448:	e7e9      	b.n	b641e <ultoa+0xc>

	*ptr = '\0';
   b644a:	2300      	movs	r3, #0
	str_reverse(buffer);
   b644c:	4620      	mov	r0, r4
	*ptr = '\0';
   b644e:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b6450:	f7ff ffce 	bl	b63f0 <_Z11str_reversePc>
	return buffer;
   b6454:	4620      	mov	r0, r4
}
   b6456:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b6458:	2000      	movs	r0, #0
   b645a:	e7fc      	b.n	b6456 <ultoa+0x44>

000b645c <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b645c:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b645e:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b6460:	460c      	mov	r4, r1
   b6462:	4615      	mov	r5, r2
	if(a<0){
   b6464:	da0e      	bge.n	b6484 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b6466:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b646a:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b646e:	bf14      	ite	ne
   b6470:	4258      	negne	r0, r3
   b6472:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b6474:	2301      	movs	r3, #1
		*buffer = '-';
   b6476:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b6478:	462a      	mov	r2, r5
   b647a:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b647c:	f7ff ffc9 	bl	b6412 <ultoa>
	}
	return buffer;
}
   b6480:	4620      	mov	r0, r4
   b6482:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b6484:	2301      	movs	r3, #1
   b6486:	e7f9      	b.n	b647c <itoa+0x20>

000b6488 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b6488:	b510      	push	{r4, lr}
   b648a:	4604      	mov	r4, r0
{
	free(buffer);
   b648c:	6800      	ldr	r0, [r0, #0]
   b648e:	f7ff fd83 	bl	b5f98 <free>
}
   b6492:	4620      	mov	r0, r4
   b6494:	bd10      	pop	{r4, pc}

000b6496 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b6496:	b510      	push	{r4, lr}
   b6498:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b649a:	6800      	ldr	r0, [r0, #0]
   b649c:	b108      	cbz	r0, b64a2 <_ZN6String10invalidateEv+0xc>
   b649e:	f7ff fd7b 	bl	b5f98 <free>
	buffer = NULL;
   b64a2:	2300      	movs	r3, #0
	capacity = len = 0;
   b64a4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b64a8:	6023      	str	r3, [r4, #0]
}
   b64aa:	bd10      	pop	{r4, pc}

000b64ac <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b64ac:	b538      	push	{r3, r4, r5, lr}
   b64ae:	4604      	mov	r4, r0
   b64b0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b64b2:	6800      	ldr	r0, [r0, #0]
   b64b4:	3101      	adds	r1, #1
   b64b6:	f7ff fd77 	bl	b5fa8 <realloc>
	if (newbuffer) {
   b64ba:	b110      	cbz	r0, b64c2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b64bc:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b64c0:	2001      	movs	r0, #1
	}
	return 0;
}
   b64c2:	bd38      	pop	{r3, r4, r5, pc}

000b64c4 <_ZN6String7reserveEj>:
{
   b64c4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b64c6:	6803      	ldr	r3, [r0, #0]
{
   b64c8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b64ca:	b123      	cbz	r3, b64d6 <_ZN6String7reserveEj+0x12>
   b64cc:	6843      	ldr	r3, [r0, #4]
   b64ce:	428b      	cmp	r3, r1
   b64d0:	d301      	bcc.n	b64d6 <_ZN6String7reserveEj+0x12>
   b64d2:	2001      	movs	r0, #1
}
   b64d4:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b64d6:	4620      	mov	r0, r4
   b64d8:	f7ff ffe8 	bl	b64ac <_ZN6String12changeBufferEj>
   b64dc:	2800      	cmp	r0, #0
   b64de:	d0f9      	beq.n	b64d4 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b64e0:	68a3      	ldr	r3, [r4, #8]
   b64e2:	2b00      	cmp	r3, #0
   b64e4:	d1f5      	bne.n	b64d2 <_ZN6String7reserveEj+0xe>
   b64e6:	6822      	ldr	r2, [r4, #0]
   b64e8:	7013      	strb	r3, [r2, #0]
   b64ea:	e7f2      	b.n	b64d2 <_ZN6String7reserveEj+0xe>

000b64ec <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b64ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b64ee:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b64f0:	4611      	mov	r1, r2
   b64f2:	9201      	str	r2, [sp, #4]
{
   b64f4:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b64f6:	f7ff ffe5 	bl	b64c4 <_ZN6String7reserveEj>
   b64fa:	9a01      	ldr	r2, [sp, #4]
   b64fc:	b928      	cbnz	r0, b650a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b64fe:	4620      	mov	r0, r4
   b6500:	f7ff ffc9 	bl	b6496 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b6504:	4620      	mov	r0, r4
   b6506:	b003      	add	sp, #12
   b6508:	bd30      	pop	{r4, r5, pc}
	len = length;
   b650a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b650c:	4629      	mov	r1, r5
   b650e:	6820      	ldr	r0, [r4, #0]
   b6510:	f001 ff3c 	bl	b838c <memcpy>
	buffer[len] = 0;
   b6514:	6822      	ldr	r2, [r4, #0]
   b6516:	68a3      	ldr	r3, [r4, #8]
   b6518:	2100      	movs	r1, #0
   b651a:	54d1      	strb	r1, [r2, r3]
	return *this;
   b651c:	e7f2      	b.n	b6504 <_ZN6String4copyEPKcj+0x18>

000b651e <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b651e:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b6520:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b6522:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b6526:	4604      	mov	r4, r0
	len = 0;
   b6528:	6083      	str	r3, [r0, #8]
	flags = 0;
   b652a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b652c:	b141      	cbz	r1, b6540 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b652e:	4608      	mov	r0, r1
   b6530:	9101      	str	r1, [sp, #4]
   b6532:	f001 ff81 	bl	b8438 <strlen>
   b6536:	9901      	ldr	r1, [sp, #4]
   b6538:	4602      	mov	r2, r0
   b653a:	4620      	mov	r0, r4
   b653c:	f7ff ffd6 	bl	b64ec <_ZN6String4copyEPKcj>
}
   b6540:	4620      	mov	r0, r4
   b6542:	b002      	add	sp, #8
   b6544:	bd10      	pop	{r4, pc}

000b6546 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b6546:	b538      	push	{r3, r4, r5, lr}
   b6548:	4605      	mov	r5, r0
	if (buffer) {
   b654a:	6800      	ldr	r0, [r0, #0]
{
   b654c:	460c      	mov	r4, r1
	if (buffer) {
   b654e:	b168      	cbz	r0, b656c <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b6550:	686a      	ldr	r2, [r5, #4]
   b6552:	688b      	ldr	r3, [r1, #8]
   b6554:	429a      	cmp	r2, r3
   b6556:	d307      	bcc.n	b6568 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b6558:	6809      	ldr	r1, [r1, #0]
   b655a:	f001 ff65 	bl	b8428 <strcpy>
			len = rhs.len;
   b655e:	68a3      	ldr	r3, [r4, #8]
   b6560:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b6562:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b6564:	60a3      	str	r3, [r4, #8]
}
   b6566:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b6568:	f7ff fd16 	bl	b5f98 <free>
	buffer = rhs.buffer;
   b656c:	6823      	ldr	r3, [r4, #0]
   b656e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b6570:	6863      	ldr	r3, [r4, #4]
   b6572:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b6574:	68a3      	ldr	r3, [r4, #8]
   b6576:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b6578:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b657a:	e9c4 3300 	strd	r3, r3, [r4]
   b657e:	e7f1      	b.n	b6564 <_ZN6String4moveERS_+0x1e>

000b6580 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b6580:	4288      	cmp	r0, r1
{
   b6582:	b510      	push	{r4, lr}
   b6584:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b6586:	d005      	beq.n	b6594 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b6588:	680b      	ldr	r3, [r1, #0]
   b658a:	b12b      	cbz	r3, b6598 <_ZN6StringaSERKS_+0x18>
   b658c:	688a      	ldr	r2, [r1, #8]
   b658e:	4619      	mov	r1, r3
   b6590:	f7ff ffac 	bl	b64ec <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b6594:	4620      	mov	r0, r4
   b6596:	bd10      	pop	{r4, pc}
	else invalidate();
   b6598:	f7ff ff7d 	bl	b6496 <_ZN6String10invalidateEv>
   b659c:	e7fa      	b.n	b6594 <_ZN6StringaSERKS_+0x14>

000b659e <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b659e:	b510      	push	{r4, lr}
	buffer = NULL;
   b65a0:	2300      	movs	r3, #0
String::String(const String &value)
   b65a2:	4604      	mov	r4, r0
	capacity = 0;
   b65a4:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b65a8:	6083      	str	r3, [r0, #8]
	flags = 0;
   b65aa:	7303      	strb	r3, [r0, #12]
	*this = value;
   b65ac:	f7ff ffe8 	bl	b6580 <_ZN6StringaSERKS_>
}
   b65b0:	4620      	mov	r0, r4
   b65b2:	bd10      	pop	{r4, pc}

000b65b4 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   b65b4:	4288      	cmp	r0, r1
{
   b65b6:	b510      	push	{r4, lr}
   b65b8:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   b65ba:	d001      	beq.n	b65c0 <_ZN6StringaSEOS_+0xc>
   b65bc:	f7ff ffc3 	bl	b6546 <_ZN6String4moveERS_>
	return *this;
}
   b65c0:	4620      	mov	r0, r4
   b65c2:	bd10      	pop	{r4, pc}

000b65c4 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b65c4:	b513      	push	{r0, r1, r4, lr}
   b65c6:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b65c8:	b159      	cbz	r1, b65e2 <_ZN6StringaSEPKc+0x1e>
   b65ca:	4608      	mov	r0, r1
   b65cc:	9101      	str	r1, [sp, #4]
   b65ce:	f001 ff33 	bl	b8438 <strlen>
   b65d2:	9901      	ldr	r1, [sp, #4]
   b65d4:	4602      	mov	r2, r0
   b65d6:	4620      	mov	r0, r4
   b65d8:	f7ff ff88 	bl	b64ec <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b65dc:	4620      	mov	r0, r4
   b65de:	b002      	add	sp, #8
   b65e0:	bd10      	pop	{r4, pc}
	else invalidate();
   b65e2:	f7ff ff58 	bl	b6496 <_ZN6String10invalidateEv>
   b65e6:	e7f9      	b.n	b65dc <_ZN6StringaSEPKc+0x18>

000b65e8 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b65e8:	b510      	push	{r4, lr}
   b65ea:	4604      	mov	r4, r0
   b65ec:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b65ee:	2300      	movs	r3, #0
	capacity = 0;
   b65f0:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b65f4:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b65f6:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b65f8:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b65fa:	a901      	add	r1, sp, #4
   b65fc:	f7ff ff2e 	bl	b645c <itoa>
	*this = buf;
   b6600:	a901      	add	r1, sp, #4
   b6602:	4620      	mov	r0, r4
   b6604:	f7ff ffde 	bl	b65c4 <_ZN6StringaSEPKc>
}
   b6608:	4620      	mov	r0, r4
   b660a:	b00a      	add	sp, #40	; 0x28
   b660c:	bd10      	pop	{r4, pc}

000b660e <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b660e:	b570      	push	{r4, r5, r6, lr}
   b6610:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b6612:	460e      	mov	r6, r1
   b6614:	b909      	cbnz	r1, b661a <_ZN6String6concatEPKcj+0xc>
   b6616:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b6618:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b661a:	b16a      	cbz	r2, b6638 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b661c:	6884      	ldr	r4, [r0, #8]
   b661e:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b6620:	4621      	mov	r1, r4
   b6622:	f7ff ff4f 	bl	b64c4 <_ZN6String7reserveEj>
   b6626:	2800      	cmp	r0, #0
   b6628:	d0f5      	beq.n	b6616 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b662a:	6828      	ldr	r0, [r5, #0]
   b662c:	68ab      	ldr	r3, [r5, #8]
   b662e:	4631      	mov	r1, r6
   b6630:	4418      	add	r0, r3
   b6632:	f001 fef9 	bl	b8428 <strcpy>
	len = newlen;
   b6636:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b6638:	2001      	movs	r0, #1
   b663a:	e7ed      	b.n	b6618 <_ZN6String6concatEPKcj+0xa>

000b663c <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b663c:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b663e:	2300      	movs	r3, #0
	buf[0] = c;
   b6640:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b6644:	2201      	movs	r2, #1
   b6646:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b6648:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b664c:	f7ff ffdf 	bl	b660e <_ZN6String6concatEPKcj>
}
   b6650:	b003      	add	sp, #12
   b6652:	f85d fb04 	ldr.w	pc, [sp], #4

000b6656 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b6656:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b6658:	688a      	ldr	r2, [r1, #8]
   b665a:	6809      	ldr	r1, [r1, #0]
{
   b665c:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b665e:	f7ff ffd6 	bl	b660e <_ZN6String6concatEPKcj>
   b6662:	b910      	cbnz	r0, b666a <_ZplRK15StringSumHelperRK6String+0x14>
   b6664:	4620      	mov	r0, r4
   b6666:	f7ff ff16 	bl	b6496 <_ZN6String10invalidateEv>
	return a;
}
   b666a:	4620      	mov	r0, r4
   b666c:	bd10      	pop	{r4, pc}

000b666e <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b666e:	b513      	push	{r0, r1, r4, lr}
   b6670:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b6672:	b929      	cbnz	r1, b6680 <_ZplRK15StringSumHelperPKc+0x12>
   b6674:	4620      	mov	r0, r4
   b6676:	f7ff ff0e 	bl	b6496 <_ZN6String10invalidateEv>
	return a;
}
   b667a:	4620      	mov	r0, r4
   b667c:	b002      	add	sp, #8
   b667e:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b6680:	4608      	mov	r0, r1
   b6682:	9101      	str	r1, [sp, #4]
   b6684:	f001 fed8 	bl	b8438 <strlen>
   b6688:	9901      	ldr	r1, [sp, #4]
   b668a:	4602      	mov	r2, r0
   b668c:	4620      	mov	r0, r4
   b668e:	f7ff ffbe 	bl	b660e <_ZN6String6concatEPKcj>
   b6692:	2800      	cmp	r0, #0
   b6694:	d0ee      	beq.n	b6674 <_ZplRK15StringSumHelperPKc+0x6>
   b6696:	e7f0      	b.n	b667a <_ZplRK15StringSumHelperPKc+0xc>

000b6698 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   b6698:	b40e      	push	{r1, r2, r3}
   b669a:	b570      	push	{r4, r5, r6, lr}
   b669c:	b087      	sub	sp, #28
   b669e:	ad0b      	add	r5, sp, #44	; 0x2c
   b66a0:	4604      	mov	r4, r0
   b66a2:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b66a6:	9201      	str	r2, [sp, #4]
   b66a8:	462b      	mov	r3, r5
   b66aa:	2105      	movs	r1, #5
   b66ac:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   b66ae:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b66b0:	f7ff fc82 	bl	b5fb8 <vsnprintf>
    va_end(marker);

    String result;
   b66b4:	490b      	ldr	r1, [pc, #44]	; (b66e4 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b66b6:	4606      	mov	r6, r0
    String result;
   b66b8:	4620      	mov	r0, r4
   b66ba:	f7ff ff30 	bl	b651e <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   b66be:	4631      	mov	r1, r6
   b66c0:	4620      	mov	r0, r4
   b66c2:	f7ff feff 	bl	b64c4 <_ZN6String7reserveEj>
    if (result.buffer) {
   b66c6:	6820      	ldr	r0, [r4, #0]
   b66c8:	b130      	cbz	r0, b66d8 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b66ca:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   b66cc:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b66ce:	462b      	mov	r3, r5
   b66d0:	1c71      	adds	r1, r6, #1
   b66d2:	f7ff fc71 	bl	b5fb8 <vsnprintf>
        va_end(marker);
        result.len = n;
   b66d6:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   b66d8:	4620      	mov	r0, r4
   b66da:	b007      	add	sp, #28
   b66dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b66e0:	b003      	add	sp, #12
   b66e2:	4770      	bx	lr
   b66e4:	000b8676 	.word	0x000b8676

000b66e8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b66e8:	4802      	ldr	r0, [pc, #8]	; (b66f4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b66ea:	2300      	movs	r3, #0
   b66ec:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b66ee:	f7ff ba0f 	b.w	b5b10 <os_mutex_recursive_create>
   b66f2:	bf00      	nop
   b66f4:	2003e6e0 	.word	0x2003e6e0

000b66f8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b66f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b66fa:	4606      	mov	r6, r0
   b66fc:	460d      	mov	r5, r1
  size_t n = 0;
   b66fe:	188f      	adds	r7, r1, r2
   b6700:	2400      	movs	r4, #0
  while (size--) {
   b6702:	42bd      	cmp	r5, r7
   b6704:	d00c      	beq.n	b6720 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b6706:	6833      	ldr	r3, [r6, #0]
   b6708:	f815 1b01 	ldrb.w	r1, [r5], #1
   b670c:	689b      	ldr	r3, [r3, #8]
   b670e:	4630      	mov	r0, r6
   b6710:	4798      	blx	r3
     if (chunk>=0)
   b6712:	1e03      	subs	r3, r0, #0
   b6714:	db01      	blt.n	b671a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b6716:	441c      	add	r4, r3
  while (size--) {
   b6718:	e7f3      	b.n	b6702 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b671a:	2c00      	cmp	r4, #0
   b671c:	bf08      	it	eq
   b671e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6720:	4620      	mov	r0, r4
   b6722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6724 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b6724:	b513      	push	{r0, r1, r4, lr}
   b6726:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b6728:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b672a:	b159      	cbz	r1, b6744 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b672c:	9101      	str	r1, [sp, #4]
   b672e:	f001 fe83 	bl	b8438 <strlen>
   b6732:	6823      	ldr	r3, [r4, #0]
   b6734:	9901      	ldr	r1, [sp, #4]
   b6736:	68db      	ldr	r3, [r3, #12]
   b6738:	4602      	mov	r2, r0
   b673a:	4620      	mov	r0, r4
    }
   b673c:	b002      	add	sp, #8
   b673e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b6742:	4718      	bx	r3
    }
   b6744:	b002      	add	sp, #8
   b6746:	bd10      	pop	{r4, pc}

000b6748 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b6748:	b508      	push	{r3, lr}
  return write(str);
   b674a:	f7ff ffeb 	bl	b6724 <_ZN5Print5writeEPKc>
}
   b674e:	bd08      	pop	{r3, pc}

000b6750 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b6750:	6803      	ldr	r3, [r0, #0]
   b6752:	689b      	ldr	r3, [r3, #8]
   b6754:	4718      	bx	r3

000b6756 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b6756:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b6758:	210d      	movs	r1, #13
{
   b675a:	4605      	mov	r5, r0
  size_t n = print('\r');
   b675c:	f7ff fff8 	bl	b6750 <_ZN5Print5printEc>
  n += print('\n');
   b6760:	210a      	movs	r1, #10
  size_t n = print('\r');
   b6762:	4604      	mov	r4, r0
  n += print('\n');
   b6764:	4628      	mov	r0, r5
   b6766:	f7ff fff3 	bl	b6750 <_ZN5Print5printEc>
  return n;
}
   b676a:	4420      	add	r0, r4
   b676c:	bd38      	pop	{r3, r4, r5, pc}

000b676e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b676e:	b538      	push	{r3, r4, r5, lr}
   b6770:	4605      	mov	r5, r0
  return write(str);
   b6772:	f7ff ffd7 	bl	b6724 <_ZN5Print5writeEPKc>
   b6776:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b6778:	4628      	mov	r0, r5
   b677a:	f7ff ffec 	bl	b6756 <_ZN5Print7printlnEv>
  return n;
}
   b677e:	4420      	add	r0, r4
   b6780:	bd38      	pop	{r3, r4, r5, pc}

000b6782 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b6782:	b530      	push	{r4, r5, lr}
   b6784:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b6786:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b6788:	2a01      	cmp	r2, #1
  *str = '\0';
   b678a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b678e:	bf98      	it	ls
   b6790:	220a      	movls	r2, #10
   b6792:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b6794:	460d      	mov	r5, r1
   b6796:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b679a:	fb01 5312 	mls	r3, r1, r2, r5
   b679e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b67a2:	2b09      	cmp	r3, #9
   b67a4:	bf94      	ite	ls
   b67a6:	3330      	addls	r3, #48	; 0x30
   b67a8:	3337      	addhi	r3, #55	; 0x37
   b67aa:	b2db      	uxtb	r3, r3
  } while(n);
   b67ac:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b67ae:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b67b2:	d9ef      	bls.n	b6794 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b67b4:	4621      	mov	r1, r4
   b67b6:	f7ff ffb5 	bl	b6724 <_ZN5Print5writeEPKc>
}
   b67ba:	b00b      	add	sp, #44	; 0x2c
   b67bc:	bd30      	pop	{r4, r5, pc}

000b67be <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b67be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b67c2:	b086      	sub	sp, #24
   b67c4:	af00      	add	r7, sp, #0
   b67c6:	4605      	mov	r5, r0
   b67c8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b67ca:	1d38      	adds	r0, r7, #4
   b67cc:	2114      	movs	r1, #20
{
   b67ce:	4614      	mov	r4, r2
    va_copy(args2, args);
   b67d0:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b67d2:	f7ff fbf1 	bl	b5fb8 <vsnprintf>

    if (n<bufsize)
   b67d6:	2813      	cmp	r0, #19
   b67d8:	d80e      	bhi.n	b67f8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b67da:	1d39      	adds	r1, r7, #4
   b67dc:	4628      	mov	r0, r5
   b67de:	f7ff ffa1 	bl	b6724 <_ZN5Print5writeEPKc>
   b67e2:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b67e4:	b11e      	cbz	r6, b67ee <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b67e6:	4628      	mov	r0, r5
   b67e8:	f7ff ffb5 	bl	b6756 <_ZN5Print7printlnEv>
   b67ec:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b67ee:	4620      	mov	r0, r4
   b67f0:	3718      	adds	r7, #24
   b67f2:	46bd      	mov	sp, r7
   b67f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b67f8:	f100 0308 	add.w	r3, r0, #8
   b67fc:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b6800:	46e8      	mov	r8, sp
        char bigger[n+1];
   b6802:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b6806:	4622      	mov	r2, r4
   b6808:	1c41      	adds	r1, r0, #1
   b680a:	683b      	ldr	r3, [r7, #0]
   b680c:	4668      	mov	r0, sp
   b680e:	f7ff fbd3 	bl	b5fb8 <vsnprintf>
  return write(str);
   b6812:	4669      	mov	r1, sp
   b6814:	4628      	mov	r0, r5
   b6816:	f7ff ff85 	bl	b6724 <_ZN5Print5writeEPKc>
   b681a:	4604      	mov	r4, r0
   b681c:	46c5      	mov	sp, r8
   b681e:	e7e1      	b.n	b67e4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b6820 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b6820:	b510      	push	{r4, lr}
   b6822:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b6824:	f7ff f96c 	bl	b5b00 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b6828:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b682a:	6823      	ldr	r3, [r4, #0]
   b682c:	4620      	mov	r0, r4
   b682e:	695b      	ldr	r3, [r3, #20]
   b6830:	4798      	blx	r3
    if (c >= 0) return c;
   b6832:	2800      	cmp	r0, #0
   b6834:	da08      	bge.n	b6848 <_ZN6Stream9timedReadEv+0x28>
   b6836:	f7ff f963 	bl	b5b00 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b683a:	68e3      	ldr	r3, [r4, #12]
   b683c:	1ac0      	subs	r0, r0, r3
   b683e:	68a3      	ldr	r3, [r4, #8]
   b6840:	4298      	cmp	r0, r3
   b6842:	d3f2      	bcc.n	b682a <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b6844:	f04f 30ff 	mov.w	r0, #4294967295
}
   b6848:	bd10      	pop	{r4, pc}
	...

000b684c <_ZN6Stream10readStringEv>:
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
   b684c:	b538      	push	{r3, r4, r5, lr}
   b684e:	460d      	mov	r5, r1
  String ret;
   b6850:	4907      	ldr	r1, [pc, #28]	; (b6870 <_ZN6Stream10readStringEv+0x24>)
{
   b6852:	4604      	mov	r4, r0
  String ret;
   b6854:	f7ff fe63 	bl	b651e <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   b6858:	4628      	mov	r0, r5
   b685a:	f7ff ffe1 	bl	b6820 <_ZN6Stream9timedReadEv>
  while (c >= 0)
   b685e:	2800      	cmp	r0, #0
   b6860:	db04      	blt.n	b686c <_ZN6Stream10readStringEv+0x20>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   b6862:	b2c1      	uxtb	r1, r0
   b6864:	4620      	mov	r0, r4
   b6866:	f7ff fee9 	bl	b663c <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   b686a:	e7f5      	b.n	b6858 <_ZN6Stream10readStringEv+0xc>
  }
  return ret;
}
   b686c:	4620      	mov	r0, r4
   b686e:	bd38      	pop	{r3, r4, r5, pc}
   b6870:	000b8676 	.word	0x000b8676

000b6874 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b6874:	4b01      	ldr	r3, [pc, #4]	; (b687c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b6876:	4a02      	ldr	r2, [pc, #8]	; (b6880 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b6878:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b687a:	4770      	bx	lr
   b687c:	2003e6e4 	.word	0x2003e6e4
   b6880:	000b8d30 	.word	0x000b8d30

000b6884 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b6884:	4b02      	ldr	r3, [pc, #8]	; (b6890 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b6886:	681a      	ldr	r2, [r3, #0]
   b6888:	4b02      	ldr	r3, [pc, #8]	; (b6894 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b688a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b688c:	4770      	bx	lr
   b688e:	bf00      	nop
   b6890:	2003e4f0 	.word	0x2003e4f0
   b6894:	2003e6e8 	.word	0x2003e6e8

000b6898 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   b6898:	428a      	cmp	r2, r1
{
   b689a:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   b689c:	d007      	beq.n	b68ae <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   b689e:	1a44      	subs	r4, r0, r1
   b68a0:	9802      	ldr	r0, [sp, #8]
   b68a2:	1ac0      	subs	r0, r0, r3
   b68a4:	4344      	muls	r4, r0
   b68a6:	1a50      	subs	r0, r2, r1
   b68a8:	fb94 f0f0 	sdiv	r0, r4, r0
   b68ac:	4418      	add	r0, r3
}
   b68ae:	bd10      	pop	{r4, pc}

000b68b0 <_Z3mapddddd>:

double map(double value, double fromStart, double fromEnd, double toStart, double toEnd)
{
   b68b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b68b4:	ec55 4b11 	vmov	r4, r5, d1
   b68b8:	ec57 6b12 	vmov	r6, r7, d2
   b68bc:	b085      	sub	sp, #20
    if (fromEnd == fromStart) {
   b68be:	ee11 2a10 	vmov	r2, s2
   b68c2:	ee12 0a10 	vmov	r0, s4
   b68c6:	462b      	mov	r3, r5
   b68c8:	4639      	mov	r1, r7
{
   b68ca:	ed8d 0b02 	vstr	d0, [sp, #8]
   b68ce:	ed8d 4b00 	vstr	d4, [sp]
   b68d2:	ec5b ab13 	vmov	sl, fp, d3
    if (fromEnd == fromStart) {
   b68d6:	f001 fcd1 	bl	b827c <__aeabi_dcmpeq>
   b68da:	ed9d 0b02 	vldr	d0, [sp, #8]
   b68de:	bb38      	cbnz	r0, b6930 <_Z3mapddddd+0x80>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   b68e0:	ec51 0b10 	vmov	r0, r1, d0
   b68e4:	4622      	mov	r2, r4
   b68e6:	462b      	mov	r3, r5
   b68e8:	f001 f8a8 	bl	b7a3c <__aeabi_dsub>
   b68ec:	4652      	mov	r2, sl
   b68ee:	4680      	mov	r8, r0
   b68f0:	4689      	mov	r9, r1
   b68f2:	465b      	mov	r3, fp
   b68f4:	e9dd 0100 	ldrd	r0, r1, [sp]
   b68f8:	f001 f8a0 	bl	b7a3c <__aeabi_dsub>
   b68fc:	4602      	mov	r2, r0
   b68fe:	460b      	mov	r3, r1
   b6900:	4640      	mov	r0, r8
   b6902:	4649      	mov	r1, r9
   b6904:	f001 fa52 	bl	b7dac <__aeabi_dmul>
   b6908:	4622      	mov	r2, r4
   b690a:	4680      	mov	r8, r0
   b690c:	4689      	mov	r9, r1
   b690e:	462b      	mov	r3, r5
   b6910:	4630      	mov	r0, r6
   b6912:	4639      	mov	r1, r7
   b6914:	f001 f892 	bl	b7a3c <__aeabi_dsub>
   b6918:	4602      	mov	r2, r0
   b691a:	460b      	mov	r3, r1
   b691c:	4640      	mov	r0, r8
   b691e:	4649      	mov	r1, r9
   b6920:	f001 fb6e 	bl	b8000 <__aeabi_ddiv>
   b6924:	4652      	mov	r2, sl
   b6926:	465b      	mov	r3, fp
   b6928:	f001 f88a 	bl	b7a40 <__adddf3>
   b692c:	ec41 0b10 	vmov	d0, r0, r1
}
   b6930:	b005      	add	sp, #20
   b6932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b6936 <delay>:

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b6936:	2100      	movs	r1, #0
   b6938:	f7ff ba92 	b.w	b5e60 <system_delay_ms>

000b693c <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b693c:	4b01      	ldr	r3, [pc, #4]	; (b6944 <_GLOBAL__sub_I_RGB+0x8>)
   b693e:	2200      	movs	r2, #0
   b6940:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b6942:	4770      	bx	lr
   b6944:	2003e6ec 	.word	0x2003e6ec

000b6948 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b6948:	4b01      	ldr	r3, [pc, #4]	; (b6950 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b694a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b694c:	4770      	bx	lr
   b694e:	bf00      	nop
   b6950:	2003e4f4 	.word	0x2003e4f4

000b6954 <serialEventRun>:
{
   b6954:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b6956:	4b0b      	ldr	r3, [pc, #44]	; (b6984 <serialEventRun+0x30>)
   b6958:	b143      	cbz	r3, b696c <serialEventRun+0x18>
   b695a:	f000 f97d 	bl	b6c58 <_Z16_fetch_usbserialv>
   b695e:	6803      	ldr	r3, [r0, #0]
   b6960:	691b      	ldr	r3, [r3, #16]
   b6962:	4798      	blx	r3
   b6964:	2800      	cmp	r0, #0
   b6966:	dd01      	ble.n	b696c <serialEventRun+0x18>
        serialEvent();
   b6968:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b696c:	4b06      	ldr	r3, [pc, #24]	; (b6988 <serialEventRun+0x34>)
   b696e:	b143      	cbz	r3, b6982 <serialEventRun+0x2e>
   b6970:	f000 fee8 	bl	b7744 <_Z22__fetch_global_Serial1v>
   b6974:	6803      	ldr	r3, [r0, #0]
   b6976:	691b      	ldr	r3, [r3, #16]
   b6978:	4798      	blx	r3
   b697a:	2800      	cmp	r0, #0
   b697c:	dd01      	ble.n	b6982 <serialEventRun+0x2e>
        serialEvent1();
   b697e:	f3af 8000 	nop.w
}
   b6982:	bd08      	pop	{r3, pc}
	...

000b698c <_post_loop>:
{
   b698c:	b508      	push	{r3, lr}
	serialEventRun();
   b698e:	f7ff ffe1 	bl	b6954 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b6992:	f7ff f8b5 	bl	b5b00 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b6996:	4b01      	ldr	r3, [pc, #4]	; (b699c <_post_loop+0x10>)
   b6998:	6018      	str	r0, [r3, #0]
}
   b699a:	bd08      	pop	{r3, pc}
   b699c:	2003e744 	.word	0x2003e744

000b69a0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b69a0:	4805      	ldr	r0, [pc, #20]	; (b69b8 <_Z33system_initialize_user_backup_ramv+0x18>)
   b69a2:	4a06      	ldr	r2, [pc, #24]	; (b69bc <_Z33system_initialize_user_backup_ramv+0x1c>)
   b69a4:	4906      	ldr	r1, [pc, #24]	; (b69c0 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b69a6:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b69a8:	1a12      	subs	r2, r2, r0
   b69aa:	f001 fcef 	bl	b838c <memcpy>
    __backup_sram_signature = signature;
   b69ae:	4b05      	ldr	r3, [pc, #20]	; (b69c4 <_Z33system_initialize_user_backup_ramv+0x24>)
   b69b0:	4a05      	ldr	r2, [pc, #20]	; (b69c8 <_Z33system_initialize_user_backup_ramv+0x28>)
   b69b2:	601a      	str	r2, [r3, #0]
}
   b69b4:	bd08      	pop	{r3, pc}
   b69b6:	bf00      	nop
   b69b8:	2003f400 	.word	0x2003f400
   b69bc:	2003f404 	.word	0x2003f404
   b69c0:	000b90c4 	.word	0x000b90c4
   b69c4:	2003f400 	.word	0x2003f400
   b69c8:	9a271c1e 	.word	0x9a271c1e

000b69cc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b69cc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b69ce:	2300      	movs	r3, #0
   b69d0:	9300      	str	r3, [sp, #0]
   b69d2:	461a      	mov	r2, r3
   b69d4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b69d8:	f7ff fa54 	bl	b5e84 <system_ctrl_set_result>
}
   b69dc:	b003      	add	sp, #12
   b69de:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b69e4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b69e4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b69e6:	8843      	ldrh	r3, [r0, #2]
   b69e8:	2b0a      	cmp	r3, #10
   b69ea:	d008      	beq.n	b69fe <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b69ec:	2b50      	cmp	r3, #80	; 0x50
   b69ee:	d10b      	bne.n	b6a08 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b69f0:	4b09      	ldr	r3, [pc, #36]	; (b6a18 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b69f2:	681b      	ldr	r3, [r3, #0]
   b69f4:	b14b      	cbz	r3, b6a0a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b69f6:	b003      	add	sp, #12
   b69f8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b69fc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b69fe:	f7ff ffe5 	bl	b69cc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b6a02:	b003      	add	sp, #12
   b6a04:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6a08:	2300      	movs	r3, #0
   b6a0a:	9300      	str	r3, [sp, #0]
   b6a0c:	461a      	mov	r2, r3
   b6a0e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6a12:	f7ff fa37 	bl	b5e84 <system_ctrl_set_result>
}
   b6a16:	e7f4      	b.n	b6a02 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b6a18:	2003e700 	.word	0x2003e700

000b6a1c <module_user_init_hook>:
{
   b6a1c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b6a1e:	4812      	ldr	r0, [pc, #72]	; (b6a68 <module_user_init_hook+0x4c>)
   b6a20:	2100      	movs	r1, #0
   b6a22:	f7ff fae1 	bl	b5fe8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b6a26:	4b11      	ldr	r3, [pc, #68]	; (b6a6c <module_user_init_hook+0x50>)
   b6a28:	681a      	ldr	r2, [r3, #0]
   b6a2a:	4b11      	ldr	r3, [pc, #68]	; (b6a70 <module_user_init_hook+0x54>)
   b6a2c:	429a      	cmp	r2, r3
   b6a2e:	4b11      	ldr	r3, [pc, #68]	; (b6a74 <module_user_init_hook+0x58>)
   b6a30:	bf0c      	ite	eq
   b6a32:	2201      	moveq	r2, #1
   b6a34:	2200      	movne	r2, #0
   b6a36:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b6a38:	d001      	beq.n	b6a3e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b6a3a:	f7ff ffb1 	bl	b69a0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b6a3e:	f7ff f84f 	bl	b5ae0 <HAL_RNG_GetRandomNumber>
   b6a42:	4604      	mov	r4, r0
    srand(seed);
   b6a44:	f001 fcb8 	bl	b83b8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b6a48:	4b0b      	ldr	r3, [pc, #44]	; (b6a78 <module_user_init_hook+0x5c>)
   b6a4a:	b113      	cbz	r3, b6a52 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b6a4c:	4620      	mov	r0, r4
   b6a4e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b6a52:	2100      	movs	r1, #0
   b6a54:	4808      	ldr	r0, [pc, #32]	; (b6a78 <module_user_init_hook+0x5c>)
   b6a56:	f7ff fa8f 	bl	b5f78 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b6a5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b6a5e:	4807      	ldr	r0, [pc, #28]	; (b6a7c <module_user_init_hook+0x60>)
   b6a60:	2100      	movs	r1, #0
   b6a62:	f7ff ba05 	b.w	b5e70 <system_ctrl_set_app_request_handler>
   b6a66:	bf00      	nop
   b6a68:	000b6949 	.word	0x000b6949
   b6a6c:	2003f400 	.word	0x2003f400
   b6a70:	9a271c1e 	.word	0x9a271c1e
   b6a74:	2003e6fc 	.word	0x2003e6fc
   b6a78:	00000000 	.word	0x00000000
   b6a7c:	000b69e5 	.word	0x000b69e5

000b6a80 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6a80:	4770      	bx	lr

000b6a82 <_ZN9IPAddressD0Ev>:
   b6a82:	b510      	push	{r4, lr}
   b6a84:	2118      	movs	r1, #24
   b6a86:	4604      	mov	r4, r0
   b6a88:	f7fd fb09 	bl	b409e <_ZdlPvj>
   b6a8c:	4620      	mov	r0, r4
   b6a8e:	bd10      	pop	{r4, pc}

000b6a90 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b6a90:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b6a92:	7d03      	ldrb	r3, [r0, #20]
   b6a94:	2b06      	cmp	r3, #6
{
   b6a96:	b08d      	sub	sp, #52	; 0x34
   b6a98:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6a9a:	f100 0704 	add.w	r7, r0, #4
   b6a9e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b6aa2:	d012      	beq.n	b6aca <_ZNK9IPAddress7printToER5Print+0x3a>
   b6aa4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b6aa8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b6aac:	220a      	movs	r2, #10
   b6aae:	4630      	mov	r0, r6
   b6ab0:	f7ff fe67 	bl	b6782 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b6ab4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b6ab6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b6ab8:	d019      	beq.n	b6aee <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b6aba:	2c00      	cmp	r4, #0
   b6abc:	d0f4      	beq.n	b6aa8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b6abe:	212e      	movs	r1, #46	; 0x2e
   b6ac0:	4630      	mov	r0, r6
   b6ac2:	f7ff fe45 	bl	b6750 <_ZN5Print5printEc>
   b6ac6:	4404      	add	r4, r0
   b6ac8:	e7ee      	b.n	b6aa8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6aca:	232f      	movs	r3, #47	; 0x2f
   b6acc:	466a      	mov	r2, sp
   b6ace:	4639      	mov	r1, r7
   b6ad0:	200a      	movs	r0, #10
		buf[0] = 0;
   b6ad2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6ad6:	f7ff f823 	bl	b5b20 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b6ada:	4668      	mov	r0, sp
   b6adc:	f001 fcac 	bl	b8438 <strlen>
   b6ae0:	6833      	ldr	r3, [r6, #0]
   b6ae2:	4602      	mov	r2, r0
   b6ae4:	68db      	ldr	r3, [r3, #12]
   b6ae6:	4669      	mov	r1, sp
   b6ae8:	4630      	mov	r0, r6
   b6aea:	4798      	blx	r3
   b6aec:	4604      	mov	r4, r0
    }
    return n;
}
   b6aee:	4620      	mov	r0, r4
   b6af0:	b00d      	add	sp, #52	; 0x34
   b6af2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6af4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6af4:	b510      	push	{r4, lr}
   b6af6:	4b05      	ldr	r3, [pc, #20]	; (b6b0c <_ZN9IPAddressC1Ev+0x18>)
   b6af8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b6afa:	2211      	movs	r2, #17
   b6afc:	f840 3b04 	str.w	r3, [r0], #4
   b6b00:	2100      	movs	r1, #0
   b6b02:	f001 fc51 	bl	b83a8 <memset>
}
   b6b06:	4620      	mov	r0, r4
   b6b08:	bd10      	pop	{r4, pc}
   b6b0a:	bf00      	nop
   b6b0c:	000b8d58 	.word	0x000b8d58

000b6b10 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6b10:	4603      	mov	r3, r0
   b6b12:	4a07      	ldr	r2, [pc, #28]	; (b6b30 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6b14:	b510      	push	{r4, lr}
   b6b16:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b6b1a:	f101 0210 	add.w	r2, r1, #16
   b6b1e:	f851 4b04 	ldr.w	r4, [r1], #4
   b6b22:	f843 4b04 	str.w	r4, [r3], #4
   b6b26:	4291      	cmp	r1, r2
   b6b28:	d1f9      	bne.n	b6b1e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b6b2a:	780a      	ldrb	r2, [r1, #0]
   b6b2c:	701a      	strb	r2, [r3, #0]
}
   b6b2e:	bd10      	pop	{r4, pc}
   b6b30:	000b8d58 	.word	0x000b8d58

000b6b34 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b6b34:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b6b36:	2b04      	cmp	r3, #4
   b6b38:	d104      	bne.n	b6b44 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b6b3a:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6b3c:	3800      	subs	r0, #0
   b6b3e:	bf18      	it	ne
   b6b40:	2001      	movne	r0, #1
   b6b42:	4770      	bx	lr
    } else if (version() == 6) {
   b6b44:	2b06      	cmp	r3, #6
   b6b46:	d107      	bne.n	b6b58 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6b48:	6843      	ldr	r3, [r0, #4]
   b6b4a:	b93b      	cbnz	r3, b6b5c <_ZNK9IPAddresscvbEv+0x28>
   b6b4c:	6883      	ldr	r3, [r0, #8]
   b6b4e:	b92b      	cbnz	r3, b6b5c <_ZNK9IPAddresscvbEv+0x28>
   b6b50:	68c3      	ldr	r3, [r0, #12]
   b6b52:	b91b      	cbnz	r3, b6b5c <_ZNK9IPAddresscvbEv+0x28>
   b6b54:	6900      	ldr	r0, [r0, #16]
   b6b56:	e7f1      	b.n	b6b3c <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b6b58:	2000      	movs	r0, #0
   b6b5a:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6b5c:	2001      	movs	r0, #1
}
   b6b5e:	4770      	bx	lr

000b6b60 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b6b60:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b6b62:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b6b66:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b6b6a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b6b6e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b6b72:	2304      	movs	r3, #4
   b6b74:	6041      	str	r1, [r0, #4]
   b6b76:	7503      	strb	r3, [r0, #20]
}
   b6b78:	bd10      	pop	{r4, pc}
	...

000b6b7c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b6b7c:	b507      	push	{r0, r1, r2, lr}
   b6b7e:	4b06      	ldr	r3, [pc, #24]	; (b6b98 <_ZN9IPAddressC1EPKh+0x1c>)
   b6b80:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b6b82:	78cb      	ldrb	r3, [r1, #3]
   b6b84:	9300      	str	r3, [sp, #0]
   b6b86:	788b      	ldrb	r3, [r1, #2]
   b6b88:	784a      	ldrb	r2, [r1, #1]
   b6b8a:	7809      	ldrb	r1, [r1, #0]
   b6b8c:	f7ff ffe8 	bl	b6b60 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b6b90:	b003      	add	sp, #12
   b6b92:	f85d fb04 	ldr.w	pc, [sp], #4
   b6b96:	bf00      	nop
   b6b98:	000b8d58 	.word	0x000b8d58

000b6b9c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6b9c:	7441      	strb	r1, [r0, #17]
}
   b6b9e:	4770      	bx	lr

000b6ba0 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6ba0:	4770      	bx	lr

000b6ba2 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b6ba2:	4770      	bx	lr

000b6ba4 <_ZN9USBSerial4readEv>:
{
   b6ba4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b6ba6:	2100      	movs	r1, #0
   b6ba8:	7c00      	ldrb	r0, [r0, #16]
   b6baa:	f7ff f929 	bl	b5e00 <HAL_USB_USART_Receive_Data>
}
   b6bae:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6bb2:	bd08      	pop	{r3, pc}

000b6bb4 <_ZN9USBSerial4peekEv>:
{
   b6bb4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b6bb6:	2101      	movs	r1, #1
   b6bb8:	7c00      	ldrb	r0, [r0, #16]
   b6bba:	f7ff f921 	bl	b5e00 <HAL_USB_USART_Receive_Data>
}
   b6bbe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6bc2:	bd08      	pop	{r3, pc}

000b6bc4 <_ZN9USBSerial17availableForWriteEv>:
{
   b6bc4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b6bc6:	7c00      	ldrb	r0, [r0, #16]
   b6bc8:	f7ff f912 	bl	b5df0 <HAL_USB_USART_Available_Data_For_Write>
}
   b6bcc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6bd0:	bd08      	pop	{r3, pc}

000b6bd2 <_ZN9USBSerial9availableEv>:
{
   b6bd2:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b6bd4:	7c00      	ldrb	r0, [r0, #16]
   b6bd6:	f7ff f903 	bl	b5de0 <HAL_USB_USART_Available_Data>
}
   b6bda:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6bde:	bd08      	pop	{r3, pc}

000b6be0 <_ZN9USBSerial5writeEh>:
{
   b6be0:	b513      	push	{r0, r1, r4, lr}
   b6be2:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6be4:	7c00      	ldrb	r0, [r0, #16]
{
   b6be6:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6be8:	f7ff f902 	bl	b5df0 <HAL_USB_USART_Available_Data_For_Write>
   b6bec:	2800      	cmp	r0, #0
   b6bee:	9901      	ldr	r1, [sp, #4]
   b6bf0:	dc01      	bgt.n	b6bf6 <_ZN9USBSerial5writeEh+0x16>
   b6bf2:	7c60      	ldrb	r0, [r4, #17]
   b6bf4:	b120      	cbz	r0, b6c00 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b6bf6:	7c20      	ldrb	r0, [r4, #16]
   b6bf8:	f7ff f90a 	bl	b5e10 <HAL_USB_USART_Send_Data>
   b6bfc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b6c00:	b002      	add	sp, #8
   b6c02:	bd10      	pop	{r4, pc}

000b6c04 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b6c04:	7c00      	ldrb	r0, [r0, #16]
   b6c06:	f7ff b90b 	b.w	b5e20 <HAL_USB_USART_Flush_Data>

000b6c0a <_ZN9USBSerialD0Ev>:
   b6c0a:	b510      	push	{r4, lr}
   b6c0c:	2114      	movs	r1, #20
   b6c0e:	4604      	mov	r4, r0
   b6c10:	f7fd fa45 	bl	b409e <_ZdlPvj>
   b6c14:	4620      	mov	r0, r4
   b6c16:	bd10      	pop	{r4, pc}

000b6c18 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b6c18:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6c1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6c1e:	4604      	mov	r4, r0
   b6c20:	4608      	mov	r0, r1
   b6c22:	2100      	movs	r1, #0
   b6c24:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6c28:	4b04      	ldr	r3, [pc, #16]	; (b6c3c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b6c2a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6c2c:	2301      	movs	r3, #1
  _serial = serial;
   b6c2e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6c30:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b6c32:	4611      	mov	r1, r2
   b6c34:	f7ff f8c4 	bl	b5dc0 <HAL_USB_USART_Init>
}
   b6c38:	4620      	mov	r0, r4
   b6c3a:	bd10      	pop	{r4, pc}
   b6c3c:	000b8d6c 	.word	0x000b8d6c

000b6c40 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b6c40:	7c00      	ldrb	r0, [r0, #16]
   b6c42:	2200      	movs	r2, #0
   b6c44:	f7ff b8c4 	b.w	b5dd0 <HAL_USB_USART_Begin>

000b6c48 <_Z19acquireSerialBufferv>:
{
   b6c48:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b6c4a:	2214      	movs	r2, #20
{
   b6c4c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b6c4e:	2100      	movs	r1, #0
   b6c50:	f001 fbaa 	bl	b83a8 <memset>
}
   b6c54:	4620      	mov	r0, r4
   b6c56:	bd10      	pop	{r4, pc}

000b6c58 <_Z16_fetch_usbserialv>:
{
   b6c58:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6c5a:	4c0f      	ldr	r4, [pc, #60]	; (b6c98 <_Z16_fetch_usbserialv+0x40>)
{
   b6c5c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b6c5e:	a803      	add	r0, sp, #12
   b6c60:	f7ff fff2 	bl	b6c48 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6c64:	7821      	ldrb	r1, [r4, #0]
   b6c66:	f3bf 8f5b 	dmb	ish
   b6c6a:	f011 0101 	ands.w	r1, r1, #1
   b6c6e:	d10f      	bne.n	b6c90 <_Z16_fetch_usbserialv+0x38>
   b6c70:	4620      	mov	r0, r4
   b6c72:	9101      	str	r1, [sp, #4]
   b6c74:	f7fd fa22 	bl	b40bc <__cxa_guard_acquire>
   b6c78:	9901      	ldr	r1, [sp, #4]
   b6c7a:	b148      	cbz	r0, b6c90 <_Z16_fetch_usbserialv+0x38>
   b6c7c:	aa03      	add	r2, sp, #12
   b6c7e:	4807      	ldr	r0, [pc, #28]	; (b6c9c <_Z16_fetch_usbserialv+0x44>)
   b6c80:	f7ff ffca 	bl	b6c18 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b6c84:	4620      	mov	r0, r4
   b6c86:	f7fd fa1e 	bl	b40c6 <__cxa_guard_release>
   b6c8a:	4805      	ldr	r0, [pc, #20]	; (b6ca0 <_Z16_fetch_usbserialv+0x48>)
   b6c8c:	f001 fb78 	bl	b8380 <atexit>
	return _usbserial;
}
   b6c90:	4802      	ldr	r0, [pc, #8]	; (b6c9c <_Z16_fetch_usbserialv+0x44>)
   b6c92:	b008      	add	sp, #32
   b6c94:	bd10      	pop	{r4, pc}
   b6c96:	bf00      	nop
   b6c98:	2003e704 	.word	0x2003e704
   b6c9c:	2003e708 	.word	0x2003e708
   b6ca0:	000b6ba1 	.word	0x000b6ba1

000b6ca4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b6ca4:	4770      	bx	lr

000b6ca6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6ca6:	7441      	strb	r1, [r0, #17]
}
   b6ca8:	4770      	bx	lr

000b6caa <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b6caa:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b6cac:	7c00      	ldrb	r0, [r0, #16]
   b6cae:	f7fe ff7f 	bl	b5bb0 <hal_usart_available_data_for_write>
}
   b6cb2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6cb6:	bd08      	pop	{r3, pc}

000b6cb8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b6cb8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b6cba:	7c00      	ldrb	r0, [r0, #16]
   b6cbc:	f7fe ff50 	bl	b5b60 <hal_usart_available>
}
   b6cc0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6cc4:	bd08      	pop	{r3, pc}

000b6cc6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b6cc6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6cc8:	7c00      	ldrb	r0, [r0, #16]
   b6cca:	f7fe ff59 	bl	b5b80 <hal_usart_peek>
}
   b6cce:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6cd2:	bd08      	pop	{r3, pc}

000b6cd4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6cd4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b6cd6:	7c00      	ldrb	r0, [r0, #16]
   b6cd8:	f7fe ff4a 	bl	b5b70 <hal_usart_read>
}
   b6cdc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6ce0:	bd08      	pop	{r3, pc}

000b6ce2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b6ce2:	7c00      	ldrb	r0, [r0, #16]
   b6ce4:	f7fe bf54 	b.w	b5b90 <hal_usart_flush>

000b6ce8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6ce8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6cea:	7c45      	ldrb	r5, [r0, #17]
{
   b6cec:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6cee:	b12d      	cbz	r5, b6cfc <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6cf0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b6cf2:	b003      	add	sp, #12
   b6cf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6cf8:	f7fe bf2a 	b.w	b5b50 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6cfc:	7c00      	ldrb	r0, [r0, #16]
   b6cfe:	9101      	str	r1, [sp, #4]
   b6d00:	f7fe ff56 	bl	b5bb0 <hal_usart_available_data_for_write>
   b6d04:	2800      	cmp	r0, #0
   b6d06:	9901      	ldr	r1, [sp, #4]
   b6d08:	dcf2      	bgt.n	b6cf0 <_ZN11USARTSerial5writeEh+0x8>
}
   b6d0a:	4628      	mov	r0, r5
   b6d0c:	b003      	add	sp, #12
   b6d0e:	bd30      	pop	{r4, r5, pc}

000b6d10 <_ZN11USARTSerialD0Ev>:
   b6d10:	b510      	push	{r4, lr}
   b6d12:	2114      	movs	r1, #20
   b6d14:	4604      	mov	r4, r0
   b6d16:	f7fd f9c2 	bl	b409e <_ZdlPvj>
   b6d1a:	4620      	mov	r0, r4
   b6d1c:	bd10      	pop	{r4, pc}
	...

000b6d20 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b6d20:	b510      	push	{r4, lr}
   b6d22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6d26:	4604      	mov	r4, r0
   b6d28:	4608      	mov	r0, r1
   b6d2a:	4611      	mov	r1, r2
   b6d2c:	2200      	movs	r2, #0
   b6d2e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6d32:	4b04      	ldr	r3, [pc, #16]	; (b6d44 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b6d34:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6d36:	2301      	movs	r3, #1
  _serial = serial;
   b6d38:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6d3a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b6d3c:	f7fe ff40 	bl	b5bc0 <hal_usart_init_ex>
}
   b6d40:	4620      	mov	r0, r4
   b6d42:	bd10      	pop	{r4, pc}
   b6d44:	000b8d9c 	.word	0x000b8d9c

000b6d48 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b6d48:	4770      	bx	lr

000b6d4a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b6d4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6d4c:	4606      	mov	r6, r0
   b6d4e:	4615      	mov	r5, r2
   b6d50:	460c      	mov	r4, r1
   b6d52:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6d54:	42bc      	cmp	r4, r7
   b6d56:	d006      	beq.n	b6d66 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6d58:	6833      	ldr	r3, [r6, #0]
   b6d5a:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6d5e:	689b      	ldr	r3, [r3, #8]
   b6d60:	4630      	mov	r0, r6
   b6d62:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6d64:	e7f6      	b.n	b6d54 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b6d66:	4628      	mov	r0, r5
   b6d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6d6a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b6d6a:	7c00      	ldrb	r0, [r0, #16]
   b6d6c:	2200      	movs	r2, #0
   b6d6e:	f7fe bf47 	b.w	b5c00 <hal_i2c_write>

000b6d72 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b6d72:	7c00      	ldrb	r0, [r0, #16]
   b6d74:	2100      	movs	r1, #0
   b6d76:	f7fe bf4b 	b.w	b5c10 <hal_i2c_available>

000b6d7a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b6d7a:	7c00      	ldrb	r0, [r0, #16]
   b6d7c:	2100      	movs	r1, #0
   b6d7e:	f7fe bf4f 	b.w	b5c20 <hal_i2c_read>

000b6d82 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b6d82:	7c00      	ldrb	r0, [r0, #16]
   b6d84:	2100      	movs	r1, #0
   b6d86:	f7fe bf53 	b.w	b5c30 <hal_i2c_peek>

000b6d8a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b6d8a:	7c00      	ldrb	r0, [r0, #16]
   b6d8c:	2100      	movs	r1, #0
   b6d8e:	f7fe bf57 	b.w	b5c40 <hal_i2c_flush>

000b6d92 <_ZN7TwoWireD0Ev>:
   b6d92:	b510      	push	{r4, lr}
   b6d94:	2114      	movs	r1, #20
   b6d96:	4604      	mov	r4, r0
   b6d98:	f7fd f981 	bl	b409e <_ZdlPvj>
   b6d9c:	4620      	mov	r0, r4
   b6d9e:	bd10      	pop	{r4, pc}

000b6da0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6da0:	b538      	push	{r3, r4, r5, lr}
   b6da2:	4604      	mov	r4, r0
   b6da4:	4615      	mov	r5, r2
   b6da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6daa:	2200      	movs	r2, #0
   b6dac:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6db0:	4b09      	ldr	r3, [pc, #36]	; (b6dd8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b6db2:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6db4:	4608      	mov	r0, r1
   b6db6:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b6db8:	4629      	mov	r1, r5
   b6dba:	f7fe ff51 	bl	b5c60 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6dbe:	30bf      	adds	r0, #191	; 0xbf
   b6dc0:	d108      	bne.n	b6dd4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b6dc2:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6dc4:	07db      	lsls	r3, r3, #31
   b6dc6:	d505      	bpl.n	b6dd4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b6dc8:	6868      	ldr	r0, [r5, #4]
   b6dca:	f7ff f8e5 	bl	b5f98 <free>
    free(conf.tx_buffer);
   b6dce:	68e8      	ldr	r0, [r5, #12]
   b6dd0:	f7ff f8e2 	bl	b5f98 <free>
}
   b6dd4:	4620      	mov	r0, r4
   b6dd6:	bd38      	pop	{r3, r4, r5, pc}
   b6dd8:	000b8dcc 	.word	0x000b8dcc

000b6ddc <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b6ddc:	2300      	movs	r3, #0
   b6dde:	7c00      	ldrb	r0, [r0, #16]
   b6de0:	461a      	mov	r2, r3
   b6de2:	4619      	mov	r1, r3
   b6de4:	f7fe bef4 	b.w	b5bd0 <hal_i2c_begin>

000b6de8 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b6de8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b6dea:	2200      	movs	r2, #0
   b6dec:	2314      	movs	r3, #20
   b6dee:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b6df2:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b6df6:	780b      	ldrb	r3, [r1, #0]
   b6df8:	f88d 3008 	strb.w	r3, [sp, #8]
   b6dfc:	684b      	ldr	r3, [r1, #4]
   b6dfe:	9303      	str	r3, [sp, #12]
   b6e00:	68cb      	ldr	r3, [r1, #12]
   b6e02:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b6e04:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b6e06:	7a0b      	ldrb	r3, [r1, #8]
   b6e08:	9305      	str	r3, [sp, #20]
   b6e0a:	a901      	add	r1, sp, #4
   b6e0c:	f7fe ff30 	bl	b5c70 <hal_i2c_request_ex>
}
   b6e10:	b007      	add	sp, #28
   b6e12:	f85d fb04 	ldr.w	pc, [sp], #4

000b6e16 <_ZN7TwoWire11requestFromEhjh>:
{
   b6e16:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b6e18:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b6e1a:	f88d 1000 	strb.w	r1, [sp]
   b6e1e:	f04f 0164 	mov.w	r1, #100	; 0x64
   b6e22:	9103      	str	r1, [sp, #12]
   b6e24:	bf18      	it	ne
   b6e26:	2301      	movne	r3, #1
   b6e28:	4669      	mov	r1, sp
    size_ = size;
   b6e2a:	9201      	str	r2, [sp, #4]
   b6e2c:	f88d 3008 	strb.w	r3, [sp, #8]
   b6e30:	f7ff ffda 	bl	b6de8 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b6e34:	b005      	add	sp, #20
   b6e36:	f85d fb04 	ldr.w	pc, [sp], #4

000b6e3a <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b6e3a:	2301      	movs	r3, #1
   b6e3c:	f7ff bfeb 	b.w	b6e16 <_ZN7TwoWire11requestFromEhjh>

000b6e40 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b6e40:	7c00      	ldrb	r0, [r0, #16]
   b6e42:	2200      	movs	r2, #0
   b6e44:	f7fe becc 	b.w	b5be0 <hal_i2c_begin_transmission>

000b6e48 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b6e48:	b2c9      	uxtb	r1, r1
   b6e4a:	f7ff bff9 	b.w	b6e40 <_ZN7TwoWire17beginTransmissionEh>

000b6e4e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b6e4e:	7c00      	ldrb	r0, [r0, #16]
   b6e50:	2200      	movs	r2, #0
   b6e52:	f7fe becd 	b.w	b5bf0 <hal_i2c_end_transmission>

000b6e56 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b6e56:	2101      	movs	r1, #1
   b6e58:	f7ff bff9 	b.w	b6e4e <_ZN7TwoWire15endTransmissionEh>

000b6e5c <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b6e5c:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b6e5e:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b6e60:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b6e64:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b6e66:	2201      	movs	r2, #1
   b6e68:	f04f 33ff 	mov.w	r3, #4294967295
   b6e6c:	f10d 0107 	add.w	r1, sp, #7
   b6e70:	47a0      	blx	r4
}
   b6e72:	b002      	add	sp, #8
   b6e74:	bd10      	pop	{r4, pc}

000b6e76 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b6e76:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b6e78:	6803      	ldr	r3, [r0, #0]
   b6e7a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b6e7c:	f04f 33ff 	mov.w	r3, #4294967295
   b6e80:	46a4      	mov	ip, r4
}
   b6e82:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b6e86:	4760      	bx	ip

000b6e88 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b6e88:	b513      	push	{r0, r1, r4, lr}
   b6e8a:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b6e8c:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b6e8e:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b6e92:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b6e94:	f10d 0107 	add.w	r1, sp, #7
   b6e98:	2201      	movs	r2, #1
   b6e9a:	47a0      	blx	r4
}
   b6e9c:	b002      	add	sp, #8
   b6e9e:	bd10      	pop	{r4, pc}

000b6ea0 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b6ea0:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b6ea2:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6ea4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6ea8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6eac:	429a      	cmp	r2, r3
int TCPClient::read() {
   b6eae:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6eb0:	d008      	beq.n	b6ec4 <_ZN9TCPClient4readEv+0x24>
   b6eb2:	6963      	ldr	r3, [r4, #20]
   b6eb4:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b6eb8:	1c51      	adds	r1, r2, #1
   b6eba:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b6ebe:	4413      	add	r3, r2
   b6ec0:	7918      	ldrb	r0, [r3, #4]
}
   b6ec2:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6ec4:	6803      	ldr	r3, [r0, #0]
   b6ec6:	691b      	ldr	r3, [r3, #16]
   b6ec8:	4798      	blx	r3
   b6eca:	2800      	cmp	r0, #0
   b6ecc:	d1f1      	bne.n	b6eb2 <_ZN9TCPClient4readEv+0x12>
   b6ece:	f04f 30ff 	mov.w	r0, #4294967295
   b6ed2:	e7f6      	b.n	b6ec2 <_ZN9TCPClient4readEv+0x22>

000b6ed4 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b6ed4:	4770      	bx	lr

000b6ed6 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b6ed6:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b6ed8:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b6eda:	43c0      	mvns	r0, r0
   b6edc:	0fc0      	lsrs	r0, r0, #31
   b6ede:	4770      	bx	lr

000b6ee0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6ee0:	4770      	bx	lr
	...

000b6ee4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6ee4:	4b06      	ldr	r3, [pc, #24]	; (b6f00 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6ee6:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6ee8:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b6eea:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6eee:	d005      	beq.n	b6efc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6ef0:	4608      	mov	r0, r1
   b6ef2:	f000 fc8d 	bl	b7810 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6ef6:	2800      	cmp	r0, #0
   b6ef8:	bf08      	it	eq
   b6efa:	2400      	moveq	r4, #0
      }
   b6efc:	4620      	mov	r0, r4
   b6efe:	bd10      	pop	{r4, pc}
   b6f00:	000b8d28 	.word	0x000b8d28

000b6f04 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6f04:	b510      	push	{r4, lr}
   b6f06:	21ac      	movs	r1, #172	; 0xac
   b6f08:	4604      	mov	r4, r0
   b6f0a:	f7fd f8c8 	bl	b409e <_ZdlPvj>
   b6f0e:	4620      	mov	r0, r4
   b6f10:	bd10      	pop	{r4, pc}

000b6f12 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b6f12:	21ac      	movs	r1, #172	; 0xac
   b6f14:	f7fd b8c3 	b.w	b409e <_ZdlPvj>

000b6f18 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b6f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b6f1c:	f04f 0800 	mov.w	r8, #0
   b6f20:	b086      	sub	sp, #24
   b6f22:	461c      	mov	r4, r3
   b6f24:	f8c0 8004 	str.w	r8, [r0, #4]
   b6f28:	4605      	mov	r5, r0
   b6f2a:	460e      	mov	r6, r1
   b6f2c:	4617      	mov	r7, r2
    struct timeval tv = {};
   b6f2e:	4641      	mov	r1, r8
   b6f30:	2210      	movs	r2, #16
   b6f32:	a802      	add	r0, sp, #8
   b6f34:	f001 fa38 	bl	b83a8 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b6f38:	1c63      	adds	r3, r4, #1
   b6f3a:	d009      	beq.n	b6f50 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b6f3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6f40:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b6f44:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b6f48:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b6f4c:	435c      	muls	r4, r3
   b6f4e:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b6f50:	6968      	ldr	r0, [r5, #20]
   b6f52:	2310      	movs	r3, #16
   b6f54:	9300      	str	r3, [sp, #0]
   b6f56:	6800      	ldr	r0, [r0, #0]
   b6f58:	ab02      	add	r3, sp, #8
   b6f5a:	f241 0205 	movw	r2, #4101	; 0x1005
   b6f5e:	f640 71ff 	movw	r1, #4095	; 0xfff
   b6f62:	f7fe fe8d 	bl	b5c80 <sock_setsockopt>
    if (ret < 0) {
   b6f66:	2800      	cmp	r0, #0
   b6f68:	da07      	bge.n	b6f7a <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b6f6a:	f7ff f82d 	bl	b5fc8 <__errno>
   b6f6e:	6803      	ldr	r3, [r0, #0]
   b6f70:	606b      	str	r3, [r5, #4]
        return 0;
   b6f72:	2000      	movs	r0, #0
}
   b6f74:	b006      	add	sp, #24
   b6f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b6f7a:	6968      	ldr	r0, [r5, #20]
   b6f7c:	2300      	movs	r3, #0
   b6f7e:	6800      	ldr	r0, [r0, #0]
   b6f80:	463a      	mov	r2, r7
   b6f82:	4631      	mov	r1, r6
   b6f84:	f7fe fe9c 	bl	b5cc0 <sock_send>
    if (ret < 0) {
   b6f88:	1e03      	subs	r3, r0, #0
   b6f8a:	dbee      	blt.n	b6f6a <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b6f8c:	4618      	mov	r0, r3
   b6f8e:	e7f1      	b.n	b6f74 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b6f90 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b6f90:	b530      	push	{r4, r5, lr}
   b6f92:	b087      	sub	sp, #28
   b6f94:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b6f96:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b6f98:	4668      	mov	r0, sp
   b6f9a:	f7ff fdef 	bl	b6b7c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6f9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6fa0:	3404      	adds	r4, #4
   b6fa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6fa4:	682b      	ldr	r3, [r5, #0]
   b6fa6:	7023      	strb	r3, [r4, #0]
    }
   b6fa8:	b007      	add	sp, #28
   b6faa:	bd30      	pop	{r4, r5, pc}

000b6fac <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b6fac:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b6fae:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b6fb0:	4b05      	ldr	r3, [pc, #20]	; (b6fc8 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b6fb2:	4604      	mov	r4, r0
   b6fb4:	358c      	adds	r5, #140	; 0x8c
   b6fb6:	f844 3b04 	str.w	r3, [r4], #4
   b6fba:	4606      	mov	r6, r0
   b6fbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6fbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6fc0:	682b      	ldr	r3, [r5, #0]
   b6fc2:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b6fc4:	4630      	mov	r0, r6
   b6fc6:	bd70      	pop	{r4, r5, r6, pc}
   b6fc8:	000b8d58 	.word	0x000b8d58

000b6fcc <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6fcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6fd0:	4698      	mov	r8, r3
    stop();
   b6fd2:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6fd4:	b093      	sub	sp, #76	; 0x4c
   b6fd6:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b6fd8:	2400      	movs	r4, #0
    stop();
   b6fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6fdc:	4606      	mov	r6, r0
   b6fde:	4617      	mov	r7, r2
    stop();
   b6fe0:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6fe2:	4628      	mov	r0, r5
   b6fe4:	466b      	mov	r3, sp
   b6fe6:	4622      	mov	r2, r4
   b6fe8:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b6fea:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6fec:	f7fe fd40 	bl	b5a70 <netdb_getaddrinfo>
   b6ff0:	4605      	mov	r5, r0
   b6ff2:	2800      	cmp	r0, #0
   b6ff4:	d163      	bne.n	b70be <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b6ff6:	9b00      	ldr	r3, [sp, #0]
   b6ff8:	2b00      	cmp	r3, #0
   b6ffa:	d04b      	beq.n	b7094 <_ZN9TCPClient7connectEPKctm+0xc8>
   b6ffc:	695b      	ldr	r3, [r3, #20]
   b6ffe:	2b00      	cmp	r3, #0
   b7000:	d048      	beq.n	b7094 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b7002:	a806      	add	r0, sp, #24
   b7004:	f7ff fd76 	bl	b6af4 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b7008:	9b00      	ldr	r3, [sp, #0]
   b700a:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b700c:	7863      	ldrb	r3, [r4, #1]
   b700e:	2b02      	cmp	r3, #2
   b7010:	d104      	bne.n	b701c <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b7012:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b7014:	a806      	add	r0, sp, #24
   b7016:	f7ff ffbb 	bl	b6f90 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b701a:	e026      	b.n	b706a <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b701c:	2b0a      	cmp	r3, #10
   b701e:	d124      	bne.n	b706a <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b7020:	2211      	movs	r2, #17
   b7022:	4629      	mov	r1, r5
   b7024:	a801      	add	r0, sp, #4
   b7026:	f001 f9bf 	bl	b83a8 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b702a:	68a3      	ldr	r3, [r4, #8]
   b702c:	2b00      	cmp	r3, #0
   b702e:	d038      	beq.n	b70a2 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7030:	f104 0308 	add.w	r3, r4, #8
   b7034:	f10d 0c04 	add.w	ip, sp, #4
   b7038:	3418      	adds	r4, #24
   b703a:	6818      	ldr	r0, [r3, #0]
   b703c:	6859      	ldr	r1, [r3, #4]
   b703e:	4662      	mov	r2, ip
   b7040:	c203      	stmia	r2!, {r0, r1}
   b7042:	3308      	adds	r3, #8
   b7044:	42a3      	cmp	r3, r4
   b7046:	4694      	mov	ip, r2
   b7048:	d1f7      	bne.n	b703a <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b704a:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b704c:	a901      	add	r1, sp, #4
   b704e:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b7050:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b7054:	f7ff fd5c 	bl	b6b10 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7058:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b705c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b7060:	ac07      	add	r4, sp, #28
   b7062:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7064:	f8dc 3000 	ldr.w	r3, [ip]
   b7068:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b706a:	a806      	add	r0, sp, #24
   b706c:	f7ff fd62 	bl	b6b34 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b7070:	b180      	cbz	r0, b7094 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b7072:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b7074:	ad07      	add	r5, sp, #28
   b7076:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b707a:	4b12      	ldr	r3, [pc, #72]	; (b70c4 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b707c:	930c      	str	r3, [sp, #48]	; 0x30
   b707e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7080:	ac0d      	add	r4, sp, #52	; 0x34
   b7082:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7084:	682b      	ldr	r3, [r5, #0]
   b7086:	7023      	strb	r3, [r4, #0]
   b7088:	463a      	mov	r2, r7
   b708a:	4643      	mov	r3, r8
   b708c:	a90c      	add	r1, sp, #48	; 0x30
   b708e:	4630      	mov	r0, r6
   b7090:	47c8      	blx	r9
   b7092:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b7094:	9800      	ldr	r0, [sp, #0]
   b7096:	f7fe fce3 	bl	b5a60 <netdb_freeaddrinfo>
}
   b709a:	4628      	mov	r0, r5
   b709c:	b013      	add	sp, #76	; 0x4c
   b709e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b70a2:	68e3      	ldr	r3, [r4, #12]
   b70a4:	2b00      	cmp	r3, #0
   b70a6:	d1c3      	bne.n	b7030 <_ZN9TCPClient7connectEPKctm+0x64>
   b70a8:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b70ac:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b70b0:	f7fe fd3e 	bl	b5b30 <inet_htonl>
   b70b4:	4581      	cmp	r9, r0
   b70b6:	d1bb      	bne.n	b7030 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b70b8:	f104 0114 	add.w	r1, r4, #20
   b70bc:	e7aa      	b.n	b7014 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b70be:	4625      	mov	r5, r4
   b70c0:	e7e8      	b.n	b7094 <_ZN9TCPClient7connectEPKctm+0xc8>
   b70c2:	bf00      	nop
   b70c4:	000b8d58 	.word	0x000b8d58

000b70c8 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b70c8:	b538      	push	{r3, r4, r5, lr}
   b70ca:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b70cc:	681a      	ldr	r2, [r3, #0]
   b70ce:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b70d0:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b70d2:	da10      	bge.n	b70f6 <_ZN9TCPClient9connectedEv+0x2e>
   b70d4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b70d8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b70dc:	429a      	cmp	r2, r3
   b70de:	d10a      	bne.n	b70f6 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b70e0:	6803      	ldr	r3, [r0, #0]
   b70e2:	691b      	ldr	r3, [r3, #16]
   b70e4:	4798      	blx	r3
        if (!rv) {
   b70e6:	4604      	mov	r4, r0
   b70e8:	b928      	cbnz	r0, b70f6 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b70ea:	682b      	ldr	r3, [r5, #0]
   b70ec:	4628      	mov	r0, r5
   b70ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b70f0:	4798      	blx	r3
        rv = available();
   b70f2:	4620      	mov	r0, r4
}
   b70f4:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b70f6:	2001      	movs	r0, #1
   b70f8:	e7fc      	b.n	b70f4 <_ZN9TCPClient9connectedEv+0x2c>

000b70fa <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b70fa:	b510      	push	{r4, lr}
   b70fc:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b70fe:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7102:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7106:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b7108:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b710a:	d005      	beq.n	b7118 <_ZN9TCPClient4peekEv+0x1e>
   b710c:	6963      	ldr	r3, [r4, #20]
   b710e:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b7112:	4413      	add	r3, r2
   b7114:	7918      	ldrb	r0, [r3, #4]
}
   b7116:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7118:	6803      	ldr	r3, [r0, #0]
   b711a:	691b      	ldr	r3, [r3, #16]
   b711c:	4798      	blx	r3
   b711e:	2800      	cmp	r0, #0
   b7120:	d1f4      	bne.n	b710c <_ZN9TCPClient4peekEv+0x12>
   b7122:	f04f 30ff 	mov.w	r0, #4294967295
   b7126:	e7f6      	b.n	b7116 <_ZN9TCPClient4peekEv+0x1c>

000b7128 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b7128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b712a:	6943      	ldr	r3, [r0, #20]
   b712c:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b712e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7132:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7136:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b7138:	4605      	mov	r5, r0
   b713a:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b713c:	d016      	beq.n	b716c <_ZN9TCPClient4readEPhj+0x44>
   b713e:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b7140:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b7144:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b7148:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b714a:	42bc      	cmp	r4, r7
   b714c:	bf28      	it	cs
   b714e:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b7150:	3304      	adds	r3, #4
   b7152:	4622      	mov	r2, r4
   b7154:	4419      	add	r1, r3
   b7156:	4630      	mov	r0, r6
   b7158:	f001 f918 	bl	b838c <memcpy>
   b715c:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b715e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b7162:	4423      	add	r3, r4
   b7164:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b7168:	4620      	mov	r0, r4
   b716a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b716c:	6803      	ldr	r3, [r0, #0]
   b716e:	691b      	ldr	r3, [r3, #16]
   b7170:	4798      	blx	r3
   b7172:	2800      	cmp	r0, #0
   b7174:	d1e3      	bne.n	b713e <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b7176:	f04f 34ff 	mov.w	r4, #4294967295
   b717a:	e7f5      	b.n	b7168 <_ZN9TCPClient4readEPhj+0x40>

000b717c <_ZN9TCPClient12flush_bufferEv>:
   b717c:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b717e:	2300      	movs	r3, #0
   b7180:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b7184:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b7186:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b718a:	4770      	bx	lr

000b718c <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b718c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7190:	461f      	mov	r7, r3
    stop();
   b7192:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7194:	460c      	mov	r4, r1
    stop();
   b7196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7198:	b08a      	sub	sp, #40	; 0x28
   b719a:	4605      	mov	r5, r0
   b719c:	4616      	mov	r6, r2
    stop();
   b719e:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b71a0:	7d23      	ldrb	r3, [r4, #20]
   b71a2:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b71a6:	2b04      	cmp	r3, #4
   b71a8:	bf0c      	ite	eq
   b71aa:	2002      	moveq	r0, #2
   b71ac:	200a      	movne	r0, #10
   b71ae:	2206      	movs	r2, #6
   b71b0:	2101      	movs	r1, #1
   b71b2:	f7fe fd8d 	bl	b5cd0 <sock_socket>
   b71b6:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b71ba:	696b      	ldr	r3, [r5, #20]
   b71bc:	681b      	ldr	r3, [r3, #0]
   b71be:	2b00      	cmp	r3, #0
   b71c0:	da08      	bge.n	b71d4 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b71c2:	682b      	ldr	r3, [r5, #0]
   b71c4:	4628      	mov	r0, r5
   b71c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b71c8:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b71ca:	4798      	blx	r3
}
   b71cc:	4620      	mov	r0, r4
   b71ce:	b00a      	add	sp, #40	; 0x28
   b71d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b71d4:	4628      	mov	r0, r5
   b71d6:	f7ff ffd1 	bl	b717c <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b71da:	b1b7      	cbz	r7, b720a <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b71dc:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b71de:	a903      	add	r1, sp, #12
   b71e0:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b71e2:	9303      	str	r3, [sp, #12]
   b71e4:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b71e8:	f7fe fc72 	bl	b5ad0 <if_index_to_name>
   b71ec:	2800      	cmp	r0, #0
   b71ee:	d1e8      	bne.n	b71c2 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b71f0:	6968      	ldr	r0, [r5, #20]
   b71f2:	2306      	movs	r3, #6
   b71f4:	9300      	str	r3, [sp, #0]
   b71f6:	6800      	ldr	r0, [r0, #0]
   b71f8:	ab03      	add	r3, sp, #12
   b71fa:	f241 020b 	movw	r2, #4107	; 0x100b
   b71fe:	f640 71ff 	movw	r1, #4095	; 0xfff
   b7202:	f7fe fd3d 	bl	b5c80 <sock_setsockopt>
   b7206:	2800      	cmp	r0, #0
   b7208:	d1db      	bne.n	b71c2 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b720a:	221c      	movs	r2, #28
   b720c:	2100      	movs	r1, #0
   b720e:	a803      	add	r0, sp, #12
   b7210:	f001 f8ca 	bl	b83a8 <memset>
    if (ip.version() == 4) {
   b7214:	7d23      	ldrb	r3, [r4, #20]
   b7216:	2b04      	cmp	r3, #4
   b7218:	d11d      	bne.n	b7256 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b721a:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b721e:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b7220:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b7224:	f7fe fc8c 	bl	b5b40 <inet_htons>
   b7228:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b722c:	6860      	ldr	r0, [r4, #4]
   b722e:	f7fe fc7f 	bl	b5b30 <inet_htonl>
   b7232:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b7234:	696b      	ldr	r3, [r5, #20]
   b7236:	221c      	movs	r2, #28
   b7238:	6818      	ldr	r0, [r3, #0]
   b723a:	a903      	add	r1, sp, #12
   b723c:	f7fe fd30 	bl	b5ca0 <sock_connect>
   b7240:	2800      	cmp	r0, #0
   b7242:	d1be      	bne.n	b71c2 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b7244:	3404      	adds	r4, #4
   b7246:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7248:	696d      	ldr	r5, [r5, #20]
   b724a:	358c      	adds	r5, #140	; 0x8c
   b724c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b724e:	6823      	ldr	r3, [r4, #0]
   b7250:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b7252:	2401      	movs	r4, #1
   b7254:	e7ba      	b.n	b71cc <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b7256:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b725a:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b725c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b7260:	f7fe fc6e 	bl	b5b40 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b7264:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b7266:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b726a:	1d23      	adds	r3, r4, #4
   b726c:	f104 0714 	add.w	r7, r4, #20
   b7270:	6818      	ldr	r0, [r3, #0]
   b7272:	6859      	ldr	r1, [r3, #4]
   b7274:	4632      	mov	r2, r6
   b7276:	c203      	stmia	r2!, {r0, r1}
   b7278:	3308      	adds	r3, #8
   b727a:	42bb      	cmp	r3, r7
   b727c:	4616      	mov	r6, r2
   b727e:	d1f7      	bne.n	b7270 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b7280:	e7d8      	b.n	b7234 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b7284 <_ZN9TCPClient9availableEv>:
{
   b7284:	b530      	push	{r4, r5, lr}
   b7286:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b7288:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b728c:	b08b      	sub	sp, #44	; 0x2c
   b728e:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b7290:	b12b      	cbz	r3, b729e <_ZN9TCPClient9availableEv+0x1a>
   b7292:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b7296:	429a      	cmp	r2, r3
   b7298:	d101      	bne.n	b729e <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b729a:	f7ff ff6f 	bl	b717c <_ZN9TCPClient12flush_bufferEv>
   b729e:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b72a0:	6808      	ldr	r0, [r1, #0]
   b72a2:	2800      	cmp	r0, #0
   b72a4:	db18      	blt.n	b72d8 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b72a6:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b72aa:	2d7f      	cmp	r5, #127	; 0x7f
   b72ac:	d814      	bhi.n	b72d8 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b72ae:	3104      	adds	r1, #4
   b72b0:	2308      	movs	r3, #8
   b72b2:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b72b6:	4429      	add	r1, r5
   b72b8:	f7fe fcfa 	bl	b5cb0 <sock_recv>
            if (ret > 0) {
   b72bc:	2800      	cmp	r0, #0
   b72be:	dd13      	ble.n	b72e8 <_ZN9TCPClient9availableEv+0x64>
   b72c0:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b72c2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b72c6:	b90a      	cbnz	r2, b72cc <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b72c8:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b72cc:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b72ce:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b72d2:	4410      	add	r0, r2
   b72d4:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b72d8:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b72da:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b72de:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b72e2:	1ac0      	subs	r0, r0, r3
   b72e4:	b00b      	add	sp, #44	; 0x2c
   b72e6:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b72e8:	f7fe fe6e 	bl	b5fc8 <__errno>
   b72ec:	6803      	ldr	r3, [r0, #0]
   b72ee:	2b0b      	cmp	r3, #11
   b72f0:	d0f2      	beq.n	b72d8 <_ZN9TCPClient9availableEv+0x54>
   b72f2:	f7fe fe69 	bl	b5fc8 <__errno>
   b72f6:	6803      	ldr	r3, [r0, #0]
   b72f8:	2b0b      	cmp	r3, #11
   b72fa:	d0ed      	beq.n	b72d8 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b72fc:	2320      	movs	r3, #32
   b72fe:	2500      	movs	r5, #0
   b7300:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b7304:	f7fe fe60 	bl	b5fc8 <__errno>
   b7308:	6803      	ldr	r3, [r0, #0]
   b730a:	9301      	str	r3, [sp, #4]
   b730c:	4b08      	ldr	r3, [pc, #32]	; (b7330 <_ZN9TCPClient9availableEv+0xac>)
   b730e:	4909      	ldr	r1, [pc, #36]	; (b7334 <_ZN9TCPClient9availableEv+0xb0>)
   b7310:	9300      	str	r3, [sp, #0]
   b7312:	aa02      	add	r2, sp, #8
   b7314:	462b      	mov	r3, r5
   b7316:	2032      	movs	r0, #50	; 0x32
   b7318:	f7fe fd92 	bl	b5e40 <log_message>
                    sock_close(d_->sock);
   b731c:	6963      	ldr	r3, [r4, #20]
   b731e:	6818      	ldr	r0, [r3, #0]
   b7320:	f7fe fcb6 	bl	b5c90 <sock_close>
   b7324:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b7326:	f04f 32ff 	mov.w	r2, #4294967295
   b732a:	601a      	str	r2, [r3, #0]
   b732c:	e7d4      	b.n	b72d8 <_ZN9TCPClient9availableEv+0x54>
   b732e:	bf00      	nop
   b7330:	000b8df3 	.word	0x000b8df3
   b7334:	000b8dec 	.word	0x000b8dec

000b7338 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b7338:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b733a:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b733c:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b733e:	6818      	ldr	r0, [r3, #0]
   b7340:	2800      	cmp	r0, #0
   b7342:	db01      	blt.n	b7348 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b7344:	f7fe fca4 	bl	b5c90 <sock_close>
   b7348:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b734a:	f04f 32ff 	mov.w	r2, #4294967295
   b734e:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b7350:	6960      	ldr	r0, [r4, #20]
   b7352:	2211      	movs	r2, #17
   b7354:	2100      	movs	r1, #0
   b7356:	308c      	adds	r0, #140	; 0x8c
   b7358:	f001 f826 	bl	b83a8 <memset>
    flush_buffer();
   b735c:	4620      	mov	r0, r4
}
   b735e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b7362:	f7ff bf0b 	b.w	b717c <_ZN9TCPClient12flush_bufferEv>

000b7366 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b7366:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b7368:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b736a:	4604      	mov	r4, r0
          total(0) {
   b736c:	6001      	str	r1, [r0, #0]
   b736e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b7372:	3088      	adds	r0, #136	; 0x88
   b7374:	f7ff fbbe 	bl	b6af4 <_ZN9IPAddressC1Ev>
}
   b7378:	4620      	mov	r0, r4
   b737a:	bd10      	pop	{r4, pc}

000b737c <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b737c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b737e:	2300      	movs	r3, #0
   b7380:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b7384:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b7388:	4a0e      	ldr	r2, [pc, #56]	; (b73c4 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b738a:	6103      	str	r3, [r0, #16]
   b738c:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b738e:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b7390:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b7392:	20ac      	movs	r0, #172	; 0xac
   b7394:	9101      	str	r1, [sp, #4]
   b7396:	f7fc fe7e 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b739a:	1e05      	subs	r5, r0, #0
   b739c:	f105 060c 	add.w	r6, r5, #12
   b73a0:	d008      	beq.n	b73b4 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b73a2:	2301      	movs	r3, #1
   b73a4:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b73a8:	4b07      	ldr	r3, [pc, #28]	; (b73c8 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b73aa:	9901      	ldr	r1, [sp, #4]
   b73ac:	602b      	str	r3, [r5, #0]
   b73ae:	4630      	mov	r0, r6
   b73b0:	f7ff ffd9 	bl	b7366 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b73b4:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b73b6:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b73ba:	f7ff fedf 	bl	b717c <_ZN9TCPClient12flush_bufferEv>
}
   b73be:	b002      	add	sp, #8
   b73c0:	bd70      	pop	{r4, r5, r6, pc}
   b73c2:	bf00      	nop
   b73c4:	000b8e28 	.word	0x000b8e28
   b73c8:	000b8e0c 	.word	0x000b8e0c

000b73cc <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b73cc:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b73ce:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   b73d2:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b73d4:	f7ff ffd2 	bl	b737c <_ZN9TCPClientC1Ei>
}
   b73d8:	4620      	mov	r0, r4
   b73da:	bd10      	pop	{r4, pc}

000b73dc <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b73dc:	b510      	push	{r4, lr}
   b73de:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b73e0:	6800      	ldr	r0, [r0, #0]
   b73e2:	2800      	cmp	r0, #0
   b73e4:	db01      	blt.n	b73ea <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b73e6:	f7fe fc53 	bl	b5c90 <sock_close>
    }
}
   b73ea:	4620      	mov	r0, r4
   b73ec:	bd10      	pop	{r4, pc}

000b73ee <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b73ee:	300c      	adds	r0, #12
   b73f0:	f7ff bff4 	b.w	b73dc <_ZN9TCPClient4DataD1Ev>

000b73f4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b73f4:	2200      	movs	r2, #0
   b73f6:	6840      	ldr	r0, [r0, #4]
   b73f8:	4611      	mov	r1, r2
   b73fa:	f7fe bd65 	b.w	b5ec8 <network_ready>

000b73fe <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b73fe:	2200      	movs	r2, #0
   b7400:	6840      	ldr	r0, [r0, #4]
   b7402:	4611      	mov	r1, r2
   b7404:	f7fe bd80 	b.w	b5f08 <network_listening>

000b7408 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7408:	2200      	movs	r2, #0
   b740a:	6840      	ldr	r0, [r0, #4]
   b740c:	4611      	mov	r1, r2
   b740e:	f7fe bd93 	b.w	b5f38 <network_get_listen_timeout>

000b7412 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7412:	6840      	ldr	r0, [r0, #4]
   b7414:	2200      	movs	r2, #0
   b7416:	f7fe bd87 	b.w	b5f28 <network_set_listen_timeout>

000b741a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b741a:	6840      	ldr	r0, [r0, #4]
   b741c:	2200      	movs	r2, #0
   b741e:	f081 0101 	eor.w	r1, r1, #1
   b7422:	f7fe bd69 	b.w	b5ef8 <network_listen>

000b7426 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7426:	2300      	movs	r3, #0
   b7428:	6840      	ldr	r0, [r0, #4]
   b742a:	461a      	mov	r2, r3
   b742c:	4619      	mov	r1, r3
   b742e:	f7fe bd5b 	b.w	b5ee8 <network_off>

000b7432 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7432:	2300      	movs	r3, #0
   b7434:	6840      	ldr	r0, [r0, #4]
   b7436:	461a      	mov	r2, r3
   b7438:	4619      	mov	r1, r3
   b743a:	f7fe bd4d 	b.w	b5ed8 <network_on>

000b743e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b743e:	2200      	movs	r2, #0
   b7440:	6840      	ldr	r0, [r0, #4]
   b7442:	4611      	mov	r1, r2
   b7444:	f7fe bd30 	b.w	b5ea8 <network_connecting>

000b7448 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7448:	6840      	ldr	r0, [r0, #4]
   b744a:	2200      	movs	r2, #0
   b744c:	2102      	movs	r1, #2
   b744e:	f7fe bd33 	b.w	b5eb8 <network_disconnect>

000b7452 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7452:	2300      	movs	r3, #0
   b7454:	6840      	ldr	r0, [r0, #4]
   b7456:	461a      	mov	r2, r3
   b7458:	f7fe bd1e 	b.w	b5e98 <network_connect>

000b745c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b745c:	4b02      	ldr	r3, [pc, #8]	; (b7468 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b745e:	2204      	movs	r2, #4
   b7460:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b7462:	4a02      	ldr	r2, [pc, #8]	; (b746c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b7464:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b7466:	4770      	bx	lr
   b7468:	2003e71c 	.word	0x2003e71c
   b746c:	000b8e74 	.word	0x000b8e74

000b7470 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b7470:	2300      	movs	r3, #0
   b7472:	6840      	ldr	r0, [r0, #4]
   b7474:	461a      	mov	r2, r3
   b7476:	f7fe bd0f 	b.w	b5e98 <network_connect>

000b747a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b747a:	6840      	ldr	r0, [r0, #4]
   b747c:	2200      	movs	r2, #0
   b747e:	2102      	movs	r1, #2
   b7480:	f7fe bd1a 	b.w	b5eb8 <network_disconnect>

000b7484 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b7484:	2200      	movs	r2, #0
   b7486:	6840      	ldr	r0, [r0, #4]
   b7488:	4611      	mov	r1, r2
   b748a:	f7fe bd0d 	b.w	b5ea8 <network_connecting>

000b748e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b748e:	2200      	movs	r2, #0
   b7490:	6840      	ldr	r0, [r0, #4]
   b7492:	4611      	mov	r1, r2
   b7494:	f7fe bd18 	b.w	b5ec8 <network_ready>

000b7498 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b7498:	2300      	movs	r3, #0
   b749a:	6840      	ldr	r0, [r0, #4]
   b749c:	461a      	mov	r2, r3
   b749e:	4619      	mov	r1, r3
   b74a0:	f7fe bd1a 	b.w	b5ed8 <network_on>

000b74a4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b74a4:	2300      	movs	r3, #0
   b74a6:	6840      	ldr	r0, [r0, #4]
   b74a8:	461a      	mov	r2, r3
   b74aa:	4619      	mov	r1, r3
   b74ac:	f7fe bd1c 	b.w	b5ee8 <network_off>

000b74b0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b74b0:	6840      	ldr	r0, [r0, #4]
   b74b2:	2100      	movs	r1, #0
   b74b4:	f7fe bd48 	b.w	b5f48 <network_is_on>

000b74b8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b74b8:	6840      	ldr	r0, [r0, #4]
   b74ba:	2100      	movs	r1, #0
   b74bc:	f7fe bd4c 	b.w	b5f58 <network_is_off>

000b74c0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b74c0:	6840      	ldr	r0, [r0, #4]
   b74c2:	2200      	movs	r2, #0
   b74c4:	f081 0101 	eor.w	r1, r1, #1
   b74c8:	f7fe bd16 	b.w	b5ef8 <network_listen>

000b74cc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b74cc:	6840      	ldr	r0, [r0, #4]
   b74ce:	2200      	movs	r2, #0
   b74d0:	f7fe bd2a 	b.w	b5f28 <network_set_listen_timeout>

000b74d4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b74d4:	2200      	movs	r2, #0
   b74d6:	6840      	ldr	r0, [r0, #4]
   b74d8:	4611      	mov	r1, r2
   b74da:	f7fe bd2d 	b.w	b5f38 <network_get_listen_timeout>

000b74de <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b74de:	2200      	movs	r2, #0
   b74e0:	6840      	ldr	r0, [r0, #4]
   b74e2:	4611      	mov	r1, r2
   b74e4:	f7fe bd10 	b.w	b5f08 <network_listening>

000b74e8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b74e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b74ec:	b095      	sub	sp, #84	; 0x54
   b74ee:	4614      	mov	r4, r2
   b74f0:	460d      	mov	r5, r1
   b74f2:	4607      	mov	r7, r0
    IPAddress addr;
   b74f4:	f7ff fafe 	bl	b6af4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b74f8:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b74fa:	221c      	movs	r2, #28
   b74fc:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b74fe:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b7500:	f000 ff52 	bl	b83a8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b7504:	2340      	movs	r3, #64	; 0x40
   b7506:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b7508:	4620      	mov	r0, r4
   b750a:	466b      	mov	r3, sp
   b750c:	aa0c      	add	r2, sp, #48	; 0x30
   b750e:	2100      	movs	r1, #0
   b7510:	f7fe faae 	bl	b5a70 <netdb_getaddrinfo>
    if (!r) {
   b7514:	4604      	mov	r4, r0
   b7516:	2800      	cmp	r0, #0
   b7518:	d14b      	bne.n	b75b2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b751a:	4602      	mov	r2, r0
   b751c:	2101      	movs	r1, #1
   b751e:	6868      	ldr	r0, [r5, #4]
   b7520:	f7fe fcd2 	bl	b5ec8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7524:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b7526:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7528:	4622      	mov	r2, r4
   b752a:	6868      	ldr	r0, [r5, #4]
   b752c:	f7fe fccc 	bl	b5ec8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7530:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7532:	4681      	mov	r9, r0
        bool ok = false;
   b7534:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7536:	2e00      	cmp	r6, #0
   b7538:	d03b      	beq.n	b75b2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b753a:	2900      	cmp	r1, #0
   b753c:	d139      	bne.n	b75b2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b753e:	6873      	ldr	r3, [r6, #4]
   b7540:	2b02      	cmp	r3, #2
   b7542:	d003      	beq.n	b754c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b7544:	2b0a      	cmp	r3, #10
   b7546:	d011      	beq.n	b756c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7548:	69f6      	ldr	r6, [r6, #28]
   b754a:	e7f4      	b.n	b7536 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b754c:	f1b8 0f00 	cmp.w	r8, #0
   b7550:	d0fa      	beq.n	b7548 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b7552:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b7554:	a806      	add	r0, sp, #24
   b7556:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b7558:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b755a:	f7ff fb0f 	bl	b6b7c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b755e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7560:	1d3c      	adds	r4, r7, #4
   b7562:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7564:	682b      	ldr	r3, [r5, #0]
   b7566:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7568:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b756a:	e7ed      	b.n	b7548 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b756c:	f1b9 0f00 	cmp.w	r9, #0
   b7570:	d0ea      	beq.n	b7548 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b7572:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b7574:	2210      	movs	r2, #16
   b7576:	a801      	add	r0, sp, #4
   b7578:	f000 ff16 	bl	b83a8 <memset>
                    a.v = 6;
   b757c:	2306      	movs	r3, #6
   b757e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7582:	ad01      	add	r5, sp, #4
   b7584:	f104 0308 	add.w	r3, r4, #8
   b7588:	3418      	adds	r4, #24
   b758a:	6818      	ldr	r0, [r3, #0]
   b758c:	6859      	ldr	r1, [r3, #4]
   b758e:	462a      	mov	r2, r5
   b7590:	c203      	stmia	r2!, {r0, r1}
   b7592:	3308      	adds	r3, #8
   b7594:	42a3      	cmp	r3, r4
   b7596:	4615      	mov	r5, r2
   b7598:	d1f7      	bne.n	b758a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b759a:	a901      	add	r1, sp, #4
   b759c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b759e:	ad07      	add	r5, sp, #28
   b75a0:	f7ff fab6 	bl	b6b10 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b75a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b75a6:	1d3c      	adds	r4, r7, #4
   b75a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b75aa:	682b      	ldr	r3, [r5, #0]
   b75ac:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b75ae:	4649      	mov	r1, r9
   b75b0:	e7ca      	b.n	b7548 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b75b2:	9800      	ldr	r0, [sp, #0]
   b75b4:	f7fe fa54 	bl	b5a60 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b75b8:	4638      	mov	r0, r7
   b75ba:	b015      	add	sp, #84	; 0x54
   b75bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b75c0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b75c0:	4b02      	ldr	r3, [pc, #8]	; (b75cc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b75c2:	4a03      	ldr	r2, [pc, #12]	; (b75d0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b75c4:	601a      	str	r2, [r3, #0]
   b75c6:	2200      	movs	r2, #0
   b75c8:	605a      	str	r2, [r3, #4]

} // spark
   b75ca:	4770      	bx	lr
   b75cc:	2003e724 	.word	0x2003e724
   b75d0:	000b8eb0 	.word	0x000b8eb0

000b75d4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b75d4:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b75d6:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b75d8:	d902      	bls.n	b75e0 <pinAvailable+0xc>
    return false;
   b75da:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b75dc:	b002      	add	sp, #8
   b75de:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b75e0:	f1a0 030b 	sub.w	r3, r0, #11
   b75e4:	2b02      	cmp	r3, #2
   b75e6:	d81a      	bhi.n	b761e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b75e8:	4c17      	ldr	r4, [pc, #92]	; (b7648 <pinAvailable+0x74>)
   b75ea:	7821      	ldrb	r1, [r4, #0]
   b75ec:	f3bf 8f5b 	dmb	ish
   b75f0:	f011 0101 	ands.w	r1, r1, #1
   b75f4:	d10b      	bne.n	b760e <pinAvailable+0x3a>
   b75f6:	4620      	mov	r0, r4
   b75f8:	9101      	str	r1, [sp, #4]
   b75fa:	f7fc fd5f 	bl	b40bc <__cxa_guard_acquire>
   b75fe:	9901      	ldr	r1, [sp, #4]
   b7600:	b128      	cbz	r0, b760e <pinAvailable+0x3a>
   b7602:	4812      	ldr	r0, [pc, #72]	; (b764c <pinAvailable+0x78>)
   b7604:	f7fe fd3c 	bl	b6080 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b7608:	4620      	mov	r0, r4
   b760a:	f7fc fd5c 	bl	b40c6 <__cxa_guard_release>
   b760e:	4b0f      	ldr	r3, [pc, #60]	; (b764c <pinAvailable+0x78>)
   b7610:	7818      	ldrb	r0, [r3, #0]
   b7612:	f7fe fb95 	bl	b5d40 <hal_spi_is_enabled>
   b7616:	2800      	cmp	r0, #0
   b7618:	d1df      	bne.n	b75da <pinAvailable+0x6>
  return true; // 'pin' is available
   b761a:	2001      	movs	r0, #1
   b761c:	e7de      	b.n	b75dc <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b761e:	2801      	cmp	r0, #1
   b7620:	d809      	bhi.n	b7636 <pinAvailable+0x62>
   b7622:	f000 f8cf 	bl	b77c4 <_Z19__fetch_global_Wirev>
   b7626:	2100      	movs	r1, #0
   b7628:	7c00      	ldrb	r0, [r0, #16]
   b762a:	f7fe fb11 	bl	b5c50 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b762e:	f080 0001 	eor.w	r0, r0, #1
   b7632:	b2c0      	uxtb	r0, r0
   b7634:	e7d2      	b.n	b75dc <pinAvailable+0x8>
   b7636:	3809      	subs	r0, #9
   b7638:	2801      	cmp	r0, #1
   b763a:	d8ee      	bhi.n	b761a <pinAvailable+0x46>
   b763c:	f000 f882 	bl	b7744 <_Z22__fetch_global_Serial1v>
   b7640:	7c00      	ldrb	r0, [r0, #16]
   b7642:	f7fe faad 	bl	b5ba0 <hal_usart_is_enabled>
   b7646:	e7f2      	b.n	b762e <pinAvailable+0x5a>
   b7648:	2003e6bc 	.word	0x2003e6bc
   b764c:	2003e6c0 	.word	0x2003e6c0

000b7650 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7650:	2823      	cmp	r0, #35	; 0x23
{
   b7652:	b538      	push	{r3, r4, r5, lr}
   b7654:	4604      	mov	r4, r0
   b7656:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7658:	d80a      	bhi.n	b7670 <pinMode+0x20>
   b765a:	29ff      	cmp	r1, #255	; 0xff
   b765c:	d008      	beq.n	b7670 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b765e:	f7ff ffb9 	bl	b75d4 <pinAvailable>
   b7662:	b128      	cbz	r0, b7670 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b7664:	4629      	mov	r1, r5
   b7666:	4620      	mov	r0, r4
}
   b7668:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b766c:	f7fe ba10 	b.w	b5a90 <HAL_Pin_Mode>
}
   b7670:	bd38      	pop	{r3, r4, r5, pc}

000b7672 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b7672:	b538      	push	{r3, r4, r5, lr}
   b7674:	4604      	mov	r4, r0
   b7676:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b7678:	f7fe fa12 	bl	b5aa0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b767c:	28ff      	cmp	r0, #255	; 0xff
   b767e:	d010      	beq.n	b76a2 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b7680:	2806      	cmp	r0, #6
   b7682:	d804      	bhi.n	b768e <digitalWrite+0x1c>
   b7684:	234d      	movs	r3, #77	; 0x4d
   b7686:	fa23 f000 	lsr.w	r0, r3, r0
   b768a:	07c3      	lsls	r3, r0, #31
   b768c:	d409      	bmi.n	b76a2 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b768e:	4620      	mov	r0, r4
   b7690:	f7ff ffa0 	bl	b75d4 <pinAvailable>
   b7694:	b128      	cbz	r0, b76a2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b7696:	4629      	mov	r1, r5
   b7698:	4620      	mov	r0, r4
}
   b769a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b769e:	f7fe ba07 	b.w	b5ab0 <HAL_GPIO_Write>
}
   b76a2:	bd38      	pop	{r3, r4, r5, pc}

000b76a4 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b76a4:	b510      	push	{r4, lr}
   b76a6:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b76a8:	f7fe f9fa 	bl	b5aa0 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b76ac:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b76ae:	b2db      	uxtb	r3, r3
   b76b0:	2b01      	cmp	r3, #1
   b76b2:	d908      	bls.n	b76c6 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b76b4:	4620      	mov	r0, r4
   b76b6:	f7ff ff8d 	bl	b75d4 <pinAvailable>
   b76ba:	b120      	cbz	r0, b76c6 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b76bc:	4620      	mov	r0, r4
}
   b76be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b76c2:	f7fe b9fd 	b.w	b5ac0 <HAL_GPIO_Read>
}
   b76c6:	2000      	movs	r0, #0
   b76c8:	bd10      	pop	{r4, pc}

000b76ca <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   b76ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b76ce:	4690      	mov	r8, r2
   b76d0:	461f      	mov	r7, r3
   b76d2:	2407      	movs	r4, #7
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
   b76d4:	4606      	mov	r6, r0
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   b76d6:	460d      	mov	r5, r1
    if (bitOrder == LSBFIRST)
   b76d8:	f1c4 0107 	rsb	r1, r4, #7
   b76dc:	f1b8 0f00 	cmp.w	r8, #0
   b76e0:	d112      	bne.n	b7708 <shiftOut+0x3e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   b76e2:	fa47 f101 	asr.w	r1, r7, r1
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b76e6:	f001 0101 	and.w	r1, r1, #1
   b76ea:	4630      	mov	r0, r6
   b76ec:	f7ff ffc1 	bl	b7672 <digitalWrite>
    digitalWrite(clockPin, HIGH);
   b76f0:	2101      	movs	r1, #1
   b76f2:	4628      	mov	r0, r5
   b76f4:	f7ff ffbd 	bl	b7672 <digitalWrite>
    digitalWrite(clockPin, LOW);
   b76f8:	2100      	movs	r1, #0
   b76fa:	4628      	mov	r0, r5
   b76fc:	f7ff ffb9 	bl	b7672 <digitalWrite>
  for (i = 0; i < 8; i++)  {
   b7700:	3c01      	subs	r4, #1
   b7702:	d2e9      	bcs.n	b76d8 <shiftOut+0xe>
  }
}
   b7704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b7708:	fa47 f104 	asr.w	r1, r7, r4
   b770c:	e7eb      	b.n	b76e6 <shiftOut+0x1c>

000b770e <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b770e:	4770      	bx	lr

000b7710 <_Z20acquireSerial1Bufferv>:
{
   b7710:	b538      	push	{r3, r4, r5, lr}
   b7712:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b7714:	2514      	movs	r5, #20
   b7716:	462a      	mov	r2, r5
   b7718:	2100      	movs	r1, #0
   b771a:	f000 fe45 	bl	b83a8 <memset>
   b771e:	8025      	strh	r5, [r4, #0]
   b7720:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7722:	4907      	ldr	r1, [pc, #28]	; (b7740 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b7724:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7726:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b7728:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b772a:	f000 f86f 	bl	b780c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b772e:	4904      	ldr	r1, [pc, #16]	; (b7740 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b7730:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7732:	4628      	mov	r0, r5
   b7734:	f000 f86a 	bl	b780c <_ZnajRKSt9nothrow_t>
    };
   b7738:	60e0      	str	r0, [r4, #12]
}
   b773a:	4620      	mov	r0, r4
   b773c:	bd38      	pop	{r3, r4, r5, pc}
   b773e:	bf00      	nop
   b7740:	000b8ee4 	.word	0x000b8ee4

000b7744 <_Z22__fetch_global_Serial1v>:
{
   b7744:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7746:	4d0e      	ldr	r5, [pc, #56]	; (b7780 <_Z22__fetch_global_Serial1v+0x3c>)
   b7748:	7829      	ldrb	r1, [r5, #0]
   b774a:	f3bf 8f5b 	dmb	ish
   b774e:	f011 0401 	ands.w	r4, r1, #1
{
   b7752:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7754:	d111      	bne.n	b777a <_Z22__fetch_global_Serial1v+0x36>
   b7756:	4628      	mov	r0, r5
   b7758:	f7fc fcb0 	bl	b40bc <__cxa_guard_acquire>
   b775c:	b168      	cbz	r0, b777a <_Z22__fetch_global_Serial1v+0x36>
   b775e:	a801      	add	r0, sp, #4
   b7760:	f7ff ffd6 	bl	b7710 <_Z20acquireSerial1Bufferv>
   b7764:	aa01      	add	r2, sp, #4
   b7766:	4621      	mov	r1, r4
   b7768:	4806      	ldr	r0, [pc, #24]	; (b7784 <_Z22__fetch_global_Serial1v+0x40>)
   b776a:	f7ff fad9 	bl	b6d20 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b776e:	4628      	mov	r0, r5
   b7770:	f7fc fca9 	bl	b40c6 <__cxa_guard_release>
   b7774:	4804      	ldr	r0, [pc, #16]	; (b7788 <_Z22__fetch_global_Serial1v+0x44>)
   b7776:	f000 fe03 	bl	b8380 <atexit>
    return serial1;
}
   b777a:	4802      	ldr	r0, [pc, #8]	; (b7784 <_Z22__fetch_global_Serial1v+0x40>)
   b777c:	b007      	add	sp, #28
   b777e:	bd30      	pop	{r4, r5, pc}
   b7780:	2003e72c 	.word	0x2003e72c
   b7784:	2003e730 	.word	0x2003e730
   b7788:	000b770f 	.word	0x000b770f

000b778c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b778c:	4770      	bx	lr
	...

000b7790 <_Z17acquireWireBufferv>:
{
   b7790:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b7792:	4b0a      	ldr	r3, [pc, #40]	; (b77bc <_Z17acquireWireBufferv+0x2c>)
   b7794:	6003      	str	r3, [r0, #0]
   b7796:	2301      	movs	r3, #1
{
   b7798:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b779a:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b779c:	4908      	ldr	r1, [pc, #32]	; (b77c0 <_Z17acquireWireBufferv+0x30>)
   b779e:	2020      	movs	r0, #32
   b77a0:	f000 f834 	bl	b780c <_ZnajRKSt9nothrow_t>
	};
   b77a4:	2520      	movs	r5, #32
   b77a6:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b77a8:	4905      	ldr	r1, [pc, #20]	; (b77c0 <_Z17acquireWireBufferv+0x30>)
	};
   b77aa:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b77ac:	4628      	mov	r0, r5
   b77ae:	f000 f82d 	bl	b780c <_ZnajRKSt9nothrow_t>
	};
   b77b2:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b77b6:	4620      	mov	r0, r4
   b77b8:	bd38      	pop	{r3, r4, r5, pc}
   b77ba:	bf00      	nop
   b77bc:	00010018 	.word	0x00010018
   b77c0:	000b8ee4 	.word	0x000b8ee4

000b77c4 <_Z19__fetch_global_Wirev>:
{
   b77c4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b77c6:	4d0e      	ldr	r5, [pc, #56]	; (b7800 <_Z19__fetch_global_Wirev+0x3c>)
   b77c8:	7829      	ldrb	r1, [r5, #0]
   b77ca:	f3bf 8f5b 	dmb	ish
   b77ce:	f011 0401 	ands.w	r4, r1, #1
{
   b77d2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b77d4:	d111      	bne.n	b77fa <_Z19__fetch_global_Wirev+0x36>
   b77d6:	4628      	mov	r0, r5
   b77d8:	f7fc fc70 	bl	b40bc <__cxa_guard_acquire>
   b77dc:	b168      	cbz	r0, b77fa <_Z19__fetch_global_Wirev+0x36>
   b77de:	4668      	mov	r0, sp
   b77e0:	f7ff ffd6 	bl	b7790 <_Z17acquireWireBufferv>
   b77e4:	466a      	mov	r2, sp
   b77e6:	4621      	mov	r1, r4
   b77e8:	4806      	ldr	r0, [pc, #24]	; (b7804 <_Z19__fetch_global_Wirev+0x40>)
   b77ea:	f7ff fad9 	bl	b6da0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b77ee:	4628      	mov	r0, r5
   b77f0:	f7fc fc69 	bl	b40c6 <__cxa_guard_release>
   b77f4:	4804      	ldr	r0, [pc, #16]	; (b7808 <_Z19__fetch_global_Wirev+0x44>)
   b77f6:	f000 fdc3 	bl	b8380 <atexit>
	return wire;
}
   b77fa:	4802      	ldr	r0, [pc, #8]	; (b7804 <_Z19__fetch_global_Wirev+0x40>)
   b77fc:	b007      	add	sp, #28
   b77fe:	bd30      	pop	{r4, r5, pc}
   b7800:	2003e748 	.word	0x2003e748
   b7804:	2003e74c 	.word	0x2003e74c
   b7808:	000b778d 	.word	0x000b778d

000b780c <_ZnajRKSt9nothrow_t>:
   b780c:	f7fc bc45 	b.w	b409a <_Znaj>

000b7810 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b7810:	4901      	ldr	r1, [pc, #4]	; (b7818 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b7812:	f000 b8f9 	b.w	b7a08 <_ZNKSt9type_infoeqERKS_>
   b7816:	bf00      	nop
   b7818:	000b8f00 	.word	0x000b8f00

000b781c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b781c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b781e:	2400      	movs	r4, #0
   b7820:	2310      	movs	r3, #16
   b7822:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b7826:	6803      	ldr	r3, [r0, #0]
   b7828:	4615      	mov	r5, r2
   b782a:	699e      	ldr	r6, [r3, #24]
   b782c:	6812      	ldr	r2, [r2, #0]
   b782e:	466b      	mov	r3, sp
   b7830:	e9cd 4400 	strd	r4, r4, [sp]
   b7834:	47b0      	blx	r6
   b7836:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b783a:	f003 0306 	and.w	r3, r3, #6
   b783e:	2b06      	cmp	r3, #6
   b7840:	bf03      	ittte	eq
   b7842:	9b00      	ldreq	r3, [sp, #0]
   b7844:	602b      	streq	r3, [r5, #0]
   b7846:	2001      	moveq	r0, #1
   b7848:	4620      	movne	r0, r4
   b784a:	b004      	add	sp, #16
   b784c:	bd70      	pop	{r4, r5, r6, pc}

000b784e <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b784e:	9800      	ldr	r0, [sp, #0]
   b7850:	4290      	cmp	r0, r2
   b7852:	bf14      	ite	ne
   b7854:	2001      	movne	r0, #1
   b7856:	2006      	moveq	r0, #6
   b7858:	4770      	bx	lr
	...

000b785c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b785c:	b510      	push	{r4, lr}
   b785e:	4b03      	ldr	r3, [pc, #12]	; (b786c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b7860:	6003      	str	r3, [r0, #0]
   b7862:	4604      	mov	r4, r0
   b7864:	f000 f8cd 	bl	b7a02 <_ZNSt9type_infoD1Ev>
   b7868:	4620      	mov	r0, r4
   b786a:	bd10      	pop	{r4, pc}
   b786c:	000b8f40 	.word	0x000b8f40

000b7870 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b7870:	b510      	push	{r4, lr}
   b7872:	4604      	mov	r4, r0
   b7874:	f7ff fff2 	bl	b785c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7878:	4620      	mov	r0, r4
   b787a:	2108      	movs	r1, #8
   b787c:	f7fc fc0f 	bl	b409e <_ZdlPvj>
   b7880:	4620      	mov	r0, r4
   b7882:	bd10      	pop	{r4, pc}

000b7884 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b7884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7888:	461f      	mov	r7, r3
   b788a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b788e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b7892:	4598      	cmp	r8, r3
   b7894:	4606      	mov	r6, r0
   b7896:	4615      	mov	r5, r2
   b7898:	d107      	bne.n	b78aa <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b789a:	9907      	ldr	r1, [sp, #28]
   b789c:	f000 f8b4 	bl	b7a08 <_ZNKSt9type_infoeqERKS_>
   b78a0:	b118      	cbz	r0, b78aa <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b78a2:	7165      	strb	r5, [r4, #5]
   b78a4:	2000      	movs	r0, #0
   b78a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b78aa:	4639      	mov	r1, r7
   b78ac:	4630      	mov	r0, r6
   b78ae:	f000 f8ab 	bl	b7a08 <_ZNKSt9type_infoeqERKS_>
   b78b2:	2800      	cmp	r0, #0
   b78b4:	d0f6      	beq.n	b78a4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b78b6:	2301      	movs	r3, #1
   b78b8:	f8c4 8000 	str.w	r8, [r4]
   b78bc:	7125      	strb	r5, [r4, #4]
   b78be:	71a3      	strb	r3, [r4, #6]
   b78c0:	e7f0      	b.n	b78a4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b78c2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b78c2:	b538      	push	{r3, r4, r5, lr}
   b78c4:	4615      	mov	r5, r2
   b78c6:	461c      	mov	r4, r3
   b78c8:	f000 f89e 	bl	b7a08 <_ZNKSt9type_infoeqERKS_>
   b78cc:	b120      	cbz	r0, b78d8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b78ce:	2308      	movs	r3, #8
   b78d0:	60e3      	str	r3, [r4, #12]
   b78d2:	2306      	movs	r3, #6
   b78d4:	6025      	str	r5, [r4, #0]
   b78d6:	7123      	strb	r3, [r4, #4]
   b78d8:	bd38      	pop	{r3, r4, r5, pc}

000b78da <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b78da:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b78dc:	4605      	mov	r5, r0
   b78de:	460c      	mov	r4, r1
   b78e0:	9201      	str	r2, [sp, #4]
   b78e2:	461e      	mov	r6, r3
   b78e4:	f000 f890 	bl	b7a08 <_ZNKSt9type_infoeqERKS_>
   b78e8:	b950      	cbnz	r0, b7900 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b78ea:	2e03      	cmp	r6, #3
   b78ec:	d808      	bhi.n	b7900 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b78ee:	6823      	ldr	r3, [r4, #0]
   b78f0:	9a01      	ldr	r2, [sp, #4]
   b78f2:	695b      	ldr	r3, [r3, #20]
   b78f4:	4629      	mov	r1, r5
   b78f6:	4620      	mov	r0, r4
   b78f8:	b002      	add	sp, #8
   b78fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b78fe:	4718      	bx	r3
   b7900:	b002      	add	sp, #8
   b7902:	bd70      	pop	{r4, r5, r6, pc}

000b7904 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b7904:	b510      	push	{r4, lr}
   b7906:	4b03      	ldr	r3, [pc, #12]	; (b7914 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b7908:	6003      	str	r3, [r0, #0]
   b790a:	4604      	mov	r4, r0
   b790c:	f7ff ffa6 	bl	b785c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7910:	4620      	mov	r0, r4
   b7912:	bd10      	pop	{r4, pc}
   b7914:	000b8fa0 	.word	0x000b8fa0

000b7918 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b7918:	b510      	push	{r4, lr}
   b791a:	4604      	mov	r4, r0
   b791c:	f7ff fff2 	bl	b7904 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b7920:	4620      	mov	r0, r4
   b7922:	210c      	movs	r1, #12
   b7924:	f7fc fbbb 	bl	b409e <_ZdlPvj>
   b7928:	4620      	mov	r0, r4
   b792a:	bd10      	pop	{r4, pc}

000b792c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b792c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b792e:	9f08      	ldr	r7, [sp, #32]
   b7930:	4297      	cmp	r7, r2
   b7932:	4605      	mov	r5, r0
   b7934:	460e      	mov	r6, r1
   b7936:	4614      	mov	r4, r2
   b7938:	d00a      	beq.n	b7950 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b793a:	68a8      	ldr	r0, [r5, #8]
   b793c:	6802      	ldr	r2, [r0, #0]
   b793e:	9708      	str	r7, [sp, #32]
   b7940:	6a15      	ldr	r5, [r2, #32]
   b7942:	4631      	mov	r1, r6
   b7944:	4622      	mov	r2, r4
   b7946:	46ac      	mov	ip, r5
   b7948:	b003      	add	sp, #12
   b794a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b794e:	4760      	bx	ip
   b7950:	4619      	mov	r1, r3
   b7952:	9301      	str	r3, [sp, #4]
   b7954:	f000 f858 	bl	b7a08 <_ZNKSt9type_infoeqERKS_>
   b7958:	9b01      	ldr	r3, [sp, #4]
   b795a:	2800      	cmp	r0, #0
   b795c:	d0ed      	beq.n	b793a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b795e:	2006      	movs	r0, #6
   b7960:	b003      	add	sp, #12
   b7962:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7964 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b7964:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7968:	460d      	mov	r5, r1
   b796a:	4619      	mov	r1, r3
   b796c:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b7970:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b7974:	4681      	mov	r9, r0
   b7976:	4617      	mov	r7, r2
   b7978:	4698      	mov	r8, r3
   b797a:	f000 f845 	bl	b7a08 <_ZNKSt9type_infoeqERKS_>
   b797e:	b190      	cbz	r0, b79a6 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b7980:	2d00      	cmp	r5, #0
   b7982:	6034      	str	r4, [r6, #0]
   b7984:	7137      	strb	r7, [r6, #4]
   b7986:	db09      	blt.n	b799c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b7988:	1961      	adds	r1, r4, r5
   b798a:	458a      	cmp	sl, r1
   b798c:	bf0c      	ite	eq
   b798e:	2106      	moveq	r1, #6
   b7990:	2101      	movne	r1, #1
   b7992:	71b1      	strb	r1, [r6, #6]
   b7994:	2000      	movs	r0, #0
   b7996:	b001      	add	sp, #4
   b7998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b799c:	3502      	adds	r5, #2
   b799e:	d1f9      	bne.n	b7994 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b79a0:	2301      	movs	r3, #1
   b79a2:	71b3      	strb	r3, [r6, #6]
   b79a4:	e7f6      	b.n	b7994 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b79a6:	4554      	cmp	r4, sl
   b79a8:	d106      	bne.n	b79b8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b79aa:	4659      	mov	r1, fp
   b79ac:	4648      	mov	r0, r9
   b79ae:	f000 f82b 	bl	b7a08 <_ZNKSt9type_infoeqERKS_>
   b79b2:	b108      	cbz	r0, b79b8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b79b4:	7177      	strb	r7, [r6, #5]
   b79b6:	e7ed      	b.n	b7994 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b79b8:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b79bc:	6803      	ldr	r3, [r0, #0]
   b79be:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b79c2:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b79c6:	69dc      	ldr	r4, [r3, #28]
   b79c8:	463a      	mov	r2, r7
   b79ca:	4643      	mov	r3, r8
   b79cc:	4629      	mov	r1, r5
   b79ce:	46a4      	mov	ip, r4
   b79d0:	b001      	add	sp, #4
   b79d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b79d6:	4760      	bx	ip

000b79d8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b79d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b79dc:	4607      	mov	r7, r0
   b79de:	460c      	mov	r4, r1
   b79e0:	4615      	mov	r5, r2
   b79e2:	461e      	mov	r6, r3
   b79e4:	f7ff ff6d 	bl	b78c2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b79e8:	b948      	cbnz	r0, b79fe <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b79ea:	68b8      	ldr	r0, [r7, #8]
   b79ec:	6803      	ldr	r3, [r0, #0]
   b79ee:	699f      	ldr	r7, [r3, #24]
   b79f0:	462a      	mov	r2, r5
   b79f2:	4633      	mov	r3, r6
   b79f4:	4621      	mov	r1, r4
   b79f6:	46bc      	mov	ip, r7
   b79f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b79fc:	4760      	bx	ip
   b79fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7a02 <_ZNSt9type_infoD1Ev>:
   b7a02:	4770      	bx	lr

000b7a04 <_ZNKSt9type_info14__is_pointer_pEv>:
   b7a04:	2000      	movs	r0, #0
   b7a06:	4770      	bx	lr

000b7a08 <_ZNKSt9type_infoeqERKS_>:
   b7a08:	4281      	cmp	r1, r0
   b7a0a:	b508      	push	{r3, lr}
   b7a0c:	d00e      	beq.n	b7a2c <_ZNKSt9type_infoeqERKS_+0x24>
   b7a0e:	6840      	ldr	r0, [r0, #4]
   b7a10:	7803      	ldrb	r3, [r0, #0]
   b7a12:	2b2a      	cmp	r3, #42	; 0x2a
   b7a14:	d00c      	beq.n	b7a30 <_ZNKSt9type_infoeqERKS_+0x28>
   b7a16:	6849      	ldr	r1, [r1, #4]
   b7a18:	780b      	ldrb	r3, [r1, #0]
   b7a1a:	2b2a      	cmp	r3, #42	; 0x2a
   b7a1c:	bf08      	it	eq
   b7a1e:	3101      	addeq	r1, #1
   b7a20:	f000 fcf8 	bl	b8414 <strcmp>
   b7a24:	fab0 f080 	clz	r0, r0
   b7a28:	0940      	lsrs	r0, r0, #5
   b7a2a:	bd08      	pop	{r3, pc}
   b7a2c:	2001      	movs	r0, #1
   b7a2e:	e7fc      	b.n	b7a2a <_ZNKSt9type_infoeqERKS_+0x22>
   b7a30:	2000      	movs	r0, #0
   b7a32:	e7fa      	b.n	b7a2a <_ZNKSt9type_infoeqERKS_+0x22>

000b7a34 <__aeabi_drsub>:
   b7a34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b7a38:	e002      	b.n	b7a40 <__adddf3>
   b7a3a:	bf00      	nop

000b7a3c <__aeabi_dsub>:
   b7a3c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b7a40 <__adddf3>:
   b7a40:	b530      	push	{r4, r5, lr}
   b7a42:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b7a46:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b7a4a:	ea94 0f05 	teq	r4, r5
   b7a4e:	bf08      	it	eq
   b7a50:	ea90 0f02 	teqeq	r0, r2
   b7a54:	bf1f      	itttt	ne
   b7a56:	ea54 0c00 	orrsne.w	ip, r4, r0
   b7a5a:	ea55 0c02 	orrsne.w	ip, r5, r2
   b7a5e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b7a62:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b7a66:	f000 80e2 	beq.w	b7c2e <__adddf3+0x1ee>
   b7a6a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b7a6e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b7a72:	bfb8      	it	lt
   b7a74:	426d      	neglt	r5, r5
   b7a76:	dd0c      	ble.n	b7a92 <__adddf3+0x52>
   b7a78:	442c      	add	r4, r5
   b7a7a:	ea80 0202 	eor.w	r2, r0, r2
   b7a7e:	ea81 0303 	eor.w	r3, r1, r3
   b7a82:	ea82 0000 	eor.w	r0, r2, r0
   b7a86:	ea83 0101 	eor.w	r1, r3, r1
   b7a8a:	ea80 0202 	eor.w	r2, r0, r2
   b7a8e:	ea81 0303 	eor.w	r3, r1, r3
   b7a92:	2d36      	cmp	r5, #54	; 0x36
   b7a94:	bf88      	it	hi
   b7a96:	bd30      	pophi	{r4, r5, pc}
   b7a98:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b7a9c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b7aa0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b7aa4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b7aa8:	d002      	beq.n	b7ab0 <__adddf3+0x70>
   b7aaa:	4240      	negs	r0, r0
   b7aac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7ab0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b7ab4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b7ab8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b7abc:	d002      	beq.n	b7ac4 <__adddf3+0x84>
   b7abe:	4252      	negs	r2, r2
   b7ac0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b7ac4:	ea94 0f05 	teq	r4, r5
   b7ac8:	f000 80a7 	beq.w	b7c1a <__adddf3+0x1da>
   b7acc:	f1a4 0401 	sub.w	r4, r4, #1
   b7ad0:	f1d5 0e20 	rsbs	lr, r5, #32
   b7ad4:	db0d      	blt.n	b7af2 <__adddf3+0xb2>
   b7ad6:	fa02 fc0e 	lsl.w	ip, r2, lr
   b7ada:	fa22 f205 	lsr.w	r2, r2, r5
   b7ade:	1880      	adds	r0, r0, r2
   b7ae0:	f141 0100 	adc.w	r1, r1, #0
   b7ae4:	fa03 f20e 	lsl.w	r2, r3, lr
   b7ae8:	1880      	adds	r0, r0, r2
   b7aea:	fa43 f305 	asr.w	r3, r3, r5
   b7aee:	4159      	adcs	r1, r3
   b7af0:	e00e      	b.n	b7b10 <__adddf3+0xd0>
   b7af2:	f1a5 0520 	sub.w	r5, r5, #32
   b7af6:	f10e 0e20 	add.w	lr, lr, #32
   b7afa:	2a01      	cmp	r2, #1
   b7afc:	fa03 fc0e 	lsl.w	ip, r3, lr
   b7b00:	bf28      	it	cs
   b7b02:	f04c 0c02 	orrcs.w	ip, ip, #2
   b7b06:	fa43 f305 	asr.w	r3, r3, r5
   b7b0a:	18c0      	adds	r0, r0, r3
   b7b0c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b7b10:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7b14:	d507      	bpl.n	b7b26 <__adddf3+0xe6>
   b7b16:	f04f 0e00 	mov.w	lr, #0
   b7b1a:	f1dc 0c00 	rsbs	ip, ip, #0
   b7b1e:	eb7e 0000 	sbcs.w	r0, lr, r0
   b7b22:	eb6e 0101 	sbc.w	r1, lr, r1
   b7b26:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b7b2a:	d31b      	bcc.n	b7b64 <__adddf3+0x124>
   b7b2c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b7b30:	d30c      	bcc.n	b7b4c <__adddf3+0x10c>
   b7b32:	0849      	lsrs	r1, r1, #1
   b7b34:	ea5f 0030 	movs.w	r0, r0, rrx
   b7b38:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b7b3c:	f104 0401 	add.w	r4, r4, #1
   b7b40:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b7b44:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b7b48:	f080 809a 	bcs.w	b7c80 <__adddf3+0x240>
   b7b4c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b7b50:	bf08      	it	eq
   b7b52:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b7b56:	f150 0000 	adcs.w	r0, r0, #0
   b7b5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7b5e:	ea41 0105 	orr.w	r1, r1, r5
   b7b62:	bd30      	pop	{r4, r5, pc}
   b7b64:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b7b68:	4140      	adcs	r0, r0
   b7b6a:	eb41 0101 	adc.w	r1, r1, r1
   b7b6e:	3c01      	subs	r4, #1
   b7b70:	bf28      	it	cs
   b7b72:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b7b76:	d2e9      	bcs.n	b7b4c <__adddf3+0x10c>
   b7b78:	f091 0f00 	teq	r1, #0
   b7b7c:	bf04      	itt	eq
   b7b7e:	4601      	moveq	r1, r0
   b7b80:	2000      	moveq	r0, #0
   b7b82:	fab1 f381 	clz	r3, r1
   b7b86:	bf08      	it	eq
   b7b88:	3320      	addeq	r3, #32
   b7b8a:	f1a3 030b 	sub.w	r3, r3, #11
   b7b8e:	f1b3 0220 	subs.w	r2, r3, #32
   b7b92:	da0c      	bge.n	b7bae <__adddf3+0x16e>
   b7b94:	320c      	adds	r2, #12
   b7b96:	dd08      	ble.n	b7baa <__adddf3+0x16a>
   b7b98:	f102 0c14 	add.w	ip, r2, #20
   b7b9c:	f1c2 020c 	rsb	r2, r2, #12
   b7ba0:	fa01 f00c 	lsl.w	r0, r1, ip
   b7ba4:	fa21 f102 	lsr.w	r1, r1, r2
   b7ba8:	e00c      	b.n	b7bc4 <__adddf3+0x184>
   b7baa:	f102 0214 	add.w	r2, r2, #20
   b7bae:	bfd8      	it	le
   b7bb0:	f1c2 0c20 	rsble	ip, r2, #32
   b7bb4:	fa01 f102 	lsl.w	r1, r1, r2
   b7bb8:	fa20 fc0c 	lsr.w	ip, r0, ip
   b7bbc:	bfdc      	itt	le
   b7bbe:	ea41 010c 	orrle.w	r1, r1, ip
   b7bc2:	4090      	lslle	r0, r2
   b7bc4:	1ae4      	subs	r4, r4, r3
   b7bc6:	bfa2      	ittt	ge
   b7bc8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b7bcc:	4329      	orrge	r1, r5
   b7bce:	bd30      	popge	{r4, r5, pc}
   b7bd0:	ea6f 0404 	mvn.w	r4, r4
   b7bd4:	3c1f      	subs	r4, #31
   b7bd6:	da1c      	bge.n	b7c12 <__adddf3+0x1d2>
   b7bd8:	340c      	adds	r4, #12
   b7bda:	dc0e      	bgt.n	b7bfa <__adddf3+0x1ba>
   b7bdc:	f104 0414 	add.w	r4, r4, #20
   b7be0:	f1c4 0220 	rsb	r2, r4, #32
   b7be4:	fa20 f004 	lsr.w	r0, r0, r4
   b7be8:	fa01 f302 	lsl.w	r3, r1, r2
   b7bec:	ea40 0003 	orr.w	r0, r0, r3
   b7bf0:	fa21 f304 	lsr.w	r3, r1, r4
   b7bf4:	ea45 0103 	orr.w	r1, r5, r3
   b7bf8:	bd30      	pop	{r4, r5, pc}
   b7bfa:	f1c4 040c 	rsb	r4, r4, #12
   b7bfe:	f1c4 0220 	rsb	r2, r4, #32
   b7c02:	fa20 f002 	lsr.w	r0, r0, r2
   b7c06:	fa01 f304 	lsl.w	r3, r1, r4
   b7c0a:	ea40 0003 	orr.w	r0, r0, r3
   b7c0e:	4629      	mov	r1, r5
   b7c10:	bd30      	pop	{r4, r5, pc}
   b7c12:	fa21 f004 	lsr.w	r0, r1, r4
   b7c16:	4629      	mov	r1, r5
   b7c18:	bd30      	pop	{r4, r5, pc}
   b7c1a:	f094 0f00 	teq	r4, #0
   b7c1e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b7c22:	bf06      	itte	eq
   b7c24:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b7c28:	3401      	addeq	r4, #1
   b7c2a:	3d01      	subne	r5, #1
   b7c2c:	e74e      	b.n	b7acc <__adddf3+0x8c>
   b7c2e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b7c32:	bf18      	it	ne
   b7c34:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b7c38:	d029      	beq.n	b7c8e <__adddf3+0x24e>
   b7c3a:	ea94 0f05 	teq	r4, r5
   b7c3e:	bf08      	it	eq
   b7c40:	ea90 0f02 	teqeq	r0, r2
   b7c44:	d005      	beq.n	b7c52 <__adddf3+0x212>
   b7c46:	ea54 0c00 	orrs.w	ip, r4, r0
   b7c4a:	bf04      	itt	eq
   b7c4c:	4619      	moveq	r1, r3
   b7c4e:	4610      	moveq	r0, r2
   b7c50:	bd30      	pop	{r4, r5, pc}
   b7c52:	ea91 0f03 	teq	r1, r3
   b7c56:	bf1e      	ittt	ne
   b7c58:	2100      	movne	r1, #0
   b7c5a:	2000      	movne	r0, #0
   b7c5c:	bd30      	popne	{r4, r5, pc}
   b7c5e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b7c62:	d105      	bne.n	b7c70 <__adddf3+0x230>
   b7c64:	0040      	lsls	r0, r0, #1
   b7c66:	4149      	adcs	r1, r1
   b7c68:	bf28      	it	cs
   b7c6a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b7c6e:	bd30      	pop	{r4, r5, pc}
   b7c70:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b7c74:	bf3c      	itt	cc
   b7c76:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b7c7a:	bd30      	popcc	{r4, r5, pc}
   b7c7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7c80:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b7c84:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b7c88:	f04f 0000 	mov.w	r0, #0
   b7c8c:	bd30      	pop	{r4, r5, pc}
   b7c8e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b7c92:	bf1a      	itte	ne
   b7c94:	4619      	movne	r1, r3
   b7c96:	4610      	movne	r0, r2
   b7c98:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b7c9c:	bf1c      	itt	ne
   b7c9e:	460b      	movne	r3, r1
   b7ca0:	4602      	movne	r2, r0
   b7ca2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b7ca6:	bf06      	itte	eq
   b7ca8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b7cac:	ea91 0f03 	teqeq	r1, r3
   b7cb0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b7cb4:	bd30      	pop	{r4, r5, pc}
   b7cb6:	bf00      	nop

000b7cb8 <__aeabi_ui2d>:
   b7cb8:	f090 0f00 	teq	r0, #0
   b7cbc:	bf04      	itt	eq
   b7cbe:	2100      	moveq	r1, #0
   b7cc0:	4770      	bxeq	lr
   b7cc2:	b530      	push	{r4, r5, lr}
   b7cc4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7cc8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7ccc:	f04f 0500 	mov.w	r5, #0
   b7cd0:	f04f 0100 	mov.w	r1, #0
   b7cd4:	e750      	b.n	b7b78 <__adddf3+0x138>
   b7cd6:	bf00      	nop

000b7cd8 <__aeabi_i2d>:
   b7cd8:	f090 0f00 	teq	r0, #0
   b7cdc:	bf04      	itt	eq
   b7cde:	2100      	moveq	r1, #0
   b7ce0:	4770      	bxeq	lr
   b7ce2:	b530      	push	{r4, r5, lr}
   b7ce4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7ce8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7cec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b7cf0:	bf48      	it	mi
   b7cf2:	4240      	negmi	r0, r0
   b7cf4:	f04f 0100 	mov.w	r1, #0
   b7cf8:	e73e      	b.n	b7b78 <__adddf3+0x138>
   b7cfa:	bf00      	nop

000b7cfc <__aeabi_f2d>:
   b7cfc:	0042      	lsls	r2, r0, #1
   b7cfe:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b7d02:	ea4f 0131 	mov.w	r1, r1, rrx
   b7d06:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b7d0a:	bf1f      	itttt	ne
   b7d0c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b7d10:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b7d14:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b7d18:	4770      	bxne	lr
   b7d1a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b7d1e:	bf08      	it	eq
   b7d20:	4770      	bxeq	lr
   b7d22:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b7d26:	bf04      	itt	eq
   b7d28:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b7d2c:	4770      	bxeq	lr
   b7d2e:	b530      	push	{r4, r5, lr}
   b7d30:	f44f 7460 	mov.w	r4, #896	; 0x380
   b7d34:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7d38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b7d3c:	e71c      	b.n	b7b78 <__adddf3+0x138>
   b7d3e:	bf00      	nop

000b7d40 <__aeabi_ul2d>:
   b7d40:	ea50 0201 	orrs.w	r2, r0, r1
   b7d44:	bf08      	it	eq
   b7d46:	4770      	bxeq	lr
   b7d48:	b530      	push	{r4, r5, lr}
   b7d4a:	f04f 0500 	mov.w	r5, #0
   b7d4e:	e00a      	b.n	b7d66 <__aeabi_l2d+0x16>

000b7d50 <__aeabi_l2d>:
   b7d50:	ea50 0201 	orrs.w	r2, r0, r1
   b7d54:	bf08      	it	eq
   b7d56:	4770      	bxeq	lr
   b7d58:	b530      	push	{r4, r5, lr}
   b7d5a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b7d5e:	d502      	bpl.n	b7d66 <__aeabi_l2d+0x16>
   b7d60:	4240      	negs	r0, r0
   b7d62:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7d66:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7d6a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7d6e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b7d72:	f43f aed8 	beq.w	b7b26 <__adddf3+0xe6>
   b7d76:	f04f 0203 	mov.w	r2, #3
   b7d7a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b7d7e:	bf18      	it	ne
   b7d80:	3203      	addne	r2, #3
   b7d82:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b7d86:	bf18      	it	ne
   b7d88:	3203      	addne	r2, #3
   b7d8a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b7d8e:	f1c2 0320 	rsb	r3, r2, #32
   b7d92:	fa00 fc03 	lsl.w	ip, r0, r3
   b7d96:	fa20 f002 	lsr.w	r0, r0, r2
   b7d9a:	fa01 fe03 	lsl.w	lr, r1, r3
   b7d9e:	ea40 000e 	orr.w	r0, r0, lr
   b7da2:	fa21 f102 	lsr.w	r1, r1, r2
   b7da6:	4414      	add	r4, r2
   b7da8:	e6bd      	b.n	b7b26 <__adddf3+0xe6>
   b7daa:	bf00      	nop

000b7dac <__aeabi_dmul>:
   b7dac:	b570      	push	{r4, r5, r6, lr}
   b7dae:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b7db2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b7db6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b7dba:	bf1d      	ittte	ne
   b7dbc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b7dc0:	ea94 0f0c 	teqne	r4, ip
   b7dc4:	ea95 0f0c 	teqne	r5, ip
   b7dc8:	f000 f8de 	bleq	b7f88 <__aeabi_dmul+0x1dc>
   b7dcc:	442c      	add	r4, r5
   b7dce:	ea81 0603 	eor.w	r6, r1, r3
   b7dd2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b7dd6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b7dda:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b7dde:	bf18      	it	ne
   b7de0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b7de4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7de8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b7dec:	d038      	beq.n	b7e60 <__aeabi_dmul+0xb4>
   b7dee:	fba0 ce02 	umull	ip, lr, r0, r2
   b7df2:	f04f 0500 	mov.w	r5, #0
   b7df6:	fbe1 e502 	umlal	lr, r5, r1, r2
   b7dfa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b7dfe:	fbe0 e503 	umlal	lr, r5, r0, r3
   b7e02:	f04f 0600 	mov.w	r6, #0
   b7e06:	fbe1 5603 	umlal	r5, r6, r1, r3
   b7e0a:	f09c 0f00 	teq	ip, #0
   b7e0e:	bf18      	it	ne
   b7e10:	f04e 0e01 	orrne.w	lr, lr, #1
   b7e14:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b7e18:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b7e1c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b7e20:	d204      	bcs.n	b7e2c <__aeabi_dmul+0x80>
   b7e22:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b7e26:	416d      	adcs	r5, r5
   b7e28:	eb46 0606 	adc.w	r6, r6, r6
   b7e2c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b7e30:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b7e34:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b7e38:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b7e3c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b7e40:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b7e44:	bf88      	it	hi
   b7e46:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b7e4a:	d81e      	bhi.n	b7e8a <__aeabi_dmul+0xde>
   b7e4c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b7e50:	bf08      	it	eq
   b7e52:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b7e56:	f150 0000 	adcs.w	r0, r0, #0
   b7e5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7e5e:	bd70      	pop	{r4, r5, r6, pc}
   b7e60:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b7e64:	ea46 0101 	orr.w	r1, r6, r1
   b7e68:	ea40 0002 	orr.w	r0, r0, r2
   b7e6c:	ea81 0103 	eor.w	r1, r1, r3
   b7e70:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b7e74:	bfc2      	ittt	gt
   b7e76:	ebd4 050c 	rsbsgt	r5, r4, ip
   b7e7a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b7e7e:	bd70      	popgt	{r4, r5, r6, pc}
   b7e80:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7e84:	f04f 0e00 	mov.w	lr, #0
   b7e88:	3c01      	subs	r4, #1
   b7e8a:	f300 80ab 	bgt.w	b7fe4 <__aeabi_dmul+0x238>
   b7e8e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b7e92:	bfde      	ittt	le
   b7e94:	2000      	movle	r0, #0
   b7e96:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b7e9a:	bd70      	pople	{r4, r5, r6, pc}
   b7e9c:	f1c4 0400 	rsb	r4, r4, #0
   b7ea0:	3c20      	subs	r4, #32
   b7ea2:	da35      	bge.n	b7f10 <__aeabi_dmul+0x164>
   b7ea4:	340c      	adds	r4, #12
   b7ea6:	dc1b      	bgt.n	b7ee0 <__aeabi_dmul+0x134>
   b7ea8:	f104 0414 	add.w	r4, r4, #20
   b7eac:	f1c4 0520 	rsb	r5, r4, #32
   b7eb0:	fa00 f305 	lsl.w	r3, r0, r5
   b7eb4:	fa20 f004 	lsr.w	r0, r0, r4
   b7eb8:	fa01 f205 	lsl.w	r2, r1, r5
   b7ebc:	ea40 0002 	orr.w	r0, r0, r2
   b7ec0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b7ec4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b7ec8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b7ecc:	fa21 f604 	lsr.w	r6, r1, r4
   b7ed0:	eb42 0106 	adc.w	r1, r2, r6
   b7ed4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7ed8:	bf08      	it	eq
   b7eda:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7ede:	bd70      	pop	{r4, r5, r6, pc}
   b7ee0:	f1c4 040c 	rsb	r4, r4, #12
   b7ee4:	f1c4 0520 	rsb	r5, r4, #32
   b7ee8:	fa00 f304 	lsl.w	r3, r0, r4
   b7eec:	fa20 f005 	lsr.w	r0, r0, r5
   b7ef0:	fa01 f204 	lsl.w	r2, r1, r4
   b7ef4:	ea40 0002 	orr.w	r0, r0, r2
   b7ef8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7efc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b7f00:	f141 0100 	adc.w	r1, r1, #0
   b7f04:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7f08:	bf08      	it	eq
   b7f0a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7f0e:	bd70      	pop	{r4, r5, r6, pc}
   b7f10:	f1c4 0520 	rsb	r5, r4, #32
   b7f14:	fa00 f205 	lsl.w	r2, r0, r5
   b7f18:	ea4e 0e02 	orr.w	lr, lr, r2
   b7f1c:	fa20 f304 	lsr.w	r3, r0, r4
   b7f20:	fa01 f205 	lsl.w	r2, r1, r5
   b7f24:	ea43 0302 	orr.w	r3, r3, r2
   b7f28:	fa21 f004 	lsr.w	r0, r1, r4
   b7f2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7f30:	fa21 f204 	lsr.w	r2, r1, r4
   b7f34:	ea20 0002 	bic.w	r0, r0, r2
   b7f38:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b7f3c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7f40:	bf08      	it	eq
   b7f42:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7f46:	bd70      	pop	{r4, r5, r6, pc}
   b7f48:	f094 0f00 	teq	r4, #0
   b7f4c:	d10f      	bne.n	b7f6e <__aeabi_dmul+0x1c2>
   b7f4e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b7f52:	0040      	lsls	r0, r0, #1
   b7f54:	eb41 0101 	adc.w	r1, r1, r1
   b7f58:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7f5c:	bf08      	it	eq
   b7f5e:	3c01      	subeq	r4, #1
   b7f60:	d0f7      	beq.n	b7f52 <__aeabi_dmul+0x1a6>
   b7f62:	ea41 0106 	orr.w	r1, r1, r6
   b7f66:	f095 0f00 	teq	r5, #0
   b7f6a:	bf18      	it	ne
   b7f6c:	4770      	bxne	lr
   b7f6e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b7f72:	0052      	lsls	r2, r2, #1
   b7f74:	eb43 0303 	adc.w	r3, r3, r3
   b7f78:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b7f7c:	bf08      	it	eq
   b7f7e:	3d01      	subeq	r5, #1
   b7f80:	d0f7      	beq.n	b7f72 <__aeabi_dmul+0x1c6>
   b7f82:	ea43 0306 	orr.w	r3, r3, r6
   b7f86:	4770      	bx	lr
   b7f88:	ea94 0f0c 	teq	r4, ip
   b7f8c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b7f90:	bf18      	it	ne
   b7f92:	ea95 0f0c 	teqne	r5, ip
   b7f96:	d00c      	beq.n	b7fb2 <__aeabi_dmul+0x206>
   b7f98:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7f9c:	bf18      	it	ne
   b7f9e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7fa2:	d1d1      	bne.n	b7f48 <__aeabi_dmul+0x19c>
   b7fa4:	ea81 0103 	eor.w	r1, r1, r3
   b7fa8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7fac:	f04f 0000 	mov.w	r0, #0
   b7fb0:	bd70      	pop	{r4, r5, r6, pc}
   b7fb2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7fb6:	bf06      	itte	eq
   b7fb8:	4610      	moveq	r0, r2
   b7fba:	4619      	moveq	r1, r3
   b7fbc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7fc0:	d019      	beq.n	b7ff6 <__aeabi_dmul+0x24a>
   b7fc2:	ea94 0f0c 	teq	r4, ip
   b7fc6:	d102      	bne.n	b7fce <__aeabi_dmul+0x222>
   b7fc8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b7fcc:	d113      	bne.n	b7ff6 <__aeabi_dmul+0x24a>
   b7fce:	ea95 0f0c 	teq	r5, ip
   b7fd2:	d105      	bne.n	b7fe0 <__aeabi_dmul+0x234>
   b7fd4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b7fd8:	bf1c      	itt	ne
   b7fda:	4610      	movne	r0, r2
   b7fdc:	4619      	movne	r1, r3
   b7fde:	d10a      	bne.n	b7ff6 <__aeabi_dmul+0x24a>
   b7fe0:	ea81 0103 	eor.w	r1, r1, r3
   b7fe4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7fe8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b7fec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b7ff0:	f04f 0000 	mov.w	r0, #0
   b7ff4:	bd70      	pop	{r4, r5, r6, pc}
   b7ff6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b7ffa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b7ffe:	bd70      	pop	{r4, r5, r6, pc}

000b8000 <__aeabi_ddiv>:
   b8000:	b570      	push	{r4, r5, r6, lr}
   b8002:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b8006:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b800a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b800e:	bf1d      	ittte	ne
   b8010:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b8014:	ea94 0f0c 	teqne	r4, ip
   b8018:	ea95 0f0c 	teqne	r5, ip
   b801c:	f000 f8a7 	bleq	b816e <__aeabi_ddiv+0x16e>
   b8020:	eba4 0405 	sub.w	r4, r4, r5
   b8024:	ea81 0e03 	eor.w	lr, r1, r3
   b8028:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b802c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b8030:	f000 8088 	beq.w	b8144 <__aeabi_ddiv+0x144>
   b8034:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b8038:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b803c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b8040:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b8044:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b8048:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b804c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b8050:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b8054:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b8058:	429d      	cmp	r5, r3
   b805a:	bf08      	it	eq
   b805c:	4296      	cmpeq	r6, r2
   b805e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b8062:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b8066:	d202      	bcs.n	b806e <__aeabi_ddiv+0x6e>
   b8068:	085b      	lsrs	r3, r3, #1
   b806a:	ea4f 0232 	mov.w	r2, r2, rrx
   b806e:	1ab6      	subs	r6, r6, r2
   b8070:	eb65 0503 	sbc.w	r5, r5, r3
   b8074:	085b      	lsrs	r3, r3, #1
   b8076:	ea4f 0232 	mov.w	r2, r2, rrx
   b807a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b807e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b8082:	ebb6 0e02 	subs.w	lr, r6, r2
   b8086:	eb75 0e03 	sbcs.w	lr, r5, r3
   b808a:	bf22      	ittt	cs
   b808c:	1ab6      	subcs	r6, r6, r2
   b808e:	4675      	movcs	r5, lr
   b8090:	ea40 000c 	orrcs.w	r0, r0, ip
   b8094:	085b      	lsrs	r3, r3, #1
   b8096:	ea4f 0232 	mov.w	r2, r2, rrx
   b809a:	ebb6 0e02 	subs.w	lr, r6, r2
   b809e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b80a2:	bf22      	ittt	cs
   b80a4:	1ab6      	subcs	r6, r6, r2
   b80a6:	4675      	movcs	r5, lr
   b80a8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b80ac:	085b      	lsrs	r3, r3, #1
   b80ae:	ea4f 0232 	mov.w	r2, r2, rrx
   b80b2:	ebb6 0e02 	subs.w	lr, r6, r2
   b80b6:	eb75 0e03 	sbcs.w	lr, r5, r3
   b80ba:	bf22      	ittt	cs
   b80bc:	1ab6      	subcs	r6, r6, r2
   b80be:	4675      	movcs	r5, lr
   b80c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b80c4:	085b      	lsrs	r3, r3, #1
   b80c6:	ea4f 0232 	mov.w	r2, r2, rrx
   b80ca:	ebb6 0e02 	subs.w	lr, r6, r2
   b80ce:	eb75 0e03 	sbcs.w	lr, r5, r3
   b80d2:	bf22      	ittt	cs
   b80d4:	1ab6      	subcs	r6, r6, r2
   b80d6:	4675      	movcs	r5, lr
   b80d8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b80dc:	ea55 0e06 	orrs.w	lr, r5, r6
   b80e0:	d018      	beq.n	b8114 <__aeabi_ddiv+0x114>
   b80e2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b80e6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b80ea:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b80ee:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b80f2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b80f6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b80fa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b80fe:	d1c0      	bne.n	b8082 <__aeabi_ddiv+0x82>
   b8100:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b8104:	d10b      	bne.n	b811e <__aeabi_ddiv+0x11e>
   b8106:	ea41 0100 	orr.w	r1, r1, r0
   b810a:	f04f 0000 	mov.w	r0, #0
   b810e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b8112:	e7b6      	b.n	b8082 <__aeabi_ddiv+0x82>
   b8114:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b8118:	bf04      	itt	eq
   b811a:	4301      	orreq	r1, r0
   b811c:	2000      	moveq	r0, #0
   b811e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b8122:	bf88      	it	hi
   b8124:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b8128:	f63f aeaf 	bhi.w	b7e8a <__aeabi_dmul+0xde>
   b812c:	ebb5 0c03 	subs.w	ip, r5, r3
   b8130:	bf04      	itt	eq
   b8132:	ebb6 0c02 	subseq.w	ip, r6, r2
   b8136:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b813a:	f150 0000 	adcs.w	r0, r0, #0
   b813e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b8142:	bd70      	pop	{r4, r5, r6, pc}
   b8144:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b8148:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b814c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b8150:	bfc2      	ittt	gt
   b8152:	ebd4 050c 	rsbsgt	r5, r4, ip
   b8156:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b815a:	bd70      	popgt	{r4, r5, r6, pc}
   b815c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8160:	f04f 0e00 	mov.w	lr, #0
   b8164:	3c01      	subs	r4, #1
   b8166:	e690      	b.n	b7e8a <__aeabi_dmul+0xde>
   b8168:	ea45 0e06 	orr.w	lr, r5, r6
   b816c:	e68d      	b.n	b7e8a <__aeabi_dmul+0xde>
   b816e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b8172:	ea94 0f0c 	teq	r4, ip
   b8176:	bf08      	it	eq
   b8178:	ea95 0f0c 	teqeq	r5, ip
   b817c:	f43f af3b 	beq.w	b7ff6 <__aeabi_dmul+0x24a>
   b8180:	ea94 0f0c 	teq	r4, ip
   b8184:	d10a      	bne.n	b819c <__aeabi_ddiv+0x19c>
   b8186:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b818a:	f47f af34 	bne.w	b7ff6 <__aeabi_dmul+0x24a>
   b818e:	ea95 0f0c 	teq	r5, ip
   b8192:	f47f af25 	bne.w	b7fe0 <__aeabi_dmul+0x234>
   b8196:	4610      	mov	r0, r2
   b8198:	4619      	mov	r1, r3
   b819a:	e72c      	b.n	b7ff6 <__aeabi_dmul+0x24a>
   b819c:	ea95 0f0c 	teq	r5, ip
   b81a0:	d106      	bne.n	b81b0 <__aeabi_ddiv+0x1b0>
   b81a2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b81a6:	f43f aefd 	beq.w	b7fa4 <__aeabi_dmul+0x1f8>
   b81aa:	4610      	mov	r0, r2
   b81ac:	4619      	mov	r1, r3
   b81ae:	e722      	b.n	b7ff6 <__aeabi_dmul+0x24a>
   b81b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b81b4:	bf18      	it	ne
   b81b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b81ba:	f47f aec5 	bne.w	b7f48 <__aeabi_dmul+0x19c>
   b81be:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b81c2:	f47f af0d 	bne.w	b7fe0 <__aeabi_dmul+0x234>
   b81c6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b81ca:	f47f aeeb 	bne.w	b7fa4 <__aeabi_dmul+0x1f8>
   b81ce:	e712      	b.n	b7ff6 <__aeabi_dmul+0x24a>

000b81d0 <__gedf2>:
   b81d0:	f04f 3cff 	mov.w	ip, #4294967295
   b81d4:	e006      	b.n	b81e4 <__cmpdf2+0x4>
   b81d6:	bf00      	nop

000b81d8 <__ledf2>:
   b81d8:	f04f 0c01 	mov.w	ip, #1
   b81dc:	e002      	b.n	b81e4 <__cmpdf2+0x4>
   b81de:	bf00      	nop

000b81e0 <__cmpdf2>:
   b81e0:	f04f 0c01 	mov.w	ip, #1
   b81e4:	f84d cd04 	str.w	ip, [sp, #-4]!
   b81e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b81ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b81f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b81f4:	bf18      	it	ne
   b81f6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b81fa:	d01b      	beq.n	b8234 <__cmpdf2+0x54>
   b81fc:	b001      	add	sp, #4
   b81fe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b8202:	bf0c      	ite	eq
   b8204:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b8208:	ea91 0f03 	teqne	r1, r3
   b820c:	bf02      	ittt	eq
   b820e:	ea90 0f02 	teqeq	r0, r2
   b8212:	2000      	moveq	r0, #0
   b8214:	4770      	bxeq	lr
   b8216:	f110 0f00 	cmn.w	r0, #0
   b821a:	ea91 0f03 	teq	r1, r3
   b821e:	bf58      	it	pl
   b8220:	4299      	cmppl	r1, r3
   b8222:	bf08      	it	eq
   b8224:	4290      	cmpeq	r0, r2
   b8226:	bf2c      	ite	cs
   b8228:	17d8      	asrcs	r0, r3, #31
   b822a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b822e:	f040 0001 	orr.w	r0, r0, #1
   b8232:	4770      	bx	lr
   b8234:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b8238:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b823c:	d102      	bne.n	b8244 <__cmpdf2+0x64>
   b823e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b8242:	d107      	bne.n	b8254 <__cmpdf2+0x74>
   b8244:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b8248:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b824c:	d1d6      	bne.n	b81fc <__cmpdf2+0x1c>
   b824e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b8252:	d0d3      	beq.n	b81fc <__cmpdf2+0x1c>
   b8254:	f85d 0b04 	ldr.w	r0, [sp], #4
   b8258:	4770      	bx	lr
   b825a:	bf00      	nop

000b825c <__aeabi_cdrcmple>:
   b825c:	4684      	mov	ip, r0
   b825e:	4610      	mov	r0, r2
   b8260:	4662      	mov	r2, ip
   b8262:	468c      	mov	ip, r1
   b8264:	4619      	mov	r1, r3
   b8266:	4663      	mov	r3, ip
   b8268:	e000      	b.n	b826c <__aeabi_cdcmpeq>
   b826a:	bf00      	nop

000b826c <__aeabi_cdcmpeq>:
   b826c:	b501      	push	{r0, lr}
   b826e:	f7ff ffb7 	bl	b81e0 <__cmpdf2>
   b8272:	2800      	cmp	r0, #0
   b8274:	bf48      	it	mi
   b8276:	f110 0f00 	cmnmi.w	r0, #0
   b827a:	bd01      	pop	{r0, pc}

000b827c <__aeabi_dcmpeq>:
   b827c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8280:	f7ff fff4 	bl	b826c <__aeabi_cdcmpeq>
   b8284:	bf0c      	ite	eq
   b8286:	2001      	moveq	r0, #1
   b8288:	2000      	movne	r0, #0
   b828a:	f85d fb08 	ldr.w	pc, [sp], #8
   b828e:	bf00      	nop

000b8290 <__aeabi_dcmplt>:
   b8290:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8294:	f7ff ffea 	bl	b826c <__aeabi_cdcmpeq>
   b8298:	bf34      	ite	cc
   b829a:	2001      	movcc	r0, #1
   b829c:	2000      	movcs	r0, #0
   b829e:	f85d fb08 	ldr.w	pc, [sp], #8
   b82a2:	bf00      	nop

000b82a4 <__aeabi_dcmple>:
   b82a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b82a8:	f7ff ffe0 	bl	b826c <__aeabi_cdcmpeq>
   b82ac:	bf94      	ite	ls
   b82ae:	2001      	movls	r0, #1
   b82b0:	2000      	movhi	r0, #0
   b82b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b82b6:	bf00      	nop

000b82b8 <__aeabi_dcmpge>:
   b82b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b82bc:	f7ff ffce 	bl	b825c <__aeabi_cdrcmple>
   b82c0:	bf94      	ite	ls
   b82c2:	2001      	movls	r0, #1
   b82c4:	2000      	movhi	r0, #0
   b82c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b82ca:	bf00      	nop

000b82cc <__aeabi_dcmpgt>:
   b82cc:	f84d ed08 	str.w	lr, [sp, #-8]!
   b82d0:	f7ff ffc4 	bl	b825c <__aeabi_cdrcmple>
   b82d4:	bf34      	ite	cc
   b82d6:	2001      	movcc	r0, #1
   b82d8:	2000      	movcs	r0, #0
   b82da:	f85d fb08 	ldr.w	pc, [sp], #8
   b82de:	bf00      	nop

000b82e0 <__aeabi_d2f>:
   b82e0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b82e4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b82e8:	bf24      	itt	cs
   b82ea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b82ee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b82f2:	d90d      	bls.n	b8310 <__aeabi_d2f+0x30>
   b82f4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b82f8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b82fc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b8300:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b8304:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b8308:	bf08      	it	eq
   b830a:	f020 0001 	biceq.w	r0, r0, #1
   b830e:	4770      	bx	lr
   b8310:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b8314:	d121      	bne.n	b835a <__aeabi_d2f+0x7a>
   b8316:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b831a:	bfbc      	itt	lt
   b831c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b8320:	4770      	bxlt	lr
   b8322:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8326:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b832a:	f1c2 0218 	rsb	r2, r2, #24
   b832e:	f1c2 0c20 	rsb	ip, r2, #32
   b8332:	fa10 f30c 	lsls.w	r3, r0, ip
   b8336:	fa20 f002 	lsr.w	r0, r0, r2
   b833a:	bf18      	it	ne
   b833c:	f040 0001 	orrne.w	r0, r0, #1
   b8340:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b8344:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b8348:	fa03 fc0c 	lsl.w	ip, r3, ip
   b834c:	ea40 000c 	orr.w	r0, r0, ip
   b8350:	fa23 f302 	lsr.w	r3, r3, r2
   b8354:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b8358:	e7cc      	b.n	b82f4 <__aeabi_d2f+0x14>
   b835a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b835e:	d107      	bne.n	b8370 <__aeabi_d2f+0x90>
   b8360:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b8364:	bf1e      	ittt	ne
   b8366:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b836a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b836e:	4770      	bxne	lr
   b8370:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b8374:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b8378:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b837c:	4770      	bx	lr
   b837e:	bf00      	nop

000b8380 <atexit>:
   b8380:	2300      	movs	r3, #0
   b8382:	4601      	mov	r1, r0
   b8384:	461a      	mov	r2, r3
   b8386:	4618      	mov	r0, r3
   b8388:	f000 b85e 	b.w	b8448 <__register_exitproc>

000b838c <memcpy>:
   b838c:	440a      	add	r2, r1
   b838e:	4291      	cmp	r1, r2
   b8390:	f100 33ff 	add.w	r3, r0, #4294967295
   b8394:	d100      	bne.n	b8398 <memcpy+0xc>
   b8396:	4770      	bx	lr
   b8398:	b510      	push	{r4, lr}
   b839a:	f811 4b01 	ldrb.w	r4, [r1], #1
   b839e:	f803 4f01 	strb.w	r4, [r3, #1]!
   b83a2:	4291      	cmp	r1, r2
   b83a4:	d1f9      	bne.n	b839a <memcpy+0xe>
   b83a6:	bd10      	pop	{r4, pc}

000b83a8 <memset>:
   b83a8:	4402      	add	r2, r0
   b83aa:	4603      	mov	r3, r0
   b83ac:	4293      	cmp	r3, r2
   b83ae:	d100      	bne.n	b83b2 <memset+0xa>
   b83b0:	4770      	bx	lr
   b83b2:	f803 1b01 	strb.w	r1, [r3], #1
   b83b6:	e7f9      	b.n	b83ac <memset+0x4>

000b83b8 <srand>:
   b83b8:	b538      	push	{r3, r4, r5, lr}
   b83ba:	4b10      	ldr	r3, [pc, #64]	; (b83fc <srand+0x44>)
   b83bc:	681d      	ldr	r5, [r3, #0]
   b83be:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b83c0:	4604      	mov	r4, r0
   b83c2:	b9b3      	cbnz	r3, b83f2 <srand+0x3a>
   b83c4:	2018      	movs	r0, #24
   b83c6:	f7fd fddf 	bl	b5f88 <malloc>
   b83ca:	4602      	mov	r2, r0
   b83cc:	63a8      	str	r0, [r5, #56]	; 0x38
   b83ce:	b920      	cbnz	r0, b83da <srand+0x22>
   b83d0:	4b0b      	ldr	r3, [pc, #44]	; (b8400 <srand+0x48>)
   b83d2:	480c      	ldr	r0, [pc, #48]	; (b8404 <srand+0x4c>)
   b83d4:	2142      	movs	r1, #66	; 0x42
   b83d6:	f7fd fdff 	bl	b5fd8 <__assert_func>
   b83da:	490b      	ldr	r1, [pc, #44]	; (b8408 <srand+0x50>)
   b83dc:	4b0b      	ldr	r3, [pc, #44]	; (b840c <srand+0x54>)
   b83de:	e9c0 1300 	strd	r1, r3, [r0]
   b83e2:	4b0b      	ldr	r3, [pc, #44]	; (b8410 <srand+0x58>)
   b83e4:	6083      	str	r3, [r0, #8]
   b83e6:	230b      	movs	r3, #11
   b83e8:	8183      	strh	r3, [r0, #12]
   b83ea:	2100      	movs	r1, #0
   b83ec:	2001      	movs	r0, #1
   b83ee:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b83f2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b83f4:	2200      	movs	r2, #0
   b83f6:	611c      	str	r4, [r3, #16]
   b83f8:	615a      	str	r2, [r3, #20]
   b83fa:	bd38      	pop	{r3, r4, r5, pc}
   b83fc:	2003e4f4 	.word	0x2003e4f4
   b8400:	000b8fd9 	.word	0x000b8fd9
   b8404:	000b8ff0 	.word	0x000b8ff0
   b8408:	abcd330e 	.word	0xabcd330e
   b840c:	e66d1234 	.word	0xe66d1234
   b8410:	0005deec 	.word	0x0005deec

000b8414 <strcmp>:
   b8414:	f810 2b01 	ldrb.w	r2, [r0], #1
   b8418:	f811 3b01 	ldrb.w	r3, [r1], #1
   b841c:	2a01      	cmp	r2, #1
   b841e:	bf28      	it	cs
   b8420:	429a      	cmpcs	r2, r3
   b8422:	d0f7      	beq.n	b8414 <strcmp>
   b8424:	1ad0      	subs	r0, r2, r3
   b8426:	4770      	bx	lr

000b8428 <strcpy>:
   b8428:	4603      	mov	r3, r0
   b842a:	f811 2b01 	ldrb.w	r2, [r1], #1
   b842e:	f803 2b01 	strb.w	r2, [r3], #1
   b8432:	2a00      	cmp	r2, #0
   b8434:	d1f9      	bne.n	b842a <strcpy+0x2>
   b8436:	4770      	bx	lr

000b8438 <strlen>:
   b8438:	4603      	mov	r3, r0
   b843a:	f813 2b01 	ldrb.w	r2, [r3], #1
   b843e:	2a00      	cmp	r2, #0
   b8440:	d1fb      	bne.n	b843a <strlen+0x2>
   b8442:	1a18      	subs	r0, r3, r0
   b8444:	3801      	subs	r0, #1
   b8446:	4770      	bx	lr

000b8448 <__register_exitproc>:
   b8448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b844c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b8508 <__register_exitproc+0xc0>
   b8450:	4606      	mov	r6, r0
   b8452:	f8d8 0000 	ldr.w	r0, [r8]
   b8456:	461f      	mov	r7, r3
   b8458:	460d      	mov	r5, r1
   b845a:	4691      	mov	r9, r2
   b845c:	f000 f856 	bl	b850c <__retarget_lock_acquire_recursive>
   b8460:	4b25      	ldr	r3, [pc, #148]	; (b84f8 <__register_exitproc+0xb0>)
   b8462:	681c      	ldr	r4, [r3, #0]
   b8464:	b934      	cbnz	r4, b8474 <__register_exitproc+0x2c>
   b8466:	4c25      	ldr	r4, [pc, #148]	; (b84fc <__register_exitproc+0xb4>)
   b8468:	601c      	str	r4, [r3, #0]
   b846a:	4b25      	ldr	r3, [pc, #148]	; (b8500 <__register_exitproc+0xb8>)
   b846c:	b113      	cbz	r3, b8474 <__register_exitproc+0x2c>
   b846e:	681b      	ldr	r3, [r3, #0]
   b8470:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b8474:	6863      	ldr	r3, [r4, #4]
   b8476:	2b1f      	cmp	r3, #31
   b8478:	dd07      	ble.n	b848a <__register_exitproc+0x42>
   b847a:	f8d8 0000 	ldr.w	r0, [r8]
   b847e:	f000 f847 	bl	b8510 <__retarget_lock_release_recursive>
   b8482:	f04f 30ff 	mov.w	r0, #4294967295
   b8486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b848a:	b34e      	cbz	r6, b84e0 <__register_exitproc+0x98>
   b848c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b8490:	b988      	cbnz	r0, b84b6 <__register_exitproc+0x6e>
   b8492:	4b1c      	ldr	r3, [pc, #112]	; (b8504 <__register_exitproc+0xbc>)
   b8494:	b923      	cbnz	r3, b84a0 <__register_exitproc+0x58>
   b8496:	f8d8 0000 	ldr.w	r0, [r8]
   b849a:	f000 f838 	bl	b850e <__retarget_lock_release>
   b849e:	e7f0      	b.n	b8482 <__register_exitproc+0x3a>
   b84a0:	f44f 7084 	mov.w	r0, #264	; 0x108
   b84a4:	f7fd fd70 	bl	b5f88 <malloc>
   b84a8:	2800      	cmp	r0, #0
   b84aa:	d0f4      	beq.n	b8496 <__register_exitproc+0x4e>
   b84ac:	2300      	movs	r3, #0
   b84ae:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b84b2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b84b6:	6863      	ldr	r3, [r4, #4]
   b84b8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b84bc:	2201      	movs	r2, #1
   b84be:	409a      	lsls	r2, r3
   b84c0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b84c4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b84c8:	4313      	orrs	r3, r2
   b84ca:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b84ce:	2e02      	cmp	r6, #2
   b84d0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b84d4:	bf02      	ittt	eq
   b84d6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b84da:	4313      	orreq	r3, r2
   b84dc:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b84e0:	6863      	ldr	r3, [r4, #4]
   b84e2:	f8d8 0000 	ldr.w	r0, [r8]
   b84e6:	1c5a      	adds	r2, r3, #1
   b84e8:	3302      	adds	r3, #2
   b84ea:	6062      	str	r2, [r4, #4]
   b84ec:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b84f0:	f000 f80e 	bl	b8510 <__retarget_lock_release_recursive>
   b84f4:	2000      	movs	r0, #0
   b84f6:	e7c6      	b.n	b8486 <__register_exitproc+0x3e>
   b84f8:	2003e7ec 	.word	0x2003e7ec
   b84fc:	2003e760 	.word	0x2003e760
   b8500:	00000000 	.word	0x00000000
   b8504:	000b5f89 	.word	0x000b5f89
   b8508:	2003e558 	.word	0x2003e558

000b850c <__retarget_lock_acquire_recursive>:
   b850c:	4770      	bx	lr

000b850e <__retarget_lock_release>:
   b850e:	4770      	bx	lr

000b8510 <__retarget_lock_release_recursive>:
   b8510:	4770      	bx	lr

000b8512 <link_code_end>:
	...

000b8514 <dynalib_user>:
   b8514:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b8524:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b8534:	7620 7269 7574 6c61 4e00 206f 6843 6e61      virtual.No Chan
   b8544:	6567 2d20 4320 6e61 6563 6c6c 6e69 2067     ge - Cancelling 
   b8554:	4d43 0a44 7b00 6f22 226e 743a 7572 2c65     CMD..{"on":true,
   b8564:	7322 7461 3a22 2c00 6222 6972 3a22 2c00     "sat":.,"bri":.,
   b8574:	6822 6575 3a22 7b00 6f22 226e 663a 6c61     "hue":.{"on":fal
   b8584:	6573 007d 6553 646e 6e69 2067 6f43 6d6d     se}.Sending Comm
   b8594:	6e61 2064 6f74 4820 6575 5000 5455 2f20     and to Hue.PUT /
   b85a4:	7061 2f69 2f00 696c 6867 7374 002f 732f     api/./lights/./s
   b85b4:	6174 6574 4820 5454 2f50 2e31 0031 656b     tate HTTP/1.1.ke
   b85c4:	7065 612d 696c 6576 4800 736f 3a74 0020     ep-alive.Host: .
   b85d4:	6f43 746e 6e65 2d74 654c 676e 6874 203a     Content-Length: 
   b85e4:	4300 6e6f 6574 746e 542d 7079 3a65 7420     .Content-Type: t
   b85f4:	7865 2f74 6c70 6961 3b6e 6863 7261 6573     ext/plain;charse
   b8604:	3d74 5455 2d46 0038 7246 6d6f 4820 6575     t=UTF-8.From Hue
   b8614:	4900 546f 654e 7774 726f 006b 6241 756f     .IoTNetwork.Abou
   b8624:	2074 6f74 6120 7474 6d65 7470 7420 206f     t to attempt to 
   b8634:	6f63 6e6e 6365 2e74 2e2e 000a 002e 4d42     connect.......BM
   b8644:	3245 3038 6120 2074 6461 7264 7365 2073     E280 at address 
   b8654:	7830 3025 5832 6620 6961 656c 2064 6f74     0x%02X failed to
   b8664:	7320 6174 7472 4300 6e6f 656e 7463 6465      start.Connected
   b8674:	0a21 2500 322e 3b66 2e25 6632 4e00 746f     !..%.2f;%.2f.Not
   b8684:	6c20 7669 3a65 2520 0a73 4300 6f6c 6573      live: %s..Close
   b8694:	2e64 2e2e 540a 203a 2e25 6632 0a46 4852     d....T: %.2fF.RH
   b86a4:	253a 322e 2566 2025 4f00 6570 286e 6873     :%.2f%% .Open(sh
   b86b4:	2968 540a 203a 2e25 6632 0a46 4852 253a     h).T: %.2fF.RH:%
   b86c4:	322e 2566 2025 4f00 6570 216e 540a 203a     .2f%% .Open!.T: 
   b86d4:	2e25 6632 0a46 4852 253a 322e 2566 2025     %.2fF.RH:%.2f%% 
   b86e4:	2500 0073                                   .%s.

000b86e8 <_ZL11hueUsername>:
   b86e8:	514d 5a6c 697a 4f52 5730 6961 4d35 4d73     MQlZziRO0Wai5MsM
   b86f8:	6c48 386c 4178 4155 7151 3877 5135 7272     Hll8xAUAQqw85Qrr
   b8708:	7438 334d 4637 5433                          8tM37F3T.

000b8711 <_ZL8hueHubIP>:
   b8711:	3931 2e32 3631 2e38 2e31 0035 6564 6166     192.168.1.5.defa
   b8721:	6c75 2074 4d00 4253 4c00 4253 3c00 5053     ult .MSB.LSB.<SP
   b8731:	5349 7465 6974 676e 2073 6564 6166 6c75     ISettings defaul
   b8741:	3e74 3c00 5053 5349 7465 6974 676e 2073     t>.<SPISettings 
   b8751:	7325 7525 2520 2073 4f4d 4544 7525 003e     %s%u %s MODE%u>.
   b8761:	0000                                         ...

000b8764 <_ZTVN8particle11SPISettingsE>:
	...
   b876c:	489d 000b 488d 000b 488f 000b               .H...H...H..

000b8778 <_ZTV16Adafruit_SSD1306>:
	...
   b8780:	52d9 000b 5369 000b 59d5 000b 66f9 000b     .R..iS...Y...f..
   b8790:	52dd 000b 56ed 000b 5165 000b 4ff5 000b     .R...V..eQ...O..
   b87a0:	57ab 000b 5849 000b 587f 000b 589b 000b     .W..IX...X...X..

000b87b0 <_ZL4font>:
   b87b0:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b87c0:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b87d0:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b87e0:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b87f0:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b8800:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b8810:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b8820:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b8830:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b8840:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b8850:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b8860:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b8870:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b8880:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b8890:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b88a0:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b88b0:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b88c0:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b88d0:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b88e0:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b88f0:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b8900:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b8910:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b8920:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b8930:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b8940:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b8950:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b8960:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b8970:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b8980:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b8990:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b89a0:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b89b0:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b89c0:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b89d0:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b89e0:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b89f0:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b8a00:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b8a10:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b8a20:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b8a30:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b8a40:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   b8a50:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b8a60:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b8a70:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   b8a80:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b8a90:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   b8aa0:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   b8ab0:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   b8ac0:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b8ad0:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b8ae0:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b8af0:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b8b00:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b8b10:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b8b20:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   b8b30:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   b8b40:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   b8b50:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   b8b60:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   b8b70:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   b8b80:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   b8b90:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   b8ba0:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   b8bb0:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   b8bc0:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   b8bd0:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   b8be0:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   b8bf0:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   b8c00:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   b8c10:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   b8c20:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   b8c30:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   b8c40:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   b8c50:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   b8c60:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   b8c70:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   b8c80:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   b8c90:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   b8ca0:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000b8cac <_ZTV12Adafruit_GFX>:
	...
   b8cbc:	59d5 000b 66f9 000b 40a5 000b 56ed 000b     .Y...f...@...V..
   b8ccc:	5813 000b 582f 000b 57ab 000b 5849 000b     .X../X...W..IX..
   b8cdc:	587f 000b 589b 000b                         .X...X..

000b8ce4 <_ZTVN5spark13EthernetClassE>:
	...
   b8cec:	6057 000b 604d 000b 6043 000b 6039 000b     W`..M`..C`..9`..
   b8cfc:	602d 000b 6021 000b 74b1 000b 74b9 000b     -`..!`...t...t..
   b8d0c:	6015 000b 600d 000b 6003 000b 5ff9 000b     .`...`...`..._..
   b8d1c:	74e9 000b                                   .t..

000b8d20 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b8d20:	0800 1810 2820 3830                         .... (08

000b8d28 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   b8d30:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   b8d40:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b8d50 <_ZTV9IPAddress>:
	...
   b8d58:	6a91 000b 6a81 000b 6a83 000b               .j...j...j..

000b8d64 <_ZTV9USBSerial>:
	...
   b8d6c:	6ba3 000b 6c0b 000b 6be1 000b 66f9 000b     .k...l...k...f..
   b8d7c:	6bd3 000b 6ba5 000b 6bb5 000b 6c05 000b     .k...k...k...l..
   b8d8c:	6bc5 000b 6b9d 000b                         .k...k..

000b8d94 <_ZTV11USARTSerial>:
	...
   b8d9c:	6ca5 000b 6d11 000b 6ce9 000b 66f9 000b     .l...m...l...f..
   b8dac:	6cb9 000b 6cd5 000b 6cc7 000b 6ce3 000b     .l...l...l...l..
   b8dbc:	6ca7 000b 6cab 000b                         .l...l..

000b8dc4 <_ZTV7TwoWire>:
	...
   b8dcc:	6d49 000b 6d93 000b 6d6b 000b 6d4b 000b     Im...m..km..Km..
   b8ddc:	6d73 000b 6d7b 000b 6d83 000b 6d8b 000b     sm..{m...m...m..
   b8dec:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   b8dfc:	2072 203d 6425 0000                         r = %d..

000b8e04 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b8e0c:	6ee1 000b 6f05 000b 73ef 000b 6f13 000b     .n...o...s...o..
   b8e1c:	6ee5 000b                                   .n..

000b8e20 <_ZTV9TCPClient>:
	...
   b8e28:	4111 000b 4145 000b 6e5d 000b 6e77 000b     .A..EA..]n..wn..
   b8e38:	7285 000b 6ea1 000b 70fb 000b 6ed5 000b     .r...n...p...n..
   b8e48:	718d 000b 6fcd 000b 7129 000b 7339 000b     .q...o..)q..9s..
   b8e58:	70c9 000b 6ed7 000b 6e89 000b 6f19 000b     .p...n...n...o..
   b8e68:	6fad 000b                                   .o..

000b8e6c <_ZTVN5spark9WiFiClassE>:
	...
   b8e74:	7453 000b 7449 000b 743f 000b 73f5 000b     St..It..?t...s..
   b8e84:	7433 000b 7427 000b 74b1 000b 74b9 000b     3t..'t...t...t..
   b8e94:	741b 000b 7413 000b 7409 000b 73ff 000b     .t...t...t...s..
   b8ea4:	74e9 000b                                   .t..

000b8ea8 <_ZTVN5spark12NetworkClassE>:
	...
   b8eb0:	7471 000b 747b 000b 7485 000b 748f 000b     qt..{t...t...t..
   b8ec0:	7499 000b 74a5 000b 74b1 000b 74b9 000b     .t...t...t...t..
   b8ed0:	74c1 000b 74cd 000b 74d5 000b 74df 000b     .t...t...t...t..
   b8ee0:	74e9 000b                                   .t..

000b8ee4 <_ZSt7nothrow>:
	...

000b8ee5 <_ZTSSt19_Sp_make_shared_tag>:
   b8ee5:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b8ef5:	6572 5f64 6174 0067 0000                     red_tag....

000b8f00 <_ZTISt19_Sp_make_shared_tag>:
   b8f00:	8f40 000b 8ee5 000b                         @.......

000b8f08 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b8f08:	8fa0 000b 8f14 000b 8fc4 000b               ............

000b8f14 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b8f14:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b8f24:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b8f34:	0045 0000                                   E...

000b8f38 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b8f38:	0000 0000 8f08 000b 785d 000b 7871 000b     ........]x..qx..
   b8f48:	7a05 000b 7a05 000b 78db 000b 781d 000b     .z...z...x...x..
   b8f58:	78c3 000b 7885 000b 784f 000b               .x...x..Ox..

000b8f64 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b8f64:	8fa0 000b 8f70 000b 8f08 000b               ....p.......

000b8f70 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b8f70:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b8f80:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b8f90:	666e 456f 0000 0000                         nfoE....

000b8f98 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b8f98:	0000 0000 8f64 000b 7905 000b 7919 000b     ....d....y...y..
   b8fa8:	7a05 000b 7a05 000b 78db 000b 781d 000b     .z...z...x...x..
   b8fb8:	79d9 000b 7965 000b 792d 000b               .y..ey..-y..

000b8fc4 <_ZTISt9type_info>:
   b8fc4:	8f40 000b 8fcc 000b                         @.......

000b8fcc <_ZTSSt9type_info>:
   b8fcc:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b8fdc:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b8fec:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   b8ffc:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   b900c:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   b901c:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b902c:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b903c:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   b904c:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b905c:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b906d <link_const_variable_data_end>:
   b906d:	00          	.byte	0x00
	...

000b9070 <link_constructors_location>:
   b9070:	000b47c5 	.word	0x000b47c5
   b9074:	000b6061 	.word	0x000b6061
   b9078:	000b63cd 	.word	0x000b63cd
   b907c:	000b66e9 	.word	0x000b66e9
   b9080:	000b6875 	.word	0x000b6875
   b9084:	000b6885 	.word	0x000b6885
   b9088:	000b693d 	.word	0x000b693d
   b908c:	000b745d 	.word	0x000b745d
   b9090:	000b75c1 	.word	0x000b75c1

000b9094 <link_constructors_end>:
	...
