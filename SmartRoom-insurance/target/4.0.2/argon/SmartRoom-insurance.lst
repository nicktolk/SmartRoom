
c:/Users/nick/Documents/IoT/SmartRoom/SmartRoom-insurance/target/4.0.2/argon/SmartRoom-insurance.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000042b0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b82d0  000b82d0  000082d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b82f4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001dc  2003e4ac  000b82f8  0001e4ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000168  2003e688  2003e688  0002e688  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b84d4  000b84d4  000284d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b84fc  000b84fc  000284fc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000f43b8  00000000  00000000  00028500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000103d5  00000000  00000000  0011c8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0003245b  00000000  00000000  0012cc8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000026a0  00000000  00000000  0015f0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00009228  00000000  00000000  00161788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000364b8  00000000  00000000  0016a9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00036f31  00000000  00000000  001a0e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0012e161  00000000  00000000  001d7d99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000072c0  00000000  00000000  00305efc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f001 fede 	bl	b5df2 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f001 fee6 	bl	b5e0e <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e4ac 	.word	0x2003e4ac
   b404c:	000b82f8 	.word	0x000b82f8
   b4050:	2003e688 	.word	0x2003e688
   b4054:	2003e688 	.word	0x2003e688
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f000 fe39 	bl	b4cd8 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b82a4 	.word	0x000b82a4
   b4080:	000b82cc 	.word	0x000b82cc

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b814 	b.w	b40b0 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f829 	bl	b40e0 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f000 bdd9 	b.w	b4c48 <_post_loop>

000b4096 <_Znaj>:
   b4096:	f000 bcb9 	b.w	b4a0c <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f000 bcbf 	b.w	b4a1c <free>

000b409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409e:	7800      	ldrb	r0, [r0, #0]
   b40a0:	fab0 f080 	clz	r0, r0
   b40a4:	0940      	lsrs	r0, r0, #5
   b40a6:	4770      	bx	lr

000b40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a8:	2301      	movs	r3, #1
   b40aa:	7003      	strb	r3, [r0, #0]
   b40ac:	4770      	bx	lr
	...

000b40b0 <setup>:
  pixelFill(0, numLights, color);
  pixel.show();
}


void setup() {
   b40b0:	b507      	push	{r0, r1, r2, lr}
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   b40b2:	f000 fc93 	bl	b49dc <spark_cloud_flag_connect>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b40b6:	2200      	movs	r2, #0
   b40b8:	e9cd 2200 	strd	r2, r2, [sp]
   b40bc:	4905      	ldr	r1, [pc, #20]	; (b40d4 <setup+0x24>)
   b40be:	4806      	ldr	r0, [pc, #24]	; (b40d8 <setup+0x28>)
   b40c0:	2301      	movs	r3, #1
   b40c2:	f000 fc93 	bl	b49ec <spark_subscribe>
  Particle.connect();
  Particle.subscribe("tempF", setTower);
  pixel.setBrightness(15);
   b40c6:	4805      	ldr	r0, [pc, #20]	; (b40dc <setup+0x2c>)
   b40c8:	210f      	movs	r1, #15
}
   b40ca:	b003      	add	sp, #12
   b40cc:	f85d eb04 	ldr.w	lr, [sp], #4
  pixel.setBrightness(15);
   b40d0:	f000 bab3 	b.w	b463a <_ZN17Adafruit_NeoPixel13setBrightnessEh>
   b40d4:	000b410d 	.word	0x000b410d
   b40d8:	000b7cf8 	.word	0x000b7cf8
   b40dc:	2003e698 	.word	0x2003e698

000b40e0 <loop>:

void loop() {
  delay(1000);
   b40e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b40e4:	f000 bd84 	b.w	b4bf0 <delay>

000b40e8 <_Z9pixelFilliim>:
}

void pixelFill(int startPixel, int endPixel, uint32_t colorIn){
   b40e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  for (int i = startPixel; i < endPixel; i++){
    pixel.setPixelColor(i, colorIn);
   b40ea:	4e07      	ldr	r6, [pc, #28]	; (b4108 <_Z9pixelFilliim+0x20>)
void pixelFill(int startPixel, int endPixel, uint32_t colorIn){
   b40ec:	4604      	mov	r4, r0
   b40ee:	460d      	mov	r5, r1
   b40f0:	4617      	mov	r7, r2
  for (int i = startPixel; i < endPixel; i++){
   b40f2:	42ac      	cmp	r4, r5
   b40f4:	da06      	bge.n	b4104 <_Z9pixelFilliim+0x1c>
    pixel.setPixelColor(i, colorIn);
   b40f6:	b2a1      	uxth	r1, r4
   b40f8:	463a      	mov	r2, r7
   b40fa:	4630      	mov	r0, r6
   b40fc:	f000 fa5a 	bl	b45b4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
  for (int i = startPixel; i < endPixel; i++){
   b4100:	3401      	adds	r4, #1
   b4102:	e7f6      	b.n	b40f2 <_Z9pixelFilliim+0xa>
  }
}
   b4104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b4106:	bf00      	nop
   b4108:	2003e698 	.word	0x2003e698

000b410c <_Z8setTowerPKcS0_>:
{
   b410c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  tempF = atof(data);
   b410e:	4608      	mov	r0, r1
   b4110:	f001 fe6c 	bl	b5dec <atof>
   b4114:	ec51 0b10 	vmov	r0, r1, d0
   b4118:	f001 fdf4 	bl	b5d04 <__aeabi_d2f>
   b411c:	ee07 0a90 	vmov	s15, r0
   b4120:	4c1f      	ldr	r4, [pc, #124]	; (b41a0 <_Z8setTowerPKcS0_+0x94>)
  numLights = map((int)tempF*100, minTemp*100, maxTemp*100, 0, PIXEL_COUNT);
   b4122:	4e20      	ldr	r6, [pc, #128]	; (b41a4 <_Z8setTowerPKcS0_+0x98>)
  tempF = atof(data);
   b4124:	6020      	str	r0, [r4, #0]
  numLights = map((int)tempF*100, minTemp*100, maxTemp*100, 0, PIXEL_COUNT);
   b4126:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b412a:	2564      	movs	r5, #100	; 0x64
   b412c:	ee17 0a90 	vmov	r0, s15
   b4130:	232e      	movs	r3, #46	; 0x2e
   b4132:	9300      	str	r3, [sp, #0]
   b4134:	f641 6214 	movw	r2, #7700	; 0x1e14
   b4138:	2300      	movs	r3, #0
   b413a:	f641 4184 	movw	r1, #7300	; 0x1c84
   b413e:	4368      	muls	r0, r5
   b4140:	f000 fd4a 	bl	b4bd8 <_Z3mapiiiii>
  b = map((int)tempF*100, minTemp*100, maxTemp*100, 0xff, 0);
   b4144:	edd4 7a00 	vldr	s15, [r4]
  numLights = map((int)tempF*100, minTemp*100, maxTemp*100, 0, PIXEL_COUNT);
   b4148:	6030      	str	r0, [r6, #0]
  b = map((int)tempF*100, minTemp*100, maxTemp*100, 0xff, 0);
   b414a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b414e:	2400      	movs	r4, #0
   b4150:	ee17 0a90 	vmov	r0, s15
   b4154:	f641 4184 	movw	r1, #7300	; 0x1c84
   b4158:	9400      	str	r4, [sp, #0]
   b415a:	23ff      	movs	r3, #255	; 0xff
   b415c:	f641 6214 	movw	r2, #7700	; 0x1e14
   b4160:	4368      	muls	r0, r5
   b4162:	f000 fd39 	bl	b4bd8 <_Z3mapiiiii>
  b = (b < 0) ? 0 : (b > 0xff) ? 0xff : b;
   b4166:	4b10      	ldr	r3, [pc, #64]	; (b41a8 <_Z8setTowerPKcS0_+0x9c>)
  color = ((r << 8) | g) << 8 | b;
   b4168:	4f10      	ldr	r7, [pc, #64]	; (b41ac <_Z8setTowerPKcS0_+0xa0>)
  pixel.clear();
   b416a:	4d11      	ldr	r5, [pc, #68]	; (b41b0 <_Z8setTowerPKcS0_+0xa4>)
  r = 0xff - b;
   b416c:	4a11      	ldr	r2, [pc, #68]	; (b41b4 <_Z8setTowerPKcS0_+0xa8>)
   b416e:	f380 0008 	usat	r0, #8, r0
  b = (b < 0) ? 0 : (b > 0xff) ? 0xff : b;
   b4172:	6018      	str	r0, [r3, #0]
  g = 0;
   b4174:	4b10      	ldr	r3, [pc, #64]	; (b41b8 <_Z8setTowerPKcS0_+0xac>)
   b4176:	601c      	str	r4, [r3, #0]
  r = 0xff - b;
   b4178:	f1c0 03ff 	rsb	r3, r0, #255	; 0xff
  color = ((r << 8) | g) << 8 | b;
   b417c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   b4180:	6038      	str	r0, [r7, #0]
  pixel.clear();
   b4182:	4628      	mov	r0, r5
  r = 0xff - b;
   b4184:	6013      	str	r3, [r2, #0]
  pixel.clear();
   b4186:	f000 fa7f 	bl	b4688 <_ZN17Adafruit_NeoPixel5clearEv>
  pixelFill(0, numLights, color);
   b418a:	4620      	mov	r0, r4
   b418c:	683a      	ldr	r2, [r7, #0]
   b418e:	6831      	ldr	r1, [r6, #0]
   b4190:	f7ff ffaa 	bl	b40e8 <_Z9pixelFilliim>
  pixel.show();
   b4194:	4628      	mov	r0, r5
}
   b4196:	b003      	add	sp, #12
   b4198:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  pixel.show();
   b419c:	f000 b85e 	b.w	b425c <_ZN17Adafruit_NeoPixel4showEv>
   b41a0:	2003e6b0 	.word	0x2003e6b0
   b41a4:	2003e694 	.word	0x2003e694
   b41a8:	2003e688 	.word	0x2003e688
   b41ac:	2003e68c 	.word	0x2003e68c
   b41b0:	2003e698 	.word	0x2003e698
   b41b4:	2003e6ac 	.word	0x2003e6ac
   b41b8:	2003e690 	.word	0x2003e690

000b41bc <_GLOBAL__sub_I_numLights>:
Adafruit_NeoPixel pixel ( PIXEL_COUNT , PIXEL_PIN , PIXEL_TYPE ); // declare object
   b41bc:	2302      	movs	r3, #2
   b41be:	4802      	ldr	r0, [pc, #8]	; (b41c8 <_GLOBAL__sub_I_numLights+0xc>)
   b41c0:	461a      	mov	r2, r3
   b41c2:	212e      	movs	r1, #46	; 0x2e
   b41c4:	f000 b839 	b.w	b423a <_ZN17Adafruit_NeoPixelC1Ethh>
   b41c8:	2003e698 	.word	0x2003e698

000b41cc <_ZN17Adafruit_NeoPixel12updateLengthEt>:

uint8_t Adafruit_NeoPixel::getType() const {
    return type;
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b41cc:	b538      	push	{r3, r4, r5, lr}
   b41ce:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   b41d0:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b41d2:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   b41d4:	b108      	cbz	r0, b41da <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   b41d6:	f000 fc21 	bl	b4a1c <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   b41da:	79a3      	ldrb	r3, [r4, #6]
   b41dc:	2b06      	cmp	r3, #6
   b41de:	bf0c      	ite	eq
   b41e0:	2004      	moveq	r0, #4
   b41e2:	2003      	movne	r0, #3
   b41e4:	fb10 f005 	smulbb	r0, r0, r5
   b41e8:	b280      	uxth	r0, r0
   b41ea:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   b41ec:	f000 fc0e 	bl	b4a0c <malloc>
   b41f0:	60e0      	str	r0, [r4, #12]
   b41f2:	b128      	cbz	r0, b4200 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   b41f4:	88a2      	ldrh	r2, [r4, #4]
   b41f6:	2100      	movs	r1, #0
   b41f8:	f001 fe09 	bl	b5e0e <memset>
    numLEDs = n;
   b41fc:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
   b41fe:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
   b4200:	80a0      	strh	r0, [r4, #4]
   b4202:	8060      	strh	r0, [r4, #2]
}
   b4204:	e7fb      	b.n	b41fe <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>

000b4206 <_ZN17Adafruit_NeoPixel6setPinEh>:
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b4206:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (begun) {
   b4208:	7803      	ldrb	r3, [r0, #0]
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b420a:	4605      	mov	r5, r0
   b420c:	460c      	mov	r4, r1
    if (begun) {
   b420e:	b11b      	cbz	r3, b4218 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   b4210:	79c0      	ldrb	r0, [r0, #7]
   b4212:	2100      	movs	r1, #0
   b4214:	f001 f854 	bl	b52c0 <pinMode>
    }
    pin = p;
    if (begun) {
   b4218:	782b      	ldrb	r3, [r5, #0]
    pin = p;
   b421a:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   b421c:	b15b      	cbz	r3, b4236 <_ZN17Adafruit_NeoPixel6setPinEh+0x30>
        pinMode(p, OUTPUT);
   b421e:	b2a0      	uxth	r0, r4
   b4220:	2101      	movs	r1, #1
   b4222:	9001      	str	r0, [sp, #4]
   b4224:	f001 f84c 	bl	b52c0 <pinMode>
        digitalWrite(p, LOW);
   b4228:	9801      	ldr	r0, [sp, #4]
   b422a:	2100      	movs	r1, #0
    }
}
   b422c:	b003      	add	sp, #12
   b422e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        digitalWrite(p, LOW);
   b4232:	f001 b856 	b.w	b52e2 <digitalWrite>
}
   b4236:	b003      	add	sp, #12
   b4238:	bd30      	pop	{r4, r5, pc}

000b423a <_ZN17Adafruit_NeoPixelC1Ethh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b423a:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b423c:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b423e:	4604      	mov	r4, r0
   b4240:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b4242:	7183      	strb	r3, [r0, #6]
   b4244:	e9c0 5503 	strd	r5, r5, [r0, #12]
   b4248:	7005      	strb	r5, [r0, #0]
   b424a:	7205      	strb	r5, [r0, #8]
  updateLength(n);
   b424c:	f7ff ffbe 	bl	b41cc <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   b4250:	4620      	mov	r0, r4
   b4252:	4631      	mov	r1, r6
   b4254:	f7ff ffd7 	bl	b4206 <_ZN17Adafruit_NeoPixel6setPinEh>
}
   b4258:	4620      	mov	r0, r4
   b425a:	bd70      	pop	{r4, r5, r6, pc}

000b425c <_ZN17Adafruit_NeoPixel4showEv>:

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   b425c:	68c3      	ldr	r3, [r0, #12]
   b425e:	2b00      	cmp	r3, #0
   b4260:	f000 81a4 	beq.w	b45ac <_ZN17Adafruit_NeoPixel4showEv+0x350>
void Adafruit_NeoPixel::show(void) {
   b4264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4268:	7983      	ldrb	r3, [r0, #6]
   b426a:	3b02      	subs	r3, #2
   b426c:	b2db      	uxtb	r3, r3
   b426e:	2b04      	cmp	r3, #4
   b4270:	bf9c      	itt	ls
   b4272:	4abf      	ldrls	r2, [pc, #764]	; (b4570 <_ZN17Adafruit_NeoPixel4showEv+0x314>)
   b4274:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   b4278:	b085      	sub	sp, #20
   b427a:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   b427c:	bf88      	it	hi
   b427e:	2432      	movhi	r4, #50	; 0x32
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b4280:	f000 fa50 	bl	b4724 <HAL_Timer_Get_Micro_Seconds>
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   b4284:	692b      	ldr	r3, [r5, #16]
   b4286:	1ac0      	subs	r0, r0, r3
   b4288:	42a0      	cmp	r0, r4
   b428a:	d3f9      	bcc.n	b4280 <_ZN17Adafruit_NeoPixel4showEv+0x24>

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   b428c:	4cb9      	ldr	r4, [pc, #740]	; (b4574 <_ZN17Adafruit_NeoPixel4showEv+0x318>)
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b428e:	88ae      	ldrh	r6, [r5, #4]
    if( (PWM[device]->ENABLE == 0)                            &&
   b4290:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4294:	b91b      	cbnz	r3, b429e <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4296:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b429a:	2b00      	cmp	r3, #0
   b429c:	db7e      	blt.n	b439c <_ZN17Adafruit_NeoPixel4showEv+0x140>
   b429e:	4cb6      	ldr	r4, [pc, #728]	; (b4578 <_ZN17Adafruit_NeoPixel4showEv+0x31c>)
   b42a0:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b42a4:	b923      	cbnz	r3, b42b0 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b42a6:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b42aa:	2b00      	cmp	r3, #0
   b42ac:	f2c0 816e 	blt.w	b458c <_ZN17Adafruit_NeoPixel4showEv+0x330>
   b42b0:	4cb2      	ldr	r4, [pc, #712]	; (b457c <_ZN17Adafruit_NeoPixel4showEv+0x320>)
   b42b2:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b42b6:	2b00      	cmp	r3, #0
   b42b8:	f000 8144 	beq.w	b4544 <_ZN17Adafruit_NeoPixel4showEv+0x2e8>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b42bc:	79eb      	ldrb	r3, [r5, #7]
   b42be:	4ab0      	ldr	r2, [pc, #704]	; (b4580 <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b42c0:	4cb0      	ldr	r4, [pc, #704]	; (b4584 <_ZN17Adafruit_NeoPixel4showEv+0x328>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b42c2:	6812      	ldr	r2, [r2, #0]
   b42c4:	0119      	lsls	r1, r3, #4
   b42c6:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   b42ca:	5c57      	ldrb	r7, [r2, r1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b42cc:	49ae      	ldr	r1, [pc, #696]	; (b4588 <_ZN17Adafruit_NeoPixel4showEv+0x32c>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b42ce:	785b      	ldrb	r3, [r3, #1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b42d0:	f8d1 20fc 	ldr.w	r2, [r1, #252]	; 0xfc
   b42d4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   b42d8:	f8c1 20fc 	str.w	r2, [r1, #252]	; 0xfc
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b42dc:	6822      	ldr	r2, [r4, #0]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b42de:	f003 031f 	and.w	r3, r3, #31
   b42e2:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   b42e6:	2701      	movs	r7, #1
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b42e8:	433a      	orrs	r2, r7
   b42ea:	6022      	str	r2, [r4, #0]
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   b42ec:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b42ee:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b42f2:	f8d4 9004 	ldr.w	r9, [r4, #4]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b42f6:	409f      	lsls	r7, r3
      for(uint16_t n=0; n<numBytes; n++) {
   b42f8:	2900      	cmp	r1, #0
   b42fa:	d044      	beq.n	b4386 <_ZN17Adafruit_NeoPixel4showEv+0x12a>
   b42fc:	f04f 0e00 	mov.w	lr, #0
      uint32_t cyc = 0;
   b4300:	4672      	mov	r2, lr

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   b4302:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
        uint8_t pix = *p++;
   b4306:	f818 cb01 	ldrb.w	ip, [r8], #1
   b430a:	2008      	movs	r0, #8
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b430c:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   b430e:	6863      	ldr	r3, [r4, #4]
   b4310:	1a9b      	subs	r3, r3, r2
   b4312:	2b46      	cmp	r3, #70	; 0x46
   b4314:	d9fb      	bls.n	b430e <_ZN17Adafruit_NeoPixel4showEv+0xb2>
          cyc  = DWT->CYCCNT;
   b4316:	6862      	ldr	r2, [r4, #4]
          NRF_GPIO->OUTSET |= pinMask;
   b4318:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   b431c:	ea1c 0f06 	tst.w	ip, r6
          NRF_GPIO->OUTSET |= pinMask;
   b4320:	ea43 0307 	orr.w	r3, r3, r7
   b4324:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
          if(pix & mask) {
   b4328:	d02f      	beq.n	b438a <_ZN17Adafruit_NeoPixel4showEv+0x12e>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   b432a:	6863      	ldr	r3, [r4, #4]
   b432c:	1a9b      	subs	r3, r3, r2
   b432e:	2b28      	cmp	r3, #40	; 0x28
   b4330:	d9fb      	bls.n	b432a <_ZN17Adafruit_NeoPixel4showEv+0xce>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   b4332:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b4336:	3801      	subs	r0, #1
          NRF_GPIO->OUTCLR |= pinMask;
   b4338:	ea43 0307 	orr.w	r3, r3, r7
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b433c:	ea4f 0656 	mov.w	r6, r6, lsr #1
          NRF_GPIO->OUTCLR |= pinMask;
   b4340:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b4344:	d1e3      	bne.n	b430e <_ZN17Adafruit_NeoPixel4showEv+0xb2>
      for(uint16_t n=0; n<numBytes; n++) {
   b4346:	88ab      	ldrh	r3, [r5, #4]
   b4348:	f10e 0e01 	add.w	lr, lr, #1
   b434c:	fa1f fe8e 	uxth.w	lr, lr
   b4350:	4573      	cmp	r3, lr
   b4352:	d8d8      	bhi.n	b4306 <_ZN17Adafruit_NeoPixel4showEv+0xaa>
      while(DWT->CYCCNT - cyc < CYCLES_X00);


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b4354:	f44f 7130 	mov.w	r1, #704	; 0x2c0
   b4358:	fb03 f101 	mul.w	r1, r3, r1
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   b435c:	6863      	ldr	r3, [r4, #4]
   b435e:	1a9b      	subs	r3, r3, r2
   b4360:	2b46      	cmp	r3, #70	; 0x46
   b4362:	d9fb      	bls.n	b435c <_ZN17Adafruit_NeoPixel4showEv+0x100>
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b4364:	6863      	ldr	r3, [r4, #4]
   b4366:	eba3 0909 	sub.w	r9, r3, r9
   b436a:	4589      	cmp	r9, r1
   b436c:	f0c0 80e4 	bcc.w	b4538 <_ZN17Adafruit_NeoPixel4showEv+0x2dc>
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b4370:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b4374:	f000 f9ce 	bl	b4714 <HAL_Delay_Microseconds>
      for(uint16_t n=0; n<numBytes; n++) {
   b4378:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b437a:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b437e:	f8d4 9004 	ldr.w	r9, [r4, #4]
      for(uint16_t n=0; n<numBytes; n++) {
   b4382:	2900      	cmp	r1, #0
   b4384:	d1ba      	bne.n	b42fc <_ZN17Adafruit_NeoPixel4showEv+0xa0>
      uint32_t cyc = 0;
   b4386:	460a      	mov	r2, r1
   b4388:	e7e8      	b.n	b435c <_ZN17Adafruit_NeoPixel4showEv+0x100>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   b438a:	6863      	ldr	r3, [r4, #4]
   b438c:	1a9b      	subs	r3, r3, r2
   b438e:	2b11      	cmp	r3, #17
   b4390:	d8cf      	bhi.n	b4332 <_ZN17Adafruit_NeoPixel4showEv+0xd6>
   b4392:	6863      	ldr	r3, [r4, #4]
   b4394:	1a9b      	subs	r3, r3, r2
   b4396:	2b11      	cmp	r3, #17
   b4398:	d9f7      	bls.n	b438a <_ZN17Adafruit_NeoPixel4showEv+0x12e>
   b439a:	e7ca      	b.n	b4332 <_ZN17Adafruit_NeoPixel4showEv+0xd6>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b439c:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b43a0:	2b00      	cmp	r3, #0
   b43a2:	f6bf af7c 	bge.w	b429e <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b43a6:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b43aa:	2b00      	cmp	r3, #0
   b43ac:	f6bf af77 	bge.w	b429e <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b43b0:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b43b4:	2b00      	cmp	r3, #0
   b43b6:	f6bf af72 	bge.w	b429e <_ZN17Adafruit_NeoPixel4showEv+0x42>
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b43ba:	0136      	lsls	r6, r6, #4
   b43bc:	1d33      	adds	r3, r6, #4
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b43be:	4618      	mov	r0, r3
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b43c0:	9300      	str	r3, [sp, #0]
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b43c2:	f000 fb23 	bl	b4a0c <malloc>
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   b43c6:	2800      	cmp	r0, #0
   b43c8:	f43f af78 	beq.w	b42bc <_ZN17Adafruit_NeoPixel4showEv+0x60>
    for(uint16_t n=0; n<numBytes; n++) {
   b43cc:	88ab      	ldrh	r3, [r5, #4]
   b43ce:	2b00      	cmp	r3, #0
   b43d0:	f000 80ed 	beq.w	b45ae <_ZN17Adafruit_NeoPixel4showEv+0x352>
      uint8_t pix = pixels[n];
   b43d4:	68ea      	ldr	r2, [r5, #12]
   b43d6:	3b01      	subs	r3, #1
   b43d8:	fa12 f783 	uxtah	r7, r2, r3
   b43dc:	f102 3eff 	add.w	lr, r2, #4294967295
    uint16_t pos = 0; // bit position
   b43e0:	2300      	movs	r3, #0
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b43e2:	f248 0206 	movw	r2, #32774	; 0x8006
   b43e6:	f248 010d 	movw	r1, #32781	; 0x800d
      uint8_t pix = pixels[n];
   b43ea:	f81e cf01 	ldrb.w	ip, [lr, #1]!
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b43ee:	f01c 0f80 	tst.w	ip, #128	; 0x80
   b43f2:	bf0c      	ite	eq
   b43f4:	4693      	moveq	fp, r2
   b43f6:	468b      	movne	fp, r1
   b43f8:	f01c 0f40 	tst.w	ip, #64	; 0x40
   b43fc:	bf0c      	ite	eq
   b43fe:	4616      	moveq	r6, r2
   b4400:	460e      	movne	r6, r1
   b4402:	f01c 0f20 	tst.w	ip, #32
   b4406:	bf0c      	ite	eq
   b4408:	4690      	moveq	r8, r2
   b440a:	4688      	movne	r8, r1
        pos++;
   b440c:	f103 0901 	add.w	r9, r3, #1
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4410:	f8cd 8008 	str.w	r8, [sp, #8]
   b4414:	9601      	str	r6, [sp, #4]
        pos++;
   b4416:	f103 0802 	add.w	r8, r3, #2
   b441a:	fa1f f989 	uxth.w	r9, r9
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b441e:	9e01      	ldr	r6, [sp, #4]
   b4420:	f820 b013 	strh.w	fp, [r0, r3, lsl #1]
        pos++;
   b4424:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4428:	f820 6019 	strh.w	r6, [r0, r9, lsl #1]
   b442c:	9e02      	ldr	r6, [sp, #8]
   b442e:	f820 6018 	strh.w	r6, [r0, r8, lsl #1]
        pos++;
   b4432:	f103 0803 	add.w	r8, r3, #3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4436:	f01c 0f10 	tst.w	ip, #16
        pos++;
   b443a:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b443e:	bf0c      	ite	eq
   b4440:	4693      	moveq	fp, r2
   b4442:	468b      	movne	fp, r1
   b4444:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b4448:	f103 0804 	add.w	r8, r3, #4
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b444c:	f01c 0f08 	tst.w	ip, #8
        pos++;
   b4450:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4454:	bf0c      	ite	eq
   b4456:	4693      	moveq	fp, r2
   b4458:	468b      	movne	fp, r1
   b445a:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b445e:	f103 0805 	add.w	r8, r3, #5
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4462:	f01c 0f04 	tst.w	ip, #4
        pos++;
   b4466:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b446a:	bf0c      	ite	eq
   b446c:	4693      	moveq	fp, r2
   b446e:	468b      	movne	fp, r1
   b4470:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b4474:	f103 0a08 	add.w	sl, r3, #8
   b4478:	f103 0806 	add.w	r8, r3, #6
   b447c:	3307      	adds	r3, #7
   b447e:	b29b      	uxth	r3, r3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4480:	f01c 0f02 	tst.w	ip, #2
        pos++;
   b4484:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4488:	bf0c      	ite	eq
   b448a:	4693      	moveq	fp, r2
   b448c:	468b      	movne	fp, r1
        pos++;
   b448e:	f8cd a00c 	str.w	sl, [sp, #12]
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4492:	f01c 0f01 	tst.w	ip, #1
   b4496:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
   b449a:	bf15      	itete	ne
   b449c:	f820 1013 	strhne.w	r1, [r0, r3, lsl #1]
   b44a0:	f820 2013 	strheq.w	r2, [r0, r3, lsl #1]
        pos++;
   b44a4:	fa1f f38a 	uxthne.w	r3, sl
   b44a8:	f8bd 300c 	ldrheq.w	r3, [sp, #12]
    for(uint16_t n=0; n<numBytes; n++) {
   b44ac:	4577      	cmp	r7, lr
   b44ae:	d19c      	bne.n	b43ea <_ZN17Adafruit_NeoPixel4showEv+0x18e>
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b44b0:	1c59      	adds	r1, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b44b2:	3302      	adds	r3, #2
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b44b4:	b289      	uxth	r1, r1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b44b6:	b29b      	uxth	r3, r3
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b44b8:	0049      	lsls	r1, r1, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b44ba:	005b      	lsls	r3, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b44bc:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   b44c0:	5247      	strh	r7, [r0, r1]
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b44c2:	9a00      	ldr	r2, [sp, #0]
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b44c4:	52c7      	strh	r7, [r0, r3]
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b44c6:	4b2e      	ldr	r3, [pc, #184]	; (b4580 <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b44c8:	0856      	lsrs	r6, r2, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b44ca:	681f      	ldr	r7, [r3, #0]
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b44cc:	2200      	movs	r2, #0
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b44ce:	2314      	movs	r3, #20
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b44d0:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   b44d4:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b44d8:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   b44dc:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
   b44e0:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   b44e4:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b44e8:	f8c4 6524 	str.w	r6, [r4, #1316]	; 0x524
    pwm->SEQ[0].REFRESH  = 0;
   b44ec:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   b44f0:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b44f4:	79eb      	ldrb	r3, [r5, #7]
   b44f6:	eb07 1c03 	add.w	ip, r7, r3, lsl #4
   b44fa:	011b      	lsls	r3, r3, #4
    pwm->ENABLE = 1;
   b44fc:	2101      	movs	r1, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b44fe:	5cfe      	ldrb	r6, [r7, r3]
   b4500:	f89c 3001 	ldrb.w	r3, [ip, #1]
   b4504:	f003 031f 	and.w	r3, r3, #31
   b4508:	ea43 1346 	orr.w	r3, r3, r6, lsl #5
   b450c:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
    pwm->ENABLE = 1;
   b4510:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
    pwm->EVENTS_SEQEND[0]  = 0;
   b4514:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   b4518:	60a1      	str	r1, [r4, #8]
    while(!pwm->EVENTS_SEQEND[0])
   b451a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   b451e:	2b00      	cmp	r3, #0
   b4520:	d0fb      	beq.n	b451a <_ZN17Adafruit_NeoPixel4showEv+0x2be>
    pwm->EVENTS_SEQEND[0] = 0;
   b4522:	2300      	movs	r3, #0
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b4524:	f04f 32ff 	mov.w	r2, #4294967295
    pwm->EVENTS_SEQEND[0] = 0;
   b4528:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    pwm->ENABLE = 0;
   b452c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b4530:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560
      free(pixels_pattern);
   b4534:	f000 fa72 	bl	b4a1c <free>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b4538:	f000 f8f4 	bl	b4724 <HAL_Timer_Get_Micro_Seconds>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   b453c:	6128      	str	r0, [r5, #16]
}
   b453e:	b005      	add	sp, #20
   b4540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4544:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b4548:	2b00      	cmp	r3, #0
   b454a:	f6bf aeb7 	bge.w	b42bc <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b454e:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4552:	2b00      	cmp	r3, #0
   b4554:	f6bf aeb2 	bge.w	b42bc <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4558:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b455c:	2b00      	cmp	r3, #0
   b455e:	f6bf aead 	bge.w	b42bc <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b4562:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4566:	2b00      	cmp	r3, #0
   b4568:	f6bf aea8 	bge.w	b42bc <_ZN17Adafruit_NeoPixel4showEv+0x60>
   b456c:	e725      	b.n	b43ba <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b456e:	bf00      	nop
   b4570:	000b7d00 	.word	0x000b7d00
   b4574:	4001c000 	.word	0x4001c000
   b4578:	40021000 	.word	0x40021000
   b457c:	40022000 	.word	0x40022000
   b4580:	2003e6b4 	.word	0x2003e6b4
   b4584:	e0001000 	.word	0xe0001000
   b4588:	e000ed00 	.word	0xe000ed00
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b458c:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4590:	2b00      	cmp	r3, #0
   b4592:	f6bf ae8d 	bge.w	b42b0 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4596:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b459a:	2b00      	cmp	r3, #0
   b459c:	f6bf ae88 	bge.w	b42b0 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b45a0:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b45a4:	2b00      	cmp	r3, #0
   b45a6:	f6bf ae83 	bge.w	b42b0 <_ZN17Adafruit_NeoPixel4showEv+0x54>
   b45aa:	e706      	b.n	b43ba <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b45ac:	4770      	bx	lr
    for(uint16_t n=0; n<numBytes; n++) {
   b45ae:	2304      	movs	r3, #4
   b45b0:	2102      	movs	r1, #2
   b45b2:	e783      	b.n	b44bc <_ZN17Adafruit_NeoPixel4showEv+0x260>

000b45b4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
   b45b4:	8843      	ldrh	r3, [r0, #2]
   b45b6:	428b      	cmp	r3, r1
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
   b45b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
   b45ba:	d92d      	bls.n	b4618 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
   b45bc:	7a06      	ldrb	r6, [r0, #8]
   b45be:	f3c2 4307 	ubfx	r3, r2, #16, #8
   b45c2:	f3c2 2407 	ubfx	r4, r2, #8, #8
   b45c6:	b2d5      	uxtb	r5, r2
   b45c8:	b13e      	cbz	r6, b45da <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x26>
      r = (r * brightness) >> 8;
   b45ca:	4373      	muls	r3, r6
      g = (g * brightness) >> 8;
   b45cc:	4374      	muls	r4, r6
      b = (b * brightness) >> 8;
   b45ce:	4375      	muls	r5, r6
      r = (r * brightness) >> 8;
   b45d0:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
   b45d4:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
   b45d8:	0a2d      	lsrs	r5, r5, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
   b45da:	f890 c006 	ldrb.w	ip, [r0, #6]
   b45de:	68c7      	ldr	r7, [r0, #12]
   b45e0:	f1bc 0f06 	cmp.w	ip, #6
   b45e4:	bf0c      	ite	eq
   b45e6:	2604      	moveq	r6, #4
   b45e8:	2603      	movne	r6, #3
   b45ea:	434e      	muls	r6, r1
   b45ec:	f1ac 0c02 	sub.w	ip, ip, #2
   b45f0:	19b9      	adds	r1, r7, r6
    switch(type) {
   b45f2:	f1bc 0f06 	cmp.w	ip, #6
   b45f6:	d81d      	bhi.n	b4634 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x80>
   b45f8:	e8df f00c 	tbb	[pc, ip]
   b45fc:	04081c04 	.word	0x04081c04
   b4600:	040f      	.short	0x040f
   b4602:	04          	.byte	0x04
   b4603:	00          	.byte	0x00
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   b4604:	55bc      	strb	r4, [r7, r6]
          *p++ = r;
   b4606:	704b      	strb	r3, [r1, #1]
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
          *p++ = g;
          *p = b;
   b4608:	708d      	strb	r5, [r1, #2]
        } break;
    }
  }
}
   b460a:	e005      	b.n	b4618 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p++ = r;
   b460c:	2bfe      	cmp	r3, #254	; 0xfe
   b460e:	bf28      	it	cs
   b4610:	23fe      	movcs	r3, #254	; 0xfe
   b4612:	55bb      	strb	r3, [r7, r6]
          *p++ = b;
   b4614:	704d      	strb	r5, [r1, #1]
          *p = g;
   b4616:	708c      	strb	r4, [r1, #2]
}
   b4618:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = r;
   b461a:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
   b461c:	704c      	strb	r4, [r1, #1]
          *p++ = b;
   b461e:	708d      	strb	r5, [r1, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
   b4620:	7a03      	ldrb	r3, [r0, #8]
          uint8_t w = (uint8_t)(c >> 24);
   b4622:	0e12      	lsrs	r2, r2, #24
          *p = brightness ? ((w * brightness) >> 8) : w;
   b4624:	b913      	cbnz	r3, b462c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x78>
          uint8_t w = (uint8_t)(c >> 24);
   b4626:	b2d2      	uxtb	r2, r2
          *p = brightness ? ((w * brightness) >> 8) : w;
   b4628:	70ca      	strb	r2, [r1, #3]
        } break;
   b462a:	e7f5      	b.n	b4618 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p = brightness ? ((w * brightness) >> 8) : w;
   b462c:	435a      	muls	r2, r3
   b462e:	f3c2 2207 	ubfx	r2, r2, #8, #8
   b4632:	e7f9      	b.n	b4628 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
          *p++ = r;
   b4634:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
   b4636:	704c      	strb	r4, [r1, #1]
   b4638:	e7e6      	b.n	b4608 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x54>

000b463a <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
   b463a:	7a03      	ldrb	r3, [r0, #8]
  uint8_t newBrightness = b + 1;
   b463c:	1c4a      	adds	r2, r1, #1
   b463e:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
   b4640:	4293      	cmp	r3, r2
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
   b4642:	b570      	push	{r4, r5, r6, lr}
  if(newBrightness != brightness) { // Compare against prior value
   b4644:	d01f      	beq.n	b4686 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4c>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
   b4646:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
   b4648:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
            *ptr           = pixels,
   b464c:	68c4      	ldr	r4, [r0, #12]
    if(oldBrightness == 0) scale = 0; // Avoid /0
   b464e:	d00c      	beq.n	b466a <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
   b4650:	29ff      	cmp	r1, #255	; 0xff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
   b4652:	bf1f      	itttt	ne
   b4654:	0211      	lslne	r1, r2, #8
   b4656:	f101 31ff 	addne.w	r1, r1, #4294967295
   b465a:	fbb1 f3f3 	udivne	r3, r1, r3
   b465e:	b29b      	uxthne	r3, r3
    else if(b == 255) scale = 65535 / oldBrightness;
   b4660:	bf04      	itt	eq
   b4662:	f64f 71ff 	movweq	r1, #65535	; 0xffff
   b4666:	fbb1 f3f3 	udiveq	r3, r1, r3
            *ptr           = pixels,
   b466a:	4625      	mov	r5, r4
    for(uint16_t i=0; i<numBytes; i++) {
   b466c:	8886      	ldrh	r6, [r0, #4]
   b466e:	1b29      	subs	r1, r5, r4
   b4670:	b289      	uxth	r1, r1
   b4672:	428e      	cmp	r6, r1
   b4674:	d906      	bls.n	b4684 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
   b4676:	7829      	ldrb	r1, [r5, #0]
   b4678:	4359      	muls	r1, r3
   b467a:	f3c1 2107 	ubfx	r1, r1, #8, #8
   b467e:	f805 1b01 	strb.w	r1, [r5], #1
    for(uint16_t i=0; i<numBytes; i++) {
   b4682:	e7f3      	b.n	b466c <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
    }
    brightness = newBrightness;
   b4684:	7202      	strb	r2, [r0, #8]
  }
}
   b4686:	bd70      	pop	{r4, r5, r6, pc}

000b4688 <_ZN17Adafruit_NeoPixel5clearEv>:
uint8_t Adafruit_NeoPixel::getBrightness(void) const {
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
   b4688:	8882      	ldrh	r2, [r0, #4]
   b468a:	68c0      	ldr	r0, [r0, #12]
   b468c:	2100      	movs	r1, #0
   b468e:	f001 bbbe 	b.w	b5e0e <memset>
	...

000b4694 <_GLOBAL__sub_I_PIN_MAP2>:
}
   b4694:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   b4696:	f000 f815 	bl	b46c4 <HAL_Pin_Map>
   b469a:	4b01      	ldr	r3, [pc, #4]	; (b46a0 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   b469c:	6018      	str	r0, [r3, #0]
}
   b469e:	bd08      	pop	{r3, pc}
   b46a0:	2003e6b4 	.word	0x2003e6b4

000b46a4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b46a4:	b508      	push	{r3, lr}
   b46a6:	4b02      	ldr	r3, [pc, #8]	; (b46b0 <netdb_freeaddrinfo+0xc>)
   b46a8:	681b      	ldr	r3, [r3, #0]
   b46aa:	689b      	ldr	r3, [r3, #8]
   b46ac:	9301      	str	r3, [sp, #4]
   b46ae:	bd08      	pop	{r3, pc}
   b46b0:	00030268 	.word	0x00030268

000b46b4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b46b4:	b508      	push	{r3, lr}
   b46b6:	4b02      	ldr	r3, [pc, #8]	; (b46c0 <netdb_getaddrinfo+0xc>)
   b46b8:	681b      	ldr	r3, [r3, #0]
   b46ba:	68db      	ldr	r3, [r3, #12]
   b46bc:	9301      	str	r3, [sp, #4]
   b46be:	bd08      	pop	{r3, pc}
   b46c0:	00030268 	.word	0x00030268

000b46c4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b46c4:	b508      	push	{r3, lr}
   b46c6:	4b02      	ldr	r3, [pc, #8]	; (b46d0 <HAL_Pin_Map+0xc>)
   b46c8:	681b      	ldr	r3, [r3, #0]
   b46ca:	681b      	ldr	r3, [r3, #0]
   b46cc:	9301      	str	r3, [sp, #4]
   b46ce:	bd08      	pop	{r3, pc}
   b46d0:	0003022c 	.word	0x0003022c

000b46d4 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b46d4:	b508      	push	{r3, lr}
   b46d6:	4b02      	ldr	r3, [pc, #8]	; (b46e0 <HAL_Pin_Mode+0xc>)
   b46d8:	681b      	ldr	r3, [r3, #0]
   b46da:	689b      	ldr	r3, [r3, #8]
   b46dc:	9301      	str	r3, [sp, #4]
   b46de:	bd08      	pop	{r3, pc}
   b46e0:	0003022c 	.word	0x0003022c

000b46e4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b46e4:	b508      	push	{r3, lr}
   b46e6:	4b02      	ldr	r3, [pc, #8]	; (b46f0 <HAL_Get_Pin_Mode+0xc>)
   b46e8:	681b      	ldr	r3, [r3, #0]
   b46ea:	68db      	ldr	r3, [r3, #12]
   b46ec:	9301      	str	r3, [sp, #4]
   b46ee:	bd08      	pop	{r3, pc}
   b46f0:	0003022c 	.word	0x0003022c

000b46f4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b46f4:	b508      	push	{r3, lr}
   b46f6:	4b02      	ldr	r3, [pc, #8]	; (b4700 <HAL_GPIO_Write+0xc>)
   b46f8:	681b      	ldr	r3, [r3, #0]
   b46fa:	691b      	ldr	r3, [r3, #16]
   b46fc:	9301      	str	r3, [sp, #4]
   b46fe:	bd08      	pop	{r3, pc}
   b4700:	0003022c 	.word	0x0003022c

000b4704 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4704:	b508      	push	{r3, lr}
   b4706:	4b02      	ldr	r3, [pc, #8]	; (b4710 <HAL_RNG_GetRandomNumber+0xc>)
   b4708:	681b      	ldr	r3, [r3, #0]
   b470a:	685b      	ldr	r3, [r3, #4]
   b470c:	9301      	str	r3, [sp, #4]
   b470e:	bd08      	pop	{r3, pc}
   b4710:	00030218 	.word	0x00030218

000b4714 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b4714:	b508      	push	{r3, lr}
   b4716:	4b02      	ldr	r3, [pc, #8]	; (b4720 <HAL_Delay_Microseconds+0xc>)
   b4718:	681b      	ldr	r3, [r3, #0]
   b471a:	68db      	ldr	r3, [r3, #12]
   b471c:	9301      	str	r3, [sp, #4]
   b471e:	bd08      	pop	{r3, pc}
   b4720:	00030218 	.word	0x00030218

000b4724 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b4724:	b508      	push	{r3, lr}
   b4726:	4b02      	ldr	r3, [pc, #8]	; (b4730 <HAL_Timer_Get_Micro_Seconds+0xc>)
   b4728:	681b      	ldr	r3, [r3, #0]
   b472a:	691b      	ldr	r3, [r3, #16]
   b472c:	9301      	str	r3, [sp, #4]
   b472e:	bd08      	pop	{r3, pc}
   b4730:	00030218 	.word	0x00030218

000b4734 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4734:	b508      	push	{r3, lr}
   b4736:	4b02      	ldr	r3, [pc, #8]	; (b4740 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4738:	681b      	ldr	r3, [r3, #0]
   b473a:	695b      	ldr	r3, [r3, #20]
   b473c:	9301      	str	r3, [sp, #4]
   b473e:	bd08      	pop	{r3, pc}
   b4740:	00030218 	.word	0x00030218

000b4744 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4744:	b508      	push	{r3, lr}
   b4746:	4b02      	ldr	r3, [pc, #8]	; (b4750 <os_mutex_recursive_create+0xc>)
   b4748:	681b      	ldr	r3, [r3, #0]
   b474a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b474c:	9301      	str	r3, [sp, #4]
   b474e:	bd08      	pop	{r3, pc}
   b4750:	00030248 	.word	0x00030248

000b4754 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4754:	b508      	push	{r3, lr}
   b4756:	4b02      	ldr	r3, [pc, #8]	; (b4760 <inet_inet_ntop+0xc>)
   b4758:	681b      	ldr	r3, [r3, #0]
   b475a:	695b      	ldr	r3, [r3, #20]
   b475c:	9301      	str	r3, [sp, #4]
   b475e:	bd08      	pop	{r3, pc}
   b4760:	00030264 	.word	0x00030264

000b4764 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4764:	b508      	push	{r3, lr}
   b4766:	4b02      	ldr	r3, [pc, #8]	; (b4770 <hal_usart_write+0xc>)
   b4768:	681b      	ldr	r3, [r3, #0]
   b476a:	68db      	ldr	r3, [r3, #12]
   b476c:	9301      	str	r3, [sp, #4]
   b476e:	bd08      	pop	{r3, pc}
   b4770:	0003023c 	.word	0x0003023c

000b4774 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4774:	b508      	push	{r3, lr}
   b4776:	4b02      	ldr	r3, [pc, #8]	; (b4780 <hal_usart_available+0xc>)
   b4778:	681b      	ldr	r3, [r3, #0]
   b477a:	691b      	ldr	r3, [r3, #16]
   b477c:	9301      	str	r3, [sp, #4]
   b477e:	bd08      	pop	{r3, pc}
   b4780:	0003023c 	.word	0x0003023c

000b4784 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4784:	b508      	push	{r3, lr}
   b4786:	4b02      	ldr	r3, [pc, #8]	; (b4790 <hal_usart_read+0xc>)
   b4788:	681b      	ldr	r3, [r3, #0]
   b478a:	695b      	ldr	r3, [r3, #20]
   b478c:	9301      	str	r3, [sp, #4]
   b478e:	bd08      	pop	{r3, pc}
   b4790:	0003023c 	.word	0x0003023c

000b4794 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4794:	b508      	push	{r3, lr}
   b4796:	4b02      	ldr	r3, [pc, #8]	; (b47a0 <hal_usart_peek+0xc>)
   b4798:	681b      	ldr	r3, [r3, #0]
   b479a:	699b      	ldr	r3, [r3, #24]
   b479c:	9301      	str	r3, [sp, #4]
   b479e:	bd08      	pop	{r3, pc}
   b47a0:	0003023c 	.word	0x0003023c

000b47a4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b47a4:	b508      	push	{r3, lr}
   b47a6:	4b02      	ldr	r3, [pc, #8]	; (b47b0 <hal_usart_flush+0xc>)
   b47a8:	681b      	ldr	r3, [r3, #0]
   b47aa:	69db      	ldr	r3, [r3, #28]
   b47ac:	9301      	str	r3, [sp, #4]
   b47ae:	bd08      	pop	{r3, pc}
   b47b0:	0003023c 	.word	0x0003023c

000b47b4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b47b4:	b508      	push	{r3, lr}
   b47b6:	4b02      	ldr	r3, [pc, #8]	; (b47c0 <hal_usart_is_enabled+0xc>)
   b47b8:	681b      	ldr	r3, [r3, #0]
   b47ba:	6a1b      	ldr	r3, [r3, #32]
   b47bc:	9301      	str	r3, [sp, #4]
   b47be:	bd08      	pop	{r3, pc}
   b47c0:	0003023c 	.word	0x0003023c

000b47c4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b47c4:	b508      	push	{r3, lr}
   b47c6:	4b02      	ldr	r3, [pc, #8]	; (b47d0 <hal_usart_available_data_for_write+0xc>)
   b47c8:	681b      	ldr	r3, [r3, #0]
   b47ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b47cc:	9301      	str	r3, [sp, #4]
   b47ce:	bd08      	pop	{r3, pc}
   b47d0:	0003023c 	.word	0x0003023c

000b47d4 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b47d4:	b508      	push	{r3, lr}
   b47d6:	4b02      	ldr	r3, [pc, #8]	; (b47e0 <hal_usart_init_ex+0xc>)
   b47d8:	681b      	ldr	r3, [r3, #0]
   b47da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b47dc:	9301      	str	r3, [sp, #4]
   b47de:	bd08      	pop	{r3, pc}
   b47e0:	0003023c 	.word	0x0003023c

000b47e4 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b47e4:	b508      	push	{r3, lr}
   b47e6:	4b02      	ldr	r3, [pc, #8]	; (b47f0 <hal_i2c_write+0xc>)
   b47e8:	681b      	ldr	r3, [r3, #0]
   b47ea:	6a1b      	ldr	r3, [r3, #32]
   b47ec:	9301      	str	r3, [sp, #4]
   b47ee:	bd08      	pop	{r3, pc}
   b47f0:	00030228 	.word	0x00030228

000b47f4 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b47f4:	b508      	push	{r3, lr}
   b47f6:	4b02      	ldr	r3, [pc, #8]	; (b4800 <hal_i2c_available+0xc>)
   b47f8:	681b      	ldr	r3, [r3, #0]
   b47fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b47fc:	9301      	str	r3, [sp, #4]
   b47fe:	bd08      	pop	{r3, pc}
   b4800:	00030228 	.word	0x00030228

000b4804 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4804:	b508      	push	{r3, lr}
   b4806:	4b02      	ldr	r3, [pc, #8]	; (b4810 <hal_i2c_read+0xc>)
   b4808:	681b      	ldr	r3, [r3, #0]
   b480a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b480c:	9301      	str	r3, [sp, #4]
   b480e:	bd08      	pop	{r3, pc}
   b4810:	00030228 	.word	0x00030228

000b4814 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4814:	b508      	push	{r3, lr}
   b4816:	4b02      	ldr	r3, [pc, #8]	; (b4820 <hal_i2c_peek+0xc>)
   b4818:	681b      	ldr	r3, [r3, #0]
   b481a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b481c:	9301      	str	r3, [sp, #4]
   b481e:	bd08      	pop	{r3, pc}
   b4820:	00030228 	.word	0x00030228

000b4824 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4824:	b508      	push	{r3, lr}
   b4826:	4b02      	ldr	r3, [pc, #8]	; (b4830 <hal_i2c_flush+0xc>)
   b4828:	681b      	ldr	r3, [r3, #0]
   b482a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b482c:	9301      	str	r3, [sp, #4]
   b482e:	bd08      	pop	{r3, pc}
   b4830:	00030228 	.word	0x00030228

000b4834 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4834:	b508      	push	{r3, lr}
   b4836:	4b02      	ldr	r3, [pc, #8]	; (b4840 <hal_i2c_is_enabled+0xc>)
   b4838:	681b      	ldr	r3, [r3, #0]
   b483a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b483c:	9301      	str	r3, [sp, #4]
   b483e:	bd08      	pop	{r3, pc}
   b4840:	00030228 	.word	0x00030228

000b4844 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4844:	b508      	push	{r3, lr}
   b4846:	4b02      	ldr	r3, [pc, #8]	; (b4850 <hal_i2c_init+0xc>)
   b4848:	681b      	ldr	r3, [r3, #0]
   b484a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b484c:	9301      	str	r3, [sp, #4]
   b484e:	bd08      	pop	{r3, pc}
   b4850:	00030228 	.word	0x00030228

000b4854 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4854:	b508      	push	{r3, lr}
   b4856:	4b02      	ldr	r3, [pc, #8]	; (b4860 <hal_spi_init+0xc>)
   b4858:	681b      	ldr	r3, [r3, #0]
   b485a:	69db      	ldr	r3, [r3, #28]
   b485c:	9301      	str	r3, [sp, #4]
   b485e:	bd08      	pop	{r3, pc}
   b4860:	00030230 	.word	0x00030230

000b4864 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4864:	b508      	push	{r3, lr}
   b4866:	4b02      	ldr	r3, [pc, #8]	; (b4870 <hal_spi_is_enabled+0xc>)
   b4868:	681b      	ldr	r3, [r3, #0]
   b486a:	6a1b      	ldr	r3, [r3, #32]
   b486c:	9301      	str	r3, [sp, #4]
   b486e:	bd08      	pop	{r3, pc}
   b4870:	00030230 	.word	0x00030230

000b4874 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4874:	b508      	push	{r3, lr}
   b4876:	4b02      	ldr	r3, [pc, #8]	; (b4880 <HAL_USB_USART_Init+0xc>)
   b4878:	681b      	ldr	r3, [r3, #0]
   b487a:	681b      	ldr	r3, [r3, #0]
   b487c:	9301      	str	r3, [sp, #4]
   b487e:	bd08      	pop	{r3, pc}
   b4880:	0003024c 	.word	0x0003024c

000b4884 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4884:	b508      	push	{r3, lr}
   b4886:	4b02      	ldr	r3, [pc, #8]	; (b4890 <HAL_USB_USART_Available_Data+0xc>)
   b4888:	681b      	ldr	r3, [r3, #0]
   b488a:	691b      	ldr	r3, [r3, #16]
   b488c:	9301      	str	r3, [sp, #4]
   b488e:	bd08      	pop	{r3, pc}
   b4890:	0003024c 	.word	0x0003024c

000b4894 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4894:	b508      	push	{r3, lr}
   b4896:	4b02      	ldr	r3, [pc, #8]	; (b48a0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4898:	681b      	ldr	r3, [r3, #0]
   b489a:	695b      	ldr	r3, [r3, #20]
   b489c:	9301      	str	r3, [sp, #4]
   b489e:	bd08      	pop	{r3, pc}
   b48a0:	0003024c 	.word	0x0003024c

000b48a4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b48a4:	b508      	push	{r3, lr}
   b48a6:	4b02      	ldr	r3, [pc, #8]	; (b48b0 <HAL_USB_USART_Receive_Data+0xc>)
   b48a8:	681b      	ldr	r3, [r3, #0]
   b48aa:	699b      	ldr	r3, [r3, #24]
   b48ac:	9301      	str	r3, [sp, #4]
   b48ae:	bd08      	pop	{r3, pc}
   b48b0:	0003024c 	.word	0x0003024c

000b48b4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b48b4:	b508      	push	{r3, lr}
   b48b6:	4b02      	ldr	r3, [pc, #8]	; (b48c0 <HAL_USB_USART_Send_Data+0xc>)
   b48b8:	681b      	ldr	r3, [r3, #0]
   b48ba:	69db      	ldr	r3, [r3, #28]
   b48bc:	9301      	str	r3, [sp, #4]
   b48be:	bd08      	pop	{r3, pc}
   b48c0:	0003024c 	.word	0x0003024c

000b48c4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b48c4:	b508      	push	{r3, lr}
   b48c6:	4b02      	ldr	r3, [pc, #8]	; (b48d0 <HAL_USB_USART_Flush_Data+0xc>)
   b48c8:	681b      	ldr	r3, [r3, #0]
   b48ca:	6a1b      	ldr	r3, [r3, #32]
   b48cc:	9301      	str	r3, [sp, #4]
   b48ce:	bd08      	pop	{r3, pc}
   b48d0:	0003024c 	.word	0x0003024c

000b48d4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b48d4:	b508      	push	{r3, lr}
   b48d6:	4b02      	ldr	r3, [pc, #8]	; (b48e0 <set_system_mode+0xc>)
   b48d8:	681b      	ldr	r3, [r3, #0]
   b48da:	685b      	ldr	r3, [r3, #4]
   b48dc:	9301      	str	r3, [sp, #4]
   b48de:	bd08      	pop	{r3, pc}
   b48e0:	00030220 	.word	0x00030220

000b48e4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b48e4:	b508      	push	{r3, lr}
   b48e6:	4b02      	ldr	r3, [pc, #8]	; (b48f0 <system_delay_ms+0xc>)
   b48e8:	681b      	ldr	r3, [r3, #0]
   b48ea:	695b      	ldr	r3, [r3, #20]
   b48ec:	9301      	str	r3, [sp, #4]
   b48ee:	bd08      	pop	{r3, pc}
   b48f0:	00030220 	.word	0x00030220

000b48f4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b48f4:	b508      	push	{r3, lr}
   b48f6:	4b03      	ldr	r3, [pc, #12]	; (b4904 <system_ctrl_set_app_request_handler+0x10>)
   b48f8:	681b      	ldr	r3, [r3, #0]
   b48fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b48fe:	9301      	str	r3, [sp, #4]
   b4900:	bd08      	pop	{r3, pc}
   b4902:	0000      	.short	0x0000
   b4904:	00030220 	.word	0x00030220

000b4908 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4908:	b508      	push	{r3, lr}
   b490a:	4b03      	ldr	r3, [pc, #12]	; (b4918 <system_ctrl_set_result+0x10>)
   b490c:	681b      	ldr	r3, [r3, #0]
   b490e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4912:	9301      	str	r3, [sp, #4]
   b4914:	bd08      	pop	{r3, pc}
   b4916:	0000      	.short	0x0000
   b4918:	00030220 	.word	0x00030220

000b491c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b491c:	b508      	push	{r3, lr}
   b491e:	4b02      	ldr	r3, [pc, #8]	; (b4928 <network_connect+0xc>)
   b4920:	681b      	ldr	r3, [r3, #0]
   b4922:	685b      	ldr	r3, [r3, #4]
   b4924:	9301      	str	r3, [sp, #4]
   b4926:	bd08      	pop	{r3, pc}
   b4928:	00030240 	.word	0x00030240

000b492c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b492c:	b508      	push	{r3, lr}
   b492e:	4b02      	ldr	r3, [pc, #8]	; (b4938 <network_connecting+0xc>)
   b4930:	681b      	ldr	r3, [r3, #0]
   b4932:	689b      	ldr	r3, [r3, #8]
   b4934:	9301      	str	r3, [sp, #4]
   b4936:	bd08      	pop	{r3, pc}
   b4938:	00030240 	.word	0x00030240

000b493c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b493c:	b508      	push	{r3, lr}
   b493e:	4b02      	ldr	r3, [pc, #8]	; (b4948 <network_disconnect+0xc>)
   b4940:	681b      	ldr	r3, [r3, #0]
   b4942:	68db      	ldr	r3, [r3, #12]
   b4944:	9301      	str	r3, [sp, #4]
   b4946:	bd08      	pop	{r3, pc}
   b4948:	00030240 	.word	0x00030240

000b494c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b494c:	b508      	push	{r3, lr}
   b494e:	4b02      	ldr	r3, [pc, #8]	; (b4958 <network_ready+0xc>)
   b4950:	681b      	ldr	r3, [r3, #0]
   b4952:	691b      	ldr	r3, [r3, #16]
   b4954:	9301      	str	r3, [sp, #4]
   b4956:	bd08      	pop	{r3, pc}
   b4958:	00030240 	.word	0x00030240

000b495c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b495c:	b508      	push	{r3, lr}
   b495e:	4b02      	ldr	r3, [pc, #8]	; (b4968 <network_on+0xc>)
   b4960:	681b      	ldr	r3, [r3, #0]
   b4962:	695b      	ldr	r3, [r3, #20]
   b4964:	9301      	str	r3, [sp, #4]
   b4966:	bd08      	pop	{r3, pc}
   b4968:	00030240 	.word	0x00030240

000b496c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b496c:	b508      	push	{r3, lr}
   b496e:	4b02      	ldr	r3, [pc, #8]	; (b4978 <network_off+0xc>)
   b4970:	681b      	ldr	r3, [r3, #0]
   b4972:	699b      	ldr	r3, [r3, #24]
   b4974:	9301      	str	r3, [sp, #4]
   b4976:	bd08      	pop	{r3, pc}
   b4978:	00030240 	.word	0x00030240

000b497c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b497c:	b508      	push	{r3, lr}
   b497e:	4b02      	ldr	r3, [pc, #8]	; (b4988 <network_listen+0xc>)
   b4980:	681b      	ldr	r3, [r3, #0]
   b4982:	69db      	ldr	r3, [r3, #28]
   b4984:	9301      	str	r3, [sp, #4]
   b4986:	bd08      	pop	{r3, pc}
   b4988:	00030240 	.word	0x00030240

000b498c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b498c:	b508      	push	{r3, lr}
   b498e:	4b02      	ldr	r3, [pc, #8]	; (b4998 <network_listening+0xc>)
   b4990:	681b      	ldr	r3, [r3, #0]
   b4992:	6a1b      	ldr	r3, [r3, #32]
   b4994:	9301      	str	r3, [sp, #4]
   b4996:	bd08      	pop	{r3, pc}
   b4998:	00030240 	.word	0x00030240

000b499c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b499c:	b508      	push	{r3, lr}
   b499e:	4b02      	ldr	r3, [pc, #8]	; (b49a8 <network_set_listen_timeout+0xc>)
   b49a0:	681b      	ldr	r3, [r3, #0]
   b49a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b49a4:	9301      	str	r3, [sp, #4]
   b49a6:	bd08      	pop	{r3, pc}
   b49a8:	00030240 	.word	0x00030240

000b49ac <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b49ac:	b508      	push	{r3, lr}
   b49ae:	4b02      	ldr	r3, [pc, #8]	; (b49b8 <network_get_listen_timeout+0xc>)
   b49b0:	681b      	ldr	r3, [r3, #0]
   b49b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b49b4:	9301      	str	r3, [sp, #4]
   b49b6:	bd08      	pop	{r3, pc}
   b49b8:	00030240 	.word	0x00030240

000b49bc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b49bc:	b508      	push	{r3, lr}
   b49be:	4b02      	ldr	r3, [pc, #8]	; (b49c8 <network_is_on+0xc>)
   b49c0:	681b      	ldr	r3, [r3, #0]
   b49c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b49c4:	9301      	str	r3, [sp, #4]
   b49c6:	bd08      	pop	{r3, pc}
   b49c8:	00030240 	.word	0x00030240

000b49cc <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b49cc:	b508      	push	{r3, lr}
   b49ce:	4b02      	ldr	r3, [pc, #8]	; (b49d8 <network_is_off+0xc>)
   b49d0:	681b      	ldr	r3, [r3, #0]
   b49d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b49d4:	9301      	str	r3, [sp, #4]
   b49d6:	bd08      	pop	{r3, pc}
   b49d8:	00030240 	.word	0x00030240

000b49dc <spark_cloud_flag_connect>:
DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   b49dc:	b508      	push	{r3, lr}
   b49de:	4b02      	ldr	r3, [pc, #8]	; (b49e8 <spark_cloud_flag_connect+0xc>)
   b49e0:	681b      	ldr	r3, [r3, #0]
   b49e2:	68db      	ldr	r3, [r3, #12]
   b49e4:	9301      	str	r3, [sp, #4]
   b49e6:	bd08      	pop	{r3, pc}
   b49e8:	00030244 	.word	0x00030244

000b49ec <spark_subscribe>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b49ec:	b508      	push	{r3, lr}
   b49ee:	4b02      	ldr	r3, [pc, #8]	; (b49f8 <spark_subscribe+0xc>)
   b49f0:	681b      	ldr	r3, [r3, #0]
   b49f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b49f4:	9301      	str	r3, [sp, #4]
   b49f6:	bd08      	pop	{r3, pc}
   b49f8:	00030244 	.word	0x00030244

000b49fc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b49fc:	b508      	push	{r3, lr}
   b49fe:	4b02      	ldr	r3, [pc, #8]	; (b4a08 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4a00:	681b      	ldr	r3, [r3, #0]
   b4a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4a04:	9301      	str	r3, [sp, #4]
   b4a06:	bd08      	pop	{r3, pc}
   b4a08:	00030244 	.word	0x00030244

000b4a0c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4a0c:	b508      	push	{r3, lr}
   b4a0e:	4b02      	ldr	r3, [pc, #8]	; (b4a18 <malloc+0xc>)
   b4a10:	681b      	ldr	r3, [r3, #0]
   b4a12:	681b      	ldr	r3, [r3, #0]
   b4a14:	9301      	str	r3, [sp, #4]
   b4a16:	bd08      	pop	{r3, pc}
   b4a18:	0003021c 	.word	0x0003021c

000b4a1c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4a1c:	b508      	push	{r3, lr}
   b4a1e:	4b02      	ldr	r3, [pc, #8]	; (b4a28 <free+0xc>)
   b4a20:	681b      	ldr	r3, [r3, #0]
   b4a22:	685b      	ldr	r3, [r3, #4]
   b4a24:	9301      	str	r3, [sp, #4]
   b4a26:	bd08      	pop	{r3, pc}
   b4a28:	0003021c 	.word	0x0003021c

000b4a2c <_malloc_r>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b4a2c:	b508      	push	{r3, lr}
   b4a2e:	4b02      	ldr	r3, [pc, #8]	; (b4a38 <_malloc_r+0xc>)
   b4a30:	681b      	ldr	r3, [r3, #0]
   b4a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4a34:	9301      	str	r3, [sp, #4]
   b4a36:	bd08      	pop	{r3, pc}
   b4a38:	0003021c 	.word	0x0003021c

000b4a3c <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4a3c:	b508      	push	{r3, lr}
   b4a3e:	4b02      	ldr	r3, [pc, #8]	; (b4a48 <__assert_func+0xc>)
   b4a40:	681b      	ldr	r3, [r3, #0]
   b4a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4a44:	9301      	str	r3, [sp, #4]
   b4a46:	bd08      	pop	{r3, pc}
   b4a48:	0003021c 	.word	0x0003021c

000b4a4c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4a4c:	b508      	push	{r3, lr}
   b4a4e:	4b02      	ldr	r3, [pc, #8]	; (b4a58 <newlib_impure_ptr_callback+0xc>)
   b4a50:	681b      	ldr	r3, [r3, #0]
   b4a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4a54:	9301      	str	r3, [sp, #4]
   b4a56:	bd08      	pop	{r3, pc}
   b4a58:	0003021c 	.word	0x0003021c

000b4a5c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4a5c:	2200      	movs	r2, #0
   b4a5e:	6840      	ldr	r0, [r0, #4]
   b4a60:	4611      	mov	r1, r2
   b4a62:	f7ff bf93 	b.w	b498c <network_listening>

000b4a66 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4a66:	2200      	movs	r2, #0
   b4a68:	6840      	ldr	r0, [r0, #4]
   b4a6a:	4611      	mov	r1, r2
   b4a6c:	f7ff bf9e 	b.w	b49ac <network_get_listen_timeout>

000b4a70 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4a70:	6840      	ldr	r0, [r0, #4]
   b4a72:	2200      	movs	r2, #0
   b4a74:	f7ff bf92 	b.w	b499c <network_set_listen_timeout>

000b4a78 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4a78:	6840      	ldr	r0, [r0, #4]
   b4a7a:	2200      	movs	r2, #0
   b4a7c:	f081 0101 	eor.w	r1, r1, #1
   b4a80:	f7ff bf7c 	b.w	b497c <network_listen>

000b4a84 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4a84:	2300      	movs	r3, #0
   b4a86:	6840      	ldr	r0, [r0, #4]
   b4a88:	461a      	mov	r2, r3
   b4a8a:	4619      	mov	r1, r3
   b4a8c:	f7ff bf6e 	b.w	b496c <network_off>

000b4a90 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4a90:	2300      	movs	r3, #0
   b4a92:	6840      	ldr	r0, [r0, #4]
   b4a94:	461a      	mov	r2, r3
   b4a96:	4619      	mov	r1, r3
   b4a98:	f7ff bf60 	b.w	b495c <network_on>

000b4a9c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4a9c:	2200      	movs	r2, #0
   b4a9e:	6840      	ldr	r0, [r0, #4]
   b4aa0:	4611      	mov	r1, r2
   b4aa2:	f7ff bf53 	b.w	b494c <network_ready>

000b4aa6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4aa6:	2200      	movs	r2, #0
   b4aa8:	6840      	ldr	r0, [r0, #4]
   b4aaa:	4611      	mov	r1, r2
   b4aac:	f7ff bf3e 	b.w	b492c <network_connecting>

000b4ab0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4ab0:	6840      	ldr	r0, [r0, #4]
   b4ab2:	2200      	movs	r2, #0
   b4ab4:	2102      	movs	r1, #2
   b4ab6:	f7ff bf41 	b.w	b493c <network_disconnect>

000b4aba <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4aba:	2300      	movs	r3, #0
   b4abc:	6840      	ldr	r0, [r0, #4]
   b4abe:	461a      	mov	r2, r3
   b4ac0:	f7ff bf2c 	b.w	b491c <network_connect>

000b4ac4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4ac4:	4b02      	ldr	r3, [pc, #8]	; (b4ad0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4ac6:	2203      	movs	r2, #3
   b4ac8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4aca:	4a02      	ldr	r2, [pc, #8]	; (b4ad4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4acc:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4ace:	4770      	bx	lr
   b4ad0:	2003e6b8 	.word	0x2003e6b8
   b4ad4:	000b7d1c 	.word	0x000b7d1c

000b4ad8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b4ad8:	b510      	push	{r4, lr}
   b4ada:	4604      	mov	r4, r0
   b4adc:	4608      	mov	r0, r1
{
    _spi = spi;
   b4ade:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b4ae0:	f7ff feb8 	bl	b4854 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b4ae4:	2300      	movs	r3, #0
   b4ae6:	6063      	str	r3, [r4, #4]
}
   b4ae8:	4620      	mov	r0, r4
   b4aea:	bd10      	pop	{r4, pc}

000b4aec <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4aec:	4b05      	ldr	r3, [pc, #20]	; (b4b04 <_GLOBAL__sub_I_System+0x18>)
   b4aee:	2202      	movs	r2, #2
   b4af0:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4af2:	4b05      	ldr	r3, [pc, #20]	; (b4b08 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b4af4:	4a05      	ldr	r2, [pc, #20]	; (b4b0c <_GLOBAL__sub_I_System+0x20>)
   b4af6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4af8:	2000      	movs	r0, #0
   b4afa:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4afe:	f7ff bee9 	b.w	b48d4 <set_system_mode>
   b4b02:	bf00      	nop
   b4b04:	2003e6cc 	.word	0x2003e6cc
   b4b08:	2003e6c0 	.word	0x2003e6c0
   b4b0c:	ffff0000 	.word	0xffff0000

000b4b10 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4b10:	4802      	ldr	r0, [pc, #8]	; (b4b1c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4b12:	2300      	movs	r3, #0
   b4b14:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4b16:	f7ff be15 	b.w	b4744 <os_mutex_recursive_create>
   b4b1a:	bf00      	nop
   b4b1c:	2003e6d0 	.word	0x2003e6d0

000b4b20 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b4b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4b22:	4606      	mov	r6, r0
   b4b24:	460d      	mov	r5, r1
  size_t n = 0;
   b4b26:	188f      	adds	r7, r1, r2
   b4b28:	2400      	movs	r4, #0
  while (size--) {
   b4b2a:	42bd      	cmp	r5, r7
   b4b2c:	d00c      	beq.n	b4b48 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b4b2e:	6833      	ldr	r3, [r6, #0]
   b4b30:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4b34:	689b      	ldr	r3, [r3, #8]
   b4b36:	4630      	mov	r0, r6
   b4b38:	4798      	blx	r3
     if (chunk>=0)
   b4b3a:	1e03      	subs	r3, r0, #0
   b4b3c:	db01      	blt.n	b4b42 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b4b3e:	441c      	add	r4, r3
  while (size--) {
   b4b40:	e7f3      	b.n	b4b2a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b4b42:	2c00      	cmp	r4, #0
   b4b44:	bf08      	it	eq
   b4b46:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b4b48:	4620      	mov	r0, r4
   b4b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4b4c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b4b4c:	b513      	push	{r0, r1, r4, lr}
   b4b4e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b4b50:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b4b52:	b159      	cbz	r1, b4b6c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4b54:	9101      	str	r1, [sp, #4]
   b4b56:	f001 f991 	bl	b5e7c <strlen>
   b4b5a:	6823      	ldr	r3, [r4, #0]
   b4b5c:	9901      	ldr	r1, [sp, #4]
   b4b5e:	68db      	ldr	r3, [r3, #12]
   b4b60:	4602      	mov	r2, r0
   b4b62:	4620      	mov	r0, r4
    }
   b4b64:	b002      	add	sp, #8
   b4b66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b4b6a:	4718      	bx	r3
    }
   b4b6c:	b002      	add	sp, #8
   b4b6e:	bd10      	pop	{r4, pc}

000b4b70 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b4b70:	6803      	ldr	r3, [r0, #0]
   b4b72:	689b      	ldr	r3, [r3, #8]
   b4b74:	4718      	bx	r3

000b4b76 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b4b76:	b530      	push	{r4, r5, lr}
   b4b78:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b4b7a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b4b7c:	2a01      	cmp	r2, #1
  *str = '\0';
   b4b7e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b4b82:	bf98      	it	ls
   b4b84:	220a      	movls	r2, #10
   b4b86:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b4b88:	460d      	mov	r5, r1
   b4b8a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b4b8e:	fb01 5312 	mls	r3, r1, r2, r5
   b4b92:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4b96:	2b09      	cmp	r3, #9
   b4b98:	bf94      	ite	ls
   b4b9a:	3330      	addls	r3, #48	; 0x30
   b4b9c:	3337      	addhi	r3, #55	; 0x37
   b4b9e:	b2db      	uxtb	r3, r3
  } while(n);
   b4ba0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4ba2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b4ba6:	d9ef      	bls.n	b4b88 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b4ba8:	4621      	mov	r1, r4
   b4baa:	f7ff ffcf 	bl	b4b4c <_ZN5Print5writeEPKc>
}
   b4bae:	b00b      	add	sp, #44	; 0x2c
   b4bb0:	bd30      	pop	{r4, r5, pc}
	...

000b4bb4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b4bb4:	4b01      	ldr	r3, [pc, #4]	; (b4bbc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b4bb6:	4a02      	ldr	r2, [pc, #8]	; (b4bc0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b4bb8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b4bba:	4770      	bx	lr
   b4bbc:	2003e6d4 	.word	0x2003e6d4
   b4bc0:	000b7d50 	.word	0x000b7d50

000b4bc4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b4bc4:	4b02      	ldr	r3, [pc, #8]	; (b4bd0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b4bc6:	681a      	ldr	r2, [r3, #0]
   b4bc8:	4b02      	ldr	r3, [pc, #8]	; (b4bd4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b4bca:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b4bcc:	4770      	bx	lr
   b4bce:	bf00      	nop
   b4bd0:	2003e4ac 	.word	0x2003e4ac
   b4bd4:	2003e6d8 	.word	0x2003e6d8

000b4bd8 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   b4bd8:	428a      	cmp	r2, r1
{
   b4bda:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   b4bdc:	d007      	beq.n	b4bee <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   b4bde:	1a44      	subs	r4, r0, r1
   b4be0:	9802      	ldr	r0, [sp, #8]
   b4be2:	1ac0      	subs	r0, r0, r3
   b4be4:	4344      	muls	r4, r0
   b4be6:	1a50      	subs	r0, r2, r1
   b4be8:	fb94 f0f0 	sdiv	r0, r4, r0
   b4bec:	4418      	add	r0, r3
}
   b4bee:	bd10      	pop	{r4, pc}

000b4bf0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b4bf0:	2100      	movs	r1, #0
   b4bf2:	f7ff be77 	b.w	b48e4 <system_delay_ms>
	...

000b4bf8 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b4bf8:	4b01      	ldr	r3, [pc, #4]	; (b4c00 <_GLOBAL__sub_I_RGB+0x8>)
   b4bfa:	2200      	movs	r2, #0
   b4bfc:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b4bfe:	4770      	bx	lr
   b4c00:	2003e6dc 	.word	0x2003e6dc

000b4c04 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b4c04:	4b01      	ldr	r3, [pc, #4]	; (b4c0c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b4c06:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b4c08:	4770      	bx	lr
   b4c0a:	bf00      	nop
   b4c0c:	2003e4b0 	.word	0x2003e4b0

000b4c10 <serialEventRun>:
{
   b4c10:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b4c12:	4b0b      	ldr	r3, [pc, #44]	; (b4c40 <serialEventRun+0x30>)
   b4c14:	b143      	cbz	r3, b4c28 <serialEventRun+0x18>
   b4c16:	f000 f963 	bl	b4ee0 <_Z16_fetch_usbserialv>
   b4c1a:	6803      	ldr	r3, [r0, #0]
   b4c1c:	691b      	ldr	r3, [r3, #16]
   b4c1e:	4798      	blx	r3
   b4c20:	2800      	cmp	r0, #0
   b4c22:	dd01      	ble.n	b4c28 <serialEventRun+0x18>
        serialEvent();
   b4c24:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b4c28:	4b06      	ldr	r3, [pc, #24]	; (b4c44 <serialEventRun+0x34>)
   b4c2a:	b143      	cbz	r3, b4c3e <serialEventRun+0x2e>
   b4c2c:	f000 fb8e 	bl	b534c <_Z22__fetch_global_Serial1v>
   b4c30:	6803      	ldr	r3, [r0, #0]
   b4c32:	691b      	ldr	r3, [r3, #16]
   b4c34:	4798      	blx	r3
   b4c36:	2800      	cmp	r0, #0
   b4c38:	dd01      	ble.n	b4c3e <serialEventRun+0x2e>
        serialEvent1();
   b4c3a:	f3af 8000 	nop.w
}
   b4c3e:	bd08      	pop	{r3, pc}
	...

000b4c48 <_post_loop>:
{
   b4c48:	b508      	push	{r3, lr}
	serialEventRun();
   b4c4a:	f7ff ffe1 	bl	b4c10 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b4c4e:	f7ff fd71 	bl	b4734 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4c52:	4b01      	ldr	r3, [pc, #4]	; (b4c58 <_post_loop+0x10>)
   b4c54:	6018      	str	r0, [r3, #0]
}
   b4c56:	bd08      	pop	{r3, pc}
   b4c58:	2003e740 	.word	0x2003e740

000b4c5c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4c5c:	4805      	ldr	r0, [pc, #20]	; (b4c74 <_Z33system_initialize_user_backup_ramv+0x18>)
   b4c5e:	4a06      	ldr	r2, [pc, #24]	; (b4c78 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b4c60:	4906      	ldr	r1, [pc, #24]	; (b4c7c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b4c62:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4c64:	1a12      	subs	r2, r2, r0
   b4c66:	f001 f8c4 	bl	b5df2 <memcpy>
    __backup_sram_signature = signature;
   b4c6a:	4b05      	ldr	r3, [pc, #20]	; (b4c80 <_Z33system_initialize_user_backup_ramv+0x24>)
   b4c6c:	4a05      	ldr	r2, [pc, #20]	; (b4c84 <_Z33system_initialize_user_backup_ramv+0x28>)
   b4c6e:	601a      	str	r2, [r3, #0]
}
   b4c70:	bd08      	pop	{r3, pc}
   b4c72:	bf00      	nop
   b4c74:	2003f400 	.word	0x2003f400
   b4c78:	2003f404 	.word	0x2003f404
   b4c7c:	000b82f4 	.word	0x000b82f4
   b4c80:	2003f400 	.word	0x2003f400
   b4c84:	9a271c1e 	.word	0x9a271c1e

000b4c88 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b4c88:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4c8a:	2300      	movs	r3, #0
   b4c8c:	9300      	str	r3, [sp, #0]
   b4c8e:	461a      	mov	r2, r3
   b4c90:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4c94:	f7ff fe38 	bl	b4908 <system_ctrl_set_result>
}
   b4c98:	b003      	add	sp, #12
   b4c9a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b4ca0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b4ca0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b4ca2:	8843      	ldrh	r3, [r0, #2]
   b4ca4:	2b0a      	cmp	r3, #10
   b4ca6:	d008      	beq.n	b4cba <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b4ca8:	2b50      	cmp	r3, #80	; 0x50
   b4caa:	d10b      	bne.n	b4cc4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b4cac:	4b09      	ldr	r3, [pc, #36]	; (b4cd4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b4cae:	681b      	ldr	r3, [r3, #0]
   b4cb0:	b14b      	cbz	r3, b4cc6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b4cb2:	b003      	add	sp, #12
   b4cb4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b4cb8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b4cba:	f7ff ffe5 	bl	b4c88 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b4cbe:	b003      	add	sp, #12
   b4cc0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4cc4:	2300      	movs	r3, #0
   b4cc6:	9300      	str	r3, [sp, #0]
   b4cc8:	461a      	mov	r2, r3
   b4cca:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4cce:	f7ff fe1b 	bl	b4908 <system_ctrl_set_result>
}
   b4cd2:	e7f4      	b.n	b4cbe <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b4cd4:	2003e6f0 	.word	0x2003e6f0

000b4cd8 <module_user_init_hook>:
{
   b4cd8:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b4cda:	4812      	ldr	r0, [pc, #72]	; (b4d24 <module_user_init_hook+0x4c>)
   b4cdc:	2100      	movs	r1, #0
   b4cde:	f7ff feb5 	bl	b4a4c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b4ce2:	4b11      	ldr	r3, [pc, #68]	; (b4d28 <module_user_init_hook+0x50>)
   b4ce4:	681a      	ldr	r2, [r3, #0]
   b4ce6:	4b11      	ldr	r3, [pc, #68]	; (b4d2c <module_user_init_hook+0x54>)
   b4ce8:	429a      	cmp	r2, r3
   b4cea:	4b11      	ldr	r3, [pc, #68]	; (b4d30 <module_user_init_hook+0x58>)
   b4cec:	bf0c      	ite	eq
   b4cee:	2201      	moveq	r2, #1
   b4cf0:	2200      	movne	r2, #0
   b4cf2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b4cf4:	d001      	beq.n	b4cfa <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b4cf6:	f7ff ffb1 	bl	b4c5c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b4cfa:	f7ff fd03 	bl	b4704 <HAL_RNG_GetRandomNumber>
   b4cfe:	4604      	mov	r4, r0
    srand(seed);
   b4d00:	f001 f88e 	bl	b5e20 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b4d04:	4b0b      	ldr	r3, [pc, #44]	; (b4d34 <module_user_init_hook+0x5c>)
   b4d06:	b113      	cbz	r3, b4d0e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b4d08:	4620      	mov	r0, r4
   b4d0a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b4d0e:	2100      	movs	r1, #0
   b4d10:	4808      	ldr	r0, [pc, #32]	; (b4d34 <module_user_init_hook+0x5c>)
   b4d12:	f7ff fe73 	bl	b49fc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b4d16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b4d1a:	4807      	ldr	r0, [pc, #28]	; (b4d38 <module_user_init_hook+0x60>)
   b4d1c:	2100      	movs	r1, #0
   b4d1e:	f7ff bde9 	b.w	b48f4 <system_ctrl_set_app_request_handler>
   b4d22:	bf00      	nop
   b4d24:	000b4c05 	.word	0x000b4c05
   b4d28:	2003f400 	.word	0x2003f400
   b4d2c:	9a271c1e 	.word	0x9a271c1e
   b4d30:	2003e6ec 	.word	0x2003e6ec
   b4d34:	00000000 	.word	0x00000000
   b4d38:	000b4ca1 	.word	0x000b4ca1

000b4d3c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4d3c:	4770      	bx	lr

000b4d3e <_ZN9IPAddressD0Ev>:
   b4d3e:	b510      	push	{r4, lr}
   b4d40:	2118      	movs	r1, #24
   b4d42:	4604      	mov	r4, r0
   b4d44:	f7ff f9a9 	bl	b409a <_ZdlPvj>
   b4d48:	4620      	mov	r0, r4
   b4d4a:	bd10      	pop	{r4, pc}

000b4d4c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b4d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b4d4e:	7d03      	ldrb	r3, [r0, #20]
   b4d50:	2b06      	cmp	r3, #6
{
   b4d52:	b08d      	sub	sp, #52	; 0x34
   b4d54:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4d56:	f100 0704 	add.w	r7, r0, #4
   b4d5a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b4d5e:	d012      	beq.n	b4d86 <_ZNK9IPAddress7printToER5Print+0x3a>
   b4d60:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4d64:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b4d68:	220a      	movs	r2, #10
   b4d6a:	4630      	mov	r0, r6
   b4d6c:	f7ff ff03 	bl	b4b76 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b4d70:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b4d72:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b4d74:	d019      	beq.n	b4daa <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b4d76:	2c00      	cmp	r4, #0
   b4d78:	d0f4      	beq.n	b4d64 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b4d7a:	212e      	movs	r1, #46	; 0x2e
   b4d7c:	4630      	mov	r0, r6
   b4d7e:	f7ff fef7 	bl	b4b70 <_ZN5Print5printEc>
   b4d82:	4404      	add	r4, r0
   b4d84:	e7ee      	b.n	b4d64 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4d86:	232f      	movs	r3, #47	; 0x2f
   b4d88:	466a      	mov	r2, sp
   b4d8a:	4639      	mov	r1, r7
   b4d8c:	200a      	movs	r0, #10
		buf[0] = 0;
   b4d8e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4d92:	f7ff fcdf 	bl	b4754 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b4d96:	4668      	mov	r0, sp
   b4d98:	f001 f870 	bl	b5e7c <strlen>
   b4d9c:	6833      	ldr	r3, [r6, #0]
   b4d9e:	4602      	mov	r2, r0
   b4da0:	68db      	ldr	r3, [r3, #12]
   b4da2:	4669      	mov	r1, sp
   b4da4:	4630      	mov	r0, r6
   b4da6:	4798      	blx	r3
   b4da8:	4604      	mov	r4, r0
    }
    return n;
}
   b4daa:	4620      	mov	r0, r4
   b4dac:	b00d      	add	sp, #52	; 0x34
   b4dae:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4db0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b4db0:	b510      	push	{r4, lr}
   b4db2:	4b05      	ldr	r3, [pc, #20]	; (b4dc8 <_ZN9IPAddressC1Ev+0x18>)
   b4db4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b4db6:	2211      	movs	r2, #17
   b4db8:	f840 3b04 	str.w	r3, [r0], #4
   b4dbc:	2100      	movs	r1, #0
   b4dbe:	f001 f826 	bl	b5e0e <memset>
}
   b4dc2:	4620      	mov	r0, r4
   b4dc4:	bd10      	pop	{r4, pc}
   b4dc6:	bf00      	nop
   b4dc8:	000b7d78 	.word	0x000b7d78

000b4dcc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b4dcc:	4603      	mov	r3, r0
   b4dce:	4a07      	ldr	r2, [pc, #28]	; (b4dec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b4dd0:	b510      	push	{r4, lr}
   b4dd2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b4dd6:	f101 0210 	add.w	r2, r1, #16
   b4dda:	f851 4b04 	ldr.w	r4, [r1], #4
   b4dde:	f843 4b04 	str.w	r4, [r3], #4
   b4de2:	4291      	cmp	r1, r2
   b4de4:	d1f9      	bne.n	b4dda <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b4de6:	780a      	ldrb	r2, [r1, #0]
   b4de8:	701a      	strb	r2, [r3, #0]
}
   b4dea:	bd10      	pop	{r4, pc}
   b4dec:	000b7d78 	.word	0x000b7d78

000b4df0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b4df0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b4df2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b4df6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b4dfa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b4dfe:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b4e02:	2304      	movs	r3, #4
   b4e04:	6041      	str	r1, [r0, #4]
   b4e06:	7503      	strb	r3, [r0, #20]
}
   b4e08:	bd10      	pop	{r4, pc}
	...

000b4e0c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b4e0c:	b507      	push	{r0, r1, r2, lr}
   b4e0e:	4b06      	ldr	r3, [pc, #24]	; (b4e28 <_ZN9IPAddressC1EPKh+0x1c>)
   b4e10:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b4e12:	78cb      	ldrb	r3, [r1, #3]
   b4e14:	9300      	str	r3, [sp, #0]
   b4e16:	788b      	ldrb	r3, [r1, #2]
   b4e18:	784a      	ldrb	r2, [r1, #1]
   b4e1a:	7809      	ldrb	r1, [r1, #0]
   b4e1c:	f7ff ffe8 	bl	b4df0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b4e20:	b003      	add	sp, #12
   b4e22:	f85d fb04 	ldr.w	pc, [sp], #4
   b4e26:	bf00      	nop
   b4e28:	000b7d78 	.word	0x000b7d78

000b4e2c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4e2c:	7441      	strb	r1, [r0, #17]
}
   b4e2e:	4770      	bx	lr

000b4e30 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4e30:	4770      	bx	lr

000b4e32 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b4e32:	4770      	bx	lr

000b4e34 <_ZN9USBSerial4readEv>:
{
   b4e34:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b4e36:	2100      	movs	r1, #0
   b4e38:	7c00      	ldrb	r0, [r0, #16]
   b4e3a:	f7ff fd33 	bl	b48a4 <HAL_USB_USART_Receive_Data>
}
   b4e3e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4e42:	bd08      	pop	{r3, pc}

000b4e44 <_ZN9USBSerial4peekEv>:
{
   b4e44:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b4e46:	2101      	movs	r1, #1
   b4e48:	7c00      	ldrb	r0, [r0, #16]
   b4e4a:	f7ff fd2b 	bl	b48a4 <HAL_USB_USART_Receive_Data>
}
   b4e4e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4e52:	bd08      	pop	{r3, pc}

000b4e54 <_ZN9USBSerial17availableForWriteEv>:
{
   b4e54:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b4e56:	7c00      	ldrb	r0, [r0, #16]
   b4e58:	f7ff fd1c 	bl	b4894 <HAL_USB_USART_Available_Data_For_Write>
}
   b4e5c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4e60:	bd08      	pop	{r3, pc}

000b4e62 <_ZN9USBSerial9availableEv>:
{
   b4e62:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b4e64:	7c00      	ldrb	r0, [r0, #16]
   b4e66:	f7ff fd0d 	bl	b4884 <HAL_USB_USART_Available_Data>
}
   b4e6a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4e6e:	bd08      	pop	{r3, pc}

000b4e70 <_ZN9USBSerial5writeEh>:
{
   b4e70:	b513      	push	{r0, r1, r4, lr}
   b4e72:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4e74:	7c00      	ldrb	r0, [r0, #16]
{
   b4e76:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4e78:	f7ff fd0c 	bl	b4894 <HAL_USB_USART_Available_Data_For_Write>
   b4e7c:	2800      	cmp	r0, #0
   b4e7e:	9901      	ldr	r1, [sp, #4]
   b4e80:	dc01      	bgt.n	b4e86 <_ZN9USBSerial5writeEh+0x16>
   b4e82:	7c60      	ldrb	r0, [r4, #17]
   b4e84:	b120      	cbz	r0, b4e90 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b4e86:	7c20      	ldrb	r0, [r4, #16]
   b4e88:	f7ff fd14 	bl	b48b4 <HAL_USB_USART_Send_Data>
   b4e8c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b4e90:	b002      	add	sp, #8
   b4e92:	bd10      	pop	{r4, pc}

000b4e94 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b4e94:	7c00      	ldrb	r0, [r0, #16]
   b4e96:	f7ff bd15 	b.w	b48c4 <HAL_USB_USART_Flush_Data>

000b4e9a <_ZN9USBSerialD0Ev>:
   b4e9a:	b510      	push	{r4, lr}
   b4e9c:	2114      	movs	r1, #20
   b4e9e:	4604      	mov	r4, r0
   b4ea0:	f7ff f8fb 	bl	b409a <_ZdlPvj>
   b4ea4:	4620      	mov	r0, r4
   b4ea6:	bd10      	pop	{r4, pc}

000b4ea8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b4ea8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b4eaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4eae:	4604      	mov	r4, r0
   b4eb0:	4608      	mov	r0, r1
   b4eb2:	2100      	movs	r1, #0
   b4eb4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b4eb8:	4b04      	ldr	r3, [pc, #16]	; (b4ecc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b4eba:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4ebc:	2301      	movs	r3, #1
  _serial = serial;
   b4ebe:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4ec0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b4ec2:	4611      	mov	r1, r2
   b4ec4:	f7ff fcd6 	bl	b4874 <HAL_USB_USART_Init>
}
   b4ec8:	4620      	mov	r0, r4
   b4eca:	bd10      	pop	{r4, pc}
   b4ecc:	000b7d8c 	.word	0x000b7d8c

000b4ed0 <_Z19acquireSerialBufferv>:
{
   b4ed0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b4ed2:	2214      	movs	r2, #20
{
   b4ed4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b4ed6:	2100      	movs	r1, #0
   b4ed8:	f000 ff99 	bl	b5e0e <memset>
}
   b4edc:	4620      	mov	r0, r4
   b4ede:	bd10      	pop	{r4, pc}

000b4ee0 <_Z16_fetch_usbserialv>:
{
   b4ee0:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4ee2:	4c0f      	ldr	r4, [pc, #60]	; (b4f20 <_Z16_fetch_usbserialv+0x40>)
{
   b4ee4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b4ee6:	a803      	add	r0, sp, #12
   b4ee8:	f7ff fff2 	bl	b4ed0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4eec:	7821      	ldrb	r1, [r4, #0]
   b4eee:	f3bf 8f5b 	dmb	ish
   b4ef2:	f011 0101 	ands.w	r1, r1, #1
   b4ef6:	d10f      	bne.n	b4f18 <_Z16_fetch_usbserialv+0x38>
   b4ef8:	4620      	mov	r0, r4
   b4efa:	9101      	str	r1, [sp, #4]
   b4efc:	f7ff f8cf 	bl	b409e <__cxa_guard_acquire>
   b4f00:	9901      	ldr	r1, [sp, #4]
   b4f02:	b148      	cbz	r0, b4f18 <_Z16_fetch_usbserialv+0x38>
   b4f04:	aa03      	add	r2, sp, #12
   b4f06:	4807      	ldr	r0, [pc, #28]	; (b4f24 <_Z16_fetch_usbserialv+0x44>)
   b4f08:	f7ff ffce 	bl	b4ea8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b4f0c:	4620      	mov	r0, r4
   b4f0e:	f7ff f8cb 	bl	b40a8 <__cxa_guard_release>
   b4f12:	4805      	ldr	r0, [pc, #20]	; (b4f28 <_Z16_fetch_usbserialv+0x48>)
   b4f14:	f000 ff64 	bl	b5de0 <atexit>
	return _usbserial;
}
   b4f18:	4802      	ldr	r0, [pc, #8]	; (b4f24 <_Z16_fetch_usbserialv+0x44>)
   b4f1a:	b008      	add	sp, #32
   b4f1c:	bd10      	pop	{r4, pc}
   b4f1e:	bf00      	nop
   b4f20:	2003e6f4 	.word	0x2003e6f4
   b4f24:	2003e6f8 	.word	0x2003e6f8
   b4f28:	000b4e31 	.word	0x000b4e31

000b4f2c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b4f2c:	4770      	bx	lr

000b4f2e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4f2e:	7441      	strb	r1, [r0, #17]
}
   b4f30:	4770      	bx	lr

000b4f32 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b4f32:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b4f34:	7c00      	ldrb	r0, [r0, #16]
   b4f36:	f7ff fc45 	bl	b47c4 <hal_usart_available_data_for_write>
}
   b4f3a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4f3e:	bd08      	pop	{r3, pc}

000b4f40 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b4f40:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b4f42:	7c00      	ldrb	r0, [r0, #16]
   b4f44:	f7ff fc16 	bl	b4774 <hal_usart_available>
}
   b4f48:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4f4c:	bd08      	pop	{r3, pc}

000b4f4e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b4f4e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b4f50:	7c00      	ldrb	r0, [r0, #16]
   b4f52:	f7ff fc1f 	bl	b4794 <hal_usart_peek>
}
   b4f56:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4f5a:	bd08      	pop	{r3, pc}

000b4f5c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b4f5c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b4f5e:	7c00      	ldrb	r0, [r0, #16]
   b4f60:	f7ff fc10 	bl	b4784 <hal_usart_read>
}
   b4f64:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4f68:	bd08      	pop	{r3, pc}

000b4f6a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b4f6a:	7c00      	ldrb	r0, [r0, #16]
   b4f6c:	f7ff bc1a 	b.w	b47a4 <hal_usart_flush>

000b4f70 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b4f70:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4f72:	7c45      	ldrb	r5, [r0, #17]
{
   b4f74:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4f76:	b12d      	cbz	r5, b4f84 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b4f78:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b4f7a:	b003      	add	sp, #12
   b4f7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b4f80:	f7ff bbf0 	b.w	b4764 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4f84:	7c00      	ldrb	r0, [r0, #16]
   b4f86:	9101      	str	r1, [sp, #4]
   b4f88:	f7ff fc1c 	bl	b47c4 <hal_usart_available_data_for_write>
   b4f8c:	2800      	cmp	r0, #0
   b4f8e:	9901      	ldr	r1, [sp, #4]
   b4f90:	dcf2      	bgt.n	b4f78 <_ZN11USARTSerial5writeEh+0x8>
}
   b4f92:	4628      	mov	r0, r5
   b4f94:	b003      	add	sp, #12
   b4f96:	bd30      	pop	{r4, r5, pc}

000b4f98 <_ZN11USARTSerialD0Ev>:
   b4f98:	b510      	push	{r4, lr}
   b4f9a:	2114      	movs	r1, #20
   b4f9c:	4604      	mov	r4, r0
   b4f9e:	f7ff f87c 	bl	b409a <_ZdlPvj>
   b4fa2:	4620      	mov	r0, r4
   b4fa4:	bd10      	pop	{r4, pc}
	...

000b4fa8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b4fa8:	b510      	push	{r4, lr}
   b4faa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4fae:	4604      	mov	r4, r0
   b4fb0:	4608      	mov	r0, r1
   b4fb2:	4611      	mov	r1, r2
   b4fb4:	2200      	movs	r2, #0
   b4fb6:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b4fba:	4b04      	ldr	r3, [pc, #16]	; (b4fcc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b4fbc:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4fbe:	2301      	movs	r3, #1
  _serial = serial;
   b4fc0:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4fc2:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b4fc4:	f7ff fc06 	bl	b47d4 <hal_usart_init_ex>
}
   b4fc8:	4620      	mov	r0, r4
   b4fca:	bd10      	pop	{r4, pc}
   b4fcc:	000b7dbc 	.word	0x000b7dbc

000b4fd0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b4fd0:	4770      	bx	lr

000b4fd2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b4fd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4fd4:	4606      	mov	r6, r0
   b4fd6:	4615      	mov	r5, r2
   b4fd8:	460c      	mov	r4, r1
   b4fda:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b4fdc:	42bc      	cmp	r4, r7
   b4fde:	d006      	beq.n	b4fee <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b4fe0:	6833      	ldr	r3, [r6, #0]
   b4fe2:	f814 1b01 	ldrb.w	r1, [r4], #1
   b4fe6:	689b      	ldr	r3, [r3, #8]
   b4fe8:	4630      	mov	r0, r6
   b4fea:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b4fec:	e7f6      	b.n	b4fdc <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b4fee:	4628      	mov	r0, r5
   b4ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4ff2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b4ff2:	7c00      	ldrb	r0, [r0, #16]
   b4ff4:	2200      	movs	r2, #0
   b4ff6:	f7ff bbf5 	b.w	b47e4 <hal_i2c_write>

000b4ffa <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b4ffa:	7c00      	ldrb	r0, [r0, #16]
   b4ffc:	2100      	movs	r1, #0
   b4ffe:	f7ff bbf9 	b.w	b47f4 <hal_i2c_available>

000b5002 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b5002:	7c00      	ldrb	r0, [r0, #16]
   b5004:	2100      	movs	r1, #0
   b5006:	f7ff bbfd 	b.w	b4804 <hal_i2c_read>

000b500a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b500a:	7c00      	ldrb	r0, [r0, #16]
   b500c:	2100      	movs	r1, #0
   b500e:	f7ff bc01 	b.w	b4814 <hal_i2c_peek>

000b5012 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b5012:	7c00      	ldrb	r0, [r0, #16]
   b5014:	2100      	movs	r1, #0
   b5016:	f7ff bc05 	b.w	b4824 <hal_i2c_flush>

000b501a <_ZN7TwoWireD0Ev>:
   b501a:	b510      	push	{r4, lr}
   b501c:	2114      	movs	r1, #20
   b501e:	4604      	mov	r4, r0
   b5020:	f7ff f83b 	bl	b409a <_ZdlPvj>
   b5024:	4620      	mov	r0, r4
   b5026:	bd10      	pop	{r4, pc}

000b5028 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5028:	b538      	push	{r3, r4, r5, lr}
   b502a:	4604      	mov	r4, r0
   b502c:	4615      	mov	r5, r2
   b502e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5032:	2200      	movs	r2, #0
   b5034:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5038:	4b09      	ldr	r3, [pc, #36]	; (b5060 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b503a:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b503c:	4608      	mov	r0, r1
   b503e:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b5040:	4629      	mov	r1, r5
   b5042:	f7ff fbff 	bl	b4844 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5046:	30bf      	adds	r0, #191	; 0xbf
   b5048:	d108      	bne.n	b505c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b504a:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b504c:	07db      	lsls	r3, r3, #31
   b504e:	d505      	bpl.n	b505c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b5050:	6868      	ldr	r0, [r5, #4]
   b5052:	f7ff fce3 	bl	b4a1c <free>
    free(conf.tx_buffer);
   b5056:	68e8      	ldr	r0, [r5, #12]
   b5058:	f7ff fce0 	bl	b4a1c <free>
}
   b505c:	4620      	mov	r0, r4
   b505e:	bd38      	pop	{r3, r4, r5, pc}
   b5060:	000b7dec 	.word	0x000b7dec

000b5064 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b5064:	2200      	movs	r2, #0
   b5066:	6840      	ldr	r0, [r0, #4]
   b5068:	4611      	mov	r1, r2
   b506a:	f7ff bc6f 	b.w	b494c <network_ready>

000b506e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b506e:	2200      	movs	r2, #0
   b5070:	6840      	ldr	r0, [r0, #4]
   b5072:	4611      	mov	r1, r2
   b5074:	f7ff bc8a 	b.w	b498c <network_listening>

000b5078 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5078:	2200      	movs	r2, #0
   b507a:	6840      	ldr	r0, [r0, #4]
   b507c:	4611      	mov	r1, r2
   b507e:	f7ff bc95 	b.w	b49ac <network_get_listen_timeout>

000b5082 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5082:	6840      	ldr	r0, [r0, #4]
   b5084:	2200      	movs	r2, #0
   b5086:	f7ff bc89 	b.w	b499c <network_set_listen_timeout>

000b508a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b508a:	6840      	ldr	r0, [r0, #4]
   b508c:	2200      	movs	r2, #0
   b508e:	f081 0101 	eor.w	r1, r1, #1
   b5092:	f7ff bc73 	b.w	b497c <network_listen>

000b5096 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5096:	2300      	movs	r3, #0
   b5098:	6840      	ldr	r0, [r0, #4]
   b509a:	461a      	mov	r2, r3
   b509c:	4619      	mov	r1, r3
   b509e:	f7ff bc65 	b.w	b496c <network_off>

000b50a2 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b50a2:	2300      	movs	r3, #0
   b50a4:	6840      	ldr	r0, [r0, #4]
   b50a6:	461a      	mov	r2, r3
   b50a8:	4619      	mov	r1, r3
   b50aa:	f7ff bc57 	b.w	b495c <network_on>

000b50ae <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b50ae:	2200      	movs	r2, #0
   b50b0:	6840      	ldr	r0, [r0, #4]
   b50b2:	4611      	mov	r1, r2
   b50b4:	f7ff bc3a 	b.w	b492c <network_connecting>

000b50b8 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b50b8:	6840      	ldr	r0, [r0, #4]
   b50ba:	2200      	movs	r2, #0
   b50bc:	2102      	movs	r1, #2
   b50be:	f7ff bc3d 	b.w	b493c <network_disconnect>

000b50c2 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b50c2:	2300      	movs	r3, #0
   b50c4:	6840      	ldr	r0, [r0, #4]
   b50c6:	461a      	mov	r2, r3
   b50c8:	f7ff bc28 	b.w	b491c <network_connect>

000b50cc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b50cc:	4b02      	ldr	r3, [pc, #8]	; (b50d8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b50ce:	2204      	movs	r2, #4
   b50d0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b50d2:	4a02      	ldr	r2, [pc, #8]	; (b50dc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b50d4:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b50d6:	4770      	bx	lr
   b50d8:	2003e70c 	.word	0x2003e70c
   b50dc:	000b7e14 	.word	0x000b7e14

000b50e0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b50e0:	2300      	movs	r3, #0
   b50e2:	6840      	ldr	r0, [r0, #4]
   b50e4:	461a      	mov	r2, r3
   b50e6:	f7ff bc19 	b.w	b491c <network_connect>

000b50ea <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b50ea:	6840      	ldr	r0, [r0, #4]
   b50ec:	2200      	movs	r2, #0
   b50ee:	2102      	movs	r1, #2
   b50f0:	f7ff bc24 	b.w	b493c <network_disconnect>

000b50f4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b50f4:	2200      	movs	r2, #0
   b50f6:	6840      	ldr	r0, [r0, #4]
   b50f8:	4611      	mov	r1, r2
   b50fa:	f7ff bc17 	b.w	b492c <network_connecting>

000b50fe <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b50fe:	2200      	movs	r2, #0
   b5100:	6840      	ldr	r0, [r0, #4]
   b5102:	4611      	mov	r1, r2
   b5104:	f7ff bc22 	b.w	b494c <network_ready>

000b5108 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5108:	2300      	movs	r3, #0
   b510a:	6840      	ldr	r0, [r0, #4]
   b510c:	461a      	mov	r2, r3
   b510e:	4619      	mov	r1, r3
   b5110:	f7ff bc24 	b.w	b495c <network_on>

000b5114 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5114:	2300      	movs	r3, #0
   b5116:	6840      	ldr	r0, [r0, #4]
   b5118:	461a      	mov	r2, r3
   b511a:	4619      	mov	r1, r3
   b511c:	f7ff bc26 	b.w	b496c <network_off>

000b5120 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5120:	6840      	ldr	r0, [r0, #4]
   b5122:	2100      	movs	r1, #0
   b5124:	f7ff bc4a 	b.w	b49bc <network_is_on>

000b5128 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5128:	6840      	ldr	r0, [r0, #4]
   b512a:	2100      	movs	r1, #0
   b512c:	f7ff bc4e 	b.w	b49cc <network_is_off>

000b5130 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5130:	6840      	ldr	r0, [r0, #4]
   b5132:	2200      	movs	r2, #0
   b5134:	f081 0101 	eor.w	r1, r1, #1
   b5138:	f7ff bc20 	b.w	b497c <network_listen>

000b513c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b513c:	6840      	ldr	r0, [r0, #4]
   b513e:	2200      	movs	r2, #0
   b5140:	f7ff bc2c 	b.w	b499c <network_set_listen_timeout>

000b5144 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5144:	2200      	movs	r2, #0
   b5146:	6840      	ldr	r0, [r0, #4]
   b5148:	4611      	mov	r1, r2
   b514a:	f7ff bc2f 	b.w	b49ac <network_get_listen_timeout>

000b514e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b514e:	2200      	movs	r2, #0
   b5150:	6840      	ldr	r0, [r0, #4]
   b5152:	4611      	mov	r1, r2
   b5154:	f7ff bc1a 	b.w	b498c <network_listening>

000b5158 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5158:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b515c:	b095      	sub	sp, #84	; 0x54
   b515e:	4614      	mov	r4, r2
   b5160:	460d      	mov	r5, r1
   b5162:	4607      	mov	r7, r0
    IPAddress addr;
   b5164:	f7ff fe24 	bl	b4db0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5168:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b516a:	221c      	movs	r2, #28
   b516c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b516e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5170:	f000 fe4d 	bl	b5e0e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5174:	2340      	movs	r3, #64	; 0x40
   b5176:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5178:	4620      	mov	r0, r4
   b517a:	466b      	mov	r3, sp
   b517c:	aa0c      	add	r2, sp, #48	; 0x30
   b517e:	2100      	movs	r1, #0
   b5180:	f7ff fa98 	bl	b46b4 <netdb_getaddrinfo>
    if (!r) {
   b5184:	4604      	mov	r4, r0
   b5186:	2800      	cmp	r0, #0
   b5188:	d14b      	bne.n	b5222 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b518a:	4602      	mov	r2, r0
   b518c:	2101      	movs	r1, #1
   b518e:	6868      	ldr	r0, [r5, #4]
   b5190:	f7ff fbdc 	bl	b494c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5194:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5196:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5198:	4622      	mov	r2, r4
   b519a:	6868      	ldr	r0, [r5, #4]
   b519c:	f7ff fbd6 	bl	b494c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b51a0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b51a2:	4681      	mov	r9, r0
        bool ok = false;
   b51a4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b51a6:	2e00      	cmp	r6, #0
   b51a8:	d03b      	beq.n	b5222 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b51aa:	2900      	cmp	r1, #0
   b51ac:	d139      	bne.n	b5222 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b51ae:	6873      	ldr	r3, [r6, #4]
   b51b0:	2b02      	cmp	r3, #2
   b51b2:	d003      	beq.n	b51bc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b51b4:	2b0a      	cmp	r3, #10
   b51b6:	d011      	beq.n	b51dc <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b51b8:	69f6      	ldr	r6, [r6, #28]
   b51ba:	e7f4      	b.n	b51a6 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b51bc:	f1b8 0f00 	cmp.w	r8, #0
   b51c0:	d0fa      	beq.n	b51b8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b51c2:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b51c4:	a806      	add	r0, sp, #24
   b51c6:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b51c8:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b51ca:	f7ff fe1f 	bl	b4e0c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b51ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b51d0:	1d3c      	adds	r4, r7, #4
   b51d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b51d4:	682b      	ldr	r3, [r5, #0]
   b51d6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b51d8:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b51da:	e7ed      	b.n	b51b8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b51dc:	f1b9 0f00 	cmp.w	r9, #0
   b51e0:	d0ea      	beq.n	b51b8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b51e2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b51e4:	2210      	movs	r2, #16
   b51e6:	a801      	add	r0, sp, #4
   b51e8:	f000 fe11 	bl	b5e0e <memset>
                    a.v = 6;
   b51ec:	2306      	movs	r3, #6
   b51ee:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b51f2:	ad01      	add	r5, sp, #4
   b51f4:	f104 0308 	add.w	r3, r4, #8
   b51f8:	3418      	adds	r4, #24
   b51fa:	6818      	ldr	r0, [r3, #0]
   b51fc:	6859      	ldr	r1, [r3, #4]
   b51fe:	462a      	mov	r2, r5
   b5200:	c203      	stmia	r2!, {r0, r1}
   b5202:	3308      	adds	r3, #8
   b5204:	42a3      	cmp	r3, r4
   b5206:	4615      	mov	r5, r2
   b5208:	d1f7      	bne.n	b51fa <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b520a:	a901      	add	r1, sp, #4
   b520c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b520e:	ad07      	add	r5, sp, #28
   b5210:	f7ff fddc 	bl	b4dcc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5214:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5216:	1d3c      	adds	r4, r7, #4
   b5218:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b521a:	682b      	ldr	r3, [r5, #0]
   b521c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b521e:	4649      	mov	r1, r9
   b5220:	e7ca      	b.n	b51b8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b5222:	9800      	ldr	r0, [sp, #0]
   b5224:	f7ff fa3e 	bl	b46a4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5228:	4638      	mov	r0, r7
   b522a:	b015      	add	sp, #84	; 0x54
   b522c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5230 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5230:	4b02      	ldr	r3, [pc, #8]	; (b523c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5232:	4a03      	ldr	r2, [pc, #12]	; (b5240 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5234:	601a      	str	r2, [r3, #0]
   b5236:	2200      	movs	r2, #0
   b5238:	605a      	str	r2, [r3, #4]

} // spark
   b523a:	4770      	bx	lr
   b523c:	2003e714 	.word	0x2003e714
   b5240:	000b7e50 	.word	0x000b7e50

000b5244 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b5244:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b5246:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b5248:	d902      	bls.n	b5250 <pinAvailable+0xc>
    return false;
   b524a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b524c:	b002      	add	sp, #8
   b524e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b5250:	f1a0 030b 	sub.w	r3, r0, #11
   b5254:	2b02      	cmp	r3, #2
   b5256:	d81a      	bhi.n	b528e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5258:	4c17      	ldr	r4, [pc, #92]	; (b52b8 <pinAvailable+0x74>)
   b525a:	7821      	ldrb	r1, [r4, #0]
   b525c:	f3bf 8f5b 	dmb	ish
   b5260:	f011 0101 	ands.w	r1, r1, #1
   b5264:	d10b      	bne.n	b527e <pinAvailable+0x3a>
   b5266:	4620      	mov	r0, r4
   b5268:	9101      	str	r1, [sp, #4]
   b526a:	f7fe ff18 	bl	b409e <__cxa_guard_acquire>
   b526e:	9901      	ldr	r1, [sp, #4]
   b5270:	b128      	cbz	r0, b527e <pinAvailable+0x3a>
   b5272:	4812      	ldr	r0, [pc, #72]	; (b52bc <pinAvailable+0x78>)
   b5274:	f7ff fc30 	bl	b4ad8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5278:	4620      	mov	r0, r4
   b527a:	f7fe ff15 	bl	b40a8 <__cxa_guard_release>
   b527e:	4b0f      	ldr	r3, [pc, #60]	; (b52bc <pinAvailable+0x78>)
   b5280:	7818      	ldrb	r0, [r3, #0]
   b5282:	f7ff faef 	bl	b4864 <hal_spi_is_enabled>
   b5286:	2800      	cmp	r0, #0
   b5288:	d1df      	bne.n	b524a <pinAvailable+0x6>
  return true; // 'pin' is available
   b528a:	2001      	movs	r0, #1
   b528c:	e7de      	b.n	b524c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b528e:	2801      	cmp	r0, #1
   b5290:	d809      	bhi.n	b52a6 <pinAvailable+0x62>
   b5292:	f000 f89b 	bl	b53cc <_Z19__fetch_global_Wirev>
   b5296:	2100      	movs	r1, #0
   b5298:	7c00      	ldrb	r0, [r0, #16]
   b529a:	f7ff facb 	bl	b4834 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b529e:	f080 0001 	eor.w	r0, r0, #1
   b52a2:	b2c0      	uxtb	r0, r0
   b52a4:	e7d2      	b.n	b524c <pinAvailable+0x8>
   b52a6:	3809      	subs	r0, #9
   b52a8:	2801      	cmp	r0, #1
   b52aa:	d8ee      	bhi.n	b528a <pinAvailable+0x46>
   b52ac:	f000 f84e 	bl	b534c <_Z22__fetch_global_Serial1v>
   b52b0:	7c00      	ldrb	r0, [r0, #16]
   b52b2:	f7ff fa7f 	bl	b47b4 <hal_usart_is_enabled>
   b52b6:	e7f2      	b.n	b529e <pinAvailable+0x5a>
   b52b8:	2003e71c 	.word	0x2003e71c
   b52bc:	2003e720 	.word	0x2003e720

000b52c0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b52c0:	2823      	cmp	r0, #35	; 0x23
{
   b52c2:	b538      	push	{r3, r4, r5, lr}
   b52c4:	4604      	mov	r4, r0
   b52c6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b52c8:	d80a      	bhi.n	b52e0 <pinMode+0x20>
   b52ca:	29ff      	cmp	r1, #255	; 0xff
   b52cc:	d008      	beq.n	b52e0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b52ce:	f7ff ffb9 	bl	b5244 <pinAvailable>
   b52d2:	b128      	cbz	r0, b52e0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b52d4:	4629      	mov	r1, r5
   b52d6:	4620      	mov	r0, r4
}
   b52d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b52dc:	f7ff b9fa 	b.w	b46d4 <HAL_Pin_Mode>
}
   b52e0:	bd38      	pop	{r3, r4, r5, pc}

000b52e2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b52e2:	b538      	push	{r3, r4, r5, lr}
   b52e4:	4604      	mov	r4, r0
   b52e6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b52e8:	f7ff f9fc 	bl	b46e4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b52ec:	28ff      	cmp	r0, #255	; 0xff
   b52ee:	d010      	beq.n	b5312 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b52f0:	2806      	cmp	r0, #6
   b52f2:	d804      	bhi.n	b52fe <digitalWrite+0x1c>
   b52f4:	234d      	movs	r3, #77	; 0x4d
   b52f6:	fa23 f000 	lsr.w	r0, r3, r0
   b52fa:	07c3      	lsls	r3, r0, #31
   b52fc:	d409      	bmi.n	b5312 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b52fe:	4620      	mov	r0, r4
   b5300:	f7ff ffa0 	bl	b5244 <pinAvailable>
   b5304:	b128      	cbz	r0, b5312 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b5306:	4629      	mov	r1, r5
   b5308:	4620      	mov	r0, r4
}
   b530a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b530e:	f7ff b9f1 	b.w	b46f4 <HAL_GPIO_Write>
}
   b5312:	bd38      	pop	{r3, r4, r5, pc}

000b5314 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5314:	4770      	bx	lr
	...

000b5318 <_Z20acquireSerial1Bufferv>:
{
   b5318:	b538      	push	{r3, r4, r5, lr}
   b531a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b531c:	2514      	movs	r5, #20
   b531e:	462a      	mov	r2, r5
   b5320:	2100      	movs	r1, #0
   b5322:	f000 fd74 	bl	b5e0e <memset>
   b5326:	8025      	strh	r5, [r4, #0]
   b5328:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b532a:	4907      	ldr	r1, [pc, #28]	; (b5348 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b532c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b532e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b5330:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5332:	f000 f86f 	bl	b5414 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5336:	4904      	ldr	r1, [pc, #16]	; (b5348 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b5338:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b533a:	4628      	mov	r0, r5
   b533c:	f000 f86a 	bl	b5414 <_ZnajRKSt9nothrow_t>
    };
   b5340:	60e0      	str	r0, [r4, #12]
}
   b5342:	4620      	mov	r0, r4
   b5344:	bd38      	pop	{r3, r4, r5, pc}
   b5346:	bf00      	nop
   b5348:	000b7e84 	.word	0x000b7e84

000b534c <_Z22__fetch_global_Serial1v>:
{
   b534c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b534e:	4d0e      	ldr	r5, [pc, #56]	; (b5388 <_Z22__fetch_global_Serial1v+0x3c>)
   b5350:	7829      	ldrb	r1, [r5, #0]
   b5352:	f3bf 8f5b 	dmb	ish
   b5356:	f011 0401 	ands.w	r4, r1, #1
{
   b535a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b535c:	d111      	bne.n	b5382 <_Z22__fetch_global_Serial1v+0x36>
   b535e:	4628      	mov	r0, r5
   b5360:	f7fe fe9d 	bl	b409e <__cxa_guard_acquire>
   b5364:	b168      	cbz	r0, b5382 <_Z22__fetch_global_Serial1v+0x36>
   b5366:	a801      	add	r0, sp, #4
   b5368:	f7ff ffd6 	bl	b5318 <_Z20acquireSerial1Bufferv>
   b536c:	aa01      	add	r2, sp, #4
   b536e:	4621      	mov	r1, r4
   b5370:	4806      	ldr	r0, [pc, #24]	; (b538c <_Z22__fetch_global_Serial1v+0x40>)
   b5372:	f7ff fe19 	bl	b4fa8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b5376:	4628      	mov	r0, r5
   b5378:	f7fe fe96 	bl	b40a8 <__cxa_guard_release>
   b537c:	4804      	ldr	r0, [pc, #16]	; (b5390 <_Z22__fetch_global_Serial1v+0x44>)
   b537e:	f000 fd2f 	bl	b5de0 <atexit>
    return serial1;
}
   b5382:	4802      	ldr	r0, [pc, #8]	; (b538c <_Z22__fetch_global_Serial1v+0x40>)
   b5384:	b007      	add	sp, #28
   b5386:	bd30      	pop	{r4, r5, pc}
   b5388:	2003e728 	.word	0x2003e728
   b538c:	2003e72c 	.word	0x2003e72c
   b5390:	000b5315 	.word	0x000b5315

000b5394 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5394:	4770      	bx	lr
	...

000b5398 <_Z17acquireWireBufferv>:
{
   b5398:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b539a:	4b0a      	ldr	r3, [pc, #40]	; (b53c4 <_Z17acquireWireBufferv+0x2c>)
   b539c:	6003      	str	r3, [r0, #0]
   b539e:	2301      	movs	r3, #1
{
   b53a0:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b53a2:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b53a4:	4908      	ldr	r1, [pc, #32]	; (b53c8 <_Z17acquireWireBufferv+0x30>)
   b53a6:	2020      	movs	r0, #32
   b53a8:	f000 f834 	bl	b5414 <_ZnajRKSt9nothrow_t>
	};
   b53ac:	2520      	movs	r5, #32
   b53ae:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b53b0:	4905      	ldr	r1, [pc, #20]	; (b53c8 <_Z17acquireWireBufferv+0x30>)
	};
   b53b2:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b53b4:	4628      	mov	r0, r5
   b53b6:	f000 f82d 	bl	b5414 <_ZnajRKSt9nothrow_t>
	};
   b53ba:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b53be:	4620      	mov	r0, r4
   b53c0:	bd38      	pop	{r3, r4, r5, pc}
   b53c2:	bf00      	nop
   b53c4:	00010018 	.word	0x00010018
   b53c8:	000b7e84 	.word	0x000b7e84

000b53cc <_Z19__fetch_global_Wirev>:
{
   b53cc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b53ce:	4d0e      	ldr	r5, [pc, #56]	; (b5408 <_Z19__fetch_global_Wirev+0x3c>)
   b53d0:	7829      	ldrb	r1, [r5, #0]
   b53d2:	f3bf 8f5b 	dmb	ish
   b53d6:	f011 0401 	ands.w	r4, r1, #1
{
   b53da:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b53dc:	d111      	bne.n	b5402 <_Z19__fetch_global_Wirev+0x36>
   b53de:	4628      	mov	r0, r5
   b53e0:	f7fe fe5d 	bl	b409e <__cxa_guard_acquire>
   b53e4:	b168      	cbz	r0, b5402 <_Z19__fetch_global_Wirev+0x36>
   b53e6:	4668      	mov	r0, sp
   b53e8:	f7ff ffd6 	bl	b5398 <_Z17acquireWireBufferv>
   b53ec:	466a      	mov	r2, sp
   b53ee:	4621      	mov	r1, r4
   b53f0:	4806      	ldr	r0, [pc, #24]	; (b540c <_Z19__fetch_global_Wirev+0x40>)
   b53f2:	f7ff fe19 	bl	b5028 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b53f6:	4628      	mov	r0, r5
   b53f8:	f7fe fe56 	bl	b40a8 <__cxa_guard_release>
   b53fc:	4804      	ldr	r0, [pc, #16]	; (b5410 <_Z19__fetch_global_Wirev+0x44>)
   b53fe:	f000 fcef 	bl	b5de0 <atexit>
	return wire;
}
   b5402:	4802      	ldr	r0, [pc, #8]	; (b540c <_Z19__fetch_global_Wirev+0x40>)
   b5404:	b007      	add	sp, #28
   b5406:	bd30      	pop	{r4, r5, pc}
   b5408:	2003e744 	.word	0x2003e744
   b540c:	2003e748 	.word	0x2003e748
   b5410:	000b5395 	.word	0x000b5395

000b5414 <_ZnajRKSt9nothrow_t>:
   b5414:	f7fe be3f 	b.w	b4096 <_Znaj>

000b5418 <__aeabi_drsub>:
   b5418:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b541c:	e002      	b.n	b5424 <__adddf3>
   b541e:	bf00      	nop

000b5420 <__aeabi_dsub>:
   b5420:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b5424 <__adddf3>:
   b5424:	b530      	push	{r4, r5, lr}
   b5426:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b542a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b542e:	ea94 0f05 	teq	r4, r5
   b5432:	bf08      	it	eq
   b5434:	ea90 0f02 	teqeq	r0, r2
   b5438:	bf1f      	itttt	ne
   b543a:	ea54 0c00 	orrsne.w	ip, r4, r0
   b543e:	ea55 0c02 	orrsne.w	ip, r5, r2
   b5442:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b5446:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b544a:	f000 80e2 	beq.w	b5612 <__adddf3+0x1ee>
   b544e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b5452:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b5456:	bfb8      	it	lt
   b5458:	426d      	neglt	r5, r5
   b545a:	dd0c      	ble.n	b5476 <__adddf3+0x52>
   b545c:	442c      	add	r4, r5
   b545e:	ea80 0202 	eor.w	r2, r0, r2
   b5462:	ea81 0303 	eor.w	r3, r1, r3
   b5466:	ea82 0000 	eor.w	r0, r2, r0
   b546a:	ea83 0101 	eor.w	r1, r3, r1
   b546e:	ea80 0202 	eor.w	r2, r0, r2
   b5472:	ea81 0303 	eor.w	r3, r1, r3
   b5476:	2d36      	cmp	r5, #54	; 0x36
   b5478:	bf88      	it	hi
   b547a:	bd30      	pophi	{r4, r5, pc}
   b547c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b5480:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b5484:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b5488:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b548c:	d002      	beq.n	b5494 <__adddf3+0x70>
   b548e:	4240      	negs	r0, r0
   b5490:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b5494:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b5498:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b549c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b54a0:	d002      	beq.n	b54a8 <__adddf3+0x84>
   b54a2:	4252      	negs	r2, r2
   b54a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b54a8:	ea94 0f05 	teq	r4, r5
   b54ac:	f000 80a7 	beq.w	b55fe <__adddf3+0x1da>
   b54b0:	f1a4 0401 	sub.w	r4, r4, #1
   b54b4:	f1d5 0e20 	rsbs	lr, r5, #32
   b54b8:	db0d      	blt.n	b54d6 <__adddf3+0xb2>
   b54ba:	fa02 fc0e 	lsl.w	ip, r2, lr
   b54be:	fa22 f205 	lsr.w	r2, r2, r5
   b54c2:	1880      	adds	r0, r0, r2
   b54c4:	f141 0100 	adc.w	r1, r1, #0
   b54c8:	fa03 f20e 	lsl.w	r2, r3, lr
   b54cc:	1880      	adds	r0, r0, r2
   b54ce:	fa43 f305 	asr.w	r3, r3, r5
   b54d2:	4159      	adcs	r1, r3
   b54d4:	e00e      	b.n	b54f4 <__adddf3+0xd0>
   b54d6:	f1a5 0520 	sub.w	r5, r5, #32
   b54da:	f10e 0e20 	add.w	lr, lr, #32
   b54de:	2a01      	cmp	r2, #1
   b54e0:	fa03 fc0e 	lsl.w	ip, r3, lr
   b54e4:	bf28      	it	cs
   b54e6:	f04c 0c02 	orrcs.w	ip, ip, #2
   b54ea:	fa43 f305 	asr.w	r3, r3, r5
   b54ee:	18c0      	adds	r0, r0, r3
   b54f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b54f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b54f8:	d507      	bpl.n	b550a <__adddf3+0xe6>
   b54fa:	f04f 0e00 	mov.w	lr, #0
   b54fe:	f1dc 0c00 	rsbs	ip, ip, #0
   b5502:	eb7e 0000 	sbcs.w	r0, lr, r0
   b5506:	eb6e 0101 	sbc.w	r1, lr, r1
   b550a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b550e:	d31b      	bcc.n	b5548 <__adddf3+0x124>
   b5510:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b5514:	d30c      	bcc.n	b5530 <__adddf3+0x10c>
   b5516:	0849      	lsrs	r1, r1, #1
   b5518:	ea5f 0030 	movs.w	r0, r0, rrx
   b551c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b5520:	f104 0401 	add.w	r4, r4, #1
   b5524:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b5528:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b552c:	f080 809a 	bcs.w	b5664 <__adddf3+0x240>
   b5530:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b5534:	bf08      	it	eq
   b5536:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b553a:	f150 0000 	adcs.w	r0, r0, #0
   b553e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b5542:	ea41 0105 	orr.w	r1, r1, r5
   b5546:	bd30      	pop	{r4, r5, pc}
   b5548:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b554c:	4140      	adcs	r0, r0
   b554e:	eb41 0101 	adc.w	r1, r1, r1
   b5552:	3c01      	subs	r4, #1
   b5554:	bf28      	it	cs
   b5556:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b555a:	d2e9      	bcs.n	b5530 <__adddf3+0x10c>
   b555c:	f091 0f00 	teq	r1, #0
   b5560:	bf04      	itt	eq
   b5562:	4601      	moveq	r1, r0
   b5564:	2000      	moveq	r0, #0
   b5566:	fab1 f381 	clz	r3, r1
   b556a:	bf08      	it	eq
   b556c:	3320      	addeq	r3, #32
   b556e:	f1a3 030b 	sub.w	r3, r3, #11
   b5572:	f1b3 0220 	subs.w	r2, r3, #32
   b5576:	da0c      	bge.n	b5592 <__adddf3+0x16e>
   b5578:	320c      	adds	r2, #12
   b557a:	dd08      	ble.n	b558e <__adddf3+0x16a>
   b557c:	f102 0c14 	add.w	ip, r2, #20
   b5580:	f1c2 020c 	rsb	r2, r2, #12
   b5584:	fa01 f00c 	lsl.w	r0, r1, ip
   b5588:	fa21 f102 	lsr.w	r1, r1, r2
   b558c:	e00c      	b.n	b55a8 <__adddf3+0x184>
   b558e:	f102 0214 	add.w	r2, r2, #20
   b5592:	bfd8      	it	le
   b5594:	f1c2 0c20 	rsble	ip, r2, #32
   b5598:	fa01 f102 	lsl.w	r1, r1, r2
   b559c:	fa20 fc0c 	lsr.w	ip, r0, ip
   b55a0:	bfdc      	itt	le
   b55a2:	ea41 010c 	orrle.w	r1, r1, ip
   b55a6:	4090      	lslle	r0, r2
   b55a8:	1ae4      	subs	r4, r4, r3
   b55aa:	bfa2      	ittt	ge
   b55ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b55b0:	4329      	orrge	r1, r5
   b55b2:	bd30      	popge	{r4, r5, pc}
   b55b4:	ea6f 0404 	mvn.w	r4, r4
   b55b8:	3c1f      	subs	r4, #31
   b55ba:	da1c      	bge.n	b55f6 <__adddf3+0x1d2>
   b55bc:	340c      	adds	r4, #12
   b55be:	dc0e      	bgt.n	b55de <__adddf3+0x1ba>
   b55c0:	f104 0414 	add.w	r4, r4, #20
   b55c4:	f1c4 0220 	rsb	r2, r4, #32
   b55c8:	fa20 f004 	lsr.w	r0, r0, r4
   b55cc:	fa01 f302 	lsl.w	r3, r1, r2
   b55d0:	ea40 0003 	orr.w	r0, r0, r3
   b55d4:	fa21 f304 	lsr.w	r3, r1, r4
   b55d8:	ea45 0103 	orr.w	r1, r5, r3
   b55dc:	bd30      	pop	{r4, r5, pc}
   b55de:	f1c4 040c 	rsb	r4, r4, #12
   b55e2:	f1c4 0220 	rsb	r2, r4, #32
   b55e6:	fa20 f002 	lsr.w	r0, r0, r2
   b55ea:	fa01 f304 	lsl.w	r3, r1, r4
   b55ee:	ea40 0003 	orr.w	r0, r0, r3
   b55f2:	4629      	mov	r1, r5
   b55f4:	bd30      	pop	{r4, r5, pc}
   b55f6:	fa21 f004 	lsr.w	r0, r1, r4
   b55fa:	4629      	mov	r1, r5
   b55fc:	bd30      	pop	{r4, r5, pc}
   b55fe:	f094 0f00 	teq	r4, #0
   b5602:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b5606:	bf06      	itte	eq
   b5608:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b560c:	3401      	addeq	r4, #1
   b560e:	3d01      	subne	r5, #1
   b5610:	e74e      	b.n	b54b0 <__adddf3+0x8c>
   b5612:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b5616:	bf18      	it	ne
   b5618:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b561c:	d029      	beq.n	b5672 <__adddf3+0x24e>
   b561e:	ea94 0f05 	teq	r4, r5
   b5622:	bf08      	it	eq
   b5624:	ea90 0f02 	teqeq	r0, r2
   b5628:	d005      	beq.n	b5636 <__adddf3+0x212>
   b562a:	ea54 0c00 	orrs.w	ip, r4, r0
   b562e:	bf04      	itt	eq
   b5630:	4619      	moveq	r1, r3
   b5632:	4610      	moveq	r0, r2
   b5634:	bd30      	pop	{r4, r5, pc}
   b5636:	ea91 0f03 	teq	r1, r3
   b563a:	bf1e      	ittt	ne
   b563c:	2100      	movne	r1, #0
   b563e:	2000      	movne	r0, #0
   b5640:	bd30      	popne	{r4, r5, pc}
   b5642:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b5646:	d105      	bne.n	b5654 <__adddf3+0x230>
   b5648:	0040      	lsls	r0, r0, #1
   b564a:	4149      	adcs	r1, r1
   b564c:	bf28      	it	cs
   b564e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b5652:	bd30      	pop	{r4, r5, pc}
   b5654:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b5658:	bf3c      	itt	cc
   b565a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b565e:	bd30      	popcc	{r4, r5, pc}
   b5660:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b5664:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b5668:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b566c:	f04f 0000 	mov.w	r0, #0
   b5670:	bd30      	pop	{r4, r5, pc}
   b5672:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b5676:	bf1a      	itte	ne
   b5678:	4619      	movne	r1, r3
   b567a:	4610      	movne	r0, r2
   b567c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b5680:	bf1c      	itt	ne
   b5682:	460b      	movne	r3, r1
   b5684:	4602      	movne	r2, r0
   b5686:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b568a:	bf06      	itte	eq
   b568c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b5690:	ea91 0f03 	teqeq	r1, r3
   b5694:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b5698:	bd30      	pop	{r4, r5, pc}
   b569a:	bf00      	nop

000b569c <__aeabi_ui2d>:
   b569c:	f090 0f00 	teq	r0, #0
   b56a0:	bf04      	itt	eq
   b56a2:	2100      	moveq	r1, #0
   b56a4:	4770      	bxeq	lr
   b56a6:	b530      	push	{r4, r5, lr}
   b56a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b56ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b56b0:	f04f 0500 	mov.w	r5, #0
   b56b4:	f04f 0100 	mov.w	r1, #0
   b56b8:	e750      	b.n	b555c <__adddf3+0x138>
   b56ba:	bf00      	nop

000b56bc <__aeabi_i2d>:
   b56bc:	f090 0f00 	teq	r0, #0
   b56c0:	bf04      	itt	eq
   b56c2:	2100      	moveq	r1, #0
   b56c4:	4770      	bxeq	lr
   b56c6:	b530      	push	{r4, r5, lr}
   b56c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b56cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b56d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b56d4:	bf48      	it	mi
   b56d6:	4240      	negmi	r0, r0
   b56d8:	f04f 0100 	mov.w	r1, #0
   b56dc:	e73e      	b.n	b555c <__adddf3+0x138>
   b56de:	bf00      	nop

000b56e0 <__aeabi_f2d>:
   b56e0:	0042      	lsls	r2, r0, #1
   b56e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b56e6:	ea4f 0131 	mov.w	r1, r1, rrx
   b56ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b56ee:	bf1f      	itttt	ne
   b56f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b56f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b56f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b56fc:	4770      	bxne	lr
   b56fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b5702:	bf08      	it	eq
   b5704:	4770      	bxeq	lr
   b5706:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b570a:	bf04      	itt	eq
   b570c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b5710:	4770      	bxeq	lr
   b5712:	b530      	push	{r4, r5, lr}
   b5714:	f44f 7460 	mov.w	r4, #896	; 0x380
   b5718:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b571c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b5720:	e71c      	b.n	b555c <__adddf3+0x138>
   b5722:	bf00      	nop

000b5724 <__aeabi_ul2d>:
   b5724:	ea50 0201 	orrs.w	r2, r0, r1
   b5728:	bf08      	it	eq
   b572a:	4770      	bxeq	lr
   b572c:	b530      	push	{r4, r5, lr}
   b572e:	f04f 0500 	mov.w	r5, #0
   b5732:	e00a      	b.n	b574a <__aeabi_l2d+0x16>

000b5734 <__aeabi_l2d>:
   b5734:	ea50 0201 	orrs.w	r2, r0, r1
   b5738:	bf08      	it	eq
   b573a:	4770      	bxeq	lr
   b573c:	b530      	push	{r4, r5, lr}
   b573e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b5742:	d502      	bpl.n	b574a <__aeabi_l2d+0x16>
   b5744:	4240      	negs	r0, r0
   b5746:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b574a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b574e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b5752:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b5756:	f43f aed8 	beq.w	b550a <__adddf3+0xe6>
   b575a:	f04f 0203 	mov.w	r2, #3
   b575e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b5762:	bf18      	it	ne
   b5764:	3203      	addne	r2, #3
   b5766:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b576a:	bf18      	it	ne
   b576c:	3203      	addne	r2, #3
   b576e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b5772:	f1c2 0320 	rsb	r3, r2, #32
   b5776:	fa00 fc03 	lsl.w	ip, r0, r3
   b577a:	fa20 f002 	lsr.w	r0, r0, r2
   b577e:	fa01 fe03 	lsl.w	lr, r1, r3
   b5782:	ea40 000e 	orr.w	r0, r0, lr
   b5786:	fa21 f102 	lsr.w	r1, r1, r2
   b578a:	4414      	add	r4, r2
   b578c:	e6bd      	b.n	b550a <__adddf3+0xe6>
   b578e:	bf00      	nop

000b5790 <__aeabi_dmul>:
   b5790:	b570      	push	{r4, r5, r6, lr}
   b5792:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b5796:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b579a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b579e:	bf1d      	ittte	ne
   b57a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b57a4:	ea94 0f0c 	teqne	r4, ip
   b57a8:	ea95 0f0c 	teqne	r5, ip
   b57ac:	f000 f8de 	bleq	b596c <__aeabi_dmul+0x1dc>
   b57b0:	442c      	add	r4, r5
   b57b2:	ea81 0603 	eor.w	r6, r1, r3
   b57b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b57ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b57be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b57c2:	bf18      	it	ne
   b57c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b57c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b57cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b57d0:	d038      	beq.n	b5844 <__aeabi_dmul+0xb4>
   b57d2:	fba0 ce02 	umull	ip, lr, r0, r2
   b57d6:	f04f 0500 	mov.w	r5, #0
   b57da:	fbe1 e502 	umlal	lr, r5, r1, r2
   b57de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b57e2:	fbe0 e503 	umlal	lr, r5, r0, r3
   b57e6:	f04f 0600 	mov.w	r6, #0
   b57ea:	fbe1 5603 	umlal	r5, r6, r1, r3
   b57ee:	f09c 0f00 	teq	ip, #0
   b57f2:	bf18      	it	ne
   b57f4:	f04e 0e01 	orrne.w	lr, lr, #1
   b57f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b57fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b5800:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b5804:	d204      	bcs.n	b5810 <__aeabi_dmul+0x80>
   b5806:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b580a:	416d      	adcs	r5, r5
   b580c:	eb46 0606 	adc.w	r6, r6, r6
   b5810:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b5814:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b5818:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b581c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b5820:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b5824:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b5828:	bf88      	it	hi
   b582a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b582e:	d81e      	bhi.n	b586e <__aeabi_dmul+0xde>
   b5830:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b5834:	bf08      	it	eq
   b5836:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b583a:	f150 0000 	adcs.w	r0, r0, #0
   b583e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b5842:	bd70      	pop	{r4, r5, r6, pc}
   b5844:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b5848:	ea46 0101 	orr.w	r1, r6, r1
   b584c:	ea40 0002 	orr.w	r0, r0, r2
   b5850:	ea81 0103 	eor.w	r1, r1, r3
   b5854:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b5858:	bfc2      	ittt	gt
   b585a:	ebd4 050c 	rsbsgt	r5, r4, ip
   b585e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b5862:	bd70      	popgt	{r4, r5, r6, pc}
   b5864:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b5868:	f04f 0e00 	mov.w	lr, #0
   b586c:	3c01      	subs	r4, #1
   b586e:	f300 80ab 	bgt.w	b59c8 <__aeabi_dmul+0x238>
   b5872:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b5876:	bfde      	ittt	le
   b5878:	2000      	movle	r0, #0
   b587a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b587e:	bd70      	pople	{r4, r5, r6, pc}
   b5880:	f1c4 0400 	rsb	r4, r4, #0
   b5884:	3c20      	subs	r4, #32
   b5886:	da35      	bge.n	b58f4 <__aeabi_dmul+0x164>
   b5888:	340c      	adds	r4, #12
   b588a:	dc1b      	bgt.n	b58c4 <__aeabi_dmul+0x134>
   b588c:	f104 0414 	add.w	r4, r4, #20
   b5890:	f1c4 0520 	rsb	r5, r4, #32
   b5894:	fa00 f305 	lsl.w	r3, r0, r5
   b5898:	fa20 f004 	lsr.w	r0, r0, r4
   b589c:	fa01 f205 	lsl.w	r2, r1, r5
   b58a0:	ea40 0002 	orr.w	r0, r0, r2
   b58a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b58a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b58ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b58b0:	fa21 f604 	lsr.w	r6, r1, r4
   b58b4:	eb42 0106 	adc.w	r1, r2, r6
   b58b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b58bc:	bf08      	it	eq
   b58be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b58c2:	bd70      	pop	{r4, r5, r6, pc}
   b58c4:	f1c4 040c 	rsb	r4, r4, #12
   b58c8:	f1c4 0520 	rsb	r5, r4, #32
   b58cc:	fa00 f304 	lsl.w	r3, r0, r4
   b58d0:	fa20 f005 	lsr.w	r0, r0, r5
   b58d4:	fa01 f204 	lsl.w	r2, r1, r4
   b58d8:	ea40 0002 	orr.w	r0, r0, r2
   b58dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b58e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b58e4:	f141 0100 	adc.w	r1, r1, #0
   b58e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b58ec:	bf08      	it	eq
   b58ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b58f2:	bd70      	pop	{r4, r5, r6, pc}
   b58f4:	f1c4 0520 	rsb	r5, r4, #32
   b58f8:	fa00 f205 	lsl.w	r2, r0, r5
   b58fc:	ea4e 0e02 	orr.w	lr, lr, r2
   b5900:	fa20 f304 	lsr.w	r3, r0, r4
   b5904:	fa01 f205 	lsl.w	r2, r1, r5
   b5908:	ea43 0302 	orr.w	r3, r3, r2
   b590c:	fa21 f004 	lsr.w	r0, r1, r4
   b5910:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b5914:	fa21 f204 	lsr.w	r2, r1, r4
   b5918:	ea20 0002 	bic.w	r0, r0, r2
   b591c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b5920:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b5924:	bf08      	it	eq
   b5926:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b592a:	bd70      	pop	{r4, r5, r6, pc}
   b592c:	f094 0f00 	teq	r4, #0
   b5930:	d10f      	bne.n	b5952 <__aeabi_dmul+0x1c2>
   b5932:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b5936:	0040      	lsls	r0, r0, #1
   b5938:	eb41 0101 	adc.w	r1, r1, r1
   b593c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b5940:	bf08      	it	eq
   b5942:	3c01      	subeq	r4, #1
   b5944:	d0f7      	beq.n	b5936 <__aeabi_dmul+0x1a6>
   b5946:	ea41 0106 	orr.w	r1, r1, r6
   b594a:	f095 0f00 	teq	r5, #0
   b594e:	bf18      	it	ne
   b5950:	4770      	bxne	lr
   b5952:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b5956:	0052      	lsls	r2, r2, #1
   b5958:	eb43 0303 	adc.w	r3, r3, r3
   b595c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b5960:	bf08      	it	eq
   b5962:	3d01      	subeq	r5, #1
   b5964:	d0f7      	beq.n	b5956 <__aeabi_dmul+0x1c6>
   b5966:	ea43 0306 	orr.w	r3, r3, r6
   b596a:	4770      	bx	lr
   b596c:	ea94 0f0c 	teq	r4, ip
   b5970:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b5974:	bf18      	it	ne
   b5976:	ea95 0f0c 	teqne	r5, ip
   b597a:	d00c      	beq.n	b5996 <__aeabi_dmul+0x206>
   b597c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b5980:	bf18      	it	ne
   b5982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b5986:	d1d1      	bne.n	b592c <__aeabi_dmul+0x19c>
   b5988:	ea81 0103 	eor.w	r1, r1, r3
   b598c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b5990:	f04f 0000 	mov.w	r0, #0
   b5994:	bd70      	pop	{r4, r5, r6, pc}
   b5996:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b599a:	bf06      	itte	eq
   b599c:	4610      	moveq	r0, r2
   b599e:	4619      	moveq	r1, r3
   b59a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b59a4:	d019      	beq.n	b59da <__aeabi_dmul+0x24a>
   b59a6:	ea94 0f0c 	teq	r4, ip
   b59aa:	d102      	bne.n	b59b2 <__aeabi_dmul+0x222>
   b59ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b59b0:	d113      	bne.n	b59da <__aeabi_dmul+0x24a>
   b59b2:	ea95 0f0c 	teq	r5, ip
   b59b6:	d105      	bne.n	b59c4 <__aeabi_dmul+0x234>
   b59b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b59bc:	bf1c      	itt	ne
   b59be:	4610      	movne	r0, r2
   b59c0:	4619      	movne	r1, r3
   b59c2:	d10a      	bne.n	b59da <__aeabi_dmul+0x24a>
   b59c4:	ea81 0103 	eor.w	r1, r1, r3
   b59c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b59cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b59d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b59d4:	f04f 0000 	mov.w	r0, #0
   b59d8:	bd70      	pop	{r4, r5, r6, pc}
   b59da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b59de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b59e2:	bd70      	pop	{r4, r5, r6, pc}

000b59e4 <__aeabi_ddiv>:
   b59e4:	b570      	push	{r4, r5, r6, lr}
   b59e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b59ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b59ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b59f2:	bf1d      	ittte	ne
   b59f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b59f8:	ea94 0f0c 	teqne	r4, ip
   b59fc:	ea95 0f0c 	teqne	r5, ip
   b5a00:	f000 f8a7 	bleq	b5b52 <__aeabi_ddiv+0x16e>
   b5a04:	eba4 0405 	sub.w	r4, r4, r5
   b5a08:	ea81 0e03 	eor.w	lr, r1, r3
   b5a0c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b5a10:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b5a14:	f000 8088 	beq.w	b5b28 <__aeabi_ddiv+0x144>
   b5a18:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b5a1c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b5a20:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b5a24:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b5a28:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b5a2c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b5a30:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b5a34:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b5a38:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b5a3c:	429d      	cmp	r5, r3
   b5a3e:	bf08      	it	eq
   b5a40:	4296      	cmpeq	r6, r2
   b5a42:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b5a46:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b5a4a:	d202      	bcs.n	b5a52 <__aeabi_ddiv+0x6e>
   b5a4c:	085b      	lsrs	r3, r3, #1
   b5a4e:	ea4f 0232 	mov.w	r2, r2, rrx
   b5a52:	1ab6      	subs	r6, r6, r2
   b5a54:	eb65 0503 	sbc.w	r5, r5, r3
   b5a58:	085b      	lsrs	r3, r3, #1
   b5a5a:	ea4f 0232 	mov.w	r2, r2, rrx
   b5a5e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b5a62:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b5a66:	ebb6 0e02 	subs.w	lr, r6, r2
   b5a6a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b5a6e:	bf22      	ittt	cs
   b5a70:	1ab6      	subcs	r6, r6, r2
   b5a72:	4675      	movcs	r5, lr
   b5a74:	ea40 000c 	orrcs.w	r0, r0, ip
   b5a78:	085b      	lsrs	r3, r3, #1
   b5a7a:	ea4f 0232 	mov.w	r2, r2, rrx
   b5a7e:	ebb6 0e02 	subs.w	lr, r6, r2
   b5a82:	eb75 0e03 	sbcs.w	lr, r5, r3
   b5a86:	bf22      	ittt	cs
   b5a88:	1ab6      	subcs	r6, r6, r2
   b5a8a:	4675      	movcs	r5, lr
   b5a8c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b5a90:	085b      	lsrs	r3, r3, #1
   b5a92:	ea4f 0232 	mov.w	r2, r2, rrx
   b5a96:	ebb6 0e02 	subs.w	lr, r6, r2
   b5a9a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b5a9e:	bf22      	ittt	cs
   b5aa0:	1ab6      	subcs	r6, r6, r2
   b5aa2:	4675      	movcs	r5, lr
   b5aa4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b5aa8:	085b      	lsrs	r3, r3, #1
   b5aaa:	ea4f 0232 	mov.w	r2, r2, rrx
   b5aae:	ebb6 0e02 	subs.w	lr, r6, r2
   b5ab2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b5ab6:	bf22      	ittt	cs
   b5ab8:	1ab6      	subcs	r6, r6, r2
   b5aba:	4675      	movcs	r5, lr
   b5abc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b5ac0:	ea55 0e06 	orrs.w	lr, r5, r6
   b5ac4:	d018      	beq.n	b5af8 <__aeabi_ddiv+0x114>
   b5ac6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b5aca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b5ace:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b5ad2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b5ad6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b5ada:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b5ade:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b5ae2:	d1c0      	bne.n	b5a66 <__aeabi_ddiv+0x82>
   b5ae4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b5ae8:	d10b      	bne.n	b5b02 <__aeabi_ddiv+0x11e>
   b5aea:	ea41 0100 	orr.w	r1, r1, r0
   b5aee:	f04f 0000 	mov.w	r0, #0
   b5af2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b5af6:	e7b6      	b.n	b5a66 <__aeabi_ddiv+0x82>
   b5af8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b5afc:	bf04      	itt	eq
   b5afe:	4301      	orreq	r1, r0
   b5b00:	2000      	moveq	r0, #0
   b5b02:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b5b06:	bf88      	it	hi
   b5b08:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b5b0c:	f63f aeaf 	bhi.w	b586e <__aeabi_dmul+0xde>
   b5b10:	ebb5 0c03 	subs.w	ip, r5, r3
   b5b14:	bf04      	itt	eq
   b5b16:	ebb6 0c02 	subseq.w	ip, r6, r2
   b5b1a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b5b1e:	f150 0000 	adcs.w	r0, r0, #0
   b5b22:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b5b26:	bd70      	pop	{r4, r5, r6, pc}
   b5b28:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b5b2c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b5b30:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b5b34:	bfc2      	ittt	gt
   b5b36:	ebd4 050c 	rsbsgt	r5, r4, ip
   b5b3a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b5b3e:	bd70      	popgt	{r4, r5, r6, pc}
   b5b40:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b5b44:	f04f 0e00 	mov.w	lr, #0
   b5b48:	3c01      	subs	r4, #1
   b5b4a:	e690      	b.n	b586e <__aeabi_dmul+0xde>
   b5b4c:	ea45 0e06 	orr.w	lr, r5, r6
   b5b50:	e68d      	b.n	b586e <__aeabi_dmul+0xde>
   b5b52:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b5b56:	ea94 0f0c 	teq	r4, ip
   b5b5a:	bf08      	it	eq
   b5b5c:	ea95 0f0c 	teqeq	r5, ip
   b5b60:	f43f af3b 	beq.w	b59da <__aeabi_dmul+0x24a>
   b5b64:	ea94 0f0c 	teq	r4, ip
   b5b68:	d10a      	bne.n	b5b80 <__aeabi_ddiv+0x19c>
   b5b6a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b5b6e:	f47f af34 	bne.w	b59da <__aeabi_dmul+0x24a>
   b5b72:	ea95 0f0c 	teq	r5, ip
   b5b76:	f47f af25 	bne.w	b59c4 <__aeabi_dmul+0x234>
   b5b7a:	4610      	mov	r0, r2
   b5b7c:	4619      	mov	r1, r3
   b5b7e:	e72c      	b.n	b59da <__aeabi_dmul+0x24a>
   b5b80:	ea95 0f0c 	teq	r5, ip
   b5b84:	d106      	bne.n	b5b94 <__aeabi_ddiv+0x1b0>
   b5b86:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b5b8a:	f43f aefd 	beq.w	b5988 <__aeabi_dmul+0x1f8>
   b5b8e:	4610      	mov	r0, r2
   b5b90:	4619      	mov	r1, r3
   b5b92:	e722      	b.n	b59da <__aeabi_dmul+0x24a>
   b5b94:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b5b98:	bf18      	it	ne
   b5b9a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b5b9e:	f47f aec5 	bne.w	b592c <__aeabi_dmul+0x19c>
   b5ba2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b5ba6:	f47f af0d 	bne.w	b59c4 <__aeabi_dmul+0x234>
   b5baa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b5bae:	f47f aeeb 	bne.w	b5988 <__aeabi_dmul+0x1f8>
   b5bb2:	e712      	b.n	b59da <__aeabi_dmul+0x24a>

000b5bb4 <__gedf2>:
   b5bb4:	f04f 3cff 	mov.w	ip, #4294967295
   b5bb8:	e006      	b.n	b5bc8 <__cmpdf2+0x4>
   b5bba:	bf00      	nop

000b5bbc <__ledf2>:
   b5bbc:	f04f 0c01 	mov.w	ip, #1
   b5bc0:	e002      	b.n	b5bc8 <__cmpdf2+0x4>
   b5bc2:	bf00      	nop

000b5bc4 <__cmpdf2>:
   b5bc4:	f04f 0c01 	mov.w	ip, #1
   b5bc8:	f84d cd04 	str.w	ip, [sp, #-4]!
   b5bcc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b5bd0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b5bd4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b5bd8:	bf18      	it	ne
   b5bda:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b5bde:	d01b      	beq.n	b5c18 <__cmpdf2+0x54>
   b5be0:	b001      	add	sp, #4
   b5be2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b5be6:	bf0c      	ite	eq
   b5be8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b5bec:	ea91 0f03 	teqne	r1, r3
   b5bf0:	bf02      	ittt	eq
   b5bf2:	ea90 0f02 	teqeq	r0, r2
   b5bf6:	2000      	moveq	r0, #0
   b5bf8:	4770      	bxeq	lr
   b5bfa:	f110 0f00 	cmn.w	r0, #0
   b5bfe:	ea91 0f03 	teq	r1, r3
   b5c02:	bf58      	it	pl
   b5c04:	4299      	cmppl	r1, r3
   b5c06:	bf08      	it	eq
   b5c08:	4290      	cmpeq	r0, r2
   b5c0a:	bf2c      	ite	cs
   b5c0c:	17d8      	asrcs	r0, r3, #31
   b5c0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b5c12:	f040 0001 	orr.w	r0, r0, #1
   b5c16:	4770      	bx	lr
   b5c18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b5c1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b5c20:	d102      	bne.n	b5c28 <__cmpdf2+0x64>
   b5c22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b5c26:	d107      	bne.n	b5c38 <__cmpdf2+0x74>
   b5c28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b5c2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b5c30:	d1d6      	bne.n	b5be0 <__cmpdf2+0x1c>
   b5c32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b5c36:	d0d3      	beq.n	b5be0 <__cmpdf2+0x1c>
   b5c38:	f85d 0b04 	ldr.w	r0, [sp], #4
   b5c3c:	4770      	bx	lr
   b5c3e:	bf00      	nop

000b5c40 <__aeabi_cdrcmple>:
   b5c40:	4684      	mov	ip, r0
   b5c42:	4610      	mov	r0, r2
   b5c44:	4662      	mov	r2, ip
   b5c46:	468c      	mov	ip, r1
   b5c48:	4619      	mov	r1, r3
   b5c4a:	4663      	mov	r3, ip
   b5c4c:	e000      	b.n	b5c50 <__aeabi_cdcmpeq>
   b5c4e:	bf00      	nop

000b5c50 <__aeabi_cdcmpeq>:
   b5c50:	b501      	push	{r0, lr}
   b5c52:	f7ff ffb7 	bl	b5bc4 <__cmpdf2>
   b5c56:	2800      	cmp	r0, #0
   b5c58:	bf48      	it	mi
   b5c5a:	f110 0f00 	cmnmi.w	r0, #0
   b5c5e:	bd01      	pop	{r0, pc}

000b5c60 <__aeabi_dcmpeq>:
   b5c60:	f84d ed08 	str.w	lr, [sp, #-8]!
   b5c64:	f7ff fff4 	bl	b5c50 <__aeabi_cdcmpeq>
   b5c68:	bf0c      	ite	eq
   b5c6a:	2001      	moveq	r0, #1
   b5c6c:	2000      	movne	r0, #0
   b5c6e:	f85d fb08 	ldr.w	pc, [sp], #8
   b5c72:	bf00      	nop

000b5c74 <__aeabi_dcmplt>:
   b5c74:	f84d ed08 	str.w	lr, [sp, #-8]!
   b5c78:	f7ff ffea 	bl	b5c50 <__aeabi_cdcmpeq>
   b5c7c:	bf34      	ite	cc
   b5c7e:	2001      	movcc	r0, #1
   b5c80:	2000      	movcs	r0, #0
   b5c82:	f85d fb08 	ldr.w	pc, [sp], #8
   b5c86:	bf00      	nop

000b5c88 <__aeabi_dcmple>:
   b5c88:	f84d ed08 	str.w	lr, [sp, #-8]!
   b5c8c:	f7ff ffe0 	bl	b5c50 <__aeabi_cdcmpeq>
   b5c90:	bf94      	ite	ls
   b5c92:	2001      	movls	r0, #1
   b5c94:	2000      	movhi	r0, #0
   b5c96:	f85d fb08 	ldr.w	pc, [sp], #8
   b5c9a:	bf00      	nop

000b5c9c <__aeabi_dcmpge>:
   b5c9c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b5ca0:	f7ff ffce 	bl	b5c40 <__aeabi_cdrcmple>
   b5ca4:	bf94      	ite	ls
   b5ca6:	2001      	movls	r0, #1
   b5ca8:	2000      	movhi	r0, #0
   b5caa:	f85d fb08 	ldr.w	pc, [sp], #8
   b5cae:	bf00      	nop

000b5cb0 <__aeabi_dcmpgt>:
   b5cb0:	f84d ed08 	str.w	lr, [sp, #-8]!
   b5cb4:	f7ff ffc4 	bl	b5c40 <__aeabi_cdrcmple>
   b5cb8:	bf34      	ite	cc
   b5cba:	2001      	movcc	r0, #1
   b5cbc:	2000      	movcs	r0, #0
   b5cbe:	f85d fb08 	ldr.w	pc, [sp], #8
   b5cc2:	bf00      	nop

000b5cc4 <__aeabi_d2uiz>:
   b5cc4:	004a      	lsls	r2, r1, #1
   b5cc6:	d211      	bcs.n	b5cec <__aeabi_d2uiz+0x28>
   b5cc8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b5ccc:	d211      	bcs.n	b5cf2 <__aeabi_d2uiz+0x2e>
   b5cce:	d50d      	bpl.n	b5cec <__aeabi_d2uiz+0x28>
   b5cd0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b5cd4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b5cd8:	d40e      	bmi.n	b5cf8 <__aeabi_d2uiz+0x34>
   b5cda:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b5cde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b5ce2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b5ce6:	fa23 f002 	lsr.w	r0, r3, r2
   b5cea:	4770      	bx	lr
   b5cec:	f04f 0000 	mov.w	r0, #0
   b5cf0:	4770      	bx	lr
   b5cf2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b5cf6:	d102      	bne.n	b5cfe <__aeabi_d2uiz+0x3a>
   b5cf8:	f04f 30ff 	mov.w	r0, #4294967295
   b5cfc:	4770      	bx	lr
   b5cfe:	f04f 0000 	mov.w	r0, #0
   b5d02:	4770      	bx	lr

000b5d04 <__aeabi_d2f>:
   b5d04:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b5d08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b5d0c:	bf24      	itt	cs
   b5d0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b5d12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b5d16:	d90d      	bls.n	b5d34 <__aeabi_d2f+0x30>
   b5d18:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b5d1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b5d20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b5d24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b5d28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b5d2c:	bf08      	it	eq
   b5d2e:	f020 0001 	biceq.w	r0, r0, #1
   b5d32:	4770      	bx	lr
   b5d34:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b5d38:	d121      	bne.n	b5d7e <__aeabi_d2f+0x7a>
   b5d3a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b5d3e:	bfbc      	itt	lt
   b5d40:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b5d44:	4770      	bxlt	lr
   b5d46:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b5d4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b5d4e:	f1c2 0218 	rsb	r2, r2, #24
   b5d52:	f1c2 0c20 	rsb	ip, r2, #32
   b5d56:	fa10 f30c 	lsls.w	r3, r0, ip
   b5d5a:	fa20 f002 	lsr.w	r0, r0, r2
   b5d5e:	bf18      	it	ne
   b5d60:	f040 0001 	orrne.w	r0, r0, #1
   b5d64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b5d68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b5d6c:	fa03 fc0c 	lsl.w	ip, r3, ip
   b5d70:	ea40 000c 	orr.w	r0, r0, ip
   b5d74:	fa23 f302 	lsr.w	r3, r3, r2
   b5d78:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b5d7c:	e7cc      	b.n	b5d18 <__aeabi_d2f+0x14>
   b5d7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b5d82:	d107      	bne.n	b5d94 <__aeabi_d2f+0x90>
   b5d84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b5d88:	bf1e      	ittt	ne
   b5d8a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b5d8e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b5d92:	4770      	bxne	lr
   b5d94:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b5d98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b5d9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b5da0:	4770      	bx	lr
   b5da2:	bf00      	nop

000b5da4 <__aeabi_d2ulz>:
   b5da4:	b5d0      	push	{r4, r6, r7, lr}
   b5da6:	4b0c      	ldr	r3, [pc, #48]	; (b5dd8 <__aeabi_d2ulz+0x34>)
   b5da8:	2200      	movs	r2, #0
   b5daa:	4606      	mov	r6, r0
   b5dac:	460f      	mov	r7, r1
   b5dae:	f7ff fcef 	bl	b5790 <__aeabi_dmul>
   b5db2:	f7ff ff87 	bl	b5cc4 <__aeabi_d2uiz>
   b5db6:	4604      	mov	r4, r0
   b5db8:	f7ff fc70 	bl	b569c <__aeabi_ui2d>
   b5dbc:	4b07      	ldr	r3, [pc, #28]	; (b5ddc <__aeabi_d2ulz+0x38>)
   b5dbe:	2200      	movs	r2, #0
   b5dc0:	f7ff fce6 	bl	b5790 <__aeabi_dmul>
   b5dc4:	4602      	mov	r2, r0
   b5dc6:	460b      	mov	r3, r1
   b5dc8:	4630      	mov	r0, r6
   b5dca:	4639      	mov	r1, r7
   b5dcc:	f7ff fb28 	bl	b5420 <__aeabi_dsub>
   b5dd0:	f7ff ff78 	bl	b5cc4 <__aeabi_d2uiz>
   b5dd4:	4621      	mov	r1, r4
   b5dd6:	bdd0      	pop	{r4, r6, r7, pc}
   b5dd8:	3df00000 	.word	0x3df00000
   b5ddc:	41f00000 	.word	0x41f00000

000b5de0 <atexit>:
   b5de0:	2300      	movs	r3, #0
   b5de2:	4601      	mov	r1, r0
   b5de4:	461a      	mov	r2, r3
   b5de6:	4618      	mov	r0, r3
   b5de8:	f000 be94 	b.w	b6b14 <__register_exitproc>

000b5dec <atof>:
   b5dec:	2100      	movs	r1, #0
   b5dee:	f000 be85 	b.w	b6afc <strtod>

000b5df2 <memcpy>:
   b5df2:	440a      	add	r2, r1
   b5df4:	4291      	cmp	r1, r2
   b5df6:	f100 33ff 	add.w	r3, r0, #4294967295
   b5dfa:	d100      	bne.n	b5dfe <memcpy+0xc>
   b5dfc:	4770      	bx	lr
   b5dfe:	b510      	push	{r4, lr}
   b5e00:	f811 4b01 	ldrb.w	r4, [r1], #1
   b5e04:	f803 4f01 	strb.w	r4, [r3, #1]!
   b5e08:	4291      	cmp	r1, r2
   b5e0a:	d1f9      	bne.n	b5e00 <memcpy+0xe>
   b5e0c:	bd10      	pop	{r4, pc}

000b5e0e <memset>:
   b5e0e:	4402      	add	r2, r0
   b5e10:	4603      	mov	r3, r0
   b5e12:	4293      	cmp	r3, r2
   b5e14:	d100      	bne.n	b5e18 <memset+0xa>
   b5e16:	4770      	bx	lr
   b5e18:	f803 1b01 	strb.w	r1, [r3], #1
   b5e1c:	e7f9      	b.n	b5e12 <memset+0x4>
	...

000b5e20 <srand>:
   b5e20:	b538      	push	{r3, r4, r5, lr}
   b5e22:	4b10      	ldr	r3, [pc, #64]	; (b5e64 <srand+0x44>)
   b5e24:	681d      	ldr	r5, [r3, #0]
   b5e26:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5e28:	4604      	mov	r4, r0
   b5e2a:	b9b3      	cbnz	r3, b5e5a <srand+0x3a>
   b5e2c:	2018      	movs	r0, #24
   b5e2e:	f7fe fded 	bl	b4a0c <malloc>
   b5e32:	4602      	mov	r2, r0
   b5e34:	63a8      	str	r0, [r5, #56]	; 0x38
   b5e36:	b920      	cbnz	r0, b5e42 <srand+0x22>
   b5e38:	4b0b      	ldr	r3, [pc, #44]	; (b5e68 <srand+0x48>)
   b5e3a:	480c      	ldr	r0, [pc, #48]	; (b5e6c <srand+0x4c>)
   b5e3c:	2142      	movs	r1, #66	; 0x42
   b5e3e:	f7fe fdfd 	bl	b4a3c <__assert_func>
   b5e42:	490b      	ldr	r1, [pc, #44]	; (b5e70 <srand+0x50>)
   b5e44:	4b0b      	ldr	r3, [pc, #44]	; (b5e74 <srand+0x54>)
   b5e46:	e9c0 1300 	strd	r1, r3, [r0]
   b5e4a:	4b0b      	ldr	r3, [pc, #44]	; (b5e78 <srand+0x58>)
   b5e4c:	6083      	str	r3, [r0, #8]
   b5e4e:	230b      	movs	r3, #11
   b5e50:	8183      	strh	r3, [r0, #12]
   b5e52:	2100      	movs	r1, #0
   b5e54:	2001      	movs	r0, #1
   b5e56:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b5e5a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5e5c:	2200      	movs	r2, #0
   b5e5e:	611c      	str	r4, [r3, #16]
   b5e60:	615a      	str	r2, [r3, #20]
   b5e62:	bd38      	pop	{r3, r4, r5, pc}
   b5e64:	2003e4b0 	.word	0x2003e4b0
   b5e68:	000b7e85 	.word	0x000b7e85
   b5e6c:	000b7e9c 	.word	0x000b7e9c
   b5e70:	abcd330e 	.word	0xabcd330e
   b5e74:	e66d1234 	.word	0xe66d1234
   b5e78:	0005deec 	.word	0x0005deec

000b5e7c <strlen>:
   b5e7c:	4603      	mov	r3, r0
   b5e7e:	f813 2b01 	ldrb.w	r2, [r3], #1
   b5e82:	2a00      	cmp	r2, #0
   b5e84:	d1fb      	bne.n	b5e7e <strlen+0x2>
   b5e86:	1a18      	subs	r0, r3, r0
   b5e88:	3801      	subs	r0, #1
   b5e8a:	4770      	bx	lr

000b5e8c <strncmp>:
   b5e8c:	b510      	push	{r4, lr}
   b5e8e:	b17a      	cbz	r2, b5eb0 <strncmp+0x24>
   b5e90:	4603      	mov	r3, r0
   b5e92:	3901      	subs	r1, #1
   b5e94:	1884      	adds	r4, r0, r2
   b5e96:	f813 0b01 	ldrb.w	r0, [r3], #1
   b5e9a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b5e9e:	4290      	cmp	r0, r2
   b5ea0:	d101      	bne.n	b5ea6 <strncmp+0x1a>
   b5ea2:	42a3      	cmp	r3, r4
   b5ea4:	d101      	bne.n	b5eaa <strncmp+0x1e>
   b5ea6:	1a80      	subs	r0, r0, r2
   b5ea8:	bd10      	pop	{r4, pc}
   b5eaa:	2800      	cmp	r0, #0
   b5eac:	d1f3      	bne.n	b5e96 <strncmp+0xa>
   b5eae:	e7fa      	b.n	b5ea6 <strncmp+0x1a>
   b5eb0:	4610      	mov	r0, r2
   b5eb2:	e7f9      	b.n	b5ea8 <strncmp+0x1c>

000b5eb4 <sulp>:
   b5eb4:	b570      	push	{r4, r5, r6, lr}
   b5eb6:	4604      	mov	r4, r0
   b5eb8:	460d      	mov	r5, r1
   b5eba:	ec45 4b10 	vmov	d0, r4, r5
   b5ebe:	4616      	mov	r6, r2
   b5ec0:	f001 fd82 	bl	b79c8 <__ulp>
   b5ec4:	ec51 0b10 	vmov	r0, r1, d0
   b5ec8:	b17e      	cbz	r6, b5eea <sulp+0x36>
   b5eca:	f3c5 530a 	ubfx	r3, r5, #20, #11
   b5ece:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b5ed2:	2b00      	cmp	r3, #0
   b5ed4:	dd09      	ble.n	b5eea <sulp+0x36>
   b5ed6:	051b      	lsls	r3, r3, #20
   b5ed8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   b5edc:	2400      	movs	r4, #0
   b5ede:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   b5ee2:	4622      	mov	r2, r4
   b5ee4:	462b      	mov	r3, r5
   b5ee6:	f7ff fc53 	bl	b5790 <__aeabi_dmul>
   b5eea:	bd70      	pop	{r4, r5, r6, pc}
   b5eec:	0000      	movs	r0, r0
	...

000b5ef0 <_strtod_l>:
   b5ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5ef4:	ed2d 8b02 	vpush	{d8}
   b5ef8:	b09d      	sub	sp, #116	; 0x74
   b5efa:	461f      	mov	r7, r3
   b5efc:	2300      	movs	r3, #0
   b5efe:	9318      	str	r3, [sp, #96]	; 0x60
   b5f00:	4ba2      	ldr	r3, [pc, #648]	; (b618c <_strtod_l+0x29c>)
   b5f02:	9213      	str	r2, [sp, #76]	; 0x4c
   b5f04:	681b      	ldr	r3, [r3, #0]
   b5f06:	9305      	str	r3, [sp, #20]
   b5f08:	4604      	mov	r4, r0
   b5f0a:	4618      	mov	r0, r3
   b5f0c:	4688      	mov	r8, r1
   b5f0e:	f7ff ffb5 	bl	b5e7c <strlen>
   b5f12:	f04f 0a00 	mov.w	sl, #0
   b5f16:	4605      	mov	r5, r0
   b5f18:	f04f 0b00 	mov.w	fp, #0
   b5f1c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b5f20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b5f22:	781a      	ldrb	r2, [r3, #0]
   b5f24:	2a2b      	cmp	r2, #43	; 0x2b
   b5f26:	d04e      	beq.n	b5fc6 <_strtod_l+0xd6>
   b5f28:	d83b      	bhi.n	b5fa2 <_strtod_l+0xb2>
   b5f2a:	2a0d      	cmp	r2, #13
   b5f2c:	d834      	bhi.n	b5f98 <_strtod_l+0xa8>
   b5f2e:	2a08      	cmp	r2, #8
   b5f30:	d834      	bhi.n	b5f9c <_strtod_l+0xac>
   b5f32:	2a00      	cmp	r2, #0
   b5f34:	d03e      	beq.n	b5fb4 <_strtod_l+0xc4>
   b5f36:	2300      	movs	r3, #0
   b5f38:	930a      	str	r3, [sp, #40]	; 0x28
   b5f3a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   b5f3c:	7833      	ldrb	r3, [r6, #0]
   b5f3e:	2b30      	cmp	r3, #48	; 0x30
   b5f40:	f040 80b0 	bne.w	b60a4 <_strtod_l+0x1b4>
   b5f44:	7873      	ldrb	r3, [r6, #1]
   b5f46:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b5f4a:	2b58      	cmp	r3, #88	; 0x58
   b5f4c:	d168      	bne.n	b6020 <_strtod_l+0x130>
   b5f4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b5f50:	9301      	str	r3, [sp, #4]
   b5f52:	ab18      	add	r3, sp, #96	; 0x60
   b5f54:	9702      	str	r7, [sp, #8]
   b5f56:	9300      	str	r3, [sp, #0]
   b5f58:	4a8d      	ldr	r2, [pc, #564]	; (b6190 <_strtod_l+0x2a0>)
   b5f5a:	ab19      	add	r3, sp, #100	; 0x64
   b5f5c:	a917      	add	r1, sp, #92	; 0x5c
   b5f5e:	4620      	mov	r0, r4
   b5f60:	f000 fea2 	bl	b6ca8 <__gethex>
   b5f64:	f010 0707 	ands.w	r7, r0, #7
   b5f68:	4605      	mov	r5, r0
   b5f6a:	d005      	beq.n	b5f78 <_strtod_l+0x88>
   b5f6c:	2f06      	cmp	r7, #6
   b5f6e:	d12c      	bne.n	b5fca <_strtod_l+0xda>
   b5f70:	3601      	adds	r6, #1
   b5f72:	2300      	movs	r3, #0
   b5f74:	9617      	str	r6, [sp, #92]	; 0x5c
   b5f76:	930a      	str	r3, [sp, #40]	; 0x28
   b5f78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b5f7a:	2b00      	cmp	r3, #0
   b5f7c:	f040 8590 	bne.w	b6aa0 <_strtod_l+0xbb0>
   b5f80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b5f82:	b1eb      	cbz	r3, b5fc0 <_strtod_l+0xd0>
   b5f84:	4652      	mov	r2, sl
   b5f86:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   b5f8a:	ec43 2b10 	vmov	d0, r2, r3
   b5f8e:	b01d      	add	sp, #116	; 0x74
   b5f90:	ecbd 8b02 	vpop	{d8}
   b5f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5f98:	2a20      	cmp	r2, #32
   b5f9a:	d1cc      	bne.n	b5f36 <_strtod_l+0x46>
   b5f9c:	3301      	adds	r3, #1
   b5f9e:	9317      	str	r3, [sp, #92]	; 0x5c
   b5fa0:	e7be      	b.n	b5f20 <_strtod_l+0x30>
   b5fa2:	2a2d      	cmp	r2, #45	; 0x2d
   b5fa4:	d1c7      	bne.n	b5f36 <_strtod_l+0x46>
   b5fa6:	2201      	movs	r2, #1
   b5fa8:	920a      	str	r2, [sp, #40]	; 0x28
   b5faa:	1c5a      	adds	r2, r3, #1
   b5fac:	9217      	str	r2, [sp, #92]	; 0x5c
   b5fae:	785b      	ldrb	r3, [r3, #1]
   b5fb0:	2b00      	cmp	r3, #0
   b5fb2:	d1c2      	bne.n	b5f3a <_strtod_l+0x4a>
   b5fb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b5fb6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b5fba:	2b00      	cmp	r3, #0
   b5fbc:	f040 856e 	bne.w	b6a9c <_strtod_l+0xbac>
   b5fc0:	4652      	mov	r2, sl
   b5fc2:	465b      	mov	r3, fp
   b5fc4:	e7e1      	b.n	b5f8a <_strtod_l+0x9a>
   b5fc6:	2200      	movs	r2, #0
   b5fc8:	e7ee      	b.n	b5fa8 <_strtod_l+0xb8>
   b5fca:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b5fcc:	b13a      	cbz	r2, b5fde <_strtod_l+0xee>
   b5fce:	2135      	movs	r1, #53	; 0x35
   b5fd0:	a81a      	add	r0, sp, #104	; 0x68
   b5fd2:	f001 fe04 	bl	b7bde <__copybits>
   b5fd6:	9918      	ldr	r1, [sp, #96]	; 0x60
   b5fd8:	4620      	mov	r0, r4
   b5fda:	f001 f9c3 	bl	b7364 <_Bfree>
   b5fde:	3f01      	subs	r7, #1
   b5fe0:	2f04      	cmp	r7, #4
   b5fe2:	d806      	bhi.n	b5ff2 <_strtod_l+0x102>
   b5fe4:	e8df f007 	tbb	[pc, r7]
   b5fe8:	1714030a 	.word	0x1714030a
   b5fec:	0a          	.byte	0x0a
   b5fed:	00          	.byte	0x00
   b5fee:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   b5ff2:	0728      	lsls	r0, r5, #28
   b5ff4:	d5c0      	bpl.n	b5f78 <_strtod_l+0x88>
   b5ff6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   b5ffa:	e7bd      	b.n	b5f78 <_strtod_l+0x88>
   b5ffc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   b6000:	9a19      	ldr	r2, [sp, #100]	; 0x64
   b6002:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   b6006:	f202 4233 	addw	r2, r2, #1075	; 0x433
   b600a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   b600e:	e7f0      	b.n	b5ff2 <_strtod_l+0x102>
   b6010:	f8df b180 	ldr.w	fp, [pc, #384]	; b6194 <_strtod_l+0x2a4>
   b6014:	e7ed      	b.n	b5ff2 <_strtod_l+0x102>
   b6016:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   b601a:	f04f 3aff 	mov.w	sl, #4294967295
   b601e:	e7e8      	b.n	b5ff2 <_strtod_l+0x102>
   b6020:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b6022:	1c5a      	adds	r2, r3, #1
   b6024:	9217      	str	r2, [sp, #92]	; 0x5c
   b6026:	785b      	ldrb	r3, [r3, #1]
   b6028:	2b30      	cmp	r3, #48	; 0x30
   b602a:	d0f9      	beq.n	b6020 <_strtod_l+0x130>
   b602c:	2b00      	cmp	r3, #0
   b602e:	d0a3      	beq.n	b5f78 <_strtod_l+0x88>
   b6030:	2301      	movs	r3, #1
   b6032:	f04f 0900 	mov.w	r9, #0
   b6036:	9304      	str	r3, [sp, #16]
   b6038:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b603a:	9308      	str	r3, [sp, #32]
   b603c:	f8cd 901c 	str.w	r9, [sp, #28]
   b6040:	464f      	mov	r7, r9
   b6042:	220a      	movs	r2, #10
   b6044:	9817      	ldr	r0, [sp, #92]	; 0x5c
   b6046:	7806      	ldrb	r6, [r0, #0]
   b6048:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   b604c:	b2d9      	uxtb	r1, r3
   b604e:	2909      	cmp	r1, #9
   b6050:	d92a      	bls.n	b60a8 <_strtod_l+0x1b8>
   b6052:	9905      	ldr	r1, [sp, #20]
   b6054:	462a      	mov	r2, r5
   b6056:	f7ff ff19 	bl	b5e8c <strncmp>
   b605a:	b398      	cbz	r0, b60c4 <_strtod_l+0x1d4>
   b605c:	2000      	movs	r0, #0
   b605e:	4632      	mov	r2, r6
   b6060:	463d      	mov	r5, r7
   b6062:	9005      	str	r0, [sp, #20]
   b6064:	4603      	mov	r3, r0
   b6066:	2a65      	cmp	r2, #101	; 0x65
   b6068:	d001      	beq.n	b606e <_strtod_l+0x17e>
   b606a:	2a45      	cmp	r2, #69	; 0x45
   b606c:	d118      	bne.n	b60a0 <_strtod_l+0x1b0>
   b606e:	b91d      	cbnz	r5, b6078 <_strtod_l+0x188>
   b6070:	9a04      	ldr	r2, [sp, #16]
   b6072:	4302      	orrs	r2, r0
   b6074:	d09e      	beq.n	b5fb4 <_strtod_l+0xc4>
   b6076:	2500      	movs	r5, #0
   b6078:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   b607c:	f108 0201 	add.w	r2, r8, #1
   b6080:	9217      	str	r2, [sp, #92]	; 0x5c
   b6082:	f898 2001 	ldrb.w	r2, [r8, #1]
   b6086:	2a2b      	cmp	r2, #43	; 0x2b
   b6088:	d075      	beq.n	b6176 <_strtod_l+0x286>
   b608a:	2a2d      	cmp	r2, #45	; 0x2d
   b608c:	d07b      	beq.n	b6186 <_strtod_l+0x296>
   b608e:	f04f 0c00 	mov.w	ip, #0
   b6092:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   b6096:	2909      	cmp	r1, #9
   b6098:	f240 8082 	bls.w	b61a0 <_strtod_l+0x2b0>
   b609c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b60a0:	2600      	movs	r6, #0
   b60a2:	e09d      	b.n	b61e0 <_strtod_l+0x2f0>
   b60a4:	2300      	movs	r3, #0
   b60a6:	e7c4      	b.n	b6032 <_strtod_l+0x142>
   b60a8:	2f08      	cmp	r7, #8
   b60aa:	bfd8      	it	le
   b60ac:	9907      	ldrle	r1, [sp, #28]
   b60ae:	f100 0001 	add.w	r0, r0, #1
   b60b2:	bfda      	itte	le
   b60b4:	fb02 3301 	mlale	r3, r2, r1, r3
   b60b8:	9307      	strle	r3, [sp, #28]
   b60ba:	fb02 3909 	mlagt	r9, r2, r9, r3
   b60be:	3701      	adds	r7, #1
   b60c0:	9017      	str	r0, [sp, #92]	; 0x5c
   b60c2:	e7bf      	b.n	b6044 <_strtod_l+0x154>
   b60c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b60c6:	195a      	adds	r2, r3, r5
   b60c8:	9217      	str	r2, [sp, #92]	; 0x5c
   b60ca:	5d5a      	ldrb	r2, [r3, r5]
   b60cc:	2f00      	cmp	r7, #0
   b60ce:	d037      	beq.n	b6140 <_strtod_l+0x250>
   b60d0:	9005      	str	r0, [sp, #20]
   b60d2:	463d      	mov	r5, r7
   b60d4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   b60d8:	2b09      	cmp	r3, #9
   b60da:	d912      	bls.n	b6102 <_strtod_l+0x212>
   b60dc:	2301      	movs	r3, #1
   b60de:	e7c2      	b.n	b6066 <_strtod_l+0x176>
   b60e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b60e2:	1c5a      	adds	r2, r3, #1
   b60e4:	9217      	str	r2, [sp, #92]	; 0x5c
   b60e6:	785a      	ldrb	r2, [r3, #1]
   b60e8:	3001      	adds	r0, #1
   b60ea:	2a30      	cmp	r2, #48	; 0x30
   b60ec:	d0f8      	beq.n	b60e0 <_strtod_l+0x1f0>
   b60ee:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   b60f2:	2b08      	cmp	r3, #8
   b60f4:	f200 84d9 	bhi.w	b6aaa <_strtod_l+0xbba>
   b60f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b60fa:	9005      	str	r0, [sp, #20]
   b60fc:	2000      	movs	r0, #0
   b60fe:	9308      	str	r3, [sp, #32]
   b6100:	4605      	mov	r5, r0
   b6102:	3a30      	subs	r2, #48	; 0x30
   b6104:	f100 0301 	add.w	r3, r0, #1
   b6108:	d014      	beq.n	b6134 <_strtod_l+0x244>
   b610a:	9905      	ldr	r1, [sp, #20]
   b610c:	4419      	add	r1, r3
   b610e:	9105      	str	r1, [sp, #20]
   b6110:	462b      	mov	r3, r5
   b6112:	eb00 0e05 	add.w	lr, r0, r5
   b6116:	210a      	movs	r1, #10
   b6118:	4573      	cmp	r3, lr
   b611a:	d113      	bne.n	b6144 <_strtod_l+0x254>
   b611c:	182b      	adds	r3, r5, r0
   b611e:	2b08      	cmp	r3, #8
   b6120:	f105 0501 	add.w	r5, r5, #1
   b6124:	4405      	add	r5, r0
   b6126:	dc1c      	bgt.n	b6162 <_strtod_l+0x272>
   b6128:	9907      	ldr	r1, [sp, #28]
   b612a:	230a      	movs	r3, #10
   b612c:	fb03 2301 	mla	r3, r3, r1, r2
   b6130:	9307      	str	r3, [sp, #28]
   b6132:	2300      	movs	r3, #0
   b6134:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b6136:	1c51      	adds	r1, r2, #1
   b6138:	9117      	str	r1, [sp, #92]	; 0x5c
   b613a:	7852      	ldrb	r2, [r2, #1]
   b613c:	4618      	mov	r0, r3
   b613e:	e7c9      	b.n	b60d4 <_strtod_l+0x1e4>
   b6140:	4638      	mov	r0, r7
   b6142:	e7d2      	b.n	b60ea <_strtod_l+0x1fa>
   b6144:	2b08      	cmp	r3, #8
   b6146:	dc04      	bgt.n	b6152 <_strtod_l+0x262>
   b6148:	9e07      	ldr	r6, [sp, #28]
   b614a:	434e      	muls	r6, r1
   b614c:	9607      	str	r6, [sp, #28]
   b614e:	3301      	adds	r3, #1
   b6150:	e7e2      	b.n	b6118 <_strtod_l+0x228>
   b6152:	f103 0c01 	add.w	ip, r3, #1
   b6156:	f1bc 0f10 	cmp.w	ip, #16
   b615a:	bfd8      	it	le
   b615c:	fb01 f909 	mulle.w	r9, r1, r9
   b6160:	e7f5      	b.n	b614e <_strtod_l+0x25e>
   b6162:	2d10      	cmp	r5, #16
   b6164:	bfdc      	itt	le
   b6166:	230a      	movle	r3, #10
   b6168:	fb03 2909 	mlale	r9, r3, r9, r2
   b616c:	e7e1      	b.n	b6132 <_strtod_l+0x242>
   b616e:	2300      	movs	r3, #0
   b6170:	9305      	str	r3, [sp, #20]
   b6172:	2301      	movs	r3, #1
   b6174:	e77c      	b.n	b6070 <_strtod_l+0x180>
   b6176:	f04f 0c00 	mov.w	ip, #0
   b617a:	f108 0202 	add.w	r2, r8, #2
   b617e:	9217      	str	r2, [sp, #92]	; 0x5c
   b6180:	f898 2002 	ldrb.w	r2, [r8, #2]
   b6184:	e785      	b.n	b6092 <_strtod_l+0x1a2>
   b6186:	f04f 0c01 	mov.w	ip, #1
   b618a:	e7f6      	b.n	b617a <_strtod_l+0x28a>
   b618c:	000b8114 	.word	0x000b8114
   b6190:	000b7f28 	.word	0x000b7f28
   b6194:	7ff00000 	.word	0x7ff00000
   b6198:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b619a:	1c51      	adds	r1, r2, #1
   b619c:	9117      	str	r1, [sp, #92]	; 0x5c
   b619e:	7852      	ldrb	r2, [r2, #1]
   b61a0:	2a30      	cmp	r2, #48	; 0x30
   b61a2:	d0f9      	beq.n	b6198 <_strtod_l+0x2a8>
   b61a4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   b61a8:	2908      	cmp	r1, #8
   b61aa:	f63f af79 	bhi.w	b60a0 <_strtod_l+0x1b0>
   b61ae:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   b61b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b61b4:	9206      	str	r2, [sp, #24]
   b61b6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b61b8:	1c51      	adds	r1, r2, #1
   b61ba:	9117      	str	r1, [sp, #92]	; 0x5c
   b61bc:	7852      	ldrb	r2, [r2, #1]
   b61be:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   b61c2:	2e09      	cmp	r6, #9
   b61c4:	d937      	bls.n	b6236 <_strtod_l+0x346>
   b61c6:	9e06      	ldr	r6, [sp, #24]
   b61c8:	1b89      	subs	r1, r1, r6
   b61ca:	2908      	cmp	r1, #8
   b61cc:	f644 661f 	movw	r6, #19999	; 0x4e1f
   b61d0:	dc02      	bgt.n	b61d8 <_strtod_l+0x2e8>
   b61d2:	4576      	cmp	r6, lr
   b61d4:	bfa8      	it	ge
   b61d6:	4676      	movge	r6, lr
   b61d8:	f1bc 0f00 	cmp.w	ip, #0
   b61dc:	d000      	beq.n	b61e0 <_strtod_l+0x2f0>
   b61de:	4276      	negs	r6, r6
   b61e0:	2d00      	cmp	r5, #0
   b61e2:	d14d      	bne.n	b6280 <_strtod_l+0x390>
   b61e4:	9904      	ldr	r1, [sp, #16]
   b61e6:	4301      	orrs	r1, r0
   b61e8:	f47f aec6 	bne.w	b5f78 <_strtod_l+0x88>
   b61ec:	2b00      	cmp	r3, #0
   b61ee:	f47f aee1 	bne.w	b5fb4 <_strtod_l+0xc4>
   b61f2:	2a69      	cmp	r2, #105	; 0x69
   b61f4:	d027      	beq.n	b6246 <_strtod_l+0x356>
   b61f6:	dc24      	bgt.n	b6242 <_strtod_l+0x352>
   b61f8:	2a49      	cmp	r2, #73	; 0x49
   b61fa:	d024      	beq.n	b6246 <_strtod_l+0x356>
   b61fc:	2a4e      	cmp	r2, #78	; 0x4e
   b61fe:	f47f aed9 	bne.w	b5fb4 <_strtod_l+0xc4>
   b6202:	499f      	ldr	r1, [pc, #636]	; (b6480 <_strtod_l+0x590>)
   b6204:	a817      	add	r0, sp, #92	; 0x5c
   b6206:	f000 ffa7 	bl	b7158 <__match>
   b620a:	2800      	cmp	r0, #0
   b620c:	f43f aed2 	beq.w	b5fb4 <_strtod_l+0xc4>
   b6210:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b6212:	781b      	ldrb	r3, [r3, #0]
   b6214:	2b28      	cmp	r3, #40	; 0x28
   b6216:	d12d      	bne.n	b6274 <_strtod_l+0x384>
   b6218:	499a      	ldr	r1, [pc, #616]	; (b6484 <_strtod_l+0x594>)
   b621a:	aa1a      	add	r2, sp, #104	; 0x68
   b621c:	a817      	add	r0, sp, #92	; 0x5c
   b621e:	f000 ffaf 	bl	b7180 <__hexnan>
   b6222:	2805      	cmp	r0, #5
   b6224:	d126      	bne.n	b6274 <_strtod_l+0x384>
   b6226:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   b6228:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   b622c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   b6230:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   b6234:	e6a0      	b.n	b5f78 <_strtod_l+0x88>
   b6236:	210a      	movs	r1, #10
   b6238:	fb01 2e0e 	mla	lr, r1, lr, r2
   b623c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   b6240:	e7b9      	b.n	b61b6 <_strtod_l+0x2c6>
   b6242:	2a6e      	cmp	r2, #110	; 0x6e
   b6244:	e7db      	b.n	b61fe <_strtod_l+0x30e>
   b6246:	4990      	ldr	r1, [pc, #576]	; (b6488 <_strtod_l+0x598>)
   b6248:	a817      	add	r0, sp, #92	; 0x5c
   b624a:	f000 ff85 	bl	b7158 <__match>
   b624e:	2800      	cmp	r0, #0
   b6250:	f43f aeb0 	beq.w	b5fb4 <_strtod_l+0xc4>
   b6254:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b6256:	498d      	ldr	r1, [pc, #564]	; (b648c <_strtod_l+0x59c>)
   b6258:	3b01      	subs	r3, #1
   b625a:	a817      	add	r0, sp, #92	; 0x5c
   b625c:	9317      	str	r3, [sp, #92]	; 0x5c
   b625e:	f000 ff7b 	bl	b7158 <__match>
   b6262:	b910      	cbnz	r0, b626a <_strtod_l+0x37a>
   b6264:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b6266:	3301      	adds	r3, #1
   b6268:	9317      	str	r3, [sp, #92]	; 0x5c
   b626a:	f8df b230 	ldr.w	fp, [pc, #560]	; b649c <_strtod_l+0x5ac>
   b626e:	f04f 0a00 	mov.w	sl, #0
   b6272:	e681      	b.n	b5f78 <_strtod_l+0x88>
   b6274:	4886      	ldr	r0, [pc, #536]	; (b6490 <_strtod_l+0x5a0>)
   b6276:	f001 fd07 	bl	b7c88 <nan>
   b627a:	ec5b ab10 	vmov	sl, fp, d0
   b627e:	e67b      	b.n	b5f78 <_strtod_l+0x88>
   b6280:	9b05      	ldr	r3, [sp, #20]
   b6282:	9807      	ldr	r0, [sp, #28]
   b6284:	1af3      	subs	r3, r6, r3
   b6286:	2f00      	cmp	r7, #0
   b6288:	bf08      	it	eq
   b628a:	462f      	moveq	r7, r5
   b628c:	2d10      	cmp	r5, #16
   b628e:	9306      	str	r3, [sp, #24]
   b6290:	46a8      	mov	r8, r5
   b6292:	bfa8      	it	ge
   b6294:	f04f 0810 	movge.w	r8, #16
   b6298:	f7ff fa00 	bl	b569c <__aeabi_ui2d>
   b629c:	2d09      	cmp	r5, #9
   b629e:	4682      	mov	sl, r0
   b62a0:	468b      	mov	fp, r1
   b62a2:	dd13      	ble.n	b62cc <_strtod_l+0x3dc>
   b62a4:	4b7b      	ldr	r3, [pc, #492]	; (b6494 <_strtod_l+0x5a4>)
   b62a6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   b62aa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   b62ae:	f7ff fa6f 	bl	b5790 <__aeabi_dmul>
   b62b2:	4682      	mov	sl, r0
   b62b4:	4648      	mov	r0, r9
   b62b6:	468b      	mov	fp, r1
   b62b8:	f7ff f9f0 	bl	b569c <__aeabi_ui2d>
   b62bc:	4602      	mov	r2, r0
   b62be:	460b      	mov	r3, r1
   b62c0:	4650      	mov	r0, sl
   b62c2:	4659      	mov	r1, fp
   b62c4:	f7ff f8ae 	bl	b5424 <__adddf3>
   b62c8:	4682      	mov	sl, r0
   b62ca:	468b      	mov	fp, r1
   b62cc:	2d0f      	cmp	r5, #15
   b62ce:	dc38      	bgt.n	b6342 <_strtod_l+0x452>
   b62d0:	9b06      	ldr	r3, [sp, #24]
   b62d2:	2b00      	cmp	r3, #0
   b62d4:	f43f ae50 	beq.w	b5f78 <_strtod_l+0x88>
   b62d8:	dd24      	ble.n	b6324 <_strtod_l+0x434>
   b62da:	2b16      	cmp	r3, #22
   b62dc:	dc0b      	bgt.n	b62f6 <_strtod_l+0x406>
   b62de:	496d      	ldr	r1, [pc, #436]	; (b6494 <_strtod_l+0x5a4>)
   b62e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b62e4:	e9d1 0100 	ldrd	r0, r1, [r1]
   b62e8:	4652      	mov	r2, sl
   b62ea:	465b      	mov	r3, fp
   b62ec:	f7ff fa50 	bl	b5790 <__aeabi_dmul>
   b62f0:	4682      	mov	sl, r0
   b62f2:	468b      	mov	fp, r1
   b62f4:	e640      	b.n	b5f78 <_strtod_l+0x88>
   b62f6:	9a06      	ldr	r2, [sp, #24]
   b62f8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   b62fc:	4293      	cmp	r3, r2
   b62fe:	db20      	blt.n	b6342 <_strtod_l+0x452>
   b6300:	4c64      	ldr	r4, [pc, #400]	; (b6494 <_strtod_l+0x5a4>)
   b6302:	f1c5 050f 	rsb	r5, r5, #15
   b6306:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   b630a:	4652      	mov	r2, sl
   b630c:	465b      	mov	r3, fp
   b630e:	e9d1 0100 	ldrd	r0, r1, [r1]
   b6312:	f7ff fa3d 	bl	b5790 <__aeabi_dmul>
   b6316:	9b06      	ldr	r3, [sp, #24]
   b6318:	1b5d      	subs	r5, r3, r5
   b631a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   b631e:	e9d4 2300 	ldrd	r2, r3, [r4]
   b6322:	e7e3      	b.n	b62ec <_strtod_l+0x3fc>
   b6324:	9b06      	ldr	r3, [sp, #24]
   b6326:	3316      	adds	r3, #22
   b6328:	db0b      	blt.n	b6342 <_strtod_l+0x452>
   b632a:	9b05      	ldr	r3, [sp, #20]
   b632c:	1b9e      	subs	r6, r3, r6
   b632e:	4b59      	ldr	r3, [pc, #356]	; (b6494 <_strtod_l+0x5a4>)
   b6330:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   b6334:	e9d6 2300 	ldrd	r2, r3, [r6]
   b6338:	4650      	mov	r0, sl
   b633a:	4659      	mov	r1, fp
   b633c:	f7ff fb52 	bl	b59e4 <__aeabi_ddiv>
   b6340:	e7d6      	b.n	b62f0 <_strtod_l+0x400>
   b6342:	9b06      	ldr	r3, [sp, #24]
   b6344:	eba5 0808 	sub.w	r8, r5, r8
   b6348:	4498      	add	r8, r3
   b634a:	f1b8 0f00 	cmp.w	r8, #0
   b634e:	dd74      	ble.n	b643a <_strtod_l+0x54a>
   b6350:	f018 030f 	ands.w	r3, r8, #15
   b6354:	d00a      	beq.n	b636c <_strtod_l+0x47c>
   b6356:	494f      	ldr	r1, [pc, #316]	; (b6494 <_strtod_l+0x5a4>)
   b6358:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b635c:	4652      	mov	r2, sl
   b635e:	465b      	mov	r3, fp
   b6360:	e9d1 0100 	ldrd	r0, r1, [r1]
   b6364:	f7ff fa14 	bl	b5790 <__aeabi_dmul>
   b6368:	4682      	mov	sl, r0
   b636a:	468b      	mov	fp, r1
   b636c:	f038 080f 	bics.w	r8, r8, #15
   b6370:	d04f      	beq.n	b6412 <_strtod_l+0x522>
   b6372:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   b6376:	dd22      	ble.n	b63be <_strtod_l+0x4ce>
   b6378:	2500      	movs	r5, #0
   b637a:	462e      	mov	r6, r5
   b637c:	9507      	str	r5, [sp, #28]
   b637e:	9505      	str	r5, [sp, #20]
   b6380:	2322      	movs	r3, #34	; 0x22
   b6382:	f8df b118 	ldr.w	fp, [pc, #280]	; b649c <_strtod_l+0x5ac>
   b6386:	6023      	str	r3, [r4, #0]
   b6388:	f04f 0a00 	mov.w	sl, #0
   b638c:	9b07      	ldr	r3, [sp, #28]
   b638e:	2b00      	cmp	r3, #0
   b6390:	f43f adf2 	beq.w	b5f78 <_strtod_l+0x88>
   b6394:	9918      	ldr	r1, [sp, #96]	; 0x60
   b6396:	4620      	mov	r0, r4
   b6398:	f000 ffe4 	bl	b7364 <_Bfree>
   b639c:	9905      	ldr	r1, [sp, #20]
   b639e:	4620      	mov	r0, r4
   b63a0:	f000 ffe0 	bl	b7364 <_Bfree>
   b63a4:	4631      	mov	r1, r6
   b63a6:	4620      	mov	r0, r4
   b63a8:	f000 ffdc 	bl	b7364 <_Bfree>
   b63ac:	9907      	ldr	r1, [sp, #28]
   b63ae:	4620      	mov	r0, r4
   b63b0:	f000 ffd8 	bl	b7364 <_Bfree>
   b63b4:	4629      	mov	r1, r5
   b63b6:	4620      	mov	r0, r4
   b63b8:	f000 ffd4 	bl	b7364 <_Bfree>
   b63bc:	e5dc      	b.n	b5f78 <_strtod_l+0x88>
   b63be:	4b36      	ldr	r3, [pc, #216]	; (b6498 <_strtod_l+0x5a8>)
   b63c0:	9304      	str	r3, [sp, #16]
   b63c2:	2300      	movs	r3, #0
   b63c4:	ea4f 1828 	mov.w	r8, r8, asr #4
   b63c8:	4650      	mov	r0, sl
   b63ca:	4659      	mov	r1, fp
   b63cc:	4699      	mov	r9, r3
   b63ce:	f1b8 0f01 	cmp.w	r8, #1
   b63d2:	dc21      	bgt.n	b6418 <_strtod_l+0x528>
   b63d4:	b10b      	cbz	r3, b63da <_strtod_l+0x4ea>
   b63d6:	4682      	mov	sl, r0
   b63d8:	468b      	mov	fp, r1
   b63da:	4b2f      	ldr	r3, [pc, #188]	; (b6498 <_strtod_l+0x5a8>)
   b63dc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   b63e0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   b63e4:	4652      	mov	r2, sl
   b63e6:	465b      	mov	r3, fp
   b63e8:	e9d9 0100 	ldrd	r0, r1, [r9]
   b63ec:	f7ff f9d0 	bl	b5790 <__aeabi_dmul>
   b63f0:	4b2a      	ldr	r3, [pc, #168]	; (b649c <_strtod_l+0x5ac>)
   b63f2:	460a      	mov	r2, r1
   b63f4:	400b      	ands	r3, r1
   b63f6:	492a      	ldr	r1, [pc, #168]	; (b64a0 <_strtod_l+0x5b0>)
   b63f8:	428b      	cmp	r3, r1
   b63fa:	4682      	mov	sl, r0
   b63fc:	d8bc      	bhi.n	b6378 <_strtod_l+0x488>
   b63fe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   b6402:	428b      	cmp	r3, r1
   b6404:	bf86      	itte	hi
   b6406:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; b64a4 <_strtod_l+0x5b4>
   b640a:	f04f 3aff 	movhi.w	sl, #4294967295
   b640e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   b6412:	2300      	movs	r3, #0
   b6414:	9304      	str	r3, [sp, #16]
   b6416:	e084      	b.n	b6522 <_strtod_l+0x632>
   b6418:	f018 0f01 	tst.w	r8, #1
   b641c:	d005      	beq.n	b642a <_strtod_l+0x53a>
   b641e:	9b04      	ldr	r3, [sp, #16]
   b6420:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6424:	f7ff f9b4 	bl	b5790 <__aeabi_dmul>
   b6428:	2301      	movs	r3, #1
   b642a:	9a04      	ldr	r2, [sp, #16]
   b642c:	3208      	adds	r2, #8
   b642e:	f109 0901 	add.w	r9, r9, #1
   b6432:	ea4f 0868 	mov.w	r8, r8, asr #1
   b6436:	9204      	str	r2, [sp, #16]
   b6438:	e7c9      	b.n	b63ce <_strtod_l+0x4de>
   b643a:	d0ea      	beq.n	b6412 <_strtod_l+0x522>
   b643c:	f1c8 0800 	rsb	r8, r8, #0
   b6440:	f018 020f 	ands.w	r2, r8, #15
   b6444:	d00a      	beq.n	b645c <_strtod_l+0x56c>
   b6446:	4b13      	ldr	r3, [pc, #76]	; (b6494 <_strtod_l+0x5a4>)
   b6448:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b644c:	4650      	mov	r0, sl
   b644e:	4659      	mov	r1, fp
   b6450:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6454:	f7ff fac6 	bl	b59e4 <__aeabi_ddiv>
   b6458:	4682      	mov	sl, r0
   b645a:	468b      	mov	fp, r1
   b645c:	ea5f 1828 	movs.w	r8, r8, asr #4
   b6460:	d0d7      	beq.n	b6412 <_strtod_l+0x522>
   b6462:	f1b8 0f1f 	cmp.w	r8, #31
   b6466:	dd1f      	ble.n	b64a8 <_strtod_l+0x5b8>
   b6468:	2500      	movs	r5, #0
   b646a:	462e      	mov	r6, r5
   b646c:	9507      	str	r5, [sp, #28]
   b646e:	9505      	str	r5, [sp, #20]
   b6470:	2322      	movs	r3, #34	; 0x22
   b6472:	f04f 0a00 	mov.w	sl, #0
   b6476:	f04f 0b00 	mov.w	fp, #0
   b647a:	6023      	str	r3, [r4, #0]
   b647c:	e786      	b.n	b638c <_strtod_l+0x49c>
   b647e:	bf00      	nop
   b6480:	000b7f22 	.word	0x000b7f22
   b6484:	000b7f3c 	.word	0x000b7f3c
   b6488:	000b7f19 	.word	0x000b7f19
   b648c:	000b7f1c 	.word	0x000b7f1c
   b6490:	000b8110 	.word	0x000b8110
   b6494:	000b81d0 	.word	0x000b81d0
   b6498:	000b81a8 	.word	0x000b81a8
   b649c:	7ff00000 	.word	0x7ff00000
   b64a0:	7ca00000 	.word	0x7ca00000
   b64a4:	7fefffff 	.word	0x7fefffff
   b64a8:	f018 0310 	ands.w	r3, r8, #16
   b64ac:	bf18      	it	ne
   b64ae:	236a      	movne	r3, #106	; 0x6a
   b64b0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; b6860 <_strtod_l+0x970>
   b64b4:	9304      	str	r3, [sp, #16]
   b64b6:	4650      	mov	r0, sl
   b64b8:	4659      	mov	r1, fp
   b64ba:	2300      	movs	r3, #0
   b64bc:	f018 0f01 	tst.w	r8, #1
   b64c0:	d004      	beq.n	b64cc <_strtod_l+0x5dc>
   b64c2:	e9d9 2300 	ldrd	r2, r3, [r9]
   b64c6:	f7ff f963 	bl	b5790 <__aeabi_dmul>
   b64ca:	2301      	movs	r3, #1
   b64cc:	ea5f 0868 	movs.w	r8, r8, asr #1
   b64d0:	f109 0908 	add.w	r9, r9, #8
   b64d4:	d1f2      	bne.n	b64bc <_strtod_l+0x5cc>
   b64d6:	b10b      	cbz	r3, b64dc <_strtod_l+0x5ec>
   b64d8:	4682      	mov	sl, r0
   b64da:	468b      	mov	fp, r1
   b64dc:	9b04      	ldr	r3, [sp, #16]
   b64de:	b1c3      	cbz	r3, b6512 <_strtod_l+0x622>
   b64e0:	f3cb 520a 	ubfx	r2, fp, #20, #11
   b64e4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   b64e8:	2b00      	cmp	r3, #0
   b64ea:	4659      	mov	r1, fp
   b64ec:	dd11      	ble.n	b6512 <_strtod_l+0x622>
   b64ee:	2b1f      	cmp	r3, #31
   b64f0:	f340 8124 	ble.w	b673c <_strtod_l+0x84c>
   b64f4:	2b34      	cmp	r3, #52	; 0x34
   b64f6:	bfde      	ittt	le
   b64f8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   b64fc:	f04f 33ff 	movle.w	r3, #4294967295
   b6500:	fa03 f202 	lslle.w	r2, r3, r2
   b6504:	f04f 0a00 	mov.w	sl, #0
   b6508:	bfcc      	ite	gt
   b650a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   b650e:	ea02 0b01 	andle.w	fp, r2, r1
   b6512:	2200      	movs	r2, #0
   b6514:	2300      	movs	r3, #0
   b6516:	4650      	mov	r0, sl
   b6518:	4659      	mov	r1, fp
   b651a:	f7ff fba1 	bl	b5c60 <__aeabi_dcmpeq>
   b651e:	2800      	cmp	r0, #0
   b6520:	d1a2      	bne.n	b6468 <_strtod_l+0x578>
   b6522:	9b07      	ldr	r3, [sp, #28]
   b6524:	9300      	str	r3, [sp, #0]
   b6526:	9908      	ldr	r1, [sp, #32]
   b6528:	462b      	mov	r3, r5
   b652a:	463a      	mov	r2, r7
   b652c:	4620      	mov	r0, r4
   b652e:	f000 ff81 	bl	b7434 <__s2b>
   b6532:	9007      	str	r0, [sp, #28]
   b6534:	2800      	cmp	r0, #0
   b6536:	f43f af1f 	beq.w	b6378 <_strtod_l+0x488>
   b653a:	9b05      	ldr	r3, [sp, #20]
   b653c:	1b9e      	subs	r6, r3, r6
   b653e:	9b06      	ldr	r3, [sp, #24]
   b6540:	2b00      	cmp	r3, #0
   b6542:	bfb4      	ite	lt
   b6544:	4633      	movlt	r3, r6
   b6546:	2300      	movge	r3, #0
   b6548:	930c      	str	r3, [sp, #48]	; 0x30
   b654a:	9b06      	ldr	r3, [sp, #24]
   b654c:	2500      	movs	r5, #0
   b654e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b6552:	9312      	str	r3, [sp, #72]	; 0x48
   b6554:	462e      	mov	r6, r5
   b6556:	9b07      	ldr	r3, [sp, #28]
   b6558:	4620      	mov	r0, r4
   b655a:	6859      	ldr	r1, [r3, #4]
   b655c:	f000 fec2 	bl	b72e4 <_Balloc>
   b6560:	9005      	str	r0, [sp, #20]
   b6562:	2800      	cmp	r0, #0
   b6564:	f43f af0c 	beq.w	b6380 <_strtod_l+0x490>
   b6568:	9b07      	ldr	r3, [sp, #28]
   b656a:	691a      	ldr	r2, [r3, #16]
   b656c:	3202      	adds	r2, #2
   b656e:	f103 010c 	add.w	r1, r3, #12
   b6572:	0092      	lsls	r2, r2, #2
   b6574:	300c      	adds	r0, #12
   b6576:	f7ff fc3c 	bl	b5df2 <memcpy>
   b657a:	ec4b ab10 	vmov	d0, sl, fp
   b657e:	aa1a      	add	r2, sp, #104	; 0x68
   b6580:	a919      	add	r1, sp, #100	; 0x64
   b6582:	4620      	mov	r0, r4
   b6584:	f001 fa9c 	bl	b7ac0 <__d2b>
   b6588:	ec4b ab18 	vmov	d8, sl, fp
   b658c:	9018      	str	r0, [sp, #96]	; 0x60
   b658e:	2800      	cmp	r0, #0
   b6590:	f43f aef6 	beq.w	b6380 <_strtod_l+0x490>
   b6594:	2101      	movs	r1, #1
   b6596:	4620      	mov	r0, r4
   b6598:	f000 ffe6 	bl	b7568 <__i2b>
   b659c:	4606      	mov	r6, r0
   b659e:	2800      	cmp	r0, #0
   b65a0:	f43f aeee 	beq.w	b6380 <_strtod_l+0x490>
   b65a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
   b65a6:	9904      	ldr	r1, [sp, #16]
   b65a8:	2b00      	cmp	r3, #0
   b65aa:	bfab      	itete	ge
   b65ac:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   b65ae:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   b65b0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   b65b2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   b65b6:	bfac      	ite	ge
   b65b8:	eb03 0902 	addge.w	r9, r3, r2
   b65bc:	1ad7      	sublt	r7, r2, r3
   b65be:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   b65c0:	eba3 0801 	sub.w	r8, r3, r1
   b65c4:	4490      	add	r8, r2
   b65c6:	4ba1      	ldr	r3, [pc, #644]	; (b684c <_strtod_l+0x95c>)
   b65c8:	f108 38ff 	add.w	r8, r8, #4294967295
   b65cc:	4598      	cmp	r8, r3
   b65ce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   b65d2:	f280 80c7 	bge.w	b6764 <_strtod_l+0x874>
   b65d6:	eba3 0308 	sub.w	r3, r3, r8
   b65da:	2b1f      	cmp	r3, #31
   b65dc:	eba2 0203 	sub.w	r2, r2, r3
   b65e0:	f04f 0101 	mov.w	r1, #1
   b65e4:	f300 80b1 	bgt.w	b674a <_strtod_l+0x85a>
   b65e8:	fa01 f303 	lsl.w	r3, r1, r3
   b65ec:	930d      	str	r3, [sp, #52]	; 0x34
   b65ee:	2300      	movs	r3, #0
   b65f0:	9308      	str	r3, [sp, #32]
   b65f2:	eb09 0802 	add.w	r8, r9, r2
   b65f6:	9b04      	ldr	r3, [sp, #16]
   b65f8:	45c1      	cmp	r9, r8
   b65fa:	4417      	add	r7, r2
   b65fc:	441f      	add	r7, r3
   b65fe:	464b      	mov	r3, r9
   b6600:	bfa8      	it	ge
   b6602:	4643      	movge	r3, r8
   b6604:	42bb      	cmp	r3, r7
   b6606:	bfa8      	it	ge
   b6608:	463b      	movge	r3, r7
   b660a:	2b00      	cmp	r3, #0
   b660c:	bfc2      	ittt	gt
   b660e:	eba8 0803 	subgt.w	r8, r8, r3
   b6612:	1aff      	subgt	r7, r7, r3
   b6614:	eba9 0903 	subgt.w	r9, r9, r3
   b6618:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b661a:	2b00      	cmp	r3, #0
   b661c:	dd17      	ble.n	b664e <_strtod_l+0x75e>
   b661e:	4631      	mov	r1, r6
   b6620:	461a      	mov	r2, r3
   b6622:	4620      	mov	r0, r4
   b6624:	f001 f860 	bl	b76e8 <__pow5mult>
   b6628:	4606      	mov	r6, r0
   b662a:	2800      	cmp	r0, #0
   b662c:	f43f aea8 	beq.w	b6380 <_strtod_l+0x490>
   b6630:	4601      	mov	r1, r0
   b6632:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b6634:	4620      	mov	r0, r4
   b6636:	f000 ffad 	bl	b7594 <__multiply>
   b663a:	900b      	str	r0, [sp, #44]	; 0x2c
   b663c:	2800      	cmp	r0, #0
   b663e:	f43f ae9f 	beq.w	b6380 <_strtod_l+0x490>
   b6642:	9918      	ldr	r1, [sp, #96]	; 0x60
   b6644:	4620      	mov	r0, r4
   b6646:	f000 fe8d 	bl	b7364 <_Bfree>
   b664a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b664c:	9318      	str	r3, [sp, #96]	; 0x60
   b664e:	f1b8 0f00 	cmp.w	r8, #0
   b6652:	f300 808c 	bgt.w	b676e <_strtod_l+0x87e>
   b6656:	9b06      	ldr	r3, [sp, #24]
   b6658:	2b00      	cmp	r3, #0
   b665a:	dd08      	ble.n	b666e <_strtod_l+0x77e>
   b665c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b665e:	9905      	ldr	r1, [sp, #20]
   b6660:	4620      	mov	r0, r4
   b6662:	f001 f841 	bl	b76e8 <__pow5mult>
   b6666:	9005      	str	r0, [sp, #20]
   b6668:	2800      	cmp	r0, #0
   b666a:	f43f ae89 	beq.w	b6380 <_strtod_l+0x490>
   b666e:	2f00      	cmp	r7, #0
   b6670:	dd08      	ble.n	b6684 <_strtod_l+0x794>
   b6672:	9905      	ldr	r1, [sp, #20]
   b6674:	463a      	mov	r2, r7
   b6676:	4620      	mov	r0, r4
   b6678:	f001 f890 	bl	b779c <__lshift>
   b667c:	9005      	str	r0, [sp, #20]
   b667e:	2800      	cmp	r0, #0
   b6680:	f43f ae7e 	beq.w	b6380 <_strtod_l+0x490>
   b6684:	f1b9 0f00 	cmp.w	r9, #0
   b6688:	dd08      	ble.n	b669c <_strtod_l+0x7ac>
   b668a:	4631      	mov	r1, r6
   b668c:	464a      	mov	r2, r9
   b668e:	4620      	mov	r0, r4
   b6690:	f001 f884 	bl	b779c <__lshift>
   b6694:	4606      	mov	r6, r0
   b6696:	2800      	cmp	r0, #0
   b6698:	f43f ae72 	beq.w	b6380 <_strtod_l+0x490>
   b669c:	9a05      	ldr	r2, [sp, #20]
   b669e:	9918      	ldr	r1, [sp, #96]	; 0x60
   b66a0:	4620      	mov	r0, r4
   b66a2:	f001 f907 	bl	b78b4 <__mdiff>
   b66a6:	4605      	mov	r5, r0
   b66a8:	2800      	cmp	r0, #0
   b66aa:	f43f ae69 	beq.w	b6380 <_strtod_l+0x490>
   b66ae:	68c3      	ldr	r3, [r0, #12]
   b66b0:	930b      	str	r3, [sp, #44]	; 0x2c
   b66b2:	2300      	movs	r3, #0
   b66b4:	60c3      	str	r3, [r0, #12]
   b66b6:	4631      	mov	r1, r6
   b66b8:	f001 f8e0 	bl	b787c <__mcmp>
   b66bc:	2800      	cmp	r0, #0
   b66be:	da60      	bge.n	b6782 <_strtod_l+0x892>
   b66c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b66c2:	ea53 030a 	orrs.w	r3, r3, sl
   b66c6:	f040 8082 	bne.w	b67ce <_strtod_l+0x8de>
   b66ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b66ce:	2b00      	cmp	r3, #0
   b66d0:	d17d      	bne.n	b67ce <_strtod_l+0x8de>
   b66d2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b66d6:	0d1b      	lsrs	r3, r3, #20
   b66d8:	051b      	lsls	r3, r3, #20
   b66da:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   b66de:	d976      	bls.n	b67ce <_strtod_l+0x8de>
   b66e0:	696b      	ldr	r3, [r5, #20]
   b66e2:	b913      	cbnz	r3, b66ea <_strtod_l+0x7fa>
   b66e4:	692b      	ldr	r3, [r5, #16]
   b66e6:	2b01      	cmp	r3, #1
   b66e8:	dd71      	ble.n	b67ce <_strtod_l+0x8de>
   b66ea:	4629      	mov	r1, r5
   b66ec:	2201      	movs	r2, #1
   b66ee:	4620      	mov	r0, r4
   b66f0:	f001 f854 	bl	b779c <__lshift>
   b66f4:	4631      	mov	r1, r6
   b66f6:	4605      	mov	r5, r0
   b66f8:	f001 f8c0 	bl	b787c <__mcmp>
   b66fc:	2800      	cmp	r0, #0
   b66fe:	dd66      	ble.n	b67ce <_strtod_l+0x8de>
   b6700:	9904      	ldr	r1, [sp, #16]
   b6702:	4a53      	ldr	r2, [pc, #332]	; (b6850 <_strtod_l+0x960>)
   b6704:	465b      	mov	r3, fp
   b6706:	2900      	cmp	r1, #0
   b6708:	f000 8081 	beq.w	b680e <_strtod_l+0x91e>
   b670c:	ea02 010b 	and.w	r1, r2, fp
   b6710:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   b6714:	dc7b      	bgt.n	b680e <_strtod_l+0x91e>
   b6716:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   b671a:	f77f aea9 	ble.w	b6470 <_strtod_l+0x580>
   b671e:	4b4d      	ldr	r3, [pc, #308]	; (b6854 <_strtod_l+0x964>)
   b6720:	4650      	mov	r0, sl
   b6722:	4659      	mov	r1, fp
   b6724:	2200      	movs	r2, #0
   b6726:	f7ff f833 	bl	b5790 <__aeabi_dmul>
   b672a:	460b      	mov	r3, r1
   b672c:	4303      	orrs	r3, r0
   b672e:	bf08      	it	eq
   b6730:	2322      	moveq	r3, #34	; 0x22
   b6732:	4682      	mov	sl, r0
   b6734:	468b      	mov	fp, r1
   b6736:	bf08      	it	eq
   b6738:	6023      	streq	r3, [r4, #0]
   b673a:	e62b      	b.n	b6394 <_strtod_l+0x4a4>
   b673c:	f04f 32ff 	mov.w	r2, #4294967295
   b6740:	fa02 f303 	lsl.w	r3, r2, r3
   b6744:	ea03 0a0a 	and.w	sl, r3, sl
   b6748:	e6e3      	b.n	b6512 <_strtod_l+0x622>
   b674a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   b674e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   b6752:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   b6756:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   b675a:	fa01 f308 	lsl.w	r3, r1, r8
   b675e:	9308      	str	r3, [sp, #32]
   b6760:	910d      	str	r1, [sp, #52]	; 0x34
   b6762:	e746      	b.n	b65f2 <_strtod_l+0x702>
   b6764:	2300      	movs	r3, #0
   b6766:	9308      	str	r3, [sp, #32]
   b6768:	2301      	movs	r3, #1
   b676a:	930d      	str	r3, [sp, #52]	; 0x34
   b676c:	e741      	b.n	b65f2 <_strtod_l+0x702>
   b676e:	9918      	ldr	r1, [sp, #96]	; 0x60
   b6770:	4642      	mov	r2, r8
   b6772:	4620      	mov	r0, r4
   b6774:	f001 f812 	bl	b779c <__lshift>
   b6778:	9018      	str	r0, [sp, #96]	; 0x60
   b677a:	2800      	cmp	r0, #0
   b677c:	f47f af6b 	bne.w	b6656 <_strtod_l+0x766>
   b6780:	e5fe      	b.n	b6380 <_strtod_l+0x490>
   b6782:	465f      	mov	r7, fp
   b6784:	d16e      	bne.n	b6864 <_strtod_l+0x974>
   b6786:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b6788:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b678c:	b342      	cbz	r2, b67e0 <_strtod_l+0x8f0>
   b678e:	4a32      	ldr	r2, [pc, #200]	; (b6858 <_strtod_l+0x968>)
   b6790:	4293      	cmp	r3, r2
   b6792:	d128      	bne.n	b67e6 <_strtod_l+0x8f6>
   b6794:	9b04      	ldr	r3, [sp, #16]
   b6796:	4651      	mov	r1, sl
   b6798:	b1eb      	cbz	r3, b67d6 <_strtod_l+0x8e6>
   b679a:	4b2d      	ldr	r3, [pc, #180]	; (b6850 <_strtod_l+0x960>)
   b679c:	403b      	ands	r3, r7
   b679e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b67a2:	f04f 32ff 	mov.w	r2, #4294967295
   b67a6:	d819      	bhi.n	b67dc <_strtod_l+0x8ec>
   b67a8:	0d1b      	lsrs	r3, r3, #20
   b67aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b67ae:	fa02 f303 	lsl.w	r3, r2, r3
   b67b2:	4299      	cmp	r1, r3
   b67b4:	d117      	bne.n	b67e6 <_strtod_l+0x8f6>
   b67b6:	4b29      	ldr	r3, [pc, #164]	; (b685c <_strtod_l+0x96c>)
   b67b8:	429f      	cmp	r7, r3
   b67ba:	d102      	bne.n	b67c2 <_strtod_l+0x8d2>
   b67bc:	3101      	adds	r1, #1
   b67be:	f43f addf 	beq.w	b6380 <_strtod_l+0x490>
   b67c2:	4b23      	ldr	r3, [pc, #140]	; (b6850 <_strtod_l+0x960>)
   b67c4:	403b      	ands	r3, r7
   b67c6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   b67ca:	f04f 0a00 	mov.w	sl, #0
   b67ce:	9b04      	ldr	r3, [sp, #16]
   b67d0:	2b00      	cmp	r3, #0
   b67d2:	d1a4      	bne.n	b671e <_strtod_l+0x82e>
   b67d4:	e5de      	b.n	b6394 <_strtod_l+0x4a4>
   b67d6:	f04f 33ff 	mov.w	r3, #4294967295
   b67da:	e7ea      	b.n	b67b2 <_strtod_l+0x8c2>
   b67dc:	4613      	mov	r3, r2
   b67de:	e7e8      	b.n	b67b2 <_strtod_l+0x8c2>
   b67e0:	ea53 030a 	orrs.w	r3, r3, sl
   b67e4:	d08c      	beq.n	b6700 <_strtod_l+0x810>
   b67e6:	9b08      	ldr	r3, [sp, #32]
   b67e8:	b1db      	cbz	r3, b6822 <_strtod_l+0x932>
   b67ea:	423b      	tst	r3, r7
   b67ec:	d0ef      	beq.n	b67ce <_strtod_l+0x8de>
   b67ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b67f0:	9a04      	ldr	r2, [sp, #16]
   b67f2:	4650      	mov	r0, sl
   b67f4:	4659      	mov	r1, fp
   b67f6:	b1c3      	cbz	r3, b682a <_strtod_l+0x93a>
   b67f8:	f7ff fb5c 	bl	b5eb4 <sulp>
   b67fc:	4602      	mov	r2, r0
   b67fe:	460b      	mov	r3, r1
   b6800:	ec51 0b18 	vmov	r0, r1, d8
   b6804:	f7fe fe0e 	bl	b5424 <__adddf3>
   b6808:	4682      	mov	sl, r0
   b680a:	468b      	mov	fp, r1
   b680c:	e7df      	b.n	b67ce <_strtod_l+0x8de>
   b680e:	4013      	ands	r3, r2
   b6810:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   b6814:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   b6818:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   b681c:	f04f 3aff 	mov.w	sl, #4294967295
   b6820:	e7d5      	b.n	b67ce <_strtod_l+0x8de>
   b6822:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b6824:	ea13 0f0a 	tst.w	r3, sl
   b6828:	e7e0      	b.n	b67ec <_strtod_l+0x8fc>
   b682a:	f7ff fb43 	bl	b5eb4 <sulp>
   b682e:	4602      	mov	r2, r0
   b6830:	460b      	mov	r3, r1
   b6832:	ec51 0b18 	vmov	r0, r1, d8
   b6836:	f7fe fdf3 	bl	b5420 <__aeabi_dsub>
   b683a:	2200      	movs	r2, #0
   b683c:	2300      	movs	r3, #0
   b683e:	4682      	mov	sl, r0
   b6840:	468b      	mov	fp, r1
   b6842:	f7ff fa0d 	bl	b5c60 <__aeabi_dcmpeq>
   b6846:	2800      	cmp	r0, #0
   b6848:	d0c1      	beq.n	b67ce <_strtod_l+0x8de>
   b684a:	e611      	b.n	b6470 <_strtod_l+0x580>
   b684c:	fffffc02 	.word	0xfffffc02
   b6850:	7ff00000 	.word	0x7ff00000
   b6854:	39500000 	.word	0x39500000
   b6858:	000fffff 	.word	0x000fffff
   b685c:	7fefffff 	.word	0x7fefffff
   b6860:	000b7f50 	.word	0x000b7f50
   b6864:	4631      	mov	r1, r6
   b6866:	4628      	mov	r0, r5
   b6868:	f001 f986 	bl	b7b78 <__ratio>
   b686c:	ec59 8b10 	vmov	r8, r9, d0
   b6870:	ee10 0a10 	vmov	r0, s0
   b6874:	2200      	movs	r2, #0
   b6876:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b687a:	4649      	mov	r1, r9
   b687c:	f7ff fa04 	bl	b5c88 <__aeabi_dcmple>
   b6880:	2800      	cmp	r0, #0
   b6882:	d07a      	beq.n	b697a <_strtod_l+0xa8a>
   b6884:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b6886:	2b00      	cmp	r3, #0
   b6888:	d04a      	beq.n	b6920 <_strtod_l+0xa30>
   b688a:	4b95      	ldr	r3, [pc, #596]	; (b6ae0 <_strtod_l+0xbf0>)
   b688c:	2200      	movs	r2, #0
   b688e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b6892:	f8df 924c 	ldr.w	r9, [pc, #588]	; b6ae0 <_strtod_l+0xbf0>
   b6896:	f04f 0800 	mov.w	r8, #0
   b689a:	4b92      	ldr	r3, [pc, #584]	; (b6ae4 <_strtod_l+0xbf4>)
   b689c:	403b      	ands	r3, r7
   b689e:	930d      	str	r3, [sp, #52]	; 0x34
   b68a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b68a2:	4b91      	ldr	r3, [pc, #580]	; (b6ae8 <_strtod_l+0xbf8>)
   b68a4:	429a      	cmp	r2, r3
   b68a6:	f040 80b0 	bne.w	b6a0a <_strtod_l+0xb1a>
   b68aa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b68ae:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   b68b2:	ec4b ab10 	vmov	d0, sl, fp
   b68b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b68ba:	f001 f885 	bl	b79c8 <__ulp>
   b68be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b68c2:	ec53 2b10 	vmov	r2, r3, d0
   b68c6:	f7fe ff63 	bl	b5790 <__aeabi_dmul>
   b68ca:	4652      	mov	r2, sl
   b68cc:	465b      	mov	r3, fp
   b68ce:	f7fe fda9 	bl	b5424 <__adddf3>
   b68d2:	460b      	mov	r3, r1
   b68d4:	4983      	ldr	r1, [pc, #524]	; (b6ae4 <_strtod_l+0xbf4>)
   b68d6:	4a85      	ldr	r2, [pc, #532]	; (b6aec <_strtod_l+0xbfc>)
   b68d8:	4019      	ands	r1, r3
   b68da:	4291      	cmp	r1, r2
   b68dc:	4682      	mov	sl, r0
   b68de:	d960      	bls.n	b69a2 <_strtod_l+0xab2>
   b68e0:	ee18 3a90 	vmov	r3, s17
   b68e4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   b68e8:	4293      	cmp	r3, r2
   b68ea:	d104      	bne.n	b68f6 <_strtod_l+0xa06>
   b68ec:	ee18 3a10 	vmov	r3, s16
   b68f0:	3301      	adds	r3, #1
   b68f2:	f43f ad45 	beq.w	b6380 <_strtod_l+0x490>
   b68f6:	f8df b200 	ldr.w	fp, [pc, #512]	; b6af8 <_strtod_l+0xc08>
   b68fa:	f04f 3aff 	mov.w	sl, #4294967295
   b68fe:	9918      	ldr	r1, [sp, #96]	; 0x60
   b6900:	4620      	mov	r0, r4
   b6902:	f000 fd2f 	bl	b7364 <_Bfree>
   b6906:	9905      	ldr	r1, [sp, #20]
   b6908:	4620      	mov	r0, r4
   b690a:	f000 fd2b 	bl	b7364 <_Bfree>
   b690e:	4631      	mov	r1, r6
   b6910:	4620      	mov	r0, r4
   b6912:	f000 fd27 	bl	b7364 <_Bfree>
   b6916:	4629      	mov	r1, r5
   b6918:	4620      	mov	r0, r4
   b691a:	f000 fd23 	bl	b7364 <_Bfree>
   b691e:	e61a      	b.n	b6556 <_strtod_l+0x666>
   b6920:	f1ba 0f00 	cmp.w	sl, #0
   b6924:	d11b      	bne.n	b695e <_strtod_l+0xa6e>
   b6926:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b692a:	b9f3      	cbnz	r3, b696a <_strtod_l+0xa7a>
   b692c:	4b6c      	ldr	r3, [pc, #432]	; (b6ae0 <_strtod_l+0xbf0>)
   b692e:	2200      	movs	r2, #0
   b6930:	4640      	mov	r0, r8
   b6932:	4649      	mov	r1, r9
   b6934:	f7ff f99e 	bl	b5c74 <__aeabi_dcmplt>
   b6938:	b9d0      	cbnz	r0, b6970 <_strtod_l+0xa80>
   b693a:	4640      	mov	r0, r8
   b693c:	4649      	mov	r1, r9
   b693e:	4b6c      	ldr	r3, [pc, #432]	; (b6af0 <_strtod_l+0xc00>)
   b6940:	2200      	movs	r2, #0
   b6942:	f7fe ff25 	bl	b5790 <__aeabi_dmul>
   b6946:	4680      	mov	r8, r0
   b6948:	4689      	mov	r9, r1
   b694a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   b694e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   b6952:	9315      	str	r3, [sp, #84]	; 0x54
   b6954:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   b6958:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b695c:	e79d      	b.n	b689a <_strtod_l+0x9aa>
   b695e:	f1ba 0f01 	cmp.w	sl, #1
   b6962:	d102      	bne.n	b696a <_strtod_l+0xa7a>
   b6964:	2f00      	cmp	r7, #0
   b6966:	f43f ad83 	beq.w	b6470 <_strtod_l+0x580>
   b696a:	4b62      	ldr	r3, [pc, #392]	; (b6af4 <_strtod_l+0xc04>)
   b696c:	2200      	movs	r2, #0
   b696e:	e78e      	b.n	b688e <_strtod_l+0x99e>
   b6970:	f8df 917c 	ldr.w	r9, [pc, #380]	; b6af0 <_strtod_l+0xc00>
   b6974:	f04f 0800 	mov.w	r8, #0
   b6978:	e7e7      	b.n	b694a <_strtod_l+0xa5a>
   b697a:	4b5d      	ldr	r3, [pc, #372]	; (b6af0 <_strtod_l+0xc00>)
   b697c:	4640      	mov	r0, r8
   b697e:	4649      	mov	r1, r9
   b6980:	2200      	movs	r2, #0
   b6982:	f7fe ff05 	bl	b5790 <__aeabi_dmul>
   b6986:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b6988:	4680      	mov	r8, r0
   b698a:	4689      	mov	r9, r1
   b698c:	b933      	cbnz	r3, b699c <_strtod_l+0xaac>
   b698e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b6992:	900e      	str	r0, [sp, #56]	; 0x38
   b6994:	930f      	str	r3, [sp, #60]	; 0x3c
   b6996:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   b699a:	e7dd      	b.n	b6958 <_strtod_l+0xa68>
   b699c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   b69a0:	e7f9      	b.n	b6996 <_strtod_l+0xaa6>
   b69a2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   b69a6:	9b04      	ldr	r3, [sp, #16]
   b69a8:	2b00      	cmp	r3, #0
   b69aa:	d1a8      	bne.n	b68fe <_strtod_l+0xa0e>
   b69ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b69b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b69b2:	0d1b      	lsrs	r3, r3, #20
   b69b4:	051b      	lsls	r3, r3, #20
   b69b6:	429a      	cmp	r2, r3
   b69b8:	d1a1      	bne.n	b68fe <_strtod_l+0xa0e>
   b69ba:	4640      	mov	r0, r8
   b69bc:	4649      	mov	r1, r9
   b69be:	f001 f979 	bl	b7cb4 <__aeabi_d2lz>
   b69c2:	f7fe feb7 	bl	b5734 <__aeabi_l2d>
   b69c6:	4602      	mov	r2, r0
   b69c8:	460b      	mov	r3, r1
   b69ca:	4640      	mov	r0, r8
   b69cc:	4649      	mov	r1, r9
   b69ce:	f7fe fd27 	bl	b5420 <__aeabi_dsub>
   b69d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b69d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b69d8:	ea43 030a 	orr.w	r3, r3, sl
   b69dc:	4313      	orrs	r3, r2
   b69de:	4680      	mov	r8, r0
   b69e0:	4689      	mov	r9, r1
   b69e2:	d055      	beq.n	b6a90 <_strtod_l+0xba0>
   b69e4:	a336      	add	r3, pc, #216	; (adr r3, b6ac0 <_strtod_l+0xbd0>)
   b69e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b69ea:	f7ff f943 	bl	b5c74 <__aeabi_dcmplt>
   b69ee:	2800      	cmp	r0, #0
   b69f0:	f47f acd0 	bne.w	b6394 <_strtod_l+0x4a4>
   b69f4:	a334      	add	r3, pc, #208	; (adr r3, b6ac8 <_strtod_l+0xbd8>)
   b69f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b69fa:	4640      	mov	r0, r8
   b69fc:	4649      	mov	r1, r9
   b69fe:	f7ff f957 	bl	b5cb0 <__aeabi_dcmpgt>
   b6a02:	2800      	cmp	r0, #0
   b6a04:	f43f af7b 	beq.w	b68fe <_strtod_l+0xa0e>
   b6a08:	e4c4      	b.n	b6394 <_strtod_l+0x4a4>
   b6a0a:	9b04      	ldr	r3, [sp, #16]
   b6a0c:	b333      	cbz	r3, b6a5c <_strtod_l+0xb6c>
   b6a0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b6a10:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b6a14:	d822      	bhi.n	b6a5c <_strtod_l+0xb6c>
   b6a16:	a32e      	add	r3, pc, #184	; (adr r3, b6ad0 <_strtod_l+0xbe0>)
   b6a18:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6a1c:	4640      	mov	r0, r8
   b6a1e:	4649      	mov	r1, r9
   b6a20:	f7ff f932 	bl	b5c88 <__aeabi_dcmple>
   b6a24:	b1a0      	cbz	r0, b6a50 <_strtod_l+0xb60>
   b6a26:	4649      	mov	r1, r9
   b6a28:	4640      	mov	r0, r8
   b6a2a:	f7ff f94b 	bl	b5cc4 <__aeabi_d2uiz>
   b6a2e:	2801      	cmp	r0, #1
   b6a30:	bf38      	it	cc
   b6a32:	2001      	movcc	r0, #1
   b6a34:	f7fe fe32 	bl	b569c <__aeabi_ui2d>
   b6a38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b6a3a:	4680      	mov	r8, r0
   b6a3c:	4689      	mov	r9, r1
   b6a3e:	bb23      	cbnz	r3, b6a8a <_strtod_l+0xb9a>
   b6a40:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b6a44:	9010      	str	r0, [sp, #64]	; 0x40
   b6a46:	9311      	str	r3, [sp, #68]	; 0x44
   b6a48:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   b6a4c:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b6a50:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b6a52:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b6a54:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   b6a58:	1a9b      	subs	r3, r3, r2
   b6a5a:	9309      	str	r3, [sp, #36]	; 0x24
   b6a5c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b6a60:	eeb0 0a48 	vmov.f32	s0, s16
   b6a64:	eef0 0a68 	vmov.f32	s1, s17
   b6a68:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b6a6c:	f000 ffac 	bl	b79c8 <__ulp>
   b6a70:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b6a74:	ec53 2b10 	vmov	r2, r3, d0
   b6a78:	f7fe fe8a 	bl	b5790 <__aeabi_dmul>
   b6a7c:	ec53 2b18 	vmov	r2, r3, d8
   b6a80:	f7fe fcd0 	bl	b5424 <__adddf3>
   b6a84:	4682      	mov	sl, r0
   b6a86:	468b      	mov	fp, r1
   b6a88:	e78d      	b.n	b69a6 <_strtod_l+0xab6>
   b6a8a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   b6a8e:	e7db      	b.n	b6a48 <_strtod_l+0xb58>
   b6a90:	a311      	add	r3, pc, #68	; (adr r3, b6ad8 <_strtod_l+0xbe8>)
   b6a92:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6a96:	f7ff f8ed 	bl	b5c74 <__aeabi_dcmplt>
   b6a9a:	e7b2      	b.n	b6a02 <_strtod_l+0xb12>
   b6a9c:	2300      	movs	r3, #0
   b6a9e:	930a      	str	r3, [sp, #40]	; 0x28
   b6aa0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   b6aa2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b6aa4:	6013      	str	r3, [r2, #0]
   b6aa6:	f7ff ba6b 	b.w	b5f80 <_strtod_l+0x90>
   b6aaa:	2a65      	cmp	r2, #101	; 0x65
   b6aac:	f43f ab5f 	beq.w	b616e <_strtod_l+0x27e>
   b6ab0:	2a45      	cmp	r2, #69	; 0x45
   b6ab2:	f43f ab5c 	beq.w	b616e <_strtod_l+0x27e>
   b6ab6:	2301      	movs	r3, #1
   b6ab8:	f7ff bb94 	b.w	b61e4 <_strtod_l+0x2f4>
   b6abc:	f3af 8000 	nop.w
   b6ac0:	94a03595 	.word	0x94a03595
   b6ac4:	3fdfffff 	.word	0x3fdfffff
   b6ac8:	35afe535 	.word	0x35afe535
   b6acc:	3fe00000 	.word	0x3fe00000
   b6ad0:	ffc00000 	.word	0xffc00000
   b6ad4:	41dfffff 	.word	0x41dfffff
   b6ad8:	94a03595 	.word	0x94a03595
   b6adc:	3fcfffff 	.word	0x3fcfffff
   b6ae0:	3ff00000 	.word	0x3ff00000
   b6ae4:	7ff00000 	.word	0x7ff00000
   b6ae8:	7fe00000 	.word	0x7fe00000
   b6aec:	7c9fffff 	.word	0x7c9fffff
   b6af0:	3fe00000 	.word	0x3fe00000
   b6af4:	bff00000 	.word	0xbff00000
   b6af8:	7fefffff 	.word	0x7fefffff

000b6afc <strtod>:
   b6afc:	460a      	mov	r2, r1
   b6afe:	4601      	mov	r1, r0
   b6b00:	4802      	ldr	r0, [pc, #8]	; (b6b0c <strtod+0x10>)
   b6b02:	4b03      	ldr	r3, [pc, #12]	; (b6b10 <strtod+0x14>)
   b6b04:	6800      	ldr	r0, [r0, #0]
   b6b06:	f7ff b9f3 	b.w	b5ef0 <_strtod_l>
   b6b0a:	bf00      	nop
   b6b0c:	2003e4b0 	.word	0x2003e4b0
   b6b10:	2003e51c 	.word	0x2003e51c

000b6b14 <__register_exitproc>:
   b6b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6b18:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b6bd4 <__register_exitproc+0xc0>
   b6b1c:	4606      	mov	r6, r0
   b6b1e:	f8d8 0000 	ldr.w	r0, [r8]
   b6b22:	461f      	mov	r7, r3
   b6b24:	460d      	mov	r5, r1
   b6b26:	4691      	mov	r9, r2
   b6b28:	f000 fbc6 	bl	b72b8 <__retarget_lock_acquire_recursive>
   b6b2c:	4b25      	ldr	r3, [pc, #148]	; (b6bc4 <__register_exitproc+0xb0>)
   b6b2e:	681c      	ldr	r4, [r3, #0]
   b6b30:	b934      	cbnz	r4, b6b40 <__register_exitproc+0x2c>
   b6b32:	4c25      	ldr	r4, [pc, #148]	; (b6bc8 <__register_exitproc+0xb4>)
   b6b34:	601c      	str	r4, [r3, #0]
   b6b36:	4b25      	ldr	r3, [pc, #148]	; (b6bcc <__register_exitproc+0xb8>)
   b6b38:	b113      	cbz	r3, b6b40 <__register_exitproc+0x2c>
   b6b3a:	681b      	ldr	r3, [r3, #0]
   b6b3c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b6b40:	6863      	ldr	r3, [r4, #4]
   b6b42:	2b1f      	cmp	r3, #31
   b6b44:	dd07      	ble.n	b6b56 <__register_exitproc+0x42>
   b6b46:	f8d8 0000 	ldr.w	r0, [r8]
   b6b4a:	f000 fbb7 	bl	b72bc <__retarget_lock_release_recursive>
   b6b4e:	f04f 30ff 	mov.w	r0, #4294967295
   b6b52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6b56:	b34e      	cbz	r6, b6bac <__register_exitproc+0x98>
   b6b58:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b6b5c:	b988      	cbnz	r0, b6b82 <__register_exitproc+0x6e>
   b6b5e:	4b1c      	ldr	r3, [pc, #112]	; (b6bd0 <__register_exitproc+0xbc>)
   b6b60:	b923      	cbnz	r3, b6b6c <__register_exitproc+0x58>
   b6b62:	f8d8 0000 	ldr.w	r0, [r8]
   b6b66:	f000 fba8 	bl	b72ba <__retarget_lock_release>
   b6b6a:	e7f0      	b.n	b6b4e <__register_exitproc+0x3a>
   b6b6c:	f44f 7084 	mov.w	r0, #264	; 0x108
   b6b70:	f7fd ff4c 	bl	b4a0c <malloc>
   b6b74:	2800      	cmp	r0, #0
   b6b76:	d0f4      	beq.n	b6b62 <__register_exitproc+0x4e>
   b6b78:	2300      	movs	r3, #0
   b6b7a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b6b7e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b6b82:	6863      	ldr	r3, [r4, #4]
   b6b84:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b6b88:	2201      	movs	r2, #1
   b6b8a:	409a      	lsls	r2, r3
   b6b8c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b6b90:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b6b94:	4313      	orrs	r3, r2
   b6b96:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b6b9a:	2e02      	cmp	r6, #2
   b6b9c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b6ba0:	bf02      	ittt	eq
   b6ba2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b6ba6:	4313      	orreq	r3, r2
   b6ba8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b6bac:	6863      	ldr	r3, [r4, #4]
   b6bae:	f8d8 0000 	ldr.w	r0, [r8]
   b6bb2:	1c5a      	adds	r2, r3, #1
   b6bb4:	3302      	adds	r3, #2
   b6bb6:	6062      	str	r2, [r4, #4]
   b6bb8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b6bbc:	f000 fb7e 	bl	b72bc <__retarget_lock_release_recursive>
   b6bc0:	2000      	movs	r0, #0
   b6bc2:	e7c6      	b.n	b6b52 <__register_exitproc+0x3e>
   b6bc4:	2003e7e8 	.word	0x2003e7e8
   b6bc8:	2003e75c 	.word	0x2003e75c
   b6bcc:	00000000 	.word	0x00000000
   b6bd0:	000b4a0d 	.word	0x000b4a0d
   b6bd4:	2003e514 	.word	0x2003e514

000b6bd8 <rshift>:
   b6bd8:	6903      	ldr	r3, [r0, #16]
   b6bda:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   b6bde:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6be2:	ea4f 1261 	mov.w	r2, r1, asr #5
   b6be6:	f100 0414 	add.w	r4, r0, #20
   b6bea:	dd45      	ble.n	b6c78 <rshift+0xa0>
   b6bec:	f011 011f 	ands.w	r1, r1, #31
   b6bf0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   b6bf4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   b6bf8:	d10c      	bne.n	b6c14 <rshift+0x3c>
   b6bfa:	f100 0710 	add.w	r7, r0, #16
   b6bfe:	4629      	mov	r1, r5
   b6c00:	42b1      	cmp	r1, r6
   b6c02:	d334      	bcc.n	b6c6e <rshift+0x96>
   b6c04:	1a9b      	subs	r3, r3, r2
   b6c06:	009b      	lsls	r3, r3, #2
   b6c08:	1eea      	subs	r2, r5, #3
   b6c0a:	4296      	cmp	r6, r2
   b6c0c:	bf38      	it	cc
   b6c0e:	2300      	movcc	r3, #0
   b6c10:	4423      	add	r3, r4
   b6c12:	e015      	b.n	b6c40 <rshift+0x68>
   b6c14:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   b6c18:	f1c1 0820 	rsb	r8, r1, #32
   b6c1c:	40cf      	lsrs	r7, r1
   b6c1e:	f105 0e04 	add.w	lr, r5, #4
   b6c22:	46a1      	mov	r9, r4
   b6c24:	4576      	cmp	r6, lr
   b6c26:	46f4      	mov	ip, lr
   b6c28:	d815      	bhi.n	b6c56 <rshift+0x7e>
   b6c2a:	1a9a      	subs	r2, r3, r2
   b6c2c:	0092      	lsls	r2, r2, #2
   b6c2e:	3a04      	subs	r2, #4
   b6c30:	3501      	adds	r5, #1
   b6c32:	42ae      	cmp	r6, r5
   b6c34:	bf38      	it	cc
   b6c36:	2200      	movcc	r2, #0
   b6c38:	18a3      	adds	r3, r4, r2
   b6c3a:	50a7      	str	r7, [r4, r2]
   b6c3c:	b107      	cbz	r7, b6c40 <rshift+0x68>
   b6c3e:	3304      	adds	r3, #4
   b6c40:	1b1a      	subs	r2, r3, r4
   b6c42:	42a3      	cmp	r3, r4
   b6c44:	ea4f 02a2 	mov.w	r2, r2, asr #2
   b6c48:	bf08      	it	eq
   b6c4a:	2300      	moveq	r3, #0
   b6c4c:	6102      	str	r2, [r0, #16]
   b6c4e:	bf08      	it	eq
   b6c50:	6143      	streq	r3, [r0, #20]
   b6c52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b6c56:	f8dc c000 	ldr.w	ip, [ip]
   b6c5a:	fa0c fc08 	lsl.w	ip, ip, r8
   b6c5e:	ea4c 0707 	orr.w	r7, ip, r7
   b6c62:	f849 7b04 	str.w	r7, [r9], #4
   b6c66:	f85e 7b04 	ldr.w	r7, [lr], #4
   b6c6a:	40cf      	lsrs	r7, r1
   b6c6c:	e7da      	b.n	b6c24 <rshift+0x4c>
   b6c6e:	f851 cb04 	ldr.w	ip, [r1], #4
   b6c72:	f847 cf04 	str.w	ip, [r7, #4]!
   b6c76:	e7c3      	b.n	b6c00 <rshift+0x28>
   b6c78:	4623      	mov	r3, r4
   b6c7a:	e7e1      	b.n	b6c40 <rshift+0x68>

000b6c7c <__hexdig_fun>:
   b6c7c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b6c80:	2b09      	cmp	r3, #9
   b6c82:	d802      	bhi.n	b6c8a <__hexdig_fun+0xe>
   b6c84:	3820      	subs	r0, #32
   b6c86:	b2c0      	uxtb	r0, r0
   b6c88:	4770      	bx	lr
   b6c8a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b6c8e:	2b05      	cmp	r3, #5
   b6c90:	d801      	bhi.n	b6c96 <__hexdig_fun+0x1a>
   b6c92:	3847      	subs	r0, #71	; 0x47
   b6c94:	e7f7      	b.n	b6c86 <__hexdig_fun+0xa>
   b6c96:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b6c9a:	2b05      	cmp	r3, #5
   b6c9c:	d801      	bhi.n	b6ca2 <__hexdig_fun+0x26>
   b6c9e:	3827      	subs	r0, #39	; 0x27
   b6ca0:	e7f1      	b.n	b6c86 <__hexdig_fun+0xa>
   b6ca2:	2000      	movs	r0, #0
   b6ca4:	4770      	bx	lr
	...

000b6ca8 <__gethex>:
   b6ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6cac:	ed2d 8b02 	vpush	{d8}
   b6cb0:	b089      	sub	sp, #36	; 0x24
   b6cb2:	ee08 0a10 	vmov	s16, r0
   b6cb6:	9304      	str	r3, [sp, #16]
   b6cb8:	4bb4      	ldr	r3, [pc, #720]	; (b6f8c <__gethex+0x2e4>)
   b6cba:	681b      	ldr	r3, [r3, #0]
   b6cbc:	9301      	str	r3, [sp, #4]
   b6cbe:	4618      	mov	r0, r3
   b6cc0:	468b      	mov	fp, r1
   b6cc2:	4690      	mov	r8, r2
   b6cc4:	f7ff f8da 	bl	b5e7c <strlen>
   b6cc8:	9b01      	ldr	r3, [sp, #4]
   b6cca:	f8db 2000 	ldr.w	r2, [fp]
   b6cce:	4403      	add	r3, r0
   b6cd0:	4682      	mov	sl, r0
   b6cd2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b6cd6:	9305      	str	r3, [sp, #20]
   b6cd8:	1c93      	adds	r3, r2, #2
   b6cda:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   b6cde:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   b6ce2:	32fe      	adds	r2, #254	; 0xfe
   b6ce4:	18d1      	adds	r1, r2, r3
   b6ce6:	461f      	mov	r7, r3
   b6ce8:	f813 0b01 	ldrb.w	r0, [r3], #1
   b6cec:	9100      	str	r1, [sp, #0]
   b6cee:	2830      	cmp	r0, #48	; 0x30
   b6cf0:	d0f8      	beq.n	b6ce4 <__gethex+0x3c>
   b6cf2:	f7ff ffc3 	bl	b6c7c <__hexdig_fun>
   b6cf6:	4604      	mov	r4, r0
   b6cf8:	2800      	cmp	r0, #0
   b6cfa:	d13a      	bne.n	b6d72 <__gethex+0xca>
   b6cfc:	9901      	ldr	r1, [sp, #4]
   b6cfe:	4652      	mov	r2, sl
   b6d00:	4638      	mov	r0, r7
   b6d02:	f7ff f8c3 	bl	b5e8c <strncmp>
   b6d06:	4605      	mov	r5, r0
   b6d08:	2800      	cmp	r0, #0
   b6d0a:	d168      	bne.n	b6dde <__gethex+0x136>
   b6d0c:	f817 000a 	ldrb.w	r0, [r7, sl]
   b6d10:	eb07 060a 	add.w	r6, r7, sl
   b6d14:	f7ff ffb2 	bl	b6c7c <__hexdig_fun>
   b6d18:	2800      	cmp	r0, #0
   b6d1a:	d062      	beq.n	b6de2 <__gethex+0x13a>
   b6d1c:	4633      	mov	r3, r6
   b6d1e:	7818      	ldrb	r0, [r3, #0]
   b6d20:	2830      	cmp	r0, #48	; 0x30
   b6d22:	461f      	mov	r7, r3
   b6d24:	f103 0301 	add.w	r3, r3, #1
   b6d28:	d0f9      	beq.n	b6d1e <__gethex+0x76>
   b6d2a:	f7ff ffa7 	bl	b6c7c <__hexdig_fun>
   b6d2e:	2301      	movs	r3, #1
   b6d30:	fab0 f480 	clz	r4, r0
   b6d34:	0964      	lsrs	r4, r4, #5
   b6d36:	4635      	mov	r5, r6
   b6d38:	9300      	str	r3, [sp, #0]
   b6d3a:	463a      	mov	r2, r7
   b6d3c:	4616      	mov	r6, r2
   b6d3e:	3201      	adds	r2, #1
   b6d40:	7830      	ldrb	r0, [r6, #0]
   b6d42:	f7ff ff9b 	bl	b6c7c <__hexdig_fun>
   b6d46:	2800      	cmp	r0, #0
   b6d48:	d1f8      	bne.n	b6d3c <__gethex+0x94>
   b6d4a:	9901      	ldr	r1, [sp, #4]
   b6d4c:	4652      	mov	r2, sl
   b6d4e:	4630      	mov	r0, r6
   b6d50:	f7ff f89c 	bl	b5e8c <strncmp>
   b6d54:	b980      	cbnz	r0, b6d78 <__gethex+0xd0>
   b6d56:	b94d      	cbnz	r5, b6d6c <__gethex+0xc4>
   b6d58:	eb06 050a 	add.w	r5, r6, sl
   b6d5c:	462a      	mov	r2, r5
   b6d5e:	4616      	mov	r6, r2
   b6d60:	3201      	adds	r2, #1
   b6d62:	7830      	ldrb	r0, [r6, #0]
   b6d64:	f7ff ff8a 	bl	b6c7c <__hexdig_fun>
   b6d68:	2800      	cmp	r0, #0
   b6d6a:	d1f8      	bne.n	b6d5e <__gethex+0xb6>
   b6d6c:	1bad      	subs	r5, r5, r6
   b6d6e:	00ad      	lsls	r5, r5, #2
   b6d70:	e004      	b.n	b6d7c <__gethex+0xd4>
   b6d72:	2400      	movs	r4, #0
   b6d74:	4625      	mov	r5, r4
   b6d76:	e7e0      	b.n	b6d3a <__gethex+0x92>
   b6d78:	2d00      	cmp	r5, #0
   b6d7a:	d1f7      	bne.n	b6d6c <__gethex+0xc4>
   b6d7c:	7833      	ldrb	r3, [r6, #0]
   b6d7e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b6d82:	2b50      	cmp	r3, #80	; 0x50
   b6d84:	d13b      	bne.n	b6dfe <__gethex+0x156>
   b6d86:	7873      	ldrb	r3, [r6, #1]
   b6d88:	2b2b      	cmp	r3, #43	; 0x2b
   b6d8a:	d02c      	beq.n	b6de6 <__gethex+0x13e>
   b6d8c:	2b2d      	cmp	r3, #45	; 0x2d
   b6d8e:	d02e      	beq.n	b6dee <__gethex+0x146>
   b6d90:	1c71      	adds	r1, r6, #1
   b6d92:	f04f 0900 	mov.w	r9, #0
   b6d96:	7808      	ldrb	r0, [r1, #0]
   b6d98:	f7ff ff70 	bl	b6c7c <__hexdig_fun>
   b6d9c:	1e43      	subs	r3, r0, #1
   b6d9e:	b2db      	uxtb	r3, r3
   b6da0:	2b18      	cmp	r3, #24
   b6da2:	d82c      	bhi.n	b6dfe <__gethex+0x156>
   b6da4:	f1a0 0210 	sub.w	r2, r0, #16
   b6da8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   b6dac:	f7ff ff66 	bl	b6c7c <__hexdig_fun>
   b6db0:	1e43      	subs	r3, r0, #1
   b6db2:	b2db      	uxtb	r3, r3
   b6db4:	2b18      	cmp	r3, #24
   b6db6:	d91d      	bls.n	b6df4 <__gethex+0x14c>
   b6db8:	f1b9 0f00 	cmp.w	r9, #0
   b6dbc:	d000      	beq.n	b6dc0 <__gethex+0x118>
   b6dbe:	4252      	negs	r2, r2
   b6dc0:	4415      	add	r5, r2
   b6dc2:	f8cb 1000 	str.w	r1, [fp]
   b6dc6:	b1e4      	cbz	r4, b6e02 <__gethex+0x15a>
   b6dc8:	9b00      	ldr	r3, [sp, #0]
   b6dca:	2b00      	cmp	r3, #0
   b6dcc:	bf14      	ite	ne
   b6dce:	2700      	movne	r7, #0
   b6dd0:	2706      	moveq	r7, #6
   b6dd2:	4638      	mov	r0, r7
   b6dd4:	b009      	add	sp, #36	; 0x24
   b6dd6:	ecbd 8b02 	vpop	{d8}
   b6dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6dde:	463e      	mov	r6, r7
   b6de0:	4625      	mov	r5, r4
   b6de2:	2401      	movs	r4, #1
   b6de4:	e7ca      	b.n	b6d7c <__gethex+0xd4>
   b6de6:	f04f 0900 	mov.w	r9, #0
   b6dea:	1cb1      	adds	r1, r6, #2
   b6dec:	e7d3      	b.n	b6d96 <__gethex+0xee>
   b6dee:	f04f 0901 	mov.w	r9, #1
   b6df2:	e7fa      	b.n	b6dea <__gethex+0x142>
   b6df4:	230a      	movs	r3, #10
   b6df6:	fb03 0202 	mla	r2, r3, r2, r0
   b6dfa:	3a10      	subs	r2, #16
   b6dfc:	e7d4      	b.n	b6da8 <__gethex+0x100>
   b6dfe:	4631      	mov	r1, r6
   b6e00:	e7df      	b.n	b6dc2 <__gethex+0x11a>
   b6e02:	1bf3      	subs	r3, r6, r7
   b6e04:	3b01      	subs	r3, #1
   b6e06:	4621      	mov	r1, r4
   b6e08:	2b07      	cmp	r3, #7
   b6e0a:	dc0b      	bgt.n	b6e24 <__gethex+0x17c>
   b6e0c:	ee18 0a10 	vmov	r0, s16
   b6e10:	f000 fa68 	bl	b72e4 <_Balloc>
   b6e14:	4604      	mov	r4, r0
   b6e16:	b940      	cbnz	r0, b6e2a <__gethex+0x182>
   b6e18:	4b5d      	ldr	r3, [pc, #372]	; (b6f90 <__gethex+0x2e8>)
   b6e1a:	4602      	mov	r2, r0
   b6e1c:	21de      	movs	r1, #222	; 0xde
   b6e1e:	485d      	ldr	r0, [pc, #372]	; (b6f94 <__gethex+0x2ec>)
   b6e20:	f7fd fe0c 	bl	b4a3c <__assert_func>
   b6e24:	3101      	adds	r1, #1
   b6e26:	105b      	asrs	r3, r3, #1
   b6e28:	e7ee      	b.n	b6e08 <__gethex+0x160>
   b6e2a:	f100 0914 	add.w	r9, r0, #20
   b6e2e:	f04f 0b00 	mov.w	fp, #0
   b6e32:	f1ca 0301 	rsb	r3, sl, #1
   b6e36:	f8cd 9008 	str.w	r9, [sp, #8]
   b6e3a:	f8cd b000 	str.w	fp, [sp]
   b6e3e:	9306      	str	r3, [sp, #24]
   b6e40:	42b7      	cmp	r7, r6
   b6e42:	d340      	bcc.n	b6ec6 <__gethex+0x21e>
   b6e44:	9802      	ldr	r0, [sp, #8]
   b6e46:	9b00      	ldr	r3, [sp, #0]
   b6e48:	f840 3b04 	str.w	r3, [r0], #4
   b6e4c:	eba0 0009 	sub.w	r0, r0, r9
   b6e50:	1080      	asrs	r0, r0, #2
   b6e52:	0146      	lsls	r6, r0, #5
   b6e54:	6120      	str	r0, [r4, #16]
   b6e56:	4618      	mov	r0, r3
   b6e58:	f000 fb36 	bl	b74c8 <__hi0bits>
   b6e5c:	1a30      	subs	r0, r6, r0
   b6e5e:	f8d8 6000 	ldr.w	r6, [r8]
   b6e62:	42b0      	cmp	r0, r6
   b6e64:	dd63      	ble.n	b6f2e <__gethex+0x286>
   b6e66:	1b87      	subs	r7, r0, r6
   b6e68:	4639      	mov	r1, r7
   b6e6a:	4620      	mov	r0, r4
   b6e6c:	f000 feda 	bl	b7c24 <__any_on>
   b6e70:	4682      	mov	sl, r0
   b6e72:	b1a8      	cbz	r0, b6ea0 <__gethex+0x1f8>
   b6e74:	1e7b      	subs	r3, r7, #1
   b6e76:	1159      	asrs	r1, r3, #5
   b6e78:	f003 021f 	and.w	r2, r3, #31
   b6e7c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   b6e80:	f04f 0a01 	mov.w	sl, #1
   b6e84:	fa0a f202 	lsl.w	r2, sl, r2
   b6e88:	420a      	tst	r2, r1
   b6e8a:	d009      	beq.n	b6ea0 <__gethex+0x1f8>
   b6e8c:	4553      	cmp	r3, sl
   b6e8e:	dd05      	ble.n	b6e9c <__gethex+0x1f4>
   b6e90:	1eb9      	subs	r1, r7, #2
   b6e92:	4620      	mov	r0, r4
   b6e94:	f000 fec6 	bl	b7c24 <__any_on>
   b6e98:	2800      	cmp	r0, #0
   b6e9a:	d145      	bne.n	b6f28 <__gethex+0x280>
   b6e9c:	f04f 0a02 	mov.w	sl, #2
   b6ea0:	4639      	mov	r1, r7
   b6ea2:	4620      	mov	r0, r4
   b6ea4:	f7ff fe98 	bl	b6bd8 <rshift>
   b6ea8:	443d      	add	r5, r7
   b6eaa:	f8d8 3008 	ldr.w	r3, [r8, #8]
   b6eae:	42ab      	cmp	r3, r5
   b6eb0:	da4c      	bge.n	b6f4c <__gethex+0x2a4>
   b6eb2:	ee18 0a10 	vmov	r0, s16
   b6eb6:	4621      	mov	r1, r4
   b6eb8:	f000 fa54 	bl	b7364 <_Bfree>
   b6ebc:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b6ebe:	2300      	movs	r3, #0
   b6ec0:	6013      	str	r3, [r2, #0]
   b6ec2:	27a3      	movs	r7, #163	; 0xa3
   b6ec4:	e785      	b.n	b6dd2 <__gethex+0x12a>
   b6ec6:	1e73      	subs	r3, r6, #1
   b6ec8:	9a05      	ldr	r2, [sp, #20]
   b6eca:	9303      	str	r3, [sp, #12]
   b6ecc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   b6ed0:	4293      	cmp	r3, r2
   b6ed2:	d019      	beq.n	b6f08 <__gethex+0x260>
   b6ed4:	f1bb 0f20 	cmp.w	fp, #32
   b6ed8:	d107      	bne.n	b6eea <__gethex+0x242>
   b6eda:	9b02      	ldr	r3, [sp, #8]
   b6edc:	9a00      	ldr	r2, [sp, #0]
   b6ede:	f843 2b04 	str.w	r2, [r3], #4
   b6ee2:	9302      	str	r3, [sp, #8]
   b6ee4:	2300      	movs	r3, #0
   b6ee6:	9300      	str	r3, [sp, #0]
   b6ee8:	469b      	mov	fp, r3
   b6eea:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   b6eee:	f7ff fec5 	bl	b6c7c <__hexdig_fun>
   b6ef2:	9b00      	ldr	r3, [sp, #0]
   b6ef4:	f000 000f 	and.w	r0, r0, #15
   b6ef8:	fa00 f00b 	lsl.w	r0, r0, fp
   b6efc:	4303      	orrs	r3, r0
   b6efe:	9300      	str	r3, [sp, #0]
   b6f00:	f10b 0b04 	add.w	fp, fp, #4
   b6f04:	9b03      	ldr	r3, [sp, #12]
   b6f06:	e00d      	b.n	b6f24 <__gethex+0x27c>
   b6f08:	9b03      	ldr	r3, [sp, #12]
   b6f0a:	9a06      	ldr	r2, [sp, #24]
   b6f0c:	4413      	add	r3, r2
   b6f0e:	42bb      	cmp	r3, r7
   b6f10:	d3e0      	bcc.n	b6ed4 <__gethex+0x22c>
   b6f12:	4618      	mov	r0, r3
   b6f14:	9901      	ldr	r1, [sp, #4]
   b6f16:	9307      	str	r3, [sp, #28]
   b6f18:	4652      	mov	r2, sl
   b6f1a:	f7fe ffb7 	bl	b5e8c <strncmp>
   b6f1e:	9b07      	ldr	r3, [sp, #28]
   b6f20:	2800      	cmp	r0, #0
   b6f22:	d1d7      	bne.n	b6ed4 <__gethex+0x22c>
   b6f24:	461e      	mov	r6, r3
   b6f26:	e78b      	b.n	b6e40 <__gethex+0x198>
   b6f28:	f04f 0a03 	mov.w	sl, #3
   b6f2c:	e7b8      	b.n	b6ea0 <__gethex+0x1f8>
   b6f2e:	da0a      	bge.n	b6f46 <__gethex+0x29e>
   b6f30:	1a37      	subs	r7, r6, r0
   b6f32:	4621      	mov	r1, r4
   b6f34:	ee18 0a10 	vmov	r0, s16
   b6f38:	463a      	mov	r2, r7
   b6f3a:	f000 fc2f 	bl	b779c <__lshift>
   b6f3e:	1bed      	subs	r5, r5, r7
   b6f40:	4604      	mov	r4, r0
   b6f42:	f100 0914 	add.w	r9, r0, #20
   b6f46:	f04f 0a00 	mov.w	sl, #0
   b6f4a:	e7ae      	b.n	b6eaa <__gethex+0x202>
   b6f4c:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b6f50:	42a8      	cmp	r0, r5
   b6f52:	dd72      	ble.n	b703a <__gethex+0x392>
   b6f54:	1b45      	subs	r5, r0, r5
   b6f56:	42ae      	cmp	r6, r5
   b6f58:	dc36      	bgt.n	b6fc8 <__gethex+0x320>
   b6f5a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   b6f5e:	2b02      	cmp	r3, #2
   b6f60:	d02a      	beq.n	b6fb8 <__gethex+0x310>
   b6f62:	2b03      	cmp	r3, #3
   b6f64:	d02c      	beq.n	b6fc0 <__gethex+0x318>
   b6f66:	2b01      	cmp	r3, #1
   b6f68:	d11c      	bne.n	b6fa4 <__gethex+0x2fc>
   b6f6a:	42ae      	cmp	r6, r5
   b6f6c:	d11a      	bne.n	b6fa4 <__gethex+0x2fc>
   b6f6e:	2e01      	cmp	r6, #1
   b6f70:	d112      	bne.n	b6f98 <__gethex+0x2f0>
   b6f72:	9a04      	ldr	r2, [sp, #16]
   b6f74:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b6f78:	6013      	str	r3, [r2, #0]
   b6f7a:	2301      	movs	r3, #1
   b6f7c:	6123      	str	r3, [r4, #16]
   b6f7e:	f8c9 3000 	str.w	r3, [r9]
   b6f82:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b6f84:	2762      	movs	r7, #98	; 0x62
   b6f86:	601c      	str	r4, [r3, #0]
   b6f88:	e723      	b.n	b6dd2 <__gethex+0x12a>
   b6f8a:	bf00      	nop
   b6f8c:	000b8114 	.word	0x000b8114
   b6f90:	000b8079 	.word	0x000b8079
   b6f94:	000b808a 	.word	0x000b808a
   b6f98:	1e71      	subs	r1, r6, #1
   b6f9a:	4620      	mov	r0, r4
   b6f9c:	f000 fe42 	bl	b7c24 <__any_on>
   b6fa0:	2800      	cmp	r0, #0
   b6fa2:	d1e6      	bne.n	b6f72 <__gethex+0x2ca>
   b6fa4:	ee18 0a10 	vmov	r0, s16
   b6fa8:	4621      	mov	r1, r4
   b6faa:	f000 f9db 	bl	b7364 <_Bfree>
   b6fae:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b6fb0:	2300      	movs	r3, #0
   b6fb2:	6013      	str	r3, [r2, #0]
   b6fb4:	2750      	movs	r7, #80	; 0x50
   b6fb6:	e70c      	b.n	b6dd2 <__gethex+0x12a>
   b6fb8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b6fba:	2b00      	cmp	r3, #0
   b6fbc:	d1f2      	bne.n	b6fa4 <__gethex+0x2fc>
   b6fbe:	e7d8      	b.n	b6f72 <__gethex+0x2ca>
   b6fc0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b6fc2:	2b00      	cmp	r3, #0
   b6fc4:	d1d5      	bne.n	b6f72 <__gethex+0x2ca>
   b6fc6:	e7ed      	b.n	b6fa4 <__gethex+0x2fc>
   b6fc8:	1e6f      	subs	r7, r5, #1
   b6fca:	f1ba 0f00 	cmp.w	sl, #0
   b6fce:	d131      	bne.n	b7034 <__gethex+0x38c>
   b6fd0:	b127      	cbz	r7, b6fdc <__gethex+0x334>
   b6fd2:	4639      	mov	r1, r7
   b6fd4:	4620      	mov	r0, r4
   b6fd6:	f000 fe25 	bl	b7c24 <__any_on>
   b6fda:	4682      	mov	sl, r0
   b6fdc:	117b      	asrs	r3, r7, #5
   b6fde:	2101      	movs	r1, #1
   b6fe0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   b6fe4:	f007 071f 	and.w	r7, r7, #31
   b6fe8:	fa01 f707 	lsl.w	r7, r1, r7
   b6fec:	421f      	tst	r7, r3
   b6fee:	4629      	mov	r1, r5
   b6ff0:	4620      	mov	r0, r4
   b6ff2:	bf18      	it	ne
   b6ff4:	f04a 0a02 	orrne.w	sl, sl, #2
   b6ff8:	1b76      	subs	r6, r6, r5
   b6ffa:	f7ff fded 	bl	b6bd8 <rshift>
   b6ffe:	f8d8 5004 	ldr.w	r5, [r8, #4]
   b7002:	2702      	movs	r7, #2
   b7004:	f1ba 0f00 	cmp.w	sl, #0
   b7008:	d048      	beq.n	b709c <__gethex+0x3f4>
   b700a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   b700e:	2b02      	cmp	r3, #2
   b7010:	d015      	beq.n	b703e <__gethex+0x396>
   b7012:	2b03      	cmp	r3, #3
   b7014:	d017      	beq.n	b7046 <__gethex+0x39e>
   b7016:	2b01      	cmp	r3, #1
   b7018:	d109      	bne.n	b702e <__gethex+0x386>
   b701a:	f01a 0f02 	tst.w	sl, #2
   b701e:	d006      	beq.n	b702e <__gethex+0x386>
   b7020:	f8d9 0000 	ldr.w	r0, [r9]
   b7024:	ea4a 0a00 	orr.w	sl, sl, r0
   b7028:	f01a 0f01 	tst.w	sl, #1
   b702c:	d10e      	bne.n	b704c <__gethex+0x3a4>
   b702e:	f047 0710 	orr.w	r7, r7, #16
   b7032:	e033      	b.n	b709c <__gethex+0x3f4>
   b7034:	f04f 0a01 	mov.w	sl, #1
   b7038:	e7d0      	b.n	b6fdc <__gethex+0x334>
   b703a:	2701      	movs	r7, #1
   b703c:	e7e2      	b.n	b7004 <__gethex+0x35c>
   b703e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b7040:	f1c3 0301 	rsb	r3, r3, #1
   b7044:	9315      	str	r3, [sp, #84]	; 0x54
   b7046:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b7048:	2b00      	cmp	r3, #0
   b704a:	d0f0      	beq.n	b702e <__gethex+0x386>
   b704c:	f8d4 b010 	ldr.w	fp, [r4, #16]
   b7050:	f104 0314 	add.w	r3, r4, #20
   b7054:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   b7058:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   b705c:	f04f 0c00 	mov.w	ip, #0
   b7060:	4618      	mov	r0, r3
   b7062:	f853 2b04 	ldr.w	r2, [r3], #4
   b7066:	f1b2 3fff 	cmp.w	r2, #4294967295
   b706a:	d01c      	beq.n	b70a6 <__gethex+0x3fe>
   b706c:	3201      	adds	r2, #1
   b706e:	6002      	str	r2, [r0, #0]
   b7070:	2f02      	cmp	r7, #2
   b7072:	f104 0314 	add.w	r3, r4, #20
   b7076:	d13f      	bne.n	b70f8 <__gethex+0x450>
   b7078:	f8d8 2000 	ldr.w	r2, [r8]
   b707c:	3a01      	subs	r2, #1
   b707e:	42b2      	cmp	r2, r6
   b7080:	d10a      	bne.n	b7098 <__gethex+0x3f0>
   b7082:	1171      	asrs	r1, r6, #5
   b7084:	2201      	movs	r2, #1
   b7086:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   b708a:	f006 061f 	and.w	r6, r6, #31
   b708e:	fa02 f606 	lsl.w	r6, r2, r6
   b7092:	421e      	tst	r6, r3
   b7094:	bf18      	it	ne
   b7096:	4617      	movne	r7, r2
   b7098:	f047 0720 	orr.w	r7, r7, #32
   b709c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b709e:	601c      	str	r4, [r3, #0]
   b70a0:	9b04      	ldr	r3, [sp, #16]
   b70a2:	601d      	str	r5, [r3, #0]
   b70a4:	e695      	b.n	b6dd2 <__gethex+0x12a>
   b70a6:	4299      	cmp	r1, r3
   b70a8:	f843 cc04 	str.w	ip, [r3, #-4]
   b70ac:	d8d8      	bhi.n	b7060 <__gethex+0x3b8>
   b70ae:	68a3      	ldr	r3, [r4, #8]
   b70b0:	459b      	cmp	fp, r3
   b70b2:	db19      	blt.n	b70e8 <__gethex+0x440>
   b70b4:	6861      	ldr	r1, [r4, #4]
   b70b6:	ee18 0a10 	vmov	r0, s16
   b70ba:	3101      	adds	r1, #1
   b70bc:	f000 f912 	bl	b72e4 <_Balloc>
   b70c0:	4681      	mov	r9, r0
   b70c2:	b918      	cbnz	r0, b70cc <__gethex+0x424>
   b70c4:	4b1a      	ldr	r3, [pc, #104]	; (b7130 <__gethex+0x488>)
   b70c6:	4602      	mov	r2, r0
   b70c8:	2184      	movs	r1, #132	; 0x84
   b70ca:	e6a8      	b.n	b6e1e <__gethex+0x176>
   b70cc:	6922      	ldr	r2, [r4, #16]
   b70ce:	3202      	adds	r2, #2
   b70d0:	f104 010c 	add.w	r1, r4, #12
   b70d4:	0092      	lsls	r2, r2, #2
   b70d6:	300c      	adds	r0, #12
   b70d8:	f7fe fe8b 	bl	b5df2 <memcpy>
   b70dc:	4621      	mov	r1, r4
   b70de:	ee18 0a10 	vmov	r0, s16
   b70e2:	f000 f93f 	bl	b7364 <_Bfree>
   b70e6:	464c      	mov	r4, r9
   b70e8:	6923      	ldr	r3, [r4, #16]
   b70ea:	1c5a      	adds	r2, r3, #1
   b70ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   b70f0:	6122      	str	r2, [r4, #16]
   b70f2:	2201      	movs	r2, #1
   b70f4:	615a      	str	r2, [r3, #20]
   b70f6:	e7bb      	b.n	b7070 <__gethex+0x3c8>
   b70f8:	6922      	ldr	r2, [r4, #16]
   b70fa:	455a      	cmp	r2, fp
   b70fc:	dd0b      	ble.n	b7116 <__gethex+0x46e>
   b70fe:	2101      	movs	r1, #1
   b7100:	4620      	mov	r0, r4
   b7102:	f7ff fd69 	bl	b6bd8 <rshift>
   b7106:	f8d8 3008 	ldr.w	r3, [r8, #8]
   b710a:	3501      	adds	r5, #1
   b710c:	42ab      	cmp	r3, r5
   b710e:	f6ff aed0 	blt.w	b6eb2 <__gethex+0x20a>
   b7112:	2701      	movs	r7, #1
   b7114:	e7c0      	b.n	b7098 <__gethex+0x3f0>
   b7116:	f016 061f 	ands.w	r6, r6, #31
   b711a:	d0fa      	beq.n	b7112 <__gethex+0x46a>
   b711c:	4453      	add	r3, sl
   b711e:	f1c6 0620 	rsb	r6, r6, #32
   b7122:	f853 0c04 	ldr.w	r0, [r3, #-4]
   b7126:	f000 f9cf 	bl	b74c8 <__hi0bits>
   b712a:	42b0      	cmp	r0, r6
   b712c:	dbe7      	blt.n	b70fe <__gethex+0x456>
   b712e:	e7f0      	b.n	b7112 <__gethex+0x46a>
   b7130:	000b8079 	.word	0x000b8079

000b7134 <L_shift>:
   b7134:	f1c2 0208 	rsb	r2, r2, #8
   b7138:	0092      	lsls	r2, r2, #2
   b713a:	b570      	push	{r4, r5, r6, lr}
   b713c:	f1c2 0620 	rsb	r6, r2, #32
   b7140:	6843      	ldr	r3, [r0, #4]
   b7142:	6804      	ldr	r4, [r0, #0]
   b7144:	fa03 f506 	lsl.w	r5, r3, r6
   b7148:	432c      	orrs	r4, r5
   b714a:	40d3      	lsrs	r3, r2
   b714c:	6004      	str	r4, [r0, #0]
   b714e:	f840 3f04 	str.w	r3, [r0, #4]!
   b7152:	4288      	cmp	r0, r1
   b7154:	d3f4      	bcc.n	b7140 <L_shift+0xc>
   b7156:	bd70      	pop	{r4, r5, r6, pc}

000b7158 <__match>:
   b7158:	b530      	push	{r4, r5, lr}
   b715a:	6803      	ldr	r3, [r0, #0]
   b715c:	3301      	adds	r3, #1
   b715e:	f811 4b01 	ldrb.w	r4, [r1], #1
   b7162:	b914      	cbnz	r4, b716a <__match+0x12>
   b7164:	6003      	str	r3, [r0, #0]
   b7166:	2001      	movs	r0, #1
   b7168:	bd30      	pop	{r4, r5, pc}
   b716a:	f813 2b01 	ldrb.w	r2, [r3], #1
   b716e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   b7172:	2d19      	cmp	r5, #25
   b7174:	bf98      	it	ls
   b7176:	3220      	addls	r2, #32
   b7178:	42a2      	cmp	r2, r4
   b717a:	d0f0      	beq.n	b715e <__match+0x6>
   b717c:	2000      	movs	r0, #0
   b717e:	e7f3      	b.n	b7168 <__match+0x10>

000b7180 <__hexnan>:
   b7180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7184:	680b      	ldr	r3, [r1, #0]
   b7186:	115e      	asrs	r6, r3, #5
   b7188:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   b718c:	f013 031f 	ands.w	r3, r3, #31
   b7190:	b087      	sub	sp, #28
   b7192:	bf18      	it	ne
   b7194:	3604      	addne	r6, #4
   b7196:	2500      	movs	r5, #0
   b7198:	1f37      	subs	r7, r6, #4
   b719a:	4690      	mov	r8, r2
   b719c:	6802      	ldr	r2, [r0, #0]
   b719e:	9301      	str	r3, [sp, #4]
   b71a0:	4682      	mov	sl, r0
   b71a2:	f846 5c04 	str.w	r5, [r6, #-4]
   b71a6:	46b9      	mov	r9, r7
   b71a8:	463c      	mov	r4, r7
   b71aa:	9502      	str	r5, [sp, #8]
   b71ac:	46ab      	mov	fp, r5
   b71ae:	7851      	ldrb	r1, [r2, #1]
   b71b0:	1c53      	adds	r3, r2, #1
   b71b2:	9303      	str	r3, [sp, #12]
   b71b4:	b341      	cbz	r1, b7208 <__hexnan+0x88>
   b71b6:	4608      	mov	r0, r1
   b71b8:	9205      	str	r2, [sp, #20]
   b71ba:	9104      	str	r1, [sp, #16]
   b71bc:	f7ff fd5e 	bl	b6c7c <__hexdig_fun>
   b71c0:	2800      	cmp	r0, #0
   b71c2:	d14f      	bne.n	b7264 <__hexnan+0xe4>
   b71c4:	9904      	ldr	r1, [sp, #16]
   b71c6:	9a05      	ldr	r2, [sp, #20]
   b71c8:	2920      	cmp	r1, #32
   b71ca:	d818      	bhi.n	b71fe <__hexnan+0x7e>
   b71cc:	9b02      	ldr	r3, [sp, #8]
   b71ce:	459b      	cmp	fp, r3
   b71d0:	dd13      	ble.n	b71fa <__hexnan+0x7a>
   b71d2:	454c      	cmp	r4, r9
   b71d4:	d206      	bcs.n	b71e4 <__hexnan+0x64>
   b71d6:	2d07      	cmp	r5, #7
   b71d8:	dc04      	bgt.n	b71e4 <__hexnan+0x64>
   b71da:	462a      	mov	r2, r5
   b71dc:	4649      	mov	r1, r9
   b71de:	4620      	mov	r0, r4
   b71e0:	f7ff ffa8 	bl	b7134 <L_shift>
   b71e4:	4544      	cmp	r4, r8
   b71e6:	d950      	bls.n	b728a <__hexnan+0x10a>
   b71e8:	2300      	movs	r3, #0
   b71ea:	f1a4 0904 	sub.w	r9, r4, #4
   b71ee:	f844 3c04 	str.w	r3, [r4, #-4]
   b71f2:	f8cd b008 	str.w	fp, [sp, #8]
   b71f6:	464c      	mov	r4, r9
   b71f8:	461d      	mov	r5, r3
   b71fa:	9a03      	ldr	r2, [sp, #12]
   b71fc:	e7d7      	b.n	b71ae <__hexnan+0x2e>
   b71fe:	2929      	cmp	r1, #41	; 0x29
   b7200:	d156      	bne.n	b72b0 <__hexnan+0x130>
   b7202:	3202      	adds	r2, #2
   b7204:	f8ca 2000 	str.w	r2, [sl]
   b7208:	f1bb 0f00 	cmp.w	fp, #0
   b720c:	d050      	beq.n	b72b0 <__hexnan+0x130>
   b720e:	454c      	cmp	r4, r9
   b7210:	d206      	bcs.n	b7220 <__hexnan+0xa0>
   b7212:	2d07      	cmp	r5, #7
   b7214:	dc04      	bgt.n	b7220 <__hexnan+0xa0>
   b7216:	462a      	mov	r2, r5
   b7218:	4649      	mov	r1, r9
   b721a:	4620      	mov	r0, r4
   b721c:	f7ff ff8a 	bl	b7134 <L_shift>
   b7220:	4544      	cmp	r4, r8
   b7222:	d934      	bls.n	b728e <__hexnan+0x10e>
   b7224:	f1a8 0204 	sub.w	r2, r8, #4
   b7228:	4623      	mov	r3, r4
   b722a:	f853 1b04 	ldr.w	r1, [r3], #4
   b722e:	f842 1f04 	str.w	r1, [r2, #4]!
   b7232:	429f      	cmp	r7, r3
   b7234:	d2f9      	bcs.n	b722a <__hexnan+0xaa>
   b7236:	1b3b      	subs	r3, r7, r4
   b7238:	f023 0303 	bic.w	r3, r3, #3
   b723c:	3304      	adds	r3, #4
   b723e:	3401      	adds	r4, #1
   b7240:	3e03      	subs	r6, #3
   b7242:	42b4      	cmp	r4, r6
   b7244:	bf88      	it	hi
   b7246:	2304      	movhi	r3, #4
   b7248:	4443      	add	r3, r8
   b724a:	2200      	movs	r2, #0
   b724c:	f843 2b04 	str.w	r2, [r3], #4
   b7250:	429f      	cmp	r7, r3
   b7252:	d2fb      	bcs.n	b724c <__hexnan+0xcc>
   b7254:	683b      	ldr	r3, [r7, #0]
   b7256:	b91b      	cbnz	r3, b7260 <__hexnan+0xe0>
   b7258:	4547      	cmp	r7, r8
   b725a:	d127      	bne.n	b72ac <__hexnan+0x12c>
   b725c:	2301      	movs	r3, #1
   b725e:	603b      	str	r3, [r7, #0]
   b7260:	2005      	movs	r0, #5
   b7262:	e026      	b.n	b72b2 <__hexnan+0x132>
   b7264:	3501      	adds	r5, #1
   b7266:	2d08      	cmp	r5, #8
   b7268:	f10b 0b01 	add.w	fp, fp, #1
   b726c:	dd06      	ble.n	b727c <__hexnan+0xfc>
   b726e:	4544      	cmp	r4, r8
   b7270:	d9c3      	bls.n	b71fa <__hexnan+0x7a>
   b7272:	2300      	movs	r3, #0
   b7274:	f844 3c04 	str.w	r3, [r4, #-4]
   b7278:	2501      	movs	r5, #1
   b727a:	3c04      	subs	r4, #4
   b727c:	6822      	ldr	r2, [r4, #0]
   b727e:	f000 000f 	and.w	r0, r0, #15
   b7282:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   b7286:	6022      	str	r2, [r4, #0]
   b7288:	e7b7      	b.n	b71fa <__hexnan+0x7a>
   b728a:	2508      	movs	r5, #8
   b728c:	e7b5      	b.n	b71fa <__hexnan+0x7a>
   b728e:	9b01      	ldr	r3, [sp, #4]
   b7290:	2b00      	cmp	r3, #0
   b7292:	d0df      	beq.n	b7254 <__hexnan+0xd4>
   b7294:	f04f 32ff 	mov.w	r2, #4294967295
   b7298:	f1c3 0320 	rsb	r3, r3, #32
   b729c:	fa22 f303 	lsr.w	r3, r2, r3
   b72a0:	f856 2c04 	ldr.w	r2, [r6, #-4]
   b72a4:	401a      	ands	r2, r3
   b72a6:	f846 2c04 	str.w	r2, [r6, #-4]
   b72aa:	e7d3      	b.n	b7254 <__hexnan+0xd4>
   b72ac:	3f04      	subs	r7, #4
   b72ae:	e7d1      	b.n	b7254 <__hexnan+0xd4>
   b72b0:	2004      	movs	r0, #4
   b72b2:	b007      	add	sp, #28
   b72b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b72b8 <__retarget_lock_acquire_recursive>:
   b72b8:	4770      	bx	lr

000b72ba <__retarget_lock_release>:
   b72ba:	4770      	bx	lr

000b72bc <__retarget_lock_release_recursive>:
   b72bc:	4770      	bx	lr

000b72be <__ascii_mbtowc>:
   b72be:	b082      	sub	sp, #8
   b72c0:	b901      	cbnz	r1, b72c4 <__ascii_mbtowc+0x6>
   b72c2:	a901      	add	r1, sp, #4
   b72c4:	b142      	cbz	r2, b72d8 <__ascii_mbtowc+0x1a>
   b72c6:	b14b      	cbz	r3, b72dc <__ascii_mbtowc+0x1e>
   b72c8:	7813      	ldrb	r3, [r2, #0]
   b72ca:	600b      	str	r3, [r1, #0]
   b72cc:	7812      	ldrb	r2, [r2, #0]
   b72ce:	1e10      	subs	r0, r2, #0
   b72d0:	bf18      	it	ne
   b72d2:	2001      	movne	r0, #1
   b72d4:	b002      	add	sp, #8
   b72d6:	4770      	bx	lr
   b72d8:	4610      	mov	r0, r2
   b72da:	e7fb      	b.n	b72d4 <__ascii_mbtowc+0x16>
   b72dc:	f06f 0001 	mvn.w	r0, #1
   b72e0:	e7f8      	b.n	b72d4 <__ascii_mbtowc+0x16>
	...

000b72e4 <_Balloc>:
   b72e4:	b570      	push	{r4, r5, r6, lr}
   b72e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b72e8:	4604      	mov	r4, r0
   b72ea:	460d      	mov	r5, r1
   b72ec:	b976      	cbnz	r6, b730c <_Balloc+0x28>
   b72ee:	2010      	movs	r0, #16
   b72f0:	f7fd fb8c 	bl	b4a0c <malloc>
   b72f4:	4602      	mov	r2, r0
   b72f6:	6260      	str	r0, [r4, #36]	; 0x24
   b72f8:	b920      	cbnz	r0, b7304 <_Balloc+0x20>
   b72fa:	4b18      	ldr	r3, [pc, #96]	; (b735c <_Balloc+0x78>)
   b72fc:	4818      	ldr	r0, [pc, #96]	; (b7360 <_Balloc+0x7c>)
   b72fe:	2166      	movs	r1, #102	; 0x66
   b7300:	f7fd fb9c 	bl	b4a3c <__assert_func>
   b7304:	e9c0 6601 	strd	r6, r6, [r0, #4]
   b7308:	6006      	str	r6, [r0, #0]
   b730a:	60c6      	str	r6, [r0, #12]
   b730c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   b730e:	68f3      	ldr	r3, [r6, #12]
   b7310:	b183      	cbz	r3, b7334 <_Balloc+0x50>
   b7312:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b7314:	68db      	ldr	r3, [r3, #12]
   b7316:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   b731a:	b9b8      	cbnz	r0, b734c <_Balloc+0x68>
   b731c:	2101      	movs	r1, #1
   b731e:	fa01 f605 	lsl.w	r6, r1, r5
   b7322:	1d72      	adds	r2, r6, #5
   b7324:	0092      	lsls	r2, r2, #2
   b7326:	4620      	mov	r0, r4
   b7328:	f000 fc9d 	bl	b7c66 <_calloc_r>
   b732c:	b160      	cbz	r0, b7348 <_Balloc+0x64>
   b732e:	e9c0 5601 	strd	r5, r6, [r0, #4]
   b7332:	e00e      	b.n	b7352 <_Balloc+0x6e>
   b7334:	2221      	movs	r2, #33	; 0x21
   b7336:	2104      	movs	r1, #4
   b7338:	4620      	mov	r0, r4
   b733a:	f000 fc94 	bl	b7c66 <_calloc_r>
   b733e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b7340:	60f0      	str	r0, [r6, #12]
   b7342:	68db      	ldr	r3, [r3, #12]
   b7344:	2b00      	cmp	r3, #0
   b7346:	d1e4      	bne.n	b7312 <_Balloc+0x2e>
   b7348:	2000      	movs	r0, #0
   b734a:	bd70      	pop	{r4, r5, r6, pc}
   b734c:	6802      	ldr	r2, [r0, #0]
   b734e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   b7352:	2300      	movs	r3, #0
   b7354:	e9c0 3303 	strd	r3, r3, [r0, #12]
   b7358:	e7f7      	b.n	b734a <_Balloc+0x66>
   b735a:	bf00      	nop
   b735c:	000b7e85 	.word	0x000b7e85
   b7360:	000b8128 	.word	0x000b8128

000b7364 <_Bfree>:
   b7364:	b570      	push	{r4, r5, r6, lr}
   b7366:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b7368:	4605      	mov	r5, r0
   b736a:	460c      	mov	r4, r1
   b736c:	b976      	cbnz	r6, b738c <_Bfree+0x28>
   b736e:	2010      	movs	r0, #16
   b7370:	f7fd fb4c 	bl	b4a0c <malloc>
   b7374:	4602      	mov	r2, r0
   b7376:	6268      	str	r0, [r5, #36]	; 0x24
   b7378:	b920      	cbnz	r0, b7384 <_Bfree+0x20>
   b737a:	4b09      	ldr	r3, [pc, #36]	; (b73a0 <_Bfree+0x3c>)
   b737c:	4809      	ldr	r0, [pc, #36]	; (b73a4 <_Bfree+0x40>)
   b737e:	218a      	movs	r1, #138	; 0x8a
   b7380:	f7fd fb5c 	bl	b4a3c <__assert_func>
   b7384:	e9c0 6601 	strd	r6, r6, [r0, #4]
   b7388:	6006      	str	r6, [r0, #0]
   b738a:	60c6      	str	r6, [r0, #12]
   b738c:	b13c      	cbz	r4, b739e <_Bfree+0x3a>
   b738e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b7390:	6862      	ldr	r2, [r4, #4]
   b7392:	68db      	ldr	r3, [r3, #12]
   b7394:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   b7398:	6021      	str	r1, [r4, #0]
   b739a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   b739e:	bd70      	pop	{r4, r5, r6, pc}
   b73a0:	000b7e85 	.word	0x000b7e85
   b73a4:	000b8128 	.word	0x000b8128

000b73a8 <__multadd>:
   b73a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b73ac:	690d      	ldr	r5, [r1, #16]
   b73ae:	4607      	mov	r7, r0
   b73b0:	460c      	mov	r4, r1
   b73b2:	461e      	mov	r6, r3
   b73b4:	f101 0c14 	add.w	ip, r1, #20
   b73b8:	2000      	movs	r0, #0
   b73ba:	f8dc 3000 	ldr.w	r3, [ip]
   b73be:	b299      	uxth	r1, r3
   b73c0:	fb02 6101 	mla	r1, r2, r1, r6
   b73c4:	0c1e      	lsrs	r6, r3, #16
   b73c6:	0c0b      	lsrs	r3, r1, #16
   b73c8:	fb02 3306 	mla	r3, r2, r6, r3
   b73cc:	b289      	uxth	r1, r1
   b73ce:	3001      	adds	r0, #1
   b73d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   b73d4:	4285      	cmp	r5, r0
   b73d6:	f84c 1b04 	str.w	r1, [ip], #4
   b73da:	ea4f 4613 	mov.w	r6, r3, lsr #16
   b73de:	dcec      	bgt.n	b73ba <__multadd+0x12>
   b73e0:	b30e      	cbz	r6, b7426 <__multadd+0x7e>
   b73e2:	68a3      	ldr	r3, [r4, #8]
   b73e4:	42ab      	cmp	r3, r5
   b73e6:	dc19      	bgt.n	b741c <__multadd+0x74>
   b73e8:	6861      	ldr	r1, [r4, #4]
   b73ea:	4638      	mov	r0, r7
   b73ec:	3101      	adds	r1, #1
   b73ee:	f7ff ff79 	bl	b72e4 <_Balloc>
   b73f2:	4680      	mov	r8, r0
   b73f4:	b928      	cbnz	r0, b7402 <__multadd+0x5a>
   b73f6:	4602      	mov	r2, r0
   b73f8:	4b0c      	ldr	r3, [pc, #48]	; (b742c <__multadd+0x84>)
   b73fa:	480d      	ldr	r0, [pc, #52]	; (b7430 <__multadd+0x88>)
   b73fc:	21b5      	movs	r1, #181	; 0xb5
   b73fe:	f7fd fb1d 	bl	b4a3c <__assert_func>
   b7402:	6922      	ldr	r2, [r4, #16]
   b7404:	3202      	adds	r2, #2
   b7406:	f104 010c 	add.w	r1, r4, #12
   b740a:	0092      	lsls	r2, r2, #2
   b740c:	300c      	adds	r0, #12
   b740e:	f7fe fcf0 	bl	b5df2 <memcpy>
   b7412:	4621      	mov	r1, r4
   b7414:	4638      	mov	r0, r7
   b7416:	f7ff ffa5 	bl	b7364 <_Bfree>
   b741a:	4644      	mov	r4, r8
   b741c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   b7420:	3501      	adds	r5, #1
   b7422:	615e      	str	r6, [r3, #20]
   b7424:	6125      	str	r5, [r4, #16]
   b7426:	4620      	mov	r0, r4
   b7428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b742c:	000b8079 	.word	0x000b8079
   b7430:	000b8128 	.word	0x000b8128

000b7434 <__s2b>:
   b7434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7438:	460c      	mov	r4, r1
   b743a:	4615      	mov	r5, r2
   b743c:	461f      	mov	r7, r3
   b743e:	2209      	movs	r2, #9
   b7440:	3308      	adds	r3, #8
   b7442:	4606      	mov	r6, r0
   b7444:	fb93 f3f2 	sdiv	r3, r3, r2
   b7448:	2100      	movs	r1, #0
   b744a:	2201      	movs	r2, #1
   b744c:	429a      	cmp	r2, r3
   b744e:	db09      	blt.n	b7464 <__s2b+0x30>
   b7450:	4630      	mov	r0, r6
   b7452:	f7ff ff47 	bl	b72e4 <_Balloc>
   b7456:	b940      	cbnz	r0, b746a <__s2b+0x36>
   b7458:	4602      	mov	r2, r0
   b745a:	4b19      	ldr	r3, [pc, #100]	; (b74c0 <__s2b+0x8c>)
   b745c:	4819      	ldr	r0, [pc, #100]	; (b74c4 <__s2b+0x90>)
   b745e:	21ce      	movs	r1, #206	; 0xce
   b7460:	f7fd faec 	bl	b4a3c <__assert_func>
   b7464:	0052      	lsls	r2, r2, #1
   b7466:	3101      	adds	r1, #1
   b7468:	e7f0      	b.n	b744c <__s2b+0x18>
   b746a:	9b08      	ldr	r3, [sp, #32]
   b746c:	6143      	str	r3, [r0, #20]
   b746e:	2d09      	cmp	r5, #9
   b7470:	f04f 0301 	mov.w	r3, #1
   b7474:	6103      	str	r3, [r0, #16]
   b7476:	dd16      	ble.n	b74a6 <__s2b+0x72>
   b7478:	f104 0909 	add.w	r9, r4, #9
   b747c:	46c8      	mov	r8, r9
   b747e:	442c      	add	r4, r5
   b7480:	f818 3b01 	ldrb.w	r3, [r8], #1
   b7484:	4601      	mov	r1, r0
   b7486:	3b30      	subs	r3, #48	; 0x30
   b7488:	220a      	movs	r2, #10
   b748a:	4630      	mov	r0, r6
   b748c:	f7ff ff8c 	bl	b73a8 <__multadd>
   b7490:	45a0      	cmp	r8, r4
   b7492:	d1f5      	bne.n	b7480 <__s2b+0x4c>
   b7494:	f1a5 0408 	sub.w	r4, r5, #8
   b7498:	444c      	add	r4, r9
   b749a:	1b2d      	subs	r5, r5, r4
   b749c:	1963      	adds	r3, r4, r5
   b749e:	42bb      	cmp	r3, r7
   b74a0:	db04      	blt.n	b74ac <__s2b+0x78>
   b74a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b74a6:	340a      	adds	r4, #10
   b74a8:	2509      	movs	r5, #9
   b74aa:	e7f6      	b.n	b749a <__s2b+0x66>
   b74ac:	f814 3b01 	ldrb.w	r3, [r4], #1
   b74b0:	4601      	mov	r1, r0
   b74b2:	3b30      	subs	r3, #48	; 0x30
   b74b4:	220a      	movs	r2, #10
   b74b6:	4630      	mov	r0, r6
   b74b8:	f7ff ff76 	bl	b73a8 <__multadd>
   b74bc:	e7ee      	b.n	b749c <__s2b+0x68>
   b74be:	bf00      	nop
   b74c0:	000b8079 	.word	0x000b8079
   b74c4:	000b8128 	.word	0x000b8128

000b74c8 <__hi0bits>:
   b74c8:	0c03      	lsrs	r3, r0, #16
   b74ca:	041b      	lsls	r3, r3, #16
   b74cc:	b9d3      	cbnz	r3, b7504 <__hi0bits+0x3c>
   b74ce:	0400      	lsls	r0, r0, #16
   b74d0:	2310      	movs	r3, #16
   b74d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   b74d6:	bf04      	itt	eq
   b74d8:	0200      	lsleq	r0, r0, #8
   b74da:	3308      	addeq	r3, #8
   b74dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   b74e0:	bf04      	itt	eq
   b74e2:	0100      	lsleq	r0, r0, #4
   b74e4:	3304      	addeq	r3, #4
   b74e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   b74ea:	bf04      	itt	eq
   b74ec:	0080      	lsleq	r0, r0, #2
   b74ee:	3302      	addeq	r3, #2
   b74f0:	2800      	cmp	r0, #0
   b74f2:	db05      	blt.n	b7500 <__hi0bits+0x38>
   b74f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   b74f8:	f103 0301 	add.w	r3, r3, #1
   b74fc:	bf08      	it	eq
   b74fe:	2320      	moveq	r3, #32
   b7500:	4618      	mov	r0, r3
   b7502:	4770      	bx	lr
   b7504:	2300      	movs	r3, #0
   b7506:	e7e4      	b.n	b74d2 <__hi0bits+0xa>

000b7508 <__lo0bits>:
   b7508:	6803      	ldr	r3, [r0, #0]
   b750a:	f013 0207 	ands.w	r2, r3, #7
   b750e:	4601      	mov	r1, r0
   b7510:	d00b      	beq.n	b752a <__lo0bits+0x22>
   b7512:	07da      	lsls	r2, r3, #31
   b7514:	d423      	bmi.n	b755e <__lo0bits+0x56>
   b7516:	0798      	lsls	r0, r3, #30
   b7518:	bf49      	itett	mi
   b751a:	085b      	lsrmi	r3, r3, #1
   b751c:	089b      	lsrpl	r3, r3, #2
   b751e:	2001      	movmi	r0, #1
   b7520:	600b      	strmi	r3, [r1, #0]
   b7522:	bf5c      	itt	pl
   b7524:	600b      	strpl	r3, [r1, #0]
   b7526:	2002      	movpl	r0, #2
   b7528:	4770      	bx	lr
   b752a:	b298      	uxth	r0, r3
   b752c:	b9a8      	cbnz	r0, b755a <__lo0bits+0x52>
   b752e:	0c1b      	lsrs	r3, r3, #16
   b7530:	2010      	movs	r0, #16
   b7532:	b2da      	uxtb	r2, r3
   b7534:	b90a      	cbnz	r2, b753a <__lo0bits+0x32>
   b7536:	3008      	adds	r0, #8
   b7538:	0a1b      	lsrs	r3, r3, #8
   b753a:	071a      	lsls	r2, r3, #28
   b753c:	bf04      	itt	eq
   b753e:	091b      	lsreq	r3, r3, #4
   b7540:	3004      	addeq	r0, #4
   b7542:	079a      	lsls	r2, r3, #30
   b7544:	bf04      	itt	eq
   b7546:	089b      	lsreq	r3, r3, #2
   b7548:	3002      	addeq	r0, #2
   b754a:	07da      	lsls	r2, r3, #31
   b754c:	d403      	bmi.n	b7556 <__lo0bits+0x4e>
   b754e:	085b      	lsrs	r3, r3, #1
   b7550:	f100 0001 	add.w	r0, r0, #1
   b7554:	d005      	beq.n	b7562 <__lo0bits+0x5a>
   b7556:	600b      	str	r3, [r1, #0]
   b7558:	4770      	bx	lr
   b755a:	4610      	mov	r0, r2
   b755c:	e7e9      	b.n	b7532 <__lo0bits+0x2a>
   b755e:	2000      	movs	r0, #0
   b7560:	4770      	bx	lr
   b7562:	2020      	movs	r0, #32
   b7564:	4770      	bx	lr
	...

000b7568 <__i2b>:
   b7568:	b510      	push	{r4, lr}
   b756a:	460c      	mov	r4, r1
   b756c:	2101      	movs	r1, #1
   b756e:	f7ff feb9 	bl	b72e4 <_Balloc>
   b7572:	4602      	mov	r2, r0
   b7574:	b928      	cbnz	r0, b7582 <__i2b+0x1a>
   b7576:	4b05      	ldr	r3, [pc, #20]	; (b758c <__i2b+0x24>)
   b7578:	4805      	ldr	r0, [pc, #20]	; (b7590 <__i2b+0x28>)
   b757a:	f44f 71a0 	mov.w	r1, #320	; 0x140
   b757e:	f7fd fa5d 	bl	b4a3c <__assert_func>
   b7582:	2301      	movs	r3, #1
   b7584:	6144      	str	r4, [r0, #20]
   b7586:	6103      	str	r3, [r0, #16]
   b7588:	bd10      	pop	{r4, pc}
   b758a:	bf00      	nop
   b758c:	000b8079 	.word	0x000b8079
   b7590:	000b8128 	.word	0x000b8128

000b7594 <__multiply>:
   b7594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7598:	4691      	mov	r9, r2
   b759a:	690a      	ldr	r2, [r1, #16]
   b759c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   b75a0:	429a      	cmp	r2, r3
   b75a2:	bfb8      	it	lt
   b75a4:	460b      	movlt	r3, r1
   b75a6:	460c      	mov	r4, r1
   b75a8:	bfbc      	itt	lt
   b75aa:	464c      	movlt	r4, r9
   b75ac:	4699      	movlt	r9, r3
   b75ae:	6927      	ldr	r7, [r4, #16]
   b75b0:	f8d9 a010 	ldr.w	sl, [r9, #16]
   b75b4:	68a3      	ldr	r3, [r4, #8]
   b75b6:	6861      	ldr	r1, [r4, #4]
   b75b8:	eb07 060a 	add.w	r6, r7, sl
   b75bc:	42b3      	cmp	r3, r6
   b75be:	b085      	sub	sp, #20
   b75c0:	bfb8      	it	lt
   b75c2:	3101      	addlt	r1, #1
   b75c4:	f7ff fe8e 	bl	b72e4 <_Balloc>
   b75c8:	b930      	cbnz	r0, b75d8 <__multiply+0x44>
   b75ca:	4602      	mov	r2, r0
   b75cc:	4b44      	ldr	r3, [pc, #272]	; (b76e0 <__multiply+0x14c>)
   b75ce:	4845      	ldr	r0, [pc, #276]	; (b76e4 <__multiply+0x150>)
   b75d0:	f240 115d 	movw	r1, #349	; 0x15d
   b75d4:	f7fd fa32 	bl	b4a3c <__assert_func>
   b75d8:	f100 0514 	add.w	r5, r0, #20
   b75dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   b75e0:	462b      	mov	r3, r5
   b75e2:	2200      	movs	r2, #0
   b75e4:	4543      	cmp	r3, r8
   b75e6:	d321      	bcc.n	b762c <__multiply+0x98>
   b75e8:	f104 0314 	add.w	r3, r4, #20
   b75ec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   b75f0:	f109 0314 	add.w	r3, r9, #20
   b75f4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   b75f8:	9202      	str	r2, [sp, #8]
   b75fa:	1b3a      	subs	r2, r7, r4
   b75fc:	3a15      	subs	r2, #21
   b75fe:	f022 0203 	bic.w	r2, r2, #3
   b7602:	3204      	adds	r2, #4
   b7604:	f104 0115 	add.w	r1, r4, #21
   b7608:	428f      	cmp	r7, r1
   b760a:	bf38      	it	cc
   b760c:	2204      	movcc	r2, #4
   b760e:	9201      	str	r2, [sp, #4]
   b7610:	9a02      	ldr	r2, [sp, #8]
   b7612:	9303      	str	r3, [sp, #12]
   b7614:	429a      	cmp	r2, r3
   b7616:	d80c      	bhi.n	b7632 <__multiply+0x9e>
   b7618:	2e00      	cmp	r6, #0
   b761a:	dd03      	ble.n	b7624 <__multiply+0x90>
   b761c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   b7620:	2b00      	cmp	r3, #0
   b7622:	d05a      	beq.n	b76da <__multiply+0x146>
   b7624:	6106      	str	r6, [r0, #16]
   b7626:	b005      	add	sp, #20
   b7628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b762c:	f843 2b04 	str.w	r2, [r3], #4
   b7630:	e7d8      	b.n	b75e4 <__multiply+0x50>
   b7632:	f8b3 a000 	ldrh.w	sl, [r3]
   b7636:	f1ba 0f00 	cmp.w	sl, #0
   b763a:	d024      	beq.n	b7686 <__multiply+0xf2>
   b763c:	f104 0e14 	add.w	lr, r4, #20
   b7640:	46a9      	mov	r9, r5
   b7642:	f04f 0c00 	mov.w	ip, #0
   b7646:	f85e 2b04 	ldr.w	r2, [lr], #4
   b764a:	f8d9 1000 	ldr.w	r1, [r9]
   b764e:	fa1f fb82 	uxth.w	fp, r2
   b7652:	b289      	uxth	r1, r1
   b7654:	fb0a 110b 	mla	r1, sl, fp, r1
   b7658:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   b765c:	f8d9 2000 	ldr.w	r2, [r9]
   b7660:	4461      	add	r1, ip
   b7662:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   b7666:	fb0a c20b 	mla	r2, sl, fp, ip
   b766a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   b766e:	b289      	uxth	r1, r1
   b7670:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   b7674:	4577      	cmp	r7, lr
   b7676:	f849 1b04 	str.w	r1, [r9], #4
   b767a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   b767e:	d8e2      	bhi.n	b7646 <__multiply+0xb2>
   b7680:	9a01      	ldr	r2, [sp, #4]
   b7682:	f845 c002 	str.w	ip, [r5, r2]
   b7686:	9a03      	ldr	r2, [sp, #12]
   b7688:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   b768c:	3304      	adds	r3, #4
   b768e:	f1b9 0f00 	cmp.w	r9, #0
   b7692:	d020      	beq.n	b76d6 <__multiply+0x142>
   b7694:	6829      	ldr	r1, [r5, #0]
   b7696:	f104 0c14 	add.w	ip, r4, #20
   b769a:	46ae      	mov	lr, r5
   b769c:	f04f 0a00 	mov.w	sl, #0
   b76a0:	f8bc b000 	ldrh.w	fp, [ip]
   b76a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
   b76a8:	fb09 220b 	mla	r2, r9, fp, r2
   b76ac:	4492      	add	sl, r2
   b76ae:	b289      	uxth	r1, r1
   b76b0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   b76b4:	f84e 1b04 	str.w	r1, [lr], #4
   b76b8:	f85c 2b04 	ldr.w	r2, [ip], #4
   b76bc:	f8be 1000 	ldrh.w	r1, [lr]
   b76c0:	0c12      	lsrs	r2, r2, #16
   b76c2:	fb09 1102 	mla	r1, r9, r2, r1
   b76c6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   b76ca:	4567      	cmp	r7, ip
   b76cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   b76d0:	d8e6      	bhi.n	b76a0 <__multiply+0x10c>
   b76d2:	9a01      	ldr	r2, [sp, #4]
   b76d4:	50a9      	str	r1, [r5, r2]
   b76d6:	3504      	adds	r5, #4
   b76d8:	e79a      	b.n	b7610 <__multiply+0x7c>
   b76da:	3e01      	subs	r6, #1
   b76dc:	e79c      	b.n	b7618 <__multiply+0x84>
   b76de:	bf00      	nop
   b76e0:	000b8079 	.word	0x000b8079
   b76e4:	000b8128 	.word	0x000b8128

000b76e8 <__pow5mult>:
   b76e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b76ec:	4615      	mov	r5, r2
   b76ee:	f012 0203 	ands.w	r2, r2, #3
   b76f2:	4606      	mov	r6, r0
   b76f4:	460f      	mov	r7, r1
   b76f6:	d007      	beq.n	b7708 <__pow5mult+0x20>
   b76f8:	4c25      	ldr	r4, [pc, #148]	; (b7790 <__pow5mult+0xa8>)
   b76fa:	3a01      	subs	r2, #1
   b76fc:	2300      	movs	r3, #0
   b76fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   b7702:	f7ff fe51 	bl	b73a8 <__multadd>
   b7706:	4607      	mov	r7, r0
   b7708:	10ad      	asrs	r5, r5, #2
   b770a:	d03d      	beq.n	b7788 <__pow5mult+0xa0>
   b770c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   b770e:	b97c      	cbnz	r4, b7730 <__pow5mult+0x48>
   b7710:	2010      	movs	r0, #16
   b7712:	f7fd f97b 	bl	b4a0c <malloc>
   b7716:	4602      	mov	r2, r0
   b7718:	6270      	str	r0, [r6, #36]	; 0x24
   b771a:	b928      	cbnz	r0, b7728 <__pow5mult+0x40>
   b771c:	4b1d      	ldr	r3, [pc, #116]	; (b7794 <__pow5mult+0xac>)
   b771e:	481e      	ldr	r0, [pc, #120]	; (b7798 <__pow5mult+0xb0>)
   b7720:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   b7724:	f7fd f98a 	bl	b4a3c <__assert_func>
   b7728:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b772c:	6004      	str	r4, [r0, #0]
   b772e:	60c4      	str	r4, [r0, #12]
   b7730:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   b7734:	f8d8 4008 	ldr.w	r4, [r8, #8]
   b7738:	b94c      	cbnz	r4, b774e <__pow5mult+0x66>
   b773a:	f240 2171 	movw	r1, #625	; 0x271
   b773e:	4630      	mov	r0, r6
   b7740:	f7ff ff12 	bl	b7568 <__i2b>
   b7744:	2300      	movs	r3, #0
   b7746:	f8c8 0008 	str.w	r0, [r8, #8]
   b774a:	4604      	mov	r4, r0
   b774c:	6003      	str	r3, [r0, #0]
   b774e:	f04f 0900 	mov.w	r9, #0
   b7752:	07eb      	lsls	r3, r5, #31
   b7754:	d50a      	bpl.n	b776c <__pow5mult+0x84>
   b7756:	4639      	mov	r1, r7
   b7758:	4622      	mov	r2, r4
   b775a:	4630      	mov	r0, r6
   b775c:	f7ff ff1a 	bl	b7594 <__multiply>
   b7760:	4639      	mov	r1, r7
   b7762:	4680      	mov	r8, r0
   b7764:	4630      	mov	r0, r6
   b7766:	f7ff fdfd 	bl	b7364 <_Bfree>
   b776a:	4647      	mov	r7, r8
   b776c:	106d      	asrs	r5, r5, #1
   b776e:	d00b      	beq.n	b7788 <__pow5mult+0xa0>
   b7770:	6820      	ldr	r0, [r4, #0]
   b7772:	b938      	cbnz	r0, b7784 <__pow5mult+0x9c>
   b7774:	4622      	mov	r2, r4
   b7776:	4621      	mov	r1, r4
   b7778:	4630      	mov	r0, r6
   b777a:	f7ff ff0b 	bl	b7594 <__multiply>
   b777e:	6020      	str	r0, [r4, #0]
   b7780:	f8c0 9000 	str.w	r9, [r0]
   b7784:	4604      	mov	r4, r0
   b7786:	e7e4      	b.n	b7752 <__pow5mult+0x6a>
   b7788:	4638      	mov	r0, r7
   b778a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b778e:	bf00      	nop
   b7790:	000b8298 	.word	0x000b8298
   b7794:	000b7e85 	.word	0x000b7e85
   b7798:	000b8128 	.word	0x000b8128

000b779c <__lshift>:
   b779c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b77a0:	460c      	mov	r4, r1
   b77a2:	6849      	ldr	r1, [r1, #4]
   b77a4:	6923      	ldr	r3, [r4, #16]
   b77a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
   b77aa:	68a3      	ldr	r3, [r4, #8]
   b77ac:	4607      	mov	r7, r0
   b77ae:	4691      	mov	r9, r2
   b77b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
   b77b4:	f108 0601 	add.w	r6, r8, #1
   b77b8:	42b3      	cmp	r3, r6
   b77ba:	db0b      	blt.n	b77d4 <__lshift+0x38>
   b77bc:	4638      	mov	r0, r7
   b77be:	f7ff fd91 	bl	b72e4 <_Balloc>
   b77c2:	4605      	mov	r5, r0
   b77c4:	b948      	cbnz	r0, b77da <__lshift+0x3e>
   b77c6:	4602      	mov	r2, r0
   b77c8:	4b2a      	ldr	r3, [pc, #168]	; (b7874 <__lshift+0xd8>)
   b77ca:	482b      	ldr	r0, [pc, #172]	; (b7878 <__lshift+0xdc>)
   b77cc:	f240 11d9 	movw	r1, #473	; 0x1d9
   b77d0:	f7fd f934 	bl	b4a3c <__assert_func>
   b77d4:	3101      	adds	r1, #1
   b77d6:	005b      	lsls	r3, r3, #1
   b77d8:	e7ee      	b.n	b77b8 <__lshift+0x1c>
   b77da:	2300      	movs	r3, #0
   b77dc:	f100 0114 	add.w	r1, r0, #20
   b77e0:	f100 0210 	add.w	r2, r0, #16
   b77e4:	4618      	mov	r0, r3
   b77e6:	4553      	cmp	r3, sl
   b77e8:	db37      	blt.n	b785a <__lshift+0xbe>
   b77ea:	6920      	ldr	r0, [r4, #16]
   b77ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   b77f0:	f104 0314 	add.w	r3, r4, #20
   b77f4:	f019 091f 	ands.w	r9, r9, #31
   b77f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   b77fc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   b7800:	d02f      	beq.n	b7862 <__lshift+0xc6>
   b7802:	f1c9 0e20 	rsb	lr, r9, #32
   b7806:	468a      	mov	sl, r1
   b7808:	f04f 0c00 	mov.w	ip, #0
   b780c:	681a      	ldr	r2, [r3, #0]
   b780e:	fa02 f209 	lsl.w	r2, r2, r9
   b7812:	ea42 020c 	orr.w	r2, r2, ip
   b7816:	f84a 2b04 	str.w	r2, [sl], #4
   b781a:	f853 2b04 	ldr.w	r2, [r3], #4
   b781e:	4298      	cmp	r0, r3
   b7820:	fa22 fc0e 	lsr.w	ip, r2, lr
   b7824:	d8f2      	bhi.n	b780c <__lshift+0x70>
   b7826:	1b03      	subs	r3, r0, r4
   b7828:	3b15      	subs	r3, #21
   b782a:	f023 0303 	bic.w	r3, r3, #3
   b782e:	3304      	adds	r3, #4
   b7830:	f104 0215 	add.w	r2, r4, #21
   b7834:	4290      	cmp	r0, r2
   b7836:	bf38      	it	cc
   b7838:	2304      	movcc	r3, #4
   b783a:	f841 c003 	str.w	ip, [r1, r3]
   b783e:	f1bc 0f00 	cmp.w	ip, #0
   b7842:	d001      	beq.n	b7848 <__lshift+0xac>
   b7844:	f108 0602 	add.w	r6, r8, #2
   b7848:	3e01      	subs	r6, #1
   b784a:	4638      	mov	r0, r7
   b784c:	612e      	str	r6, [r5, #16]
   b784e:	4621      	mov	r1, r4
   b7850:	f7ff fd88 	bl	b7364 <_Bfree>
   b7854:	4628      	mov	r0, r5
   b7856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b785a:	f842 0f04 	str.w	r0, [r2, #4]!
   b785e:	3301      	adds	r3, #1
   b7860:	e7c1      	b.n	b77e6 <__lshift+0x4a>
   b7862:	3904      	subs	r1, #4
   b7864:	f853 2b04 	ldr.w	r2, [r3], #4
   b7868:	f841 2f04 	str.w	r2, [r1, #4]!
   b786c:	4298      	cmp	r0, r3
   b786e:	d8f9      	bhi.n	b7864 <__lshift+0xc8>
   b7870:	e7ea      	b.n	b7848 <__lshift+0xac>
   b7872:	bf00      	nop
   b7874:	000b8079 	.word	0x000b8079
   b7878:	000b8128 	.word	0x000b8128

000b787c <__mcmp>:
   b787c:	b530      	push	{r4, r5, lr}
   b787e:	6902      	ldr	r2, [r0, #16]
   b7880:	690c      	ldr	r4, [r1, #16]
   b7882:	1b12      	subs	r2, r2, r4
   b7884:	d10e      	bne.n	b78a4 <__mcmp+0x28>
   b7886:	f100 0314 	add.w	r3, r0, #20
   b788a:	3114      	adds	r1, #20
   b788c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   b7890:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   b7894:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   b7898:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   b789c:	42a5      	cmp	r5, r4
   b789e:	d003      	beq.n	b78a8 <__mcmp+0x2c>
   b78a0:	d305      	bcc.n	b78ae <__mcmp+0x32>
   b78a2:	2201      	movs	r2, #1
   b78a4:	4610      	mov	r0, r2
   b78a6:	bd30      	pop	{r4, r5, pc}
   b78a8:	4283      	cmp	r3, r0
   b78aa:	d3f3      	bcc.n	b7894 <__mcmp+0x18>
   b78ac:	e7fa      	b.n	b78a4 <__mcmp+0x28>
   b78ae:	f04f 32ff 	mov.w	r2, #4294967295
   b78b2:	e7f7      	b.n	b78a4 <__mcmp+0x28>

000b78b4 <__mdiff>:
   b78b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b78b8:	460c      	mov	r4, r1
   b78ba:	4606      	mov	r6, r0
   b78bc:	4611      	mov	r1, r2
   b78be:	4620      	mov	r0, r4
   b78c0:	4690      	mov	r8, r2
   b78c2:	f7ff ffdb 	bl	b787c <__mcmp>
   b78c6:	1e05      	subs	r5, r0, #0
   b78c8:	d110      	bne.n	b78ec <__mdiff+0x38>
   b78ca:	4629      	mov	r1, r5
   b78cc:	4630      	mov	r0, r6
   b78ce:	f7ff fd09 	bl	b72e4 <_Balloc>
   b78d2:	b930      	cbnz	r0, b78e2 <__mdiff+0x2e>
   b78d4:	4b3a      	ldr	r3, [pc, #232]	; (b79c0 <__mdiff+0x10c>)
   b78d6:	4602      	mov	r2, r0
   b78d8:	f240 2132 	movw	r1, #562	; 0x232
   b78dc:	4839      	ldr	r0, [pc, #228]	; (b79c4 <__mdiff+0x110>)
   b78de:	f7fd f8ad 	bl	b4a3c <__assert_func>
   b78e2:	2301      	movs	r3, #1
   b78e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
   b78e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b78ec:	bfa4      	itt	ge
   b78ee:	4643      	movge	r3, r8
   b78f0:	46a0      	movge	r8, r4
   b78f2:	4630      	mov	r0, r6
   b78f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
   b78f8:	bfa6      	itte	ge
   b78fa:	461c      	movge	r4, r3
   b78fc:	2500      	movge	r5, #0
   b78fe:	2501      	movlt	r5, #1
   b7900:	f7ff fcf0 	bl	b72e4 <_Balloc>
   b7904:	b920      	cbnz	r0, b7910 <__mdiff+0x5c>
   b7906:	4b2e      	ldr	r3, [pc, #184]	; (b79c0 <__mdiff+0x10c>)
   b7908:	4602      	mov	r2, r0
   b790a:	f44f 7110 	mov.w	r1, #576	; 0x240
   b790e:	e7e5      	b.n	b78dc <__mdiff+0x28>
   b7910:	f8d8 7010 	ldr.w	r7, [r8, #16]
   b7914:	6926      	ldr	r6, [r4, #16]
   b7916:	60c5      	str	r5, [r0, #12]
   b7918:	f104 0914 	add.w	r9, r4, #20
   b791c:	f108 0514 	add.w	r5, r8, #20
   b7920:	f100 0e14 	add.w	lr, r0, #20
   b7924:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   b7928:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   b792c:	f108 0210 	add.w	r2, r8, #16
   b7930:	46f2      	mov	sl, lr
   b7932:	2100      	movs	r1, #0
   b7934:	f859 3b04 	ldr.w	r3, [r9], #4
   b7938:	f852 bf04 	ldr.w	fp, [r2, #4]!
   b793c:	fa1f f883 	uxth.w	r8, r3
   b7940:	fa11 f18b 	uxtah	r1, r1, fp
   b7944:	0c1b      	lsrs	r3, r3, #16
   b7946:	eba1 0808 	sub.w	r8, r1, r8
   b794a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   b794e:	eb03 4328 	add.w	r3, r3, r8, asr #16
   b7952:	fa1f f888 	uxth.w	r8, r8
   b7956:	1419      	asrs	r1, r3, #16
   b7958:	454e      	cmp	r6, r9
   b795a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   b795e:	f84a 3b04 	str.w	r3, [sl], #4
   b7962:	d8e7      	bhi.n	b7934 <__mdiff+0x80>
   b7964:	1b33      	subs	r3, r6, r4
   b7966:	3b15      	subs	r3, #21
   b7968:	f023 0303 	bic.w	r3, r3, #3
   b796c:	3304      	adds	r3, #4
   b796e:	3415      	adds	r4, #21
   b7970:	42a6      	cmp	r6, r4
   b7972:	bf38      	it	cc
   b7974:	2304      	movcc	r3, #4
   b7976:	441d      	add	r5, r3
   b7978:	4473      	add	r3, lr
   b797a:	469e      	mov	lr, r3
   b797c:	462e      	mov	r6, r5
   b797e:	4566      	cmp	r6, ip
   b7980:	d30e      	bcc.n	b79a0 <__mdiff+0xec>
   b7982:	f10c 0203 	add.w	r2, ip, #3
   b7986:	1b52      	subs	r2, r2, r5
   b7988:	f022 0203 	bic.w	r2, r2, #3
   b798c:	3d03      	subs	r5, #3
   b798e:	45ac      	cmp	ip, r5
   b7990:	bf38      	it	cc
   b7992:	2200      	movcc	r2, #0
   b7994:	441a      	add	r2, r3
   b7996:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   b799a:	b17b      	cbz	r3, b79bc <__mdiff+0x108>
   b799c:	6107      	str	r7, [r0, #16]
   b799e:	e7a3      	b.n	b78e8 <__mdiff+0x34>
   b79a0:	f856 8b04 	ldr.w	r8, [r6], #4
   b79a4:	fa11 f288 	uxtah	r2, r1, r8
   b79a8:	1414      	asrs	r4, r2, #16
   b79aa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   b79ae:	b292      	uxth	r2, r2
   b79b0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   b79b4:	f84e 2b04 	str.w	r2, [lr], #4
   b79b8:	1421      	asrs	r1, r4, #16
   b79ba:	e7e0      	b.n	b797e <__mdiff+0xca>
   b79bc:	3f01      	subs	r7, #1
   b79be:	e7ea      	b.n	b7996 <__mdiff+0xe2>
   b79c0:	000b8079 	.word	0x000b8079
   b79c4:	000b8128 	.word	0x000b8128

000b79c8 <__ulp>:
   b79c8:	b082      	sub	sp, #8
   b79ca:	ed8d 0b00 	vstr	d0, [sp]
   b79ce:	9b01      	ldr	r3, [sp, #4]
   b79d0:	4912      	ldr	r1, [pc, #72]	; (b7a1c <__ulp+0x54>)
   b79d2:	4019      	ands	r1, r3
   b79d4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   b79d8:	2900      	cmp	r1, #0
   b79da:	dd05      	ble.n	b79e8 <__ulp+0x20>
   b79dc:	2200      	movs	r2, #0
   b79de:	460b      	mov	r3, r1
   b79e0:	ec43 2b10 	vmov	d0, r2, r3
   b79e4:	b002      	add	sp, #8
   b79e6:	4770      	bx	lr
   b79e8:	4249      	negs	r1, r1
   b79ea:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   b79ee:	ea4f 5021 	mov.w	r0, r1, asr #20
   b79f2:	f04f 0200 	mov.w	r2, #0
   b79f6:	f04f 0300 	mov.w	r3, #0
   b79fa:	da04      	bge.n	b7a06 <__ulp+0x3e>
   b79fc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   b7a00:	fa41 f300 	asr.w	r3, r1, r0
   b7a04:	e7ec      	b.n	b79e0 <__ulp+0x18>
   b7a06:	f1a0 0114 	sub.w	r1, r0, #20
   b7a0a:	291e      	cmp	r1, #30
   b7a0c:	bfda      	itte	le
   b7a0e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   b7a12:	fa20 f101 	lsrle.w	r1, r0, r1
   b7a16:	2101      	movgt	r1, #1
   b7a18:	460a      	mov	r2, r1
   b7a1a:	e7e1      	b.n	b79e0 <__ulp+0x18>
   b7a1c:	7ff00000 	.word	0x7ff00000

000b7a20 <__b2d>:
   b7a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7a22:	6905      	ldr	r5, [r0, #16]
   b7a24:	f100 0714 	add.w	r7, r0, #20
   b7a28:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   b7a2c:	1f2e      	subs	r6, r5, #4
   b7a2e:	f855 4c04 	ldr.w	r4, [r5, #-4]
   b7a32:	4620      	mov	r0, r4
   b7a34:	f7ff fd48 	bl	b74c8 <__hi0bits>
   b7a38:	f1c0 0320 	rsb	r3, r0, #32
   b7a3c:	280a      	cmp	r0, #10
   b7a3e:	f8df c07c 	ldr.w	ip, [pc, #124]	; b7abc <__b2d+0x9c>
   b7a42:	600b      	str	r3, [r1, #0]
   b7a44:	dc14      	bgt.n	b7a70 <__b2d+0x50>
   b7a46:	f1c0 0e0b 	rsb	lr, r0, #11
   b7a4a:	fa24 f10e 	lsr.w	r1, r4, lr
   b7a4e:	42b7      	cmp	r7, r6
   b7a50:	ea41 030c 	orr.w	r3, r1, ip
   b7a54:	bf34      	ite	cc
   b7a56:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   b7a5a:	2100      	movcs	r1, #0
   b7a5c:	3015      	adds	r0, #21
   b7a5e:	fa04 f000 	lsl.w	r0, r4, r0
   b7a62:	fa21 f10e 	lsr.w	r1, r1, lr
   b7a66:	ea40 0201 	orr.w	r2, r0, r1
   b7a6a:	ec43 2b10 	vmov	d0, r2, r3
   b7a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b7a70:	42b7      	cmp	r7, r6
   b7a72:	bf3a      	itte	cc
   b7a74:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   b7a78:	f1a5 0608 	subcc.w	r6, r5, #8
   b7a7c:	2100      	movcs	r1, #0
   b7a7e:	380b      	subs	r0, #11
   b7a80:	d017      	beq.n	b7ab2 <__b2d+0x92>
   b7a82:	f1c0 0c20 	rsb	ip, r0, #32
   b7a86:	fa04 f500 	lsl.w	r5, r4, r0
   b7a8a:	42be      	cmp	r6, r7
   b7a8c:	fa21 f40c 	lsr.w	r4, r1, ip
   b7a90:	ea45 0504 	orr.w	r5, r5, r4
   b7a94:	bf8c      	ite	hi
   b7a96:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   b7a9a:	2400      	movls	r4, #0
   b7a9c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   b7aa0:	fa01 f000 	lsl.w	r0, r1, r0
   b7aa4:	fa24 f40c 	lsr.w	r4, r4, ip
   b7aa8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   b7aac:	ea40 0204 	orr.w	r2, r0, r4
   b7ab0:	e7db      	b.n	b7a6a <__b2d+0x4a>
   b7ab2:	ea44 030c 	orr.w	r3, r4, ip
   b7ab6:	460a      	mov	r2, r1
   b7ab8:	e7d7      	b.n	b7a6a <__b2d+0x4a>
   b7aba:	bf00      	nop
   b7abc:	3ff00000 	.word	0x3ff00000

000b7ac0 <__d2b>:
   b7ac0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b7ac4:	4689      	mov	r9, r1
   b7ac6:	2101      	movs	r1, #1
   b7ac8:	ec57 6b10 	vmov	r6, r7, d0
   b7acc:	4690      	mov	r8, r2
   b7ace:	f7ff fc09 	bl	b72e4 <_Balloc>
   b7ad2:	4604      	mov	r4, r0
   b7ad4:	b930      	cbnz	r0, b7ae4 <__d2b+0x24>
   b7ad6:	4602      	mov	r2, r0
   b7ad8:	4b25      	ldr	r3, [pc, #148]	; (b7b70 <__d2b+0xb0>)
   b7ada:	4826      	ldr	r0, [pc, #152]	; (b7b74 <__d2b+0xb4>)
   b7adc:	f240 310a 	movw	r1, #778	; 0x30a
   b7ae0:	f7fc ffac 	bl	b4a3c <__assert_func>
   b7ae4:	f3c7 550a 	ubfx	r5, r7, #20, #11
   b7ae8:	f3c7 0313 	ubfx	r3, r7, #0, #20
   b7aec:	bb35      	cbnz	r5, b7b3c <__d2b+0x7c>
   b7aee:	2e00      	cmp	r6, #0
   b7af0:	9301      	str	r3, [sp, #4]
   b7af2:	d028      	beq.n	b7b46 <__d2b+0x86>
   b7af4:	4668      	mov	r0, sp
   b7af6:	9600      	str	r6, [sp, #0]
   b7af8:	f7ff fd06 	bl	b7508 <__lo0bits>
   b7afc:	9900      	ldr	r1, [sp, #0]
   b7afe:	b300      	cbz	r0, b7b42 <__d2b+0x82>
   b7b00:	9a01      	ldr	r2, [sp, #4]
   b7b02:	f1c0 0320 	rsb	r3, r0, #32
   b7b06:	fa02 f303 	lsl.w	r3, r2, r3
   b7b0a:	430b      	orrs	r3, r1
   b7b0c:	40c2      	lsrs	r2, r0
   b7b0e:	6163      	str	r3, [r4, #20]
   b7b10:	9201      	str	r2, [sp, #4]
   b7b12:	9b01      	ldr	r3, [sp, #4]
   b7b14:	61a3      	str	r3, [r4, #24]
   b7b16:	2b00      	cmp	r3, #0
   b7b18:	bf14      	ite	ne
   b7b1a:	2202      	movne	r2, #2
   b7b1c:	2201      	moveq	r2, #1
   b7b1e:	6122      	str	r2, [r4, #16]
   b7b20:	b1d5      	cbz	r5, b7b58 <__d2b+0x98>
   b7b22:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   b7b26:	4405      	add	r5, r0
   b7b28:	f8c9 5000 	str.w	r5, [r9]
   b7b2c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   b7b30:	f8c8 0000 	str.w	r0, [r8]
   b7b34:	4620      	mov	r0, r4
   b7b36:	b003      	add	sp, #12
   b7b38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b7b3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b7b40:	e7d5      	b.n	b7aee <__d2b+0x2e>
   b7b42:	6161      	str	r1, [r4, #20]
   b7b44:	e7e5      	b.n	b7b12 <__d2b+0x52>
   b7b46:	a801      	add	r0, sp, #4
   b7b48:	f7ff fcde 	bl	b7508 <__lo0bits>
   b7b4c:	9b01      	ldr	r3, [sp, #4]
   b7b4e:	6163      	str	r3, [r4, #20]
   b7b50:	2201      	movs	r2, #1
   b7b52:	6122      	str	r2, [r4, #16]
   b7b54:	3020      	adds	r0, #32
   b7b56:	e7e3      	b.n	b7b20 <__d2b+0x60>
   b7b58:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   b7b5c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   b7b60:	f8c9 0000 	str.w	r0, [r9]
   b7b64:	6918      	ldr	r0, [r3, #16]
   b7b66:	f7ff fcaf 	bl	b74c8 <__hi0bits>
   b7b6a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   b7b6e:	e7df      	b.n	b7b30 <__d2b+0x70>
   b7b70:	000b8079 	.word	0x000b8079
   b7b74:	000b8128 	.word	0x000b8128

000b7b78 <__ratio>:
   b7b78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7b7c:	4688      	mov	r8, r1
   b7b7e:	4669      	mov	r1, sp
   b7b80:	4681      	mov	r9, r0
   b7b82:	f7ff ff4d 	bl	b7a20 <__b2d>
   b7b86:	a901      	add	r1, sp, #4
   b7b88:	4640      	mov	r0, r8
   b7b8a:	ec55 4b10 	vmov	r4, r5, d0
   b7b8e:	f7ff ff47 	bl	b7a20 <__b2d>
   b7b92:	f8d9 3010 	ldr.w	r3, [r9, #16]
   b7b96:	f8d8 2010 	ldr.w	r2, [r8, #16]
   b7b9a:	eba3 0c02 	sub.w	ip, r3, r2
   b7b9e:	e9dd 3200 	ldrd	r3, r2, [sp]
   b7ba2:	1a9b      	subs	r3, r3, r2
   b7ba4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   b7ba8:	ec51 0b10 	vmov	r0, r1, d0
   b7bac:	2b00      	cmp	r3, #0
   b7bae:	bfd6      	itet	le
   b7bb0:	460a      	movle	r2, r1
   b7bb2:	462a      	movgt	r2, r5
   b7bb4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   b7bb8:	468b      	mov	fp, r1
   b7bba:	462f      	mov	r7, r5
   b7bbc:	bfd4      	ite	le
   b7bbe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   b7bc2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   b7bc6:	4620      	mov	r0, r4
   b7bc8:	ee10 2a10 	vmov	r2, s0
   b7bcc:	465b      	mov	r3, fp
   b7bce:	4639      	mov	r1, r7
   b7bd0:	f7fd ff08 	bl	b59e4 <__aeabi_ddiv>
   b7bd4:	ec41 0b10 	vmov	d0, r0, r1
   b7bd8:	b003      	add	sp, #12
   b7bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b7bde <__copybits>:
   b7bde:	3901      	subs	r1, #1
   b7be0:	b570      	push	{r4, r5, r6, lr}
   b7be2:	1149      	asrs	r1, r1, #5
   b7be4:	6914      	ldr	r4, [r2, #16]
   b7be6:	3101      	adds	r1, #1
   b7be8:	f102 0314 	add.w	r3, r2, #20
   b7bec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   b7bf0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   b7bf4:	1f05      	subs	r5, r0, #4
   b7bf6:	42a3      	cmp	r3, r4
   b7bf8:	d30c      	bcc.n	b7c14 <__copybits+0x36>
   b7bfa:	1aa3      	subs	r3, r4, r2
   b7bfc:	3b11      	subs	r3, #17
   b7bfe:	f023 0303 	bic.w	r3, r3, #3
   b7c02:	3211      	adds	r2, #17
   b7c04:	42a2      	cmp	r2, r4
   b7c06:	bf88      	it	hi
   b7c08:	2300      	movhi	r3, #0
   b7c0a:	4418      	add	r0, r3
   b7c0c:	2300      	movs	r3, #0
   b7c0e:	4288      	cmp	r0, r1
   b7c10:	d305      	bcc.n	b7c1e <__copybits+0x40>
   b7c12:	bd70      	pop	{r4, r5, r6, pc}
   b7c14:	f853 6b04 	ldr.w	r6, [r3], #4
   b7c18:	f845 6f04 	str.w	r6, [r5, #4]!
   b7c1c:	e7eb      	b.n	b7bf6 <__copybits+0x18>
   b7c1e:	f840 3b04 	str.w	r3, [r0], #4
   b7c22:	e7f4      	b.n	b7c0e <__copybits+0x30>

000b7c24 <__any_on>:
   b7c24:	f100 0214 	add.w	r2, r0, #20
   b7c28:	6900      	ldr	r0, [r0, #16]
   b7c2a:	114b      	asrs	r3, r1, #5
   b7c2c:	4298      	cmp	r0, r3
   b7c2e:	b510      	push	{r4, lr}
   b7c30:	db11      	blt.n	b7c56 <__any_on+0x32>
   b7c32:	dd0a      	ble.n	b7c4a <__any_on+0x26>
   b7c34:	f011 011f 	ands.w	r1, r1, #31
   b7c38:	d007      	beq.n	b7c4a <__any_on+0x26>
   b7c3a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   b7c3e:	fa24 f001 	lsr.w	r0, r4, r1
   b7c42:	fa00 f101 	lsl.w	r1, r0, r1
   b7c46:	428c      	cmp	r4, r1
   b7c48:	d10b      	bne.n	b7c62 <__any_on+0x3e>
   b7c4a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   b7c4e:	4293      	cmp	r3, r2
   b7c50:	d803      	bhi.n	b7c5a <__any_on+0x36>
   b7c52:	2000      	movs	r0, #0
   b7c54:	bd10      	pop	{r4, pc}
   b7c56:	4603      	mov	r3, r0
   b7c58:	e7f7      	b.n	b7c4a <__any_on+0x26>
   b7c5a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   b7c5e:	2900      	cmp	r1, #0
   b7c60:	d0f5      	beq.n	b7c4e <__any_on+0x2a>
   b7c62:	2001      	movs	r0, #1
   b7c64:	e7f6      	b.n	b7c54 <__any_on+0x30>

000b7c66 <_calloc_r>:
   b7c66:	b513      	push	{r0, r1, r4, lr}
   b7c68:	434a      	muls	r2, r1
   b7c6a:	4611      	mov	r1, r2
   b7c6c:	9201      	str	r2, [sp, #4]
   b7c6e:	f7fc fedd 	bl	b4a2c <_malloc_r>
   b7c72:	4604      	mov	r4, r0
   b7c74:	b118      	cbz	r0, b7c7e <_calloc_r+0x18>
   b7c76:	9a01      	ldr	r2, [sp, #4]
   b7c78:	2100      	movs	r1, #0
   b7c7a:	f7fe f8c8 	bl	b5e0e <memset>
   b7c7e:	4620      	mov	r0, r4
   b7c80:	b002      	add	sp, #8
   b7c82:	bd10      	pop	{r4, pc}
   b7c84:	0000      	movs	r0, r0
	...

000b7c88 <nan>:
   b7c88:	ed9f 0b01 	vldr	d0, [pc, #4]	; b7c90 <nan+0x8>
   b7c8c:	4770      	bx	lr
   b7c8e:	bf00      	nop
   b7c90:	00000000 	.word	0x00000000
   b7c94:	7ff80000 	.word	0x7ff80000

000b7c98 <__ascii_wctomb>:
   b7c98:	b149      	cbz	r1, b7cae <__ascii_wctomb+0x16>
   b7c9a:	2aff      	cmp	r2, #255	; 0xff
   b7c9c:	bf85      	ittet	hi
   b7c9e:	238a      	movhi	r3, #138	; 0x8a
   b7ca0:	6003      	strhi	r3, [r0, #0]
   b7ca2:	700a      	strbls	r2, [r1, #0]
   b7ca4:	f04f 30ff 	movhi.w	r0, #4294967295
   b7ca8:	bf98      	it	ls
   b7caa:	2001      	movls	r0, #1
   b7cac:	4770      	bx	lr
   b7cae:	4608      	mov	r0, r1
   b7cb0:	4770      	bx	lr
	...

000b7cb4 <__aeabi_d2lz>:
   b7cb4:	b538      	push	{r3, r4, r5, lr}
   b7cb6:	2200      	movs	r2, #0
   b7cb8:	2300      	movs	r3, #0
   b7cba:	4604      	mov	r4, r0
   b7cbc:	460d      	mov	r5, r1
   b7cbe:	f7fd ffd9 	bl	b5c74 <__aeabi_dcmplt>
   b7cc2:	b928      	cbnz	r0, b7cd0 <__aeabi_d2lz+0x1c>
   b7cc4:	4620      	mov	r0, r4
   b7cc6:	4629      	mov	r1, r5
   b7cc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b7ccc:	f7fe b86a 	b.w	b5da4 <__aeabi_d2ulz>
   b7cd0:	4620      	mov	r0, r4
   b7cd2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   b7cd6:	f7fe f865 	bl	b5da4 <__aeabi_d2ulz>
   b7cda:	4240      	negs	r0, r0
   b7cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7ce0:	bd38      	pop	{r3, r4, r5, pc}
   b7ce2:	bf00      	nop

000b7ce4 <dynalib_user>:
   b7ce4:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b7cf4:	0000 0000 6574 706d 0046 0000               ....tempF...

000b7d00 <CSWTCH.88>:
   b7d00:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   b7d10:	0050 0000                                   P...

000b7d14 <_ZTVN5spark13EthernetClassE>:
	...
   b7d1c:	4abb 000b 4ab1 000b 4aa7 000b 4a9d 000b     .J...J...J...J..
   b7d2c:	4a91 000b 4a85 000b 5121 000b 5129 000b     .J...J..!Q..)Q..
   b7d3c:	4a79 000b 4a71 000b 4a67 000b 4a5d 000b     yJ..qJ..gJ..]J..
   b7d4c:	5159 000b 7061 0070 5925 252d 2d6d 6425     YQ..app.%Y-%m-%d
   b7d5c:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b7d6c:	6d69 0065                                   ime.

000b7d70 <_ZTV9IPAddress>:
	...
   b7d78:	4d4d 000b 4d3d 000b 4d3f 000b               MM..=M..?M..

000b7d84 <_ZTV9USBSerial>:
	...
   b7d8c:	4e33 000b 4e9b 000b 4e71 000b 4b21 000b     3N...N..qN..!K..
   b7d9c:	4e63 000b 4e35 000b 4e45 000b 4e95 000b     cN..5N..EN...N..
   b7dac:	4e55 000b 4e2d 000b                         UN..-N..

000b7db4 <_ZTV11USARTSerial>:
	...
   b7dbc:	4f2d 000b 4f99 000b 4f71 000b 4b21 000b     -O...O..qO..!K..
   b7dcc:	4f41 000b 4f5d 000b 4f4f 000b 4f6b 000b     AO..]O..OO..kO..
   b7ddc:	4f2f 000b 4f33 000b                         /O..3O..

000b7de4 <_ZTV7TwoWire>:
	...
   b7dec:	4fd1 000b 501b 000b 4ff3 000b 4fd3 000b     .O...P...O...O..
   b7dfc:	4ffb 000b 5003 000b 500b 000b 5013 000b     .O...P...P...P..

000b7e0c <_ZTVN5spark9WiFiClassE>:
	...
   b7e14:	50c3 000b 50b9 000b 50af 000b 5065 000b     .P...P...P..eP..
   b7e24:	50a3 000b 5097 000b 5121 000b 5129 000b     .P...P..!Q..)Q..
   b7e34:	508b 000b 5083 000b 5079 000b 506f 000b     .P...P..yP..oP..
   b7e44:	5159 000b                                   YQ..

000b7e48 <_ZTVN5spark12NetworkClassE>:
	...
   b7e50:	50e1 000b 50eb 000b 50f5 000b 50ff 000b     .P...P...P...P..
   b7e60:	5109 000b 5115 000b 5121 000b 5129 000b     .Q...Q..!Q..)Q..
   b7e70:	5131 000b 513d 000b 5145 000b 514f 000b     1Q..=Q..EQ..OQ..
   b7e80:	5159 000b                                   YQ..

000b7e84 <_ZSt7nothrow>:
   b7e84:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b7e94:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   b7ea4:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   b7eb4:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   b7ec4:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   b7ed4:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   b7ee4:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   b7ef4:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   b7f04:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   b7f14:	646e 632e 6e00 0066 6e69 7469 0079 6e61     nd.c.nf.inity.an
   b7f24:	0000 0000                                   ....

000b7f28 <fpi.1>:
   b7f28:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   b7f38:	0000 0000                                   ....

000b7f3c <fpinan.0>:
   b7f3c:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   b7f4c:	0000 0000                                   ....

000b7f50 <tinytens>:
   b7f50:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   b7f60:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   b7f70:	6f43 64ac 0628 1168                         Co.d(.h.

000b7f78 <_ctype_>:
   b7f78:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b7f88:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b7f98:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b7fa8:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b7fb8:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b7fc8:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b7fd8:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b7fe8:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b7ff8:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   b8078:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   b8088:	0064 6d2f 746e 772f 726f 736b 6170 6563     d./mnt/workspace
   b8098:	772f 726f 736b 6170 6563 472f 4343 312d     /workspace/GCC-1
   b80a8:	2d30 6970 6570 696c 656e 6a2f 6e65 696b     0-pipeline/jenki
   b80b8:	736e 472d 4343 312d 2d30 6970 6570 696c     ns-GCC-10-pipeli
   b80c8:	656e 342d 5f38 3032 3032 3131 3432 315f     ne-48_20201124_1
   b80d8:	3036 3136 3038 3436 2f31 7273 2f63 656e     606180641/src/ne
   b80e8:	6c77 6269 6e2f 7765 696c 2f62 696c 6362     wlib/newlib/libc
   b80f8:	732f 6474 696c 2f62 6467 6f74 2d61 6567     /stdlib/gdtoa-ge
   b8108:	6874 7865 632e 2e00 0000 0000               thex.c......

000b8114 <_C_numeric_locale>:
   b8114:	810f 000b 8110 000b e518 2003 0043 4f50     ........... C.PO
   b8124:	4953 0058 6d2f 746e 772f 726f 736b 6170     SIX./mnt/workspa
   b8134:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   b8144:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   b8154:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b8164:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b8174:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   b8184:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b8194:	6362 732f 6474 696c 2f62 706d 6572 2e63     bc/stdlib/mprec.
   b81a4:	0063 0000                                   c...

000b81a8 <__mprec_bigtens>:
   b81a8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   b81b8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   b81c8:	bf3c 7f73 4fdd 7515                         <.s..O.u

000b81d0 <__mprec_tens>:
   b81d0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   b81e0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   b81f0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   b8200:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   b8210:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   b8220:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   b8230:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   b8240:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   b8250:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   b8260:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   b8270:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   b8280:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   b8290:	9db4 79d9 7843 44ea                         ...yCx.D

000b8298 <p05.0>:
   b8298:	0005 0000 0019 0000 007d 0000               ........}...

000b82a4 <link_const_variable_data_end>:
   b82a4:	000b41bd 	.word	0x000b41bd
   b82a8:	000b4695 	.word	0x000b4695
   b82ac:	000b4ac5 	.word	0x000b4ac5
   b82b0:	000b4aed 	.word	0x000b4aed
   b82b4:	000b4b11 	.word	0x000b4b11
   b82b8:	000b4bb5 	.word	0x000b4bb5
   b82bc:	000b4bc5 	.word	0x000b4bc5
   b82c0:	000b4bf9 	.word	0x000b4bf9
   b82c4:	000b50cd 	.word	0x000b50cd
   b82c8:	000b5231 	.word	0x000b5231

000b82cc <link_constructors_end>:
   b82cc:	00000000 	.word	0x00000000
