
c:/Users/nick/Documents/IoT/SmartRoom/SmartRoom-insurance/target/4.0.2/argon/SmartRoom-insurance.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000043b0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b83d0  000b83d0  000083d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b83f4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001dc  2003e4c4  000b83f8  0001e4c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000150  2003e6a0  2003e6a0  0002e6a0  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b85d4  000b85d4  000285d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b85fc  000b85fc  000285fc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000f4476  00000000  00000000  00028600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000103e8  00000000  00000000  0011ca76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00032560  00000000  00000000  0012ce5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000026a0  00000000  00000000  0015f3be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00009228  00000000  00000000  00161a5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000364b8  00000000  00000000  0016ac86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00036f29  00000000  00000000  001a113e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0012e16d  00000000  00000000  001d8067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00007314  00000000  00000000  003061d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f001 ff5c 	bl	b5eee <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f001 ff64 	bl	b5f0a <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e4c4 	.word	0x2003e4c4
   b404c:	000b83f8 	.word	0x000b83f8
   b4050:	2003e6a0 	.word	0x2003e6a0
   b4054:	2003e6a0 	.word	0x2003e6a0
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f000 fe8f 	bl	b4d84 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b839c 	.word	0x000b839c
   b4080:	000b83c4 	.word	0x000b83c4

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b814 	b.w	b40b0 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f829 	bl	b40e0 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f000 be2f 	b.w	b4cf4 <_post_loop>

000b4096 <_Znaj>:
   b4096:	f000 bcd9 	b.w	b4a4c <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f000 bcdf 	b.w	b4a5c <free>

000b409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409e:	7800      	ldrb	r0, [r0, #0]
   b40a0:	fab0 f080 	clz	r0, r0
   b40a4:	0940      	lsrs	r0, r0, #5
   b40a6:	4770      	bx	lr

000b40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a8:	2301      	movs	r3, #1
   b40aa:	7003      	strb	r3, [r0, #0]
   b40ac:	4770      	bx	lr
	...

000b40b0 <setup>:
   b40b0:	b507      	push	{r0, r1, r2, lr}
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   b40b2:	f000 fcb3 	bl	b4a1c <spark_cloud_flag_connect>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b40b6:	2200      	movs	r2, #0
   b40b8:	e9cd 2200 	strd	r2, r2, [sp]
   b40bc:	4905      	ldr	r1, [pc, #20]	; (b40d4 <setup+0x24>)
   b40be:	4806      	ldr	r0, [pc, #24]	; (b40d8 <setup+0x28>)
   b40c0:	2301      	movs	r3, #1
   b40c2:	f000 fcb3 	bl	b4a2c <spark_subscribe>
   b40c6:	4805      	ldr	r0, [pc, #20]	; (b40dc <setup+0x2c>)
   b40c8:	210f      	movs	r1, #15
   b40ca:	b003      	add	sp, #12
   b40cc:	f85d eb04 	ldr.w	lr, [sp], #4
   b40d0:	f000 bad3 	b.w	b467a <_ZN17Adafruit_NeoPixel13setBrightnessEh>
   b40d4:	000b4111 	.word	0x000b4111
   b40d8:	000b7df0 	.word	0x000b7df0
   b40dc:	2003e6a0 	.word	0x2003e6a0

000b40e0 <loop>:
   b40e0:	2064      	movs	r0, #100	; 0x64
   b40e2:	f000 bddc 	b.w	b4c9e <delay>
	...

000b40e8 <_Z9pixelFilliim>:
   b40e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b40ea:	4e07      	ldr	r6, [pc, #28]	; (b4108 <_Z9pixelFilliim+0x20>)
   b40ec:	4604      	mov	r4, r0
   b40ee:	460d      	mov	r5, r1
   b40f0:	4617      	mov	r7, r2
   b40f2:	42ac      	cmp	r4, r5
   b40f4:	da06      	bge.n	b4104 <_Z9pixelFilliim+0x1c>
   b40f6:	b2a1      	uxth	r1, r4
   b40f8:	463a      	mov	r2, r7
   b40fa:	4630      	mov	r0, r6
   b40fc:	f000 fa7a 	bl	b45f4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
   b4100:	3401      	adds	r4, #1
   b4102:	e7f6      	b.n	b40f2 <_Z9pixelFilliim+0xa>
   b4104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b4106:	bf00      	nop
   b4108:	2003e6a0 	.word	0x2003e6a0
   b410c:	00000000 	.word	0x00000000

000b4110 <_Z8setTowerPKcS0_>:
   b4110:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4112:	ed2d 8b08 	vpush	{d8-d11}
   b4116:	4608      	mov	r0, r1
   b4118:	b083      	sub	sp, #12
   b411a:	f001 fee5 	bl	b5ee8 <atof>
   b411e:	ec51 0b10 	vmov	r0, r1, d0
   b4122:	f001 fe6d 	bl	b5e00 <__aeabi_d2f>
   b4126:	f001 fb31 	bl	b578c <__aeabi_f2d>
   b412a:	ed9f bb29 	vldr	d11, [pc, #164]	; b41d0 <_Z8setTowerPKcS0_+0xc0>
   b412e:	ed9f ab2a 	vldr	d10, [pc, #168]	; b41d8 <_Z8setTowerPKcS0_+0xc8>
   b4132:	eeb0 3a4b 	vmov.f32	s6, s22
   b4136:	eef0 3a6b 	vmov.f32	s7, s23
   b413a:	ed9f 9b29 	vldr	d9, [pc, #164]	; b41e0 <_Z8setTowerPKcS0_+0xd0>
   b413e:	eeb0 2a4a 	vmov.f32	s4, s20
   b4142:	eef0 2a6a 	vmov.f32	s5, s21
   b4146:	ec41 0b10 	vmov	d0, r0, r1
   b414a:	eeb0 1a49 	vmov.f32	s2, s18
   b414e:	eef0 1a69 	vmov.f32	s3, s19
   b4152:	ed9f 4b25 	vldr	d4, [pc, #148]	; b41e8 <_Z8setTowerPKcS0_+0xd8>
   b4156:	ec41 0b18 	vmov	d8, r0, r1
   b415a:	f000 fd5d 	bl	b4c18 <_Z3mapddddd>
   b415e:	eeb0 4a4b 	vmov.f32	s8, s22
   b4162:	eef0 4a6b 	vmov.f32	s9, s23
   b4166:	eeb0 2a4a 	vmov.f32	s4, s20
   b416a:	eef0 2a6a 	vmov.f32	s5, s21
   b416e:	ed9f 3b20 	vldr	d3, [pc, #128]	; b41f0 <_Z8setTowerPKcS0_+0xe0>
   b4172:	eeb0 1a49 	vmov.f32	s2, s18
   b4176:	eef0 1a69 	vmov.f32	s3, s19
   b417a:	ec57 6b10 	vmov	r6, r7, d0
   b417e:	eeb0 0a48 	vmov.f32	s0, s16
   b4182:	eef0 0a68 	vmov.f32	s1, s17
   b4186:	f000 fd47 	bl	b4c18 <_Z3mapddddd>
   b418a:	ec51 0b10 	vmov	r0, r1, d0
   b418e:	f001 fdef 	bl	b5d70 <__aeabi_d2iz>
   b4192:	4d19      	ldr	r5, [pc, #100]	; (b41f8 <_Z8setTowerPKcS0_+0xe8>)
   b4194:	f380 0408 	usat	r4, #8, r0
   b4198:	4628      	mov	r0, r5
   b419a:	f000 fa95 	bl	b46c8 <_ZN17Adafruit_NeoPixel5clearEv>
   b419e:	f1c4 02ff 	rsb	r2, r4, #255	; 0xff
   b41a2:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
   b41a6:	4639      	mov	r1, r7
   b41a8:	4630      	mov	r0, r6
   b41aa:	9201      	str	r2, [sp, #4]
   b41ac:	f001 fde0 	bl	b5d70 <__aeabi_d2iz>
   b41b0:	9a01      	ldr	r2, [sp, #4]
   b41b2:	4601      	mov	r1, r0
   b41b4:	2000      	movs	r0, #0
   b41b6:	f7ff ff97 	bl	b40e8 <_Z9pixelFilliim>
   b41ba:	4628      	mov	r0, r5
   b41bc:	b003      	add	sp, #12
   b41be:	ecbd 8b08 	vpop	{d8-d11}
   b41c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b41c6:	f000 b869 	b.w	b429c <_ZN17Adafruit_NeoPixel4showEv>
   b41ca:	bf00      	nop
   b41cc:	f3af 8000 	nop.w
	...
   b41dc:	40534000 	.word	0x40534000
   b41e0:	00000000 	.word	0x00000000
   b41e4:	40524000 	.word	0x40524000
   b41e8:	00000000 	.word	0x00000000
   b41ec:	40470000 	.word	0x40470000
   b41f0:	00000000 	.word	0x00000000
   b41f4:	406fe000 	.word	0x406fe000
   b41f8:	2003e6a0 	.word	0x2003e6a0

000b41fc <_GLOBAL__sub_I_pixel>:
   b41fc:	2302      	movs	r3, #2
   b41fe:	4802      	ldr	r0, [pc, #8]	; (b4208 <_GLOBAL__sub_I_pixel+0xc>)
   b4200:	461a      	mov	r2, r3
   b4202:	212e      	movs	r1, #46	; 0x2e
   b4204:	f000 b839 	b.w	b427a <_ZN17Adafruit_NeoPixelC1Ethh>
   b4208:	2003e6a0 	.word	0x2003e6a0

000b420c <_ZN17Adafruit_NeoPixel12updateLengthEt>:

uint8_t Adafruit_NeoPixel::getType() const {
    return type;
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b420c:	b538      	push	{r3, r4, r5, lr}
   b420e:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   b4210:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b4212:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   b4214:	b108      	cbz	r0, b421a <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   b4216:	f000 fc21 	bl	b4a5c <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   b421a:	79a3      	ldrb	r3, [r4, #6]
   b421c:	2b06      	cmp	r3, #6
   b421e:	bf0c      	ite	eq
   b4220:	2004      	moveq	r0, #4
   b4222:	2003      	movne	r0, #3
   b4224:	fb10 f005 	smulbb	r0, r0, r5
   b4228:	b280      	uxth	r0, r0
   b422a:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   b422c:	f000 fc0e 	bl	b4a4c <malloc>
   b4230:	60e0      	str	r0, [r4, #12]
   b4232:	b128      	cbz	r0, b4240 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   b4234:	88a2      	ldrh	r2, [r4, #4]
   b4236:	2100      	movs	r1, #0
   b4238:	f001 fe67 	bl	b5f0a <memset>
    numLEDs = n;
   b423c:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
   b423e:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
   b4240:	80a0      	strh	r0, [r4, #4]
   b4242:	8060      	strh	r0, [r4, #2]
}
   b4244:	e7fb      	b.n	b423e <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>

000b4246 <_ZN17Adafruit_NeoPixel6setPinEh>:
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b4246:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (begun) {
   b4248:	7803      	ldrb	r3, [r0, #0]
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b424a:	4605      	mov	r5, r0
   b424c:	460c      	mov	r4, r1
    if (begun) {
   b424e:	b11b      	cbz	r3, b4258 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   b4250:	79c0      	ldrb	r0, [r0, #7]
   b4252:	2100      	movs	r1, #0
   b4254:	f001 f88a 	bl	b536c <pinMode>
    }
    pin = p;
    if (begun) {
   b4258:	782b      	ldrb	r3, [r5, #0]
    pin = p;
   b425a:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   b425c:	b15b      	cbz	r3, b4276 <_ZN17Adafruit_NeoPixel6setPinEh+0x30>
        pinMode(p, OUTPUT);
   b425e:	b2a0      	uxth	r0, r4
   b4260:	2101      	movs	r1, #1
   b4262:	9001      	str	r0, [sp, #4]
   b4264:	f001 f882 	bl	b536c <pinMode>
        digitalWrite(p, LOW);
   b4268:	9801      	ldr	r0, [sp, #4]
   b426a:	2100      	movs	r1, #0
    }
}
   b426c:	b003      	add	sp, #12
   b426e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        digitalWrite(p, LOW);
   b4272:	f001 b88c 	b.w	b538e <digitalWrite>
}
   b4276:	b003      	add	sp, #12
   b4278:	bd30      	pop	{r4, r5, pc}

000b427a <_ZN17Adafruit_NeoPixelC1Ethh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b427a:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b427c:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b427e:	4604      	mov	r4, r0
   b4280:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b4282:	7183      	strb	r3, [r0, #6]
   b4284:	e9c0 5503 	strd	r5, r5, [r0, #12]
   b4288:	7005      	strb	r5, [r0, #0]
   b428a:	7205      	strb	r5, [r0, #8]
  updateLength(n);
   b428c:	f7ff ffbe 	bl	b420c <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   b4290:	4620      	mov	r0, r4
   b4292:	4631      	mov	r1, r6
   b4294:	f7ff ffd7 	bl	b4246 <_ZN17Adafruit_NeoPixel6setPinEh>
}
   b4298:	4620      	mov	r0, r4
   b429a:	bd70      	pop	{r4, r5, r6, pc}

000b429c <_ZN17Adafruit_NeoPixel4showEv>:

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   b429c:	68c3      	ldr	r3, [r0, #12]
   b429e:	2b00      	cmp	r3, #0
   b42a0:	f000 81a4 	beq.w	b45ec <_ZN17Adafruit_NeoPixel4showEv+0x350>
void Adafruit_NeoPixel::show(void) {
   b42a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b42a8:	7983      	ldrb	r3, [r0, #6]
   b42aa:	3b02      	subs	r3, #2
   b42ac:	b2db      	uxtb	r3, r3
   b42ae:	2b04      	cmp	r3, #4
   b42b0:	bf9c      	itt	ls
   b42b2:	4abf      	ldrls	r2, [pc, #764]	; (b45b0 <_ZN17Adafruit_NeoPixel4showEv+0x314>)
   b42b4:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   b42b8:	b085      	sub	sp, #20
   b42ba:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   b42bc:	bf88      	it	hi
   b42be:	2432      	movhi	r4, #50	; 0x32
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b42c0:	f000 fa50 	bl	b4764 <HAL_Timer_Get_Micro_Seconds>
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   b42c4:	692b      	ldr	r3, [r5, #16]
   b42c6:	1ac0      	subs	r0, r0, r3
   b42c8:	42a0      	cmp	r0, r4
   b42ca:	d3f9      	bcc.n	b42c0 <_ZN17Adafruit_NeoPixel4showEv+0x24>

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   b42cc:	4cb9      	ldr	r4, [pc, #740]	; (b45b4 <_ZN17Adafruit_NeoPixel4showEv+0x318>)
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b42ce:	88ae      	ldrh	r6, [r5, #4]
    if( (PWM[device]->ENABLE == 0)                            &&
   b42d0:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b42d4:	b91b      	cbnz	r3, b42de <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b42d6:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b42da:	2b00      	cmp	r3, #0
   b42dc:	db7e      	blt.n	b43dc <_ZN17Adafruit_NeoPixel4showEv+0x140>
   b42de:	4cb6      	ldr	r4, [pc, #728]	; (b45b8 <_ZN17Adafruit_NeoPixel4showEv+0x31c>)
   b42e0:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b42e4:	b923      	cbnz	r3, b42f0 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b42e6:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b42ea:	2b00      	cmp	r3, #0
   b42ec:	f2c0 816e 	blt.w	b45cc <_ZN17Adafruit_NeoPixel4showEv+0x330>
   b42f0:	4cb2      	ldr	r4, [pc, #712]	; (b45bc <_ZN17Adafruit_NeoPixel4showEv+0x320>)
   b42f2:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b42f6:	2b00      	cmp	r3, #0
   b42f8:	f000 8144 	beq.w	b4584 <_ZN17Adafruit_NeoPixel4showEv+0x2e8>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b42fc:	79eb      	ldrb	r3, [r5, #7]
   b42fe:	4ab0      	ldr	r2, [pc, #704]	; (b45c0 <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b4300:	4cb0      	ldr	r4, [pc, #704]	; (b45c4 <_ZN17Adafruit_NeoPixel4showEv+0x328>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4302:	6812      	ldr	r2, [r2, #0]
   b4304:	0119      	lsls	r1, r3, #4
   b4306:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   b430a:	5c57      	ldrb	r7, [r2, r1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b430c:	49ae      	ldr	r1, [pc, #696]	; (b45c8 <_ZN17Adafruit_NeoPixel4showEv+0x32c>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b430e:	785b      	ldrb	r3, [r3, #1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b4310:	f8d1 20fc 	ldr.w	r2, [r1, #252]	; 0xfc
   b4314:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   b4318:	f8c1 20fc 	str.w	r2, [r1, #252]	; 0xfc
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b431c:	6822      	ldr	r2, [r4, #0]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b431e:	f003 031f 	and.w	r3, r3, #31
   b4322:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   b4326:	2701      	movs	r7, #1
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b4328:	433a      	orrs	r2, r7
   b432a:	6022      	str	r2, [r4, #0]
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   b432c:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b432e:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b4332:	f8d4 9004 	ldr.w	r9, [r4, #4]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4336:	409f      	lsls	r7, r3
      for(uint16_t n=0; n<numBytes; n++) {
   b4338:	2900      	cmp	r1, #0
   b433a:	d044      	beq.n	b43c6 <_ZN17Adafruit_NeoPixel4showEv+0x12a>
   b433c:	f04f 0e00 	mov.w	lr, #0
      uint32_t cyc = 0;
   b4340:	4672      	mov	r2, lr

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   b4342:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
        uint8_t pix = *p++;
   b4346:	f818 cb01 	ldrb.w	ip, [r8], #1
   b434a:	2008      	movs	r0, #8
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b434c:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   b434e:	6863      	ldr	r3, [r4, #4]
   b4350:	1a9b      	subs	r3, r3, r2
   b4352:	2b46      	cmp	r3, #70	; 0x46
   b4354:	d9fb      	bls.n	b434e <_ZN17Adafruit_NeoPixel4showEv+0xb2>
          cyc  = DWT->CYCCNT;
   b4356:	6862      	ldr	r2, [r4, #4]
          NRF_GPIO->OUTSET |= pinMask;
   b4358:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   b435c:	ea1c 0f06 	tst.w	ip, r6
          NRF_GPIO->OUTSET |= pinMask;
   b4360:	ea43 0307 	orr.w	r3, r3, r7
   b4364:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
          if(pix & mask) {
   b4368:	d02f      	beq.n	b43ca <_ZN17Adafruit_NeoPixel4showEv+0x12e>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   b436a:	6863      	ldr	r3, [r4, #4]
   b436c:	1a9b      	subs	r3, r3, r2
   b436e:	2b28      	cmp	r3, #40	; 0x28
   b4370:	d9fb      	bls.n	b436a <_ZN17Adafruit_NeoPixel4showEv+0xce>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   b4372:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b4376:	3801      	subs	r0, #1
          NRF_GPIO->OUTCLR |= pinMask;
   b4378:	ea43 0307 	orr.w	r3, r3, r7
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b437c:	ea4f 0656 	mov.w	r6, r6, lsr #1
          NRF_GPIO->OUTCLR |= pinMask;
   b4380:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b4384:	d1e3      	bne.n	b434e <_ZN17Adafruit_NeoPixel4showEv+0xb2>
      for(uint16_t n=0; n<numBytes; n++) {
   b4386:	88ab      	ldrh	r3, [r5, #4]
   b4388:	f10e 0e01 	add.w	lr, lr, #1
   b438c:	fa1f fe8e 	uxth.w	lr, lr
   b4390:	4573      	cmp	r3, lr
   b4392:	d8d8      	bhi.n	b4346 <_ZN17Adafruit_NeoPixel4showEv+0xaa>
      while(DWT->CYCCNT - cyc < CYCLES_X00);


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b4394:	f44f 7130 	mov.w	r1, #704	; 0x2c0
   b4398:	fb03 f101 	mul.w	r1, r3, r1
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   b439c:	6863      	ldr	r3, [r4, #4]
   b439e:	1a9b      	subs	r3, r3, r2
   b43a0:	2b46      	cmp	r3, #70	; 0x46
   b43a2:	d9fb      	bls.n	b439c <_ZN17Adafruit_NeoPixel4showEv+0x100>
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b43a4:	6863      	ldr	r3, [r4, #4]
   b43a6:	eba3 0909 	sub.w	r9, r3, r9
   b43aa:	4589      	cmp	r9, r1
   b43ac:	f0c0 80e4 	bcc.w	b4578 <_ZN17Adafruit_NeoPixel4showEv+0x2dc>
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b43b0:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b43b4:	f000 f9ce 	bl	b4754 <HAL_Delay_Microseconds>
      for(uint16_t n=0; n<numBytes; n++) {
   b43b8:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b43ba:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b43be:	f8d4 9004 	ldr.w	r9, [r4, #4]
      for(uint16_t n=0; n<numBytes; n++) {
   b43c2:	2900      	cmp	r1, #0
   b43c4:	d1ba      	bne.n	b433c <_ZN17Adafruit_NeoPixel4showEv+0xa0>
      uint32_t cyc = 0;
   b43c6:	460a      	mov	r2, r1
   b43c8:	e7e8      	b.n	b439c <_ZN17Adafruit_NeoPixel4showEv+0x100>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   b43ca:	6863      	ldr	r3, [r4, #4]
   b43cc:	1a9b      	subs	r3, r3, r2
   b43ce:	2b11      	cmp	r3, #17
   b43d0:	d8cf      	bhi.n	b4372 <_ZN17Adafruit_NeoPixel4showEv+0xd6>
   b43d2:	6863      	ldr	r3, [r4, #4]
   b43d4:	1a9b      	subs	r3, r3, r2
   b43d6:	2b11      	cmp	r3, #17
   b43d8:	d9f7      	bls.n	b43ca <_ZN17Adafruit_NeoPixel4showEv+0x12e>
   b43da:	e7ca      	b.n	b4372 <_ZN17Adafruit_NeoPixel4showEv+0xd6>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b43dc:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b43e0:	2b00      	cmp	r3, #0
   b43e2:	f6bf af7c 	bge.w	b42de <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b43e6:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b43ea:	2b00      	cmp	r3, #0
   b43ec:	f6bf af77 	bge.w	b42de <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b43f0:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b43f4:	2b00      	cmp	r3, #0
   b43f6:	f6bf af72 	bge.w	b42de <_ZN17Adafruit_NeoPixel4showEv+0x42>
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b43fa:	0136      	lsls	r6, r6, #4
   b43fc:	1d33      	adds	r3, r6, #4
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b43fe:	4618      	mov	r0, r3
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b4400:	9300      	str	r3, [sp, #0]
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b4402:	f000 fb23 	bl	b4a4c <malloc>
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   b4406:	2800      	cmp	r0, #0
   b4408:	f43f af78 	beq.w	b42fc <_ZN17Adafruit_NeoPixel4showEv+0x60>
    for(uint16_t n=0; n<numBytes; n++) {
   b440c:	88ab      	ldrh	r3, [r5, #4]
   b440e:	2b00      	cmp	r3, #0
   b4410:	f000 80ed 	beq.w	b45ee <_ZN17Adafruit_NeoPixel4showEv+0x352>
      uint8_t pix = pixels[n];
   b4414:	68ea      	ldr	r2, [r5, #12]
   b4416:	3b01      	subs	r3, #1
   b4418:	fa12 f783 	uxtah	r7, r2, r3
   b441c:	f102 3eff 	add.w	lr, r2, #4294967295
    uint16_t pos = 0; // bit position
   b4420:	2300      	movs	r3, #0
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4422:	f248 0206 	movw	r2, #32774	; 0x8006
   b4426:	f248 010d 	movw	r1, #32781	; 0x800d
      uint8_t pix = pixels[n];
   b442a:	f81e cf01 	ldrb.w	ip, [lr, #1]!
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b442e:	f01c 0f80 	tst.w	ip, #128	; 0x80
   b4432:	bf0c      	ite	eq
   b4434:	4693      	moveq	fp, r2
   b4436:	468b      	movne	fp, r1
   b4438:	f01c 0f40 	tst.w	ip, #64	; 0x40
   b443c:	bf0c      	ite	eq
   b443e:	4616      	moveq	r6, r2
   b4440:	460e      	movne	r6, r1
   b4442:	f01c 0f20 	tst.w	ip, #32
   b4446:	bf0c      	ite	eq
   b4448:	4690      	moveq	r8, r2
   b444a:	4688      	movne	r8, r1
        pos++;
   b444c:	f103 0901 	add.w	r9, r3, #1
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4450:	f8cd 8008 	str.w	r8, [sp, #8]
   b4454:	9601      	str	r6, [sp, #4]
        pos++;
   b4456:	f103 0802 	add.w	r8, r3, #2
   b445a:	fa1f f989 	uxth.w	r9, r9
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b445e:	9e01      	ldr	r6, [sp, #4]
   b4460:	f820 b013 	strh.w	fp, [r0, r3, lsl #1]
        pos++;
   b4464:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4468:	f820 6019 	strh.w	r6, [r0, r9, lsl #1]
   b446c:	9e02      	ldr	r6, [sp, #8]
   b446e:	f820 6018 	strh.w	r6, [r0, r8, lsl #1]
        pos++;
   b4472:	f103 0803 	add.w	r8, r3, #3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4476:	f01c 0f10 	tst.w	ip, #16
        pos++;
   b447a:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b447e:	bf0c      	ite	eq
   b4480:	4693      	moveq	fp, r2
   b4482:	468b      	movne	fp, r1
   b4484:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b4488:	f103 0804 	add.w	r8, r3, #4
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b448c:	f01c 0f08 	tst.w	ip, #8
        pos++;
   b4490:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4494:	bf0c      	ite	eq
   b4496:	4693      	moveq	fp, r2
   b4498:	468b      	movne	fp, r1
   b449a:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b449e:	f103 0805 	add.w	r8, r3, #5
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b44a2:	f01c 0f04 	tst.w	ip, #4
        pos++;
   b44a6:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b44aa:	bf0c      	ite	eq
   b44ac:	4693      	moveq	fp, r2
   b44ae:	468b      	movne	fp, r1
   b44b0:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b44b4:	f103 0a08 	add.w	sl, r3, #8
   b44b8:	f103 0806 	add.w	r8, r3, #6
   b44bc:	3307      	adds	r3, #7
   b44be:	b29b      	uxth	r3, r3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b44c0:	f01c 0f02 	tst.w	ip, #2
        pos++;
   b44c4:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b44c8:	bf0c      	ite	eq
   b44ca:	4693      	moveq	fp, r2
   b44cc:	468b      	movne	fp, r1
        pos++;
   b44ce:	f8cd a00c 	str.w	sl, [sp, #12]
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b44d2:	f01c 0f01 	tst.w	ip, #1
   b44d6:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
   b44da:	bf15      	itete	ne
   b44dc:	f820 1013 	strhne.w	r1, [r0, r3, lsl #1]
   b44e0:	f820 2013 	strheq.w	r2, [r0, r3, lsl #1]
        pos++;
   b44e4:	fa1f f38a 	uxthne.w	r3, sl
   b44e8:	f8bd 300c 	ldrheq.w	r3, [sp, #12]
    for(uint16_t n=0; n<numBytes; n++) {
   b44ec:	4577      	cmp	r7, lr
   b44ee:	d19c      	bne.n	b442a <_ZN17Adafruit_NeoPixel4showEv+0x18e>
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b44f0:	1c59      	adds	r1, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b44f2:	3302      	adds	r3, #2
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b44f4:	b289      	uxth	r1, r1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b44f6:	b29b      	uxth	r3, r3
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b44f8:	0049      	lsls	r1, r1, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b44fa:	005b      	lsls	r3, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b44fc:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   b4500:	5247      	strh	r7, [r0, r1]
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b4502:	9a00      	ldr	r2, [sp, #0]
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4504:	52c7      	strh	r7, [r0, r3]
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4506:	4b2e      	ldr	r3, [pc, #184]	; (b45c0 <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b4508:	0856      	lsrs	r6, r2, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b450a:	681f      	ldr	r7, [r3, #0]
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b450c:	2200      	movs	r2, #0
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b450e:	2314      	movs	r3, #20
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b4510:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   b4514:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b4518:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   b451c:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
   b4520:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   b4524:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b4528:	f8c4 6524 	str.w	r6, [r4, #1316]	; 0x524
    pwm->SEQ[0].REFRESH  = 0;
   b452c:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   b4530:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4534:	79eb      	ldrb	r3, [r5, #7]
   b4536:	eb07 1c03 	add.w	ip, r7, r3, lsl #4
   b453a:	011b      	lsls	r3, r3, #4
    pwm->ENABLE = 1;
   b453c:	2101      	movs	r1, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b453e:	5cfe      	ldrb	r6, [r7, r3]
   b4540:	f89c 3001 	ldrb.w	r3, [ip, #1]
   b4544:	f003 031f 	and.w	r3, r3, #31
   b4548:	ea43 1346 	orr.w	r3, r3, r6, lsl #5
   b454c:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
    pwm->ENABLE = 1;
   b4550:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
    pwm->EVENTS_SEQEND[0]  = 0;
   b4554:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   b4558:	60a1      	str	r1, [r4, #8]
    while(!pwm->EVENTS_SEQEND[0])
   b455a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   b455e:	2b00      	cmp	r3, #0
   b4560:	d0fb      	beq.n	b455a <_ZN17Adafruit_NeoPixel4showEv+0x2be>
    pwm->EVENTS_SEQEND[0] = 0;
   b4562:	2300      	movs	r3, #0
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b4564:	f04f 32ff 	mov.w	r2, #4294967295
    pwm->EVENTS_SEQEND[0] = 0;
   b4568:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    pwm->ENABLE = 0;
   b456c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b4570:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560
      free(pixels_pattern);
   b4574:	f000 fa72 	bl	b4a5c <free>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b4578:	f000 f8f4 	bl	b4764 <HAL_Timer_Get_Micro_Seconds>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   b457c:	6128      	str	r0, [r5, #16]
}
   b457e:	b005      	add	sp, #20
   b4580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4584:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b4588:	2b00      	cmp	r3, #0
   b458a:	f6bf aeb7 	bge.w	b42fc <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b458e:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4592:	2b00      	cmp	r3, #0
   b4594:	f6bf aeb2 	bge.w	b42fc <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4598:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b459c:	2b00      	cmp	r3, #0
   b459e:	f6bf aead 	bge.w	b42fc <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b45a2:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b45a6:	2b00      	cmp	r3, #0
   b45a8:	f6bf aea8 	bge.w	b42fc <_ZN17Adafruit_NeoPixel4showEv+0x60>
   b45ac:	e725      	b.n	b43fa <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b45ae:	bf00      	nop
   b45b0:	000b7df8 	.word	0x000b7df8
   b45b4:	4001c000 	.word	0x4001c000
   b45b8:	40021000 	.word	0x40021000
   b45bc:	40022000 	.word	0x40022000
   b45c0:	2003e6b4 	.word	0x2003e6b4
   b45c4:	e0001000 	.word	0xe0001000
   b45c8:	e000ed00 	.word	0xe000ed00
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b45cc:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b45d0:	2b00      	cmp	r3, #0
   b45d2:	f6bf ae8d 	bge.w	b42f0 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b45d6:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b45da:	2b00      	cmp	r3, #0
   b45dc:	f6bf ae88 	bge.w	b42f0 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b45e0:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b45e4:	2b00      	cmp	r3, #0
   b45e6:	f6bf ae83 	bge.w	b42f0 <_ZN17Adafruit_NeoPixel4showEv+0x54>
   b45ea:	e706      	b.n	b43fa <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b45ec:	4770      	bx	lr
    for(uint16_t n=0; n<numBytes; n++) {
   b45ee:	2304      	movs	r3, #4
   b45f0:	2102      	movs	r1, #2
   b45f2:	e783      	b.n	b44fc <_ZN17Adafruit_NeoPixel4showEv+0x260>

000b45f4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
   b45f4:	8843      	ldrh	r3, [r0, #2]
   b45f6:	428b      	cmp	r3, r1
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
   b45f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
   b45fa:	d92d      	bls.n	b4658 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
   b45fc:	7a06      	ldrb	r6, [r0, #8]
   b45fe:	f3c2 4307 	ubfx	r3, r2, #16, #8
   b4602:	f3c2 2407 	ubfx	r4, r2, #8, #8
   b4606:	b2d5      	uxtb	r5, r2
   b4608:	b13e      	cbz	r6, b461a <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x26>
      r = (r * brightness) >> 8;
   b460a:	4373      	muls	r3, r6
      g = (g * brightness) >> 8;
   b460c:	4374      	muls	r4, r6
      b = (b * brightness) >> 8;
   b460e:	4375      	muls	r5, r6
      r = (r * brightness) >> 8;
   b4610:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
   b4614:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
   b4618:	0a2d      	lsrs	r5, r5, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
   b461a:	f890 c006 	ldrb.w	ip, [r0, #6]
   b461e:	68c7      	ldr	r7, [r0, #12]
   b4620:	f1bc 0f06 	cmp.w	ip, #6
   b4624:	bf0c      	ite	eq
   b4626:	2604      	moveq	r6, #4
   b4628:	2603      	movne	r6, #3
   b462a:	434e      	muls	r6, r1
   b462c:	f1ac 0c02 	sub.w	ip, ip, #2
   b4630:	19b9      	adds	r1, r7, r6
    switch(type) {
   b4632:	f1bc 0f06 	cmp.w	ip, #6
   b4636:	d81d      	bhi.n	b4674 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x80>
   b4638:	e8df f00c 	tbb	[pc, ip]
   b463c:	04081c04 	.word	0x04081c04
   b4640:	040f      	.short	0x040f
   b4642:	04          	.byte	0x04
   b4643:	00          	.byte	0x00
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   b4644:	55bc      	strb	r4, [r7, r6]
          *p++ = r;
   b4646:	704b      	strb	r3, [r1, #1]
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
          *p++ = g;
          *p = b;
   b4648:	708d      	strb	r5, [r1, #2]
        } break;
    }
  }
}
   b464a:	e005      	b.n	b4658 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p++ = r;
   b464c:	2bfe      	cmp	r3, #254	; 0xfe
   b464e:	bf28      	it	cs
   b4650:	23fe      	movcs	r3, #254	; 0xfe
   b4652:	55bb      	strb	r3, [r7, r6]
          *p++ = b;
   b4654:	704d      	strb	r5, [r1, #1]
          *p = g;
   b4656:	708c      	strb	r4, [r1, #2]
}
   b4658:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = r;
   b465a:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
   b465c:	704c      	strb	r4, [r1, #1]
          *p++ = b;
   b465e:	708d      	strb	r5, [r1, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
   b4660:	7a03      	ldrb	r3, [r0, #8]
          uint8_t w = (uint8_t)(c >> 24);
   b4662:	0e12      	lsrs	r2, r2, #24
          *p = brightness ? ((w * brightness) >> 8) : w;
   b4664:	b913      	cbnz	r3, b466c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x78>
          uint8_t w = (uint8_t)(c >> 24);
   b4666:	b2d2      	uxtb	r2, r2
          *p = brightness ? ((w * brightness) >> 8) : w;
   b4668:	70ca      	strb	r2, [r1, #3]
        } break;
   b466a:	e7f5      	b.n	b4658 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p = brightness ? ((w * brightness) >> 8) : w;
   b466c:	435a      	muls	r2, r3
   b466e:	f3c2 2207 	ubfx	r2, r2, #8, #8
   b4672:	e7f9      	b.n	b4668 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
          *p++ = r;
   b4674:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
   b4676:	704c      	strb	r4, [r1, #1]
   b4678:	e7e6      	b.n	b4648 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x54>

000b467a <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
   b467a:	7a03      	ldrb	r3, [r0, #8]
  uint8_t newBrightness = b + 1;
   b467c:	1c4a      	adds	r2, r1, #1
   b467e:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
   b4680:	4293      	cmp	r3, r2
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
   b4682:	b570      	push	{r4, r5, r6, lr}
  if(newBrightness != brightness) { // Compare against prior value
   b4684:	d01f      	beq.n	b46c6 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4c>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
   b4686:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
   b4688:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
            *ptr           = pixels,
   b468c:	68c4      	ldr	r4, [r0, #12]
    if(oldBrightness == 0) scale = 0; // Avoid /0
   b468e:	d00c      	beq.n	b46aa <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
   b4690:	29ff      	cmp	r1, #255	; 0xff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
   b4692:	bf1f      	itttt	ne
   b4694:	0211      	lslne	r1, r2, #8
   b4696:	f101 31ff 	addne.w	r1, r1, #4294967295
   b469a:	fbb1 f3f3 	udivne	r3, r1, r3
   b469e:	b29b      	uxthne	r3, r3
    else if(b == 255) scale = 65535 / oldBrightness;
   b46a0:	bf04      	itt	eq
   b46a2:	f64f 71ff 	movweq	r1, #65535	; 0xffff
   b46a6:	fbb1 f3f3 	udiveq	r3, r1, r3
            *ptr           = pixels,
   b46aa:	4625      	mov	r5, r4
    for(uint16_t i=0; i<numBytes; i++) {
   b46ac:	8886      	ldrh	r6, [r0, #4]
   b46ae:	1b29      	subs	r1, r5, r4
   b46b0:	b289      	uxth	r1, r1
   b46b2:	428e      	cmp	r6, r1
   b46b4:	d906      	bls.n	b46c4 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
   b46b6:	7829      	ldrb	r1, [r5, #0]
   b46b8:	4359      	muls	r1, r3
   b46ba:	f3c1 2107 	ubfx	r1, r1, #8, #8
   b46be:	f805 1b01 	strb.w	r1, [r5], #1
    for(uint16_t i=0; i<numBytes; i++) {
   b46c2:	e7f3      	b.n	b46ac <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
    }
    brightness = newBrightness;
   b46c4:	7202      	strb	r2, [r0, #8]
  }
}
   b46c6:	bd70      	pop	{r4, r5, r6, pc}

000b46c8 <_ZN17Adafruit_NeoPixel5clearEv>:
uint8_t Adafruit_NeoPixel::getBrightness(void) const {
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
   b46c8:	8882      	ldrh	r2, [r0, #4]
   b46ca:	68c0      	ldr	r0, [r0, #12]
   b46cc:	2100      	movs	r1, #0
   b46ce:	f001 bc1c 	b.w	b5f0a <memset>
	...

000b46d4 <_GLOBAL__sub_I_PIN_MAP2>:
}
   b46d4:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   b46d6:	f000 f815 	bl	b4704 <HAL_Pin_Map>
   b46da:	4b01      	ldr	r3, [pc, #4]	; (b46e0 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   b46dc:	6018      	str	r0, [r3, #0]
}
   b46de:	bd08      	pop	{r3, pc}
   b46e0:	2003e6b4 	.word	0x2003e6b4

000b46e4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b46e4:	b508      	push	{r3, lr}
   b46e6:	4b02      	ldr	r3, [pc, #8]	; (b46f0 <netdb_freeaddrinfo+0xc>)
   b46e8:	681b      	ldr	r3, [r3, #0]
   b46ea:	689b      	ldr	r3, [r3, #8]
   b46ec:	9301      	str	r3, [sp, #4]
   b46ee:	bd08      	pop	{r3, pc}
   b46f0:	00030268 	.word	0x00030268

000b46f4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b46f4:	b508      	push	{r3, lr}
   b46f6:	4b02      	ldr	r3, [pc, #8]	; (b4700 <netdb_getaddrinfo+0xc>)
   b46f8:	681b      	ldr	r3, [r3, #0]
   b46fa:	68db      	ldr	r3, [r3, #12]
   b46fc:	9301      	str	r3, [sp, #4]
   b46fe:	bd08      	pop	{r3, pc}
   b4700:	00030268 	.word	0x00030268

000b4704 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b4704:	b508      	push	{r3, lr}
   b4706:	4b02      	ldr	r3, [pc, #8]	; (b4710 <HAL_Pin_Map+0xc>)
   b4708:	681b      	ldr	r3, [r3, #0]
   b470a:	681b      	ldr	r3, [r3, #0]
   b470c:	9301      	str	r3, [sp, #4]
   b470e:	bd08      	pop	{r3, pc}
   b4710:	0003022c 	.word	0x0003022c

000b4714 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b4714:	b508      	push	{r3, lr}
   b4716:	4b02      	ldr	r3, [pc, #8]	; (b4720 <HAL_Pin_Mode+0xc>)
   b4718:	681b      	ldr	r3, [r3, #0]
   b471a:	689b      	ldr	r3, [r3, #8]
   b471c:	9301      	str	r3, [sp, #4]
   b471e:	bd08      	pop	{r3, pc}
   b4720:	0003022c 	.word	0x0003022c

000b4724 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b4724:	b508      	push	{r3, lr}
   b4726:	4b02      	ldr	r3, [pc, #8]	; (b4730 <HAL_Get_Pin_Mode+0xc>)
   b4728:	681b      	ldr	r3, [r3, #0]
   b472a:	68db      	ldr	r3, [r3, #12]
   b472c:	9301      	str	r3, [sp, #4]
   b472e:	bd08      	pop	{r3, pc}
   b4730:	0003022c 	.word	0x0003022c

000b4734 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b4734:	b508      	push	{r3, lr}
   b4736:	4b02      	ldr	r3, [pc, #8]	; (b4740 <HAL_GPIO_Write+0xc>)
   b4738:	681b      	ldr	r3, [r3, #0]
   b473a:	691b      	ldr	r3, [r3, #16]
   b473c:	9301      	str	r3, [sp, #4]
   b473e:	bd08      	pop	{r3, pc}
   b4740:	0003022c 	.word	0x0003022c

000b4744 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4744:	b508      	push	{r3, lr}
   b4746:	4b02      	ldr	r3, [pc, #8]	; (b4750 <HAL_RNG_GetRandomNumber+0xc>)
   b4748:	681b      	ldr	r3, [r3, #0]
   b474a:	685b      	ldr	r3, [r3, #4]
   b474c:	9301      	str	r3, [sp, #4]
   b474e:	bd08      	pop	{r3, pc}
   b4750:	00030218 	.word	0x00030218

000b4754 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b4754:	b508      	push	{r3, lr}
   b4756:	4b02      	ldr	r3, [pc, #8]	; (b4760 <HAL_Delay_Microseconds+0xc>)
   b4758:	681b      	ldr	r3, [r3, #0]
   b475a:	68db      	ldr	r3, [r3, #12]
   b475c:	9301      	str	r3, [sp, #4]
   b475e:	bd08      	pop	{r3, pc}
   b4760:	00030218 	.word	0x00030218

000b4764 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b4764:	b508      	push	{r3, lr}
   b4766:	4b02      	ldr	r3, [pc, #8]	; (b4770 <HAL_Timer_Get_Micro_Seconds+0xc>)
   b4768:	681b      	ldr	r3, [r3, #0]
   b476a:	691b      	ldr	r3, [r3, #16]
   b476c:	9301      	str	r3, [sp, #4]
   b476e:	bd08      	pop	{r3, pc}
   b4770:	00030218 	.word	0x00030218

000b4774 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4774:	b508      	push	{r3, lr}
   b4776:	4b02      	ldr	r3, [pc, #8]	; (b4780 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4778:	681b      	ldr	r3, [r3, #0]
   b477a:	695b      	ldr	r3, [r3, #20]
   b477c:	9301      	str	r3, [sp, #4]
   b477e:	bd08      	pop	{r3, pc}
   b4780:	00030218 	.word	0x00030218

000b4784 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4784:	b508      	push	{r3, lr}
   b4786:	4b02      	ldr	r3, [pc, #8]	; (b4790 <os_mutex_recursive_create+0xc>)
   b4788:	681b      	ldr	r3, [r3, #0]
   b478a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b478c:	9301      	str	r3, [sp, #4]
   b478e:	bd08      	pop	{r3, pc}
   b4790:	00030248 	.word	0x00030248

000b4794 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4794:	b508      	push	{r3, lr}
   b4796:	4b02      	ldr	r3, [pc, #8]	; (b47a0 <inet_inet_ntop+0xc>)
   b4798:	681b      	ldr	r3, [r3, #0]
   b479a:	695b      	ldr	r3, [r3, #20]
   b479c:	9301      	str	r3, [sp, #4]
   b479e:	bd08      	pop	{r3, pc}
   b47a0:	00030264 	.word	0x00030264

000b47a4 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b47a4:	b508      	push	{r3, lr}
   b47a6:	4b02      	ldr	r3, [pc, #8]	; (b47b0 <hal_usart_write+0xc>)
   b47a8:	681b      	ldr	r3, [r3, #0]
   b47aa:	68db      	ldr	r3, [r3, #12]
   b47ac:	9301      	str	r3, [sp, #4]
   b47ae:	bd08      	pop	{r3, pc}
   b47b0:	0003023c 	.word	0x0003023c

000b47b4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b47b4:	b508      	push	{r3, lr}
   b47b6:	4b02      	ldr	r3, [pc, #8]	; (b47c0 <hal_usart_available+0xc>)
   b47b8:	681b      	ldr	r3, [r3, #0]
   b47ba:	691b      	ldr	r3, [r3, #16]
   b47bc:	9301      	str	r3, [sp, #4]
   b47be:	bd08      	pop	{r3, pc}
   b47c0:	0003023c 	.word	0x0003023c

000b47c4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b47c4:	b508      	push	{r3, lr}
   b47c6:	4b02      	ldr	r3, [pc, #8]	; (b47d0 <hal_usart_read+0xc>)
   b47c8:	681b      	ldr	r3, [r3, #0]
   b47ca:	695b      	ldr	r3, [r3, #20]
   b47cc:	9301      	str	r3, [sp, #4]
   b47ce:	bd08      	pop	{r3, pc}
   b47d0:	0003023c 	.word	0x0003023c

000b47d4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b47d4:	b508      	push	{r3, lr}
   b47d6:	4b02      	ldr	r3, [pc, #8]	; (b47e0 <hal_usart_peek+0xc>)
   b47d8:	681b      	ldr	r3, [r3, #0]
   b47da:	699b      	ldr	r3, [r3, #24]
   b47dc:	9301      	str	r3, [sp, #4]
   b47de:	bd08      	pop	{r3, pc}
   b47e0:	0003023c 	.word	0x0003023c

000b47e4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b47e4:	b508      	push	{r3, lr}
   b47e6:	4b02      	ldr	r3, [pc, #8]	; (b47f0 <hal_usart_flush+0xc>)
   b47e8:	681b      	ldr	r3, [r3, #0]
   b47ea:	69db      	ldr	r3, [r3, #28]
   b47ec:	9301      	str	r3, [sp, #4]
   b47ee:	bd08      	pop	{r3, pc}
   b47f0:	0003023c 	.word	0x0003023c

000b47f4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b47f4:	b508      	push	{r3, lr}
   b47f6:	4b02      	ldr	r3, [pc, #8]	; (b4800 <hal_usart_is_enabled+0xc>)
   b47f8:	681b      	ldr	r3, [r3, #0]
   b47fa:	6a1b      	ldr	r3, [r3, #32]
   b47fc:	9301      	str	r3, [sp, #4]
   b47fe:	bd08      	pop	{r3, pc}
   b4800:	0003023c 	.word	0x0003023c

000b4804 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4804:	b508      	push	{r3, lr}
   b4806:	4b02      	ldr	r3, [pc, #8]	; (b4810 <hal_usart_available_data_for_write+0xc>)
   b4808:	681b      	ldr	r3, [r3, #0]
   b480a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b480c:	9301      	str	r3, [sp, #4]
   b480e:	bd08      	pop	{r3, pc}
   b4810:	0003023c 	.word	0x0003023c

000b4814 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4814:	b508      	push	{r3, lr}
   b4816:	4b02      	ldr	r3, [pc, #8]	; (b4820 <hal_usart_init_ex+0xc>)
   b4818:	681b      	ldr	r3, [r3, #0]
   b481a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b481c:	9301      	str	r3, [sp, #4]
   b481e:	bd08      	pop	{r3, pc}
   b4820:	0003023c 	.word	0x0003023c

000b4824 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4824:	b508      	push	{r3, lr}
   b4826:	4b02      	ldr	r3, [pc, #8]	; (b4830 <hal_i2c_write+0xc>)
   b4828:	681b      	ldr	r3, [r3, #0]
   b482a:	6a1b      	ldr	r3, [r3, #32]
   b482c:	9301      	str	r3, [sp, #4]
   b482e:	bd08      	pop	{r3, pc}
   b4830:	00030228 	.word	0x00030228

000b4834 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4834:	b508      	push	{r3, lr}
   b4836:	4b02      	ldr	r3, [pc, #8]	; (b4840 <hal_i2c_available+0xc>)
   b4838:	681b      	ldr	r3, [r3, #0]
   b483a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b483c:	9301      	str	r3, [sp, #4]
   b483e:	bd08      	pop	{r3, pc}
   b4840:	00030228 	.word	0x00030228

000b4844 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4844:	b508      	push	{r3, lr}
   b4846:	4b02      	ldr	r3, [pc, #8]	; (b4850 <hal_i2c_read+0xc>)
   b4848:	681b      	ldr	r3, [r3, #0]
   b484a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b484c:	9301      	str	r3, [sp, #4]
   b484e:	bd08      	pop	{r3, pc}
   b4850:	00030228 	.word	0x00030228

000b4854 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4854:	b508      	push	{r3, lr}
   b4856:	4b02      	ldr	r3, [pc, #8]	; (b4860 <hal_i2c_peek+0xc>)
   b4858:	681b      	ldr	r3, [r3, #0]
   b485a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b485c:	9301      	str	r3, [sp, #4]
   b485e:	bd08      	pop	{r3, pc}
   b4860:	00030228 	.word	0x00030228

000b4864 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4864:	b508      	push	{r3, lr}
   b4866:	4b02      	ldr	r3, [pc, #8]	; (b4870 <hal_i2c_flush+0xc>)
   b4868:	681b      	ldr	r3, [r3, #0]
   b486a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b486c:	9301      	str	r3, [sp, #4]
   b486e:	bd08      	pop	{r3, pc}
   b4870:	00030228 	.word	0x00030228

000b4874 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4874:	b508      	push	{r3, lr}
   b4876:	4b02      	ldr	r3, [pc, #8]	; (b4880 <hal_i2c_is_enabled+0xc>)
   b4878:	681b      	ldr	r3, [r3, #0]
   b487a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b487c:	9301      	str	r3, [sp, #4]
   b487e:	bd08      	pop	{r3, pc}
   b4880:	00030228 	.word	0x00030228

000b4884 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4884:	b508      	push	{r3, lr}
   b4886:	4b02      	ldr	r3, [pc, #8]	; (b4890 <hal_i2c_init+0xc>)
   b4888:	681b      	ldr	r3, [r3, #0]
   b488a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b488c:	9301      	str	r3, [sp, #4]
   b488e:	bd08      	pop	{r3, pc}
   b4890:	00030228 	.word	0x00030228

000b4894 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4894:	b508      	push	{r3, lr}
   b4896:	4b02      	ldr	r3, [pc, #8]	; (b48a0 <hal_spi_init+0xc>)
   b4898:	681b      	ldr	r3, [r3, #0]
   b489a:	69db      	ldr	r3, [r3, #28]
   b489c:	9301      	str	r3, [sp, #4]
   b489e:	bd08      	pop	{r3, pc}
   b48a0:	00030230 	.word	0x00030230

000b48a4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b48a4:	b508      	push	{r3, lr}
   b48a6:	4b02      	ldr	r3, [pc, #8]	; (b48b0 <hal_spi_is_enabled+0xc>)
   b48a8:	681b      	ldr	r3, [r3, #0]
   b48aa:	6a1b      	ldr	r3, [r3, #32]
   b48ac:	9301      	str	r3, [sp, #4]
   b48ae:	bd08      	pop	{r3, pc}
   b48b0:	00030230 	.word	0x00030230

000b48b4 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b48b4:	b508      	push	{r3, lr}
   b48b6:	4b02      	ldr	r3, [pc, #8]	; (b48c0 <HAL_USB_USART_Init+0xc>)
   b48b8:	681b      	ldr	r3, [r3, #0]
   b48ba:	681b      	ldr	r3, [r3, #0]
   b48bc:	9301      	str	r3, [sp, #4]
   b48be:	bd08      	pop	{r3, pc}
   b48c0:	0003024c 	.word	0x0003024c

000b48c4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b48c4:	b508      	push	{r3, lr}
   b48c6:	4b02      	ldr	r3, [pc, #8]	; (b48d0 <HAL_USB_USART_Available_Data+0xc>)
   b48c8:	681b      	ldr	r3, [r3, #0]
   b48ca:	691b      	ldr	r3, [r3, #16]
   b48cc:	9301      	str	r3, [sp, #4]
   b48ce:	bd08      	pop	{r3, pc}
   b48d0:	0003024c 	.word	0x0003024c

000b48d4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b48d4:	b508      	push	{r3, lr}
   b48d6:	4b02      	ldr	r3, [pc, #8]	; (b48e0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b48d8:	681b      	ldr	r3, [r3, #0]
   b48da:	695b      	ldr	r3, [r3, #20]
   b48dc:	9301      	str	r3, [sp, #4]
   b48de:	bd08      	pop	{r3, pc}
   b48e0:	0003024c 	.word	0x0003024c

000b48e4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b48e4:	b508      	push	{r3, lr}
   b48e6:	4b02      	ldr	r3, [pc, #8]	; (b48f0 <HAL_USB_USART_Receive_Data+0xc>)
   b48e8:	681b      	ldr	r3, [r3, #0]
   b48ea:	699b      	ldr	r3, [r3, #24]
   b48ec:	9301      	str	r3, [sp, #4]
   b48ee:	bd08      	pop	{r3, pc}
   b48f0:	0003024c 	.word	0x0003024c

000b48f4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b48f4:	b508      	push	{r3, lr}
   b48f6:	4b02      	ldr	r3, [pc, #8]	; (b4900 <HAL_USB_USART_Send_Data+0xc>)
   b48f8:	681b      	ldr	r3, [r3, #0]
   b48fa:	69db      	ldr	r3, [r3, #28]
   b48fc:	9301      	str	r3, [sp, #4]
   b48fe:	bd08      	pop	{r3, pc}
   b4900:	0003024c 	.word	0x0003024c

000b4904 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4904:	b508      	push	{r3, lr}
   b4906:	4b02      	ldr	r3, [pc, #8]	; (b4910 <HAL_USB_USART_Flush_Data+0xc>)
   b4908:	681b      	ldr	r3, [r3, #0]
   b490a:	6a1b      	ldr	r3, [r3, #32]
   b490c:	9301      	str	r3, [sp, #4]
   b490e:	bd08      	pop	{r3, pc}
   b4910:	0003024c 	.word	0x0003024c

000b4914 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4914:	b508      	push	{r3, lr}
   b4916:	4b02      	ldr	r3, [pc, #8]	; (b4920 <set_system_mode+0xc>)
   b4918:	681b      	ldr	r3, [r3, #0]
   b491a:	685b      	ldr	r3, [r3, #4]
   b491c:	9301      	str	r3, [sp, #4]
   b491e:	bd08      	pop	{r3, pc}
   b4920:	00030220 	.word	0x00030220

000b4924 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4924:	b508      	push	{r3, lr}
   b4926:	4b02      	ldr	r3, [pc, #8]	; (b4930 <system_delay_ms+0xc>)
   b4928:	681b      	ldr	r3, [r3, #0]
   b492a:	695b      	ldr	r3, [r3, #20]
   b492c:	9301      	str	r3, [sp, #4]
   b492e:	bd08      	pop	{r3, pc}
   b4930:	00030220 	.word	0x00030220

000b4934 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4934:	b508      	push	{r3, lr}
   b4936:	4b03      	ldr	r3, [pc, #12]	; (b4944 <system_ctrl_set_app_request_handler+0x10>)
   b4938:	681b      	ldr	r3, [r3, #0]
   b493a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b493e:	9301      	str	r3, [sp, #4]
   b4940:	bd08      	pop	{r3, pc}
   b4942:	0000      	.short	0x0000
   b4944:	00030220 	.word	0x00030220

000b4948 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4948:	b508      	push	{r3, lr}
   b494a:	4b03      	ldr	r3, [pc, #12]	; (b4958 <system_ctrl_set_result+0x10>)
   b494c:	681b      	ldr	r3, [r3, #0]
   b494e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4952:	9301      	str	r3, [sp, #4]
   b4954:	bd08      	pop	{r3, pc}
   b4956:	0000      	.short	0x0000
   b4958:	00030220 	.word	0x00030220

000b495c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b495c:	b508      	push	{r3, lr}
   b495e:	4b02      	ldr	r3, [pc, #8]	; (b4968 <network_connect+0xc>)
   b4960:	681b      	ldr	r3, [r3, #0]
   b4962:	685b      	ldr	r3, [r3, #4]
   b4964:	9301      	str	r3, [sp, #4]
   b4966:	bd08      	pop	{r3, pc}
   b4968:	00030240 	.word	0x00030240

000b496c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b496c:	b508      	push	{r3, lr}
   b496e:	4b02      	ldr	r3, [pc, #8]	; (b4978 <network_connecting+0xc>)
   b4970:	681b      	ldr	r3, [r3, #0]
   b4972:	689b      	ldr	r3, [r3, #8]
   b4974:	9301      	str	r3, [sp, #4]
   b4976:	bd08      	pop	{r3, pc}
   b4978:	00030240 	.word	0x00030240

000b497c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b497c:	b508      	push	{r3, lr}
   b497e:	4b02      	ldr	r3, [pc, #8]	; (b4988 <network_disconnect+0xc>)
   b4980:	681b      	ldr	r3, [r3, #0]
   b4982:	68db      	ldr	r3, [r3, #12]
   b4984:	9301      	str	r3, [sp, #4]
   b4986:	bd08      	pop	{r3, pc}
   b4988:	00030240 	.word	0x00030240

000b498c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b498c:	b508      	push	{r3, lr}
   b498e:	4b02      	ldr	r3, [pc, #8]	; (b4998 <network_ready+0xc>)
   b4990:	681b      	ldr	r3, [r3, #0]
   b4992:	691b      	ldr	r3, [r3, #16]
   b4994:	9301      	str	r3, [sp, #4]
   b4996:	bd08      	pop	{r3, pc}
   b4998:	00030240 	.word	0x00030240

000b499c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b499c:	b508      	push	{r3, lr}
   b499e:	4b02      	ldr	r3, [pc, #8]	; (b49a8 <network_on+0xc>)
   b49a0:	681b      	ldr	r3, [r3, #0]
   b49a2:	695b      	ldr	r3, [r3, #20]
   b49a4:	9301      	str	r3, [sp, #4]
   b49a6:	bd08      	pop	{r3, pc}
   b49a8:	00030240 	.word	0x00030240

000b49ac <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b49ac:	b508      	push	{r3, lr}
   b49ae:	4b02      	ldr	r3, [pc, #8]	; (b49b8 <network_off+0xc>)
   b49b0:	681b      	ldr	r3, [r3, #0]
   b49b2:	699b      	ldr	r3, [r3, #24]
   b49b4:	9301      	str	r3, [sp, #4]
   b49b6:	bd08      	pop	{r3, pc}
   b49b8:	00030240 	.word	0x00030240

000b49bc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b49bc:	b508      	push	{r3, lr}
   b49be:	4b02      	ldr	r3, [pc, #8]	; (b49c8 <network_listen+0xc>)
   b49c0:	681b      	ldr	r3, [r3, #0]
   b49c2:	69db      	ldr	r3, [r3, #28]
   b49c4:	9301      	str	r3, [sp, #4]
   b49c6:	bd08      	pop	{r3, pc}
   b49c8:	00030240 	.word	0x00030240

000b49cc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b49cc:	b508      	push	{r3, lr}
   b49ce:	4b02      	ldr	r3, [pc, #8]	; (b49d8 <network_listening+0xc>)
   b49d0:	681b      	ldr	r3, [r3, #0]
   b49d2:	6a1b      	ldr	r3, [r3, #32]
   b49d4:	9301      	str	r3, [sp, #4]
   b49d6:	bd08      	pop	{r3, pc}
   b49d8:	00030240 	.word	0x00030240

000b49dc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b49dc:	b508      	push	{r3, lr}
   b49de:	4b02      	ldr	r3, [pc, #8]	; (b49e8 <network_set_listen_timeout+0xc>)
   b49e0:	681b      	ldr	r3, [r3, #0]
   b49e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b49e4:	9301      	str	r3, [sp, #4]
   b49e6:	bd08      	pop	{r3, pc}
   b49e8:	00030240 	.word	0x00030240

000b49ec <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b49ec:	b508      	push	{r3, lr}
   b49ee:	4b02      	ldr	r3, [pc, #8]	; (b49f8 <network_get_listen_timeout+0xc>)
   b49f0:	681b      	ldr	r3, [r3, #0]
   b49f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b49f4:	9301      	str	r3, [sp, #4]
   b49f6:	bd08      	pop	{r3, pc}
   b49f8:	00030240 	.word	0x00030240

000b49fc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b49fc:	b508      	push	{r3, lr}
   b49fe:	4b02      	ldr	r3, [pc, #8]	; (b4a08 <network_is_on+0xc>)
   b4a00:	681b      	ldr	r3, [r3, #0]
   b4a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4a04:	9301      	str	r3, [sp, #4]
   b4a06:	bd08      	pop	{r3, pc}
   b4a08:	00030240 	.word	0x00030240

000b4a0c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4a0c:	b508      	push	{r3, lr}
   b4a0e:	4b02      	ldr	r3, [pc, #8]	; (b4a18 <network_is_off+0xc>)
   b4a10:	681b      	ldr	r3, [r3, #0]
   b4a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4a14:	9301      	str	r3, [sp, #4]
   b4a16:	bd08      	pop	{r3, pc}
   b4a18:	00030240 	.word	0x00030240

000b4a1c <spark_cloud_flag_connect>:
DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   b4a1c:	b508      	push	{r3, lr}
   b4a1e:	4b02      	ldr	r3, [pc, #8]	; (b4a28 <spark_cloud_flag_connect+0xc>)
   b4a20:	681b      	ldr	r3, [r3, #0]
   b4a22:	68db      	ldr	r3, [r3, #12]
   b4a24:	9301      	str	r3, [sp, #4]
   b4a26:	bd08      	pop	{r3, pc}
   b4a28:	00030244 	.word	0x00030244

000b4a2c <spark_subscribe>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b4a2c:	b508      	push	{r3, lr}
   b4a2e:	4b02      	ldr	r3, [pc, #8]	; (b4a38 <spark_subscribe+0xc>)
   b4a30:	681b      	ldr	r3, [r3, #0]
   b4a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4a34:	9301      	str	r3, [sp, #4]
   b4a36:	bd08      	pop	{r3, pc}
   b4a38:	00030244 	.word	0x00030244

000b4a3c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4a3c:	b508      	push	{r3, lr}
   b4a3e:	4b02      	ldr	r3, [pc, #8]	; (b4a48 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4a40:	681b      	ldr	r3, [r3, #0]
   b4a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4a44:	9301      	str	r3, [sp, #4]
   b4a46:	bd08      	pop	{r3, pc}
   b4a48:	00030244 	.word	0x00030244

000b4a4c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4a4c:	b508      	push	{r3, lr}
   b4a4e:	4b02      	ldr	r3, [pc, #8]	; (b4a58 <malloc+0xc>)
   b4a50:	681b      	ldr	r3, [r3, #0]
   b4a52:	681b      	ldr	r3, [r3, #0]
   b4a54:	9301      	str	r3, [sp, #4]
   b4a56:	bd08      	pop	{r3, pc}
   b4a58:	0003021c 	.word	0x0003021c

000b4a5c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4a5c:	b508      	push	{r3, lr}
   b4a5e:	4b02      	ldr	r3, [pc, #8]	; (b4a68 <free+0xc>)
   b4a60:	681b      	ldr	r3, [r3, #0]
   b4a62:	685b      	ldr	r3, [r3, #4]
   b4a64:	9301      	str	r3, [sp, #4]
   b4a66:	bd08      	pop	{r3, pc}
   b4a68:	0003021c 	.word	0x0003021c

000b4a6c <_malloc_r>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b4a6c:	b508      	push	{r3, lr}
   b4a6e:	4b02      	ldr	r3, [pc, #8]	; (b4a78 <_malloc_r+0xc>)
   b4a70:	681b      	ldr	r3, [r3, #0]
   b4a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4a74:	9301      	str	r3, [sp, #4]
   b4a76:	bd08      	pop	{r3, pc}
   b4a78:	0003021c 	.word	0x0003021c

000b4a7c <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4a7c:	b508      	push	{r3, lr}
   b4a7e:	4b02      	ldr	r3, [pc, #8]	; (b4a88 <__assert_func+0xc>)
   b4a80:	681b      	ldr	r3, [r3, #0]
   b4a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4a84:	9301      	str	r3, [sp, #4]
   b4a86:	bd08      	pop	{r3, pc}
   b4a88:	0003021c 	.word	0x0003021c

000b4a8c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4a8c:	b508      	push	{r3, lr}
   b4a8e:	4b02      	ldr	r3, [pc, #8]	; (b4a98 <newlib_impure_ptr_callback+0xc>)
   b4a90:	681b      	ldr	r3, [r3, #0]
   b4a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4a94:	9301      	str	r3, [sp, #4]
   b4a96:	bd08      	pop	{r3, pc}
   b4a98:	0003021c 	.word	0x0003021c

000b4a9c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4a9c:	2200      	movs	r2, #0
   b4a9e:	6840      	ldr	r0, [r0, #4]
   b4aa0:	4611      	mov	r1, r2
   b4aa2:	f7ff bf93 	b.w	b49cc <network_listening>

000b4aa6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4aa6:	2200      	movs	r2, #0
   b4aa8:	6840      	ldr	r0, [r0, #4]
   b4aaa:	4611      	mov	r1, r2
   b4aac:	f7ff bf9e 	b.w	b49ec <network_get_listen_timeout>

000b4ab0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4ab0:	6840      	ldr	r0, [r0, #4]
   b4ab2:	2200      	movs	r2, #0
   b4ab4:	f7ff bf92 	b.w	b49dc <network_set_listen_timeout>

000b4ab8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4ab8:	6840      	ldr	r0, [r0, #4]
   b4aba:	2200      	movs	r2, #0
   b4abc:	f081 0101 	eor.w	r1, r1, #1
   b4ac0:	f7ff bf7c 	b.w	b49bc <network_listen>

000b4ac4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4ac4:	2300      	movs	r3, #0
   b4ac6:	6840      	ldr	r0, [r0, #4]
   b4ac8:	461a      	mov	r2, r3
   b4aca:	4619      	mov	r1, r3
   b4acc:	f7ff bf6e 	b.w	b49ac <network_off>

000b4ad0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4ad0:	2300      	movs	r3, #0
   b4ad2:	6840      	ldr	r0, [r0, #4]
   b4ad4:	461a      	mov	r2, r3
   b4ad6:	4619      	mov	r1, r3
   b4ad8:	f7ff bf60 	b.w	b499c <network_on>

000b4adc <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4adc:	2200      	movs	r2, #0
   b4ade:	6840      	ldr	r0, [r0, #4]
   b4ae0:	4611      	mov	r1, r2
   b4ae2:	f7ff bf53 	b.w	b498c <network_ready>

000b4ae6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4ae6:	2200      	movs	r2, #0
   b4ae8:	6840      	ldr	r0, [r0, #4]
   b4aea:	4611      	mov	r1, r2
   b4aec:	f7ff bf3e 	b.w	b496c <network_connecting>

000b4af0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4af0:	6840      	ldr	r0, [r0, #4]
   b4af2:	2200      	movs	r2, #0
   b4af4:	2102      	movs	r1, #2
   b4af6:	f7ff bf41 	b.w	b497c <network_disconnect>

000b4afa <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4afa:	2300      	movs	r3, #0
   b4afc:	6840      	ldr	r0, [r0, #4]
   b4afe:	461a      	mov	r2, r3
   b4b00:	f7ff bf2c 	b.w	b495c <network_connect>

000b4b04 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4b04:	4b02      	ldr	r3, [pc, #8]	; (b4b10 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4b06:	2203      	movs	r2, #3
   b4b08:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4b0a:	4a02      	ldr	r2, [pc, #8]	; (b4b14 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4b0c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4b0e:	4770      	bx	lr
   b4b10:	2003e6b8 	.word	0x2003e6b8
   b4b14:	000b7e14 	.word	0x000b7e14

000b4b18 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b4b18:	b510      	push	{r4, lr}
   b4b1a:	4604      	mov	r4, r0
   b4b1c:	4608      	mov	r0, r1
{
    _spi = spi;
   b4b1e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b4b20:	f7ff feb8 	bl	b4894 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b4b24:	2300      	movs	r3, #0
   b4b26:	6063      	str	r3, [r4, #4]
}
   b4b28:	4620      	mov	r0, r4
   b4b2a:	bd10      	pop	{r4, pc}

000b4b2c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4b2c:	4b05      	ldr	r3, [pc, #20]	; (b4b44 <_GLOBAL__sub_I_System+0x18>)
   b4b2e:	2202      	movs	r2, #2
   b4b30:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4b32:	4b05      	ldr	r3, [pc, #20]	; (b4b48 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b4b34:	4a05      	ldr	r2, [pc, #20]	; (b4b4c <_GLOBAL__sub_I_System+0x20>)
   b4b36:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4b38:	2000      	movs	r0, #0
   b4b3a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4b3e:	f7ff bee9 	b.w	b4914 <set_system_mode>
   b4b42:	bf00      	nop
   b4b44:	2003e6cc 	.word	0x2003e6cc
   b4b48:	2003e6c0 	.word	0x2003e6c0
   b4b4c:	ffff0000 	.word	0xffff0000

000b4b50 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4b50:	4802      	ldr	r0, [pc, #8]	; (b4b5c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4b52:	2300      	movs	r3, #0
   b4b54:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4b56:	f7ff be15 	b.w	b4784 <os_mutex_recursive_create>
   b4b5a:	bf00      	nop
   b4b5c:	2003e6d0 	.word	0x2003e6d0

000b4b60 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b4b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4b62:	4606      	mov	r6, r0
   b4b64:	460d      	mov	r5, r1
  size_t n = 0;
   b4b66:	188f      	adds	r7, r1, r2
   b4b68:	2400      	movs	r4, #0
  while (size--) {
   b4b6a:	42bd      	cmp	r5, r7
   b4b6c:	d00c      	beq.n	b4b88 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b4b6e:	6833      	ldr	r3, [r6, #0]
   b4b70:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4b74:	689b      	ldr	r3, [r3, #8]
   b4b76:	4630      	mov	r0, r6
   b4b78:	4798      	blx	r3
     if (chunk>=0)
   b4b7a:	1e03      	subs	r3, r0, #0
   b4b7c:	db01      	blt.n	b4b82 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b4b7e:	441c      	add	r4, r3
  while (size--) {
   b4b80:	e7f3      	b.n	b4b6a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b4b82:	2c00      	cmp	r4, #0
   b4b84:	bf08      	it	eq
   b4b86:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b4b88:	4620      	mov	r0, r4
   b4b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4b8c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b4b8c:	b513      	push	{r0, r1, r4, lr}
   b4b8e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b4b90:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b4b92:	b159      	cbz	r1, b4bac <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4b94:	9101      	str	r1, [sp, #4]
   b4b96:	f001 f9ef 	bl	b5f78 <strlen>
   b4b9a:	6823      	ldr	r3, [r4, #0]
   b4b9c:	9901      	ldr	r1, [sp, #4]
   b4b9e:	68db      	ldr	r3, [r3, #12]
   b4ba0:	4602      	mov	r2, r0
   b4ba2:	4620      	mov	r0, r4
    }
   b4ba4:	b002      	add	sp, #8
   b4ba6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b4baa:	4718      	bx	r3
    }
   b4bac:	b002      	add	sp, #8
   b4bae:	bd10      	pop	{r4, pc}

000b4bb0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b4bb0:	6803      	ldr	r3, [r0, #0]
   b4bb2:	689b      	ldr	r3, [r3, #8]
   b4bb4:	4718      	bx	r3

000b4bb6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b4bb6:	b530      	push	{r4, r5, lr}
   b4bb8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b4bba:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b4bbc:	2a01      	cmp	r2, #1
  *str = '\0';
   b4bbe:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b4bc2:	bf98      	it	ls
   b4bc4:	220a      	movls	r2, #10
   b4bc6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b4bc8:	460d      	mov	r5, r1
   b4bca:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b4bce:	fb01 5312 	mls	r3, r1, r2, r5
   b4bd2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4bd6:	2b09      	cmp	r3, #9
   b4bd8:	bf94      	ite	ls
   b4bda:	3330      	addls	r3, #48	; 0x30
   b4bdc:	3337      	addhi	r3, #55	; 0x37
   b4bde:	b2db      	uxtb	r3, r3
  } while(n);
   b4be0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4be2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b4be6:	d9ef      	bls.n	b4bc8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b4be8:	4621      	mov	r1, r4
   b4bea:	f7ff ffcf 	bl	b4b8c <_ZN5Print5writeEPKc>
}
   b4bee:	b00b      	add	sp, #44	; 0x2c
   b4bf0:	bd30      	pop	{r4, r5, pc}
	...

000b4bf4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b4bf4:	4b01      	ldr	r3, [pc, #4]	; (b4bfc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b4bf6:	4a02      	ldr	r2, [pc, #8]	; (b4c00 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b4bf8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b4bfa:	4770      	bx	lr
   b4bfc:	2003e6d4 	.word	0x2003e6d4
   b4c00:	000b7e48 	.word	0x000b7e48

000b4c04 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b4c04:	4b02      	ldr	r3, [pc, #8]	; (b4c10 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b4c06:	681a      	ldr	r2, [r3, #0]
   b4c08:	4b02      	ldr	r3, [pc, #8]	; (b4c14 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b4c0a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b4c0c:	4770      	bx	lr
   b4c0e:	bf00      	nop
   b4c10:	2003e4c4 	.word	0x2003e4c4
   b4c14:	2003e6d8 	.word	0x2003e6d8

000b4c18 <_Z3mapddddd>:
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

double map(double value, double fromStart, double fromEnd, double toStart, double toEnd)
{
   b4c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4c1c:	ec55 4b11 	vmov	r4, r5, d1
   b4c20:	ec57 6b12 	vmov	r6, r7, d2
   b4c24:	b085      	sub	sp, #20
    if (fromEnd == fromStart) {
   b4c26:	ee11 2a10 	vmov	r2, s2
   b4c2a:	ee12 0a10 	vmov	r0, s4
   b4c2e:	462b      	mov	r3, r5
   b4c30:	4639      	mov	r1, r7
{
   b4c32:	ed8d 0b02 	vstr	d0, [sp, #8]
   b4c36:	ed8d 4b00 	vstr	d4, [sp]
   b4c3a:	ec5b ab13 	vmov	sl, fp, d3
    if (fromEnd == fromStart) {
   b4c3e:	f001 f865 	bl	b5d0c <__aeabi_dcmpeq>
   b4c42:	ed9d 0b02 	vldr	d0, [sp, #8]
   b4c46:	bb38      	cbnz	r0, b4c98 <_Z3mapddddd+0x80>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   b4c48:	ec51 0b10 	vmov	r0, r1, d0
   b4c4c:	4622      	mov	r2, r4
   b4c4e:	462b      	mov	r3, r5
   b4c50:	f000 fc3c 	bl	b54cc <__aeabi_dsub>
   b4c54:	4652      	mov	r2, sl
   b4c56:	4680      	mov	r8, r0
   b4c58:	4689      	mov	r9, r1
   b4c5a:	465b      	mov	r3, fp
   b4c5c:	e9dd 0100 	ldrd	r0, r1, [sp]
   b4c60:	f000 fc34 	bl	b54cc <__aeabi_dsub>
   b4c64:	4602      	mov	r2, r0
   b4c66:	460b      	mov	r3, r1
   b4c68:	4640      	mov	r0, r8
   b4c6a:	4649      	mov	r1, r9
   b4c6c:	f000 fde6 	bl	b583c <__aeabi_dmul>
   b4c70:	4622      	mov	r2, r4
   b4c72:	4680      	mov	r8, r0
   b4c74:	4689      	mov	r9, r1
   b4c76:	462b      	mov	r3, r5
   b4c78:	4630      	mov	r0, r6
   b4c7a:	4639      	mov	r1, r7
   b4c7c:	f000 fc26 	bl	b54cc <__aeabi_dsub>
   b4c80:	4602      	mov	r2, r0
   b4c82:	460b      	mov	r3, r1
   b4c84:	4640      	mov	r0, r8
   b4c86:	4649      	mov	r1, r9
   b4c88:	f000 ff02 	bl	b5a90 <__aeabi_ddiv>
   b4c8c:	4652      	mov	r2, sl
   b4c8e:	465b      	mov	r3, fp
   b4c90:	f000 fc1e 	bl	b54d0 <__adddf3>
   b4c94:	ec41 0b10 	vmov	d0, r0, r1
}
   b4c98:	b005      	add	sp, #20
   b4c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b4c9e <delay>:

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b4c9e:	2100      	movs	r1, #0
   b4ca0:	f7ff be40 	b.w	b4924 <system_delay_ms>

000b4ca4 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b4ca4:	4b01      	ldr	r3, [pc, #4]	; (b4cac <_GLOBAL__sub_I_RGB+0x8>)
   b4ca6:	2200      	movs	r2, #0
   b4ca8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b4caa:	4770      	bx	lr
   b4cac:	2003e6dc 	.word	0x2003e6dc

000b4cb0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b4cb0:	4b01      	ldr	r3, [pc, #4]	; (b4cb8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b4cb2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b4cb4:	4770      	bx	lr
   b4cb6:	bf00      	nop
   b4cb8:	2003e4c8 	.word	0x2003e4c8

000b4cbc <serialEventRun>:
{
   b4cbc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b4cbe:	4b0b      	ldr	r3, [pc, #44]	; (b4cec <serialEventRun+0x30>)
   b4cc0:	b143      	cbz	r3, b4cd4 <serialEventRun+0x18>
   b4cc2:	f000 f963 	bl	b4f8c <_Z16_fetch_usbserialv>
   b4cc6:	6803      	ldr	r3, [r0, #0]
   b4cc8:	691b      	ldr	r3, [r3, #16]
   b4cca:	4798      	blx	r3
   b4ccc:	2800      	cmp	r0, #0
   b4cce:	dd01      	ble.n	b4cd4 <serialEventRun+0x18>
        serialEvent();
   b4cd0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b4cd4:	4b06      	ldr	r3, [pc, #24]	; (b4cf0 <serialEventRun+0x34>)
   b4cd6:	b143      	cbz	r3, b4cea <serialEventRun+0x2e>
   b4cd8:	f000 fb8e 	bl	b53f8 <_Z22__fetch_global_Serial1v>
   b4cdc:	6803      	ldr	r3, [r0, #0]
   b4cde:	691b      	ldr	r3, [r3, #16]
   b4ce0:	4798      	blx	r3
   b4ce2:	2800      	cmp	r0, #0
   b4ce4:	dd01      	ble.n	b4cea <serialEventRun+0x2e>
        serialEvent1();
   b4ce6:	f3af 8000 	nop.w
}
   b4cea:	bd08      	pop	{r3, pc}
	...

000b4cf4 <_post_loop>:
{
   b4cf4:	b508      	push	{r3, lr}
	serialEventRun();
   b4cf6:	f7ff ffe1 	bl	b4cbc <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b4cfa:	f7ff fd3b 	bl	b4774 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4cfe:	4b01      	ldr	r3, [pc, #4]	; (b4d04 <_post_loop+0x10>)
   b4d00:	6018      	str	r0, [r3, #0]
}
   b4d02:	bd08      	pop	{r3, pc}
   b4d04:	2003e740 	.word	0x2003e740

000b4d08 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4d08:	4805      	ldr	r0, [pc, #20]	; (b4d20 <_Z33system_initialize_user_backup_ramv+0x18>)
   b4d0a:	4a06      	ldr	r2, [pc, #24]	; (b4d24 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b4d0c:	4906      	ldr	r1, [pc, #24]	; (b4d28 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b4d0e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4d10:	1a12      	subs	r2, r2, r0
   b4d12:	f001 f8ec 	bl	b5eee <memcpy>
    __backup_sram_signature = signature;
   b4d16:	4b05      	ldr	r3, [pc, #20]	; (b4d2c <_Z33system_initialize_user_backup_ramv+0x24>)
   b4d18:	4a05      	ldr	r2, [pc, #20]	; (b4d30 <_Z33system_initialize_user_backup_ramv+0x28>)
   b4d1a:	601a      	str	r2, [r3, #0]
}
   b4d1c:	bd08      	pop	{r3, pc}
   b4d1e:	bf00      	nop
   b4d20:	2003f400 	.word	0x2003f400
   b4d24:	2003f404 	.word	0x2003f404
   b4d28:	000b83f4 	.word	0x000b83f4
   b4d2c:	2003f400 	.word	0x2003f400
   b4d30:	9a271c1e 	.word	0x9a271c1e

000b4d34 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b4d34:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4d36:	2300      	movs	r3, #0
   b4d38:	9300      	str	r3, [sp, #0]
   b4d3a:	461a      	mov	r2, r3
   b4d3c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4d40:	f7ff fe02 	bl	b4948 <system_ctrl_set_result>
}
   b4d44:	b003      	add	sp, #12
   b4d46:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b4d4c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b4d4c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b4d4e:	8843      	ldrh	r3, [r0, #2]
   b4d50:	2b0a      	cmp	r3, #10
   b4d52:	d008      	beq.n	b4d66 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b4d54:	2b50      	cmp	r3, #80	; 0x50
   b4d56:	d10b      	bne.n	b4d70 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b4d58:	4b09      	ldr	r3, [pc, #36]	; (b4d80 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b4d5a:	681b      	ldr	r3, [r3, #0]
   b4d5c:	b14b      	cbz	r3, b4d72 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b4d5e:	b003      	add	sp, #12
   b4d60:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b4d64:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b4d66:	f7ff ffe5 	bl	b4d34 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b4d6a:	b003      	add	sp, #12
   b4d6c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4d70:	2300      	movs	r3, #0
   b4d72:	9300      	str	r3, [sp, #0]
   b4d74:	461a      	mov	r2, r3
   b4d76:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4d7a:	f7ff fde5 	bl	b4948 <system_ctrl_set_result>
}
   b4d7e:	e7f4      	b.n	b4d6a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b4d80:	2003e6f0 	.word	0x2003e6f0

000b4d84 <module_user_init_hook>:
{
   b4d84:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b4d86:	4812      	ldr	r0, [pc, #72]	; (b4dd0 <module_user_init_hook+0x4c>)
   b4d88:	2100      	movs	r1, #0
   b4d8a:	f7ff fe7f 	bl	b4a8c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b4d8e:	4b11      	ldr	r3, [pc, #68]	; (b4dd4 <module_user_init_hook+0x50>)
   b4d90:	681a      	ldr	r2, [r3, #0]
   b4d92:	4b11      	ldr	r3, [pc, #68]	; (b4dd8 <module_user_init_hook+0x54>)
   b4d94:	429a      	cmp	r2, r3
   b4d96:	4b11      	ldr	r3, [pc, #68]	; (b4ddc <module_user_init_hook+0x58>)
   b4d98:	bf0c      	ite	eq
   b4d9a:	2201      	moveq	r2, #1
   b4d9c:	2200      	movne	r2, #0
   b4d9e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b4da0:	d001      	beq.n	b4da6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b4da2:	f7ff ffb1 	bl	b4d08 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b4da6:	f7ff fccd 	bl	b4744 <HAL_RNG_GetRandomNumber>
   b4daa:	4604      	mov	r4, r0
    srand(seed);
   b4dac:	f001 f8b6 	bl	b5f1c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b4db0:	4b0b      	ldr	r3, [pc, #44]	; (b4de0 <module_user_init_hook+0x5c>)
   b4db2:	b113      	cbz	r3, b4dba <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b4db4:	4620      	mov	r0, r4
   b4db6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b4dba:	2100      	movs	r1, #0
   b4dbc:	4808      	ldr	r0, [pc, #32]	; (b4de0 <module_user_init_hook+0x5c>)
   b4dbe:	f7ff fe3d 	bl	b4a3c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b4dc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b4dc6:	4807      	ldr	r0, [pc, #28]	; (b4de4 <module_user_init_hook+0x60>)
   b4dc8:	2100      	movs	r1, #0
   b4dca:	f7ff bdb3 	b.w	b4934 <system_ctrl_set_app_request_handler>
   b4dce:	bf00      	nop
   b4dd0:	000b4cb1 	.word	0x000b4cb1
   b4dd4:	2003f400 	.word	0x2003f400
   b4dd8:	9a271c1e 	.word	0x9a271c1e
   b4ddc:	2003e6ec 	.word	0x2003e6ec
   b4de0:	00000000 	.word	0x00000000
   b4de4:	000b4d4d 	.word	0x000b4d4d

000b4de8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4de8:	4770      	bx	lr

000b4dea <_ZN9IPAddressD0Ev>:
   b4dea:	b510      	push	{r4, lr}
   b4dec:	2118      	movs	r1, #24
   b4dee:	4604      	mov	r4, r0
   b4df0:	f7ff f953 	bl	b409a <_ZdlPvj>
   b4df4:	4620      	mov	r0, r4
   b4df6:	bd10      	pop	{r4, pc}

000b4df8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b4df8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b4dfa:	7d03      	ldrb	r3, [r0, #20]
   b4dfc:	2b06      	cmp	r3, #6
{
   b4dfe:	b08d      	sub	sp, #52	; 0x34
   b4e00:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4e02:	f100 0704 	add.w	r7, r0, #4
   b4e06:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b4e0a:	d012      	beq.n	b4e32 <_ZNK9IPAddress7printToER5Print+0x3a>
   b4e0c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4e10:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b4e14:	220a      	movs	r2, #10
   b4e16:	4630      	mov	r0, r6
   b4e18:	f7ff fecd 	bl	b4bb6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b4e1c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b4e1e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b4e20:	d019      	beq.n	b4e56 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b4e22:	2c00      	cmp	r4, #0
   b4e24:	d0f4      	beq.n	b4e10 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b4e26:	212e      	movs	r1, #46	; 0x2e
   b4e28:	4630      	mov	r0, r6
   b4e2a:	f7ff fec1 	bl	b4bb0 <_ZN5Print5printEc>
   b4e2e:	4404      	add	r4, r0
   b4e30:	e7ee      	b.n	b4e10 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4e32:	232f      	movs	r3, #47	; 0x2f
   b4e34:	466a      	mov	r2, sp
   b4e36:	4639      	mov	r1, r7
   b4e38:	200a      	movs	r0, #10
		buf[0] = 0;
   b4e3a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4e3e:	f7ff fca9 	bl	b4794 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b4e42:	4668      	mov	r0, sp
   b4e44:	f001 f898 	bl	b5f78 <strlen>
   b4e48:	6833      	ldr	r3, [r6, #0]
   b4e4a:	4602      	mov	r2, r0
   b4e4c:	68db      	ldr	r3, [r3, #12]
   b4e4e:	4669      	mov	r1, sp
   b4e50:	4630      	mov	r0, r6
   b4e52:	4798      	blx	r3
   b4e54:	4604      	mov	r4, r0
    }
    return n;
}
   b4e56:	4620      	mov	r0, r4
   b4e58:	b00d      	add	sp, #52	; 0x34
   b4e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4e5c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b4e5c:	b510      	push	{r4, lr}
   b4e5e:	4b05      	ldr	r3, [pc, #20]	; (b4e74 <_ZN9IPAddressC1Ev+0x18>)
   b4e60:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b4e62:	2211      	movs	r2, #17
   b4e64:	f840 3b04 	str.w	r3, [r0], #4
   b4e68:	2100      	movs	r1, #0
   b4e6a:	f001 f84e 	bl	b5f0a <memset>
}
   b4e6e:	4620      	mov	r0, r4
   b4e70:	bd10      	pop	{r4, pc}
   b4e72:	bf00      	nop
   b4e74:	000b7e70 	.word	0x000b7e70

000b4e78 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b4e78:	4603      	mov	r3, r0
   b4e7a:	4a07      	ldr	r2, [pc, #28]	; (b4e98 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b4e7c:	b510      	push	{r4, lr}
   b4e7e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b4e82:	f101 0210 	add.w	r2, r1, #16
   b4e86:	f851 4b04 	ldr.w	r4, [r1], #4
   b4e8a:	f843 4b04 	str.w	r4, [r3], #4
   b4e8e:	4291      	cmp	r1, r2
   b4e90:	d1f9      	bne.n	b4e86 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b4e92:	780a      	ldrb	r2, [r1, #0]
   b4e94:	701a      	strb	r2, [r3, #0]
}
   b4e96:	bd10      	pop	{r4, pc}
   b4e98:	000b7e70 	.word	0x000b7e70

000b4e9c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b4e9c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b4e9e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b4ea2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b4ea6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b4eaa:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b4eae:	2304      	movs	r3, #4
   b4eb0:	6041      	str	r1, [r0, #4]
   b4eb2:	7503      	strb	r3, [r0, #20]
}
   b4eb4:	bd10      	pop	{r4, pc}
	...

000b4eb8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b4eb8:	b507      	push	{r0, r1, r2, lr}
   b4eba:	4b06      	ldr	r3, [pc, #24]	; (b4ed4 <_ZN9IPAddressC1EPKh+0x1c>)
   b4ebc:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b4ebe:	78cb      	ldrb	r3, [r1, #3]
   b4ec0:	9300      	str	r3, [sp, #0]
   b4ec2:	788b      	ldrb	r3, [r1, #2]
   b4ec4:	784a      	ldrb	r2, [r1, #1]
   b4ec6:	7809      	ldrb	r1, [r1, #0]
   b4ec8:	f7ff ffe8 	bl	b4e9c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b4ecc:	b003      	add	sp, #12
   b4ece:	f85d fb04 	ldr.w	pc, [sp], #4
   b4ed2:	bf00      	nop
   b4ed4:	000b7e70 	.word	0x000b7e70

000b4ed8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4ed8:	7441      	strb	r1, [r0, #17]
}
   b4eda:	4770      	bx	lr

000b4edc <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4edc:	4770      	bx	lr

000b4ede <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b4ede:	4770      	bx	lr

000b4ee0 <_ZN9USBSerial4readEv>:
{
   b4ee0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b4ee2:	2100      	movs	r1, #0
   b4ee4:	7c00      	ldrb	r0, [r0, #16]
   b4ee6:	f7ff fcfd 	bl	b48e4 <HAL_USB_USART_Receive_Data>
}
   b4eea:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4eee:	bd08      	pop	{r3, pc}

000b4ef0 <_ZN9USBSerial4peekEv>:
{
   b4ef0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b4ef2:	2101      	movs	r1, #1
   b4ef4:	7c00      	ldrb	r0, [r0, #16]
   b4ef6:	f7ff fcf5 	bl	b48e4 <HAL_USB_USART_Receive_Data>
}
   b4efa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4efe:	bd08      	pop	{r3, pc}

000b4f00 <_ZN9USBSerial17availableForWriteEv>:
{
   b4f00:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b4f02:	7c00      	ldrb	r0, [r0, #16]
   b4f04:	f7ff fce6 	bl	b48d4 <HAL_USB_USART_Available_Data_For_Write>
}
   b4f08:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4f0c:	bd08      	pop	{r3, pc}

000b4f0e <_ZN9USBSerial9availableEv>:
{
   b4f0e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b4f10:	7c00      	ldrb	r0, [r0, #16]
   b4f12:	f7ff fcd7 	bl	b48c4 <HAL_USB_USART_Available_Data>
}
   b4f16:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4f1a:	bd08      	pop	{r3, pc}

000b4f1c <_ZN9USBSerial5writeEh>:
{
   b4f1c:	b513      	push	{r0, r1, r4, lr}
   b4f1e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4f20:	7c00      	ldrb	r0, [r0, #16]
{
   b4f22:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4f24:	f7ff fcd6 	bl	b48d4 <HAL_USB_USART_Available_Data_For_Write>
   b4f28:	2800      	cmp	r0, #0
   b4f2a:	9901      	ldr	r1, [sp, #4]
   b4f2c:	dc01      	bgt.n	b4f32 <_ZN9USBSerial5writeEh+0x16>
   b4f2e:	7c60      	ldrb	r0, [r4, #17]
   b4f30:	b120      	cbz	r0, b4f3c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b4f32:	7c20      	ldrb	r0, [r4, #16]
   b4f34:	f7ff fcde 	bl	b48f4 <HAL_USB_USART_Send_Data>
   b4f38:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b4f3c:	b002      	add	sp, #8
   b4f3e:	bd10      	pop	{r4, pc}

000b4f40 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b4f40:	7c00      	ldrb	r0, [r0, #16]
   b4f42:	f7ff bcdf 	b.w	b4904 <HAL_USB_USART_Flush_Data>

000b4f46 <_ZN9USBSerialD0Ev>:
   b4f46:	b510      	push	{r4, lr}
   b4f48:	2114      	movs	r1, #20
   b4f4a:	4604      	mov	r4, r0
   b4f4c:	f7ff f8a5 	bl	b409a <_ZdlPvj>
   b4f50:	4620      	mov	r0, r4
   b4f52:	bd10      	pop	{r4, pc}

000b4f54 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b4f54:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b4f56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4f5a:	4604      	mov	r4, r0
   b4f5c:	4608      	mov	r0, r1
   b4f5e:	2100      	movs	r1, #0
   b4f60:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b4f64:	4b04      	ldr	r3, [pc, #16]	; (b4f78 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b4f66:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4f68:	2301      	movs	r3, #1
  _serial = serial;
   b4f6a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4f6c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b4f6e:	4611      	mov	r1, r2
   b4f70:	f7ff fca0 	bl	b48b4 <HAL_USB_USART_Init>
}
   b4f74:	4620      	mov	r0, r4
   b4f76:	bd10      	pop	{r4, pc}
   b4f78:	000b7e84 	.word	0x000b7e84

000b4f7c <_Z19acquireSerialBufferv>:
{
   b4f7c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b4f7e:	2214      	movs	r2, #20
{
   b4f80:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b4f82:	2100      	movs	r1, #0
   b4f84:	f000 ffc1 	bl	b5f0a <memset>
}
   b4f88:	4620      	mov	r0, r4
   b4f8a:	bd10      	pop	{r4, pc}

000b4f8c <_Z16_fetch_usbserialv>:
{
   b4f8c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4f8e:	4c0f      	ldr	r4, [pc, #60]	; (b4fcc <_Z16_fetch_usbserialv+0x40>)
{
   b4f90:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b4f92:	a803      	add	r0, sp, #12
   b4f94:	f7ff fff2 	bl	b4f7c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4f98:	7821      	ldrb	r1, [r4, #0]
   b4f9a:	f3bf 8f5b 	dmb	ish
   b4f9e:	f011 0101 	ands.w	r1, r1, #1
   b4fa2:	d10f      	bne.n	b4fc4 <_Z16_fetch_usbserialv+0x38>
   b4fa4:	4620      	mov	r0, r4
   b4fa6:	9101      	str	r1, [sp, #4]
   b4fa8:	f7ff f879 	bl	b409e <__cxa_guard_acquire>
   b4fac:	9901      	ldr	r1, [sp, #4]
   b4fae:	b148      	cbz	r0, b4fc4 <_Z16_fetch_usbserialv+0x38>
   b4fb0:	aa03      	add	r2, sp, #12
   b4fb2:	4807      	ldr	r0, [pc, #28]	; (b4fd0 <_Z16_fetch_usbserialv+0x44>)
   b4fb4:	f7ff ffce 	bl	b4f54 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b4fb8:	4620      	mov	r0, r4
   b4fba:	f7ff f875 	bl	b40a8 <__cxa_guard_release>
   b4fbe:	4805      	ldr	r0, [pc, #20]	; (b4fd4 <_Z16_fetch_usbserialv+0x48>)
   b4fc0:	f000 ff8c 	bl	b5edc <atexit>
	return _usbserial;
}
   b4fc4:	4802      	ldr	r0, [pc, #8]	; (b4fd0 <_Z16_fetch_usbserialv+0x44>)
   b4fc6:	b008      	add	sp, #32
   b4fc8:	bd10      	pop	{r4, pc}
   b4fca:	bf00      	nop
   b4fcc:	2003e6f4 	.word	0x2003e6f4
   b4fd0:	2003e6f8 	.word	0x2003e6f8
   b4fd4:	000b4edd 	.word	0x000b4edd

000b4fd8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b4fd8:	4770      	bx	lr

000b4fda <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4fda:	7441      	strb	r1, [r0, #17]
}
   b4fdc:	4770      	bx	lr

000b4fde <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b4fde:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b4fe0:	7c00      	ldrb	r0, [r0, #16]
   b4fe2:	f7ff fc0f 	bl	b4804 <hal_usart_available_data_for_write>
}
   b4fe6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4fea:	bd08      	pop	{r3, pc}

000b4fec <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b4fec:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b4fee:	7c00      	ldrb	r0, [r0, #16]
   b4ff0:	f7ff fbe0 	bl	b47b4 <hal_usart_available>
}
   b4ff4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4ff8:	bd08      	pop	{r3, pc}

000b4ffa <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b4ffa:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b4ffc:	7c00      	ldrb	r0, [r0, #16]
   b4ffe:	f7ff fbe9 	bl	b47d4 <hal_usart_peek>
}
   b5002:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5006:	bd08      	pop	{r3, pc}

000b5008 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5008:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b500a:	7c00      	ldrb	r0, [r0, #16]
   b500c:	f7ff fbda 	bl	b47c4 <hal_usart_read>
}
   b5010:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5014:	bd08      	pop	{r3, pc}

000b5016 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5016:	7c00      	ldrb	r0, [r0, #16]
   b5018:	f7ff bbe4 	b.w	b47e4 <hal_usart_flush>

000b501c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b501c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b501e:	7c45      	ldrb	r5, [r0, #17]
{
   b5020:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5022:	b12d      	cbz	r5, b5030 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5024:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5026:	b003      	add	sp, #12
   b5028:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b502c:	f7ff bbba 	b.w	b47a4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5030:	7c00      	ldrb	r0, [r0, #16]
   b5032:	9101      	str	r1, [sp, #4]
   b5034:	f7ff fbe6 	bl	b4804 <hal_usart_available_data_for_write>
   b5038:	2800      	cmp	r0, #0
   b503a:	9901      	ldr	r1, [sp, #4]
   b503c:	dcf2      	bgt.n	b5024 <_ZN11USARTSerial5writeEh+0x8>
}
   b503e:	4628      	mov	r0, r5
   b5040:	b003      	add	sp, #12
   b5042:	bd30      	pop	{r4, r5, pc}

000b5044 <_ZN11USARTSerialD0Ev>:
   b5044:	b510      	push	{r4, lr}
   b5046:	2114      	movs	r1, #20
   b5048:	4604      	mov	r4, r0
   b504a:	f7ff f826 	bl	b409a <_ZdlPvj>
   b504e:	4620      	mov	r0, r4
   b5050:	bd10      	pop	{r4, pc}
	...

000b5054 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b5054:	b510      	push	{r4, lr}
   b5056:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b505a:	4604      	mov	r4, r0
   b505c:	4608      	mov	r0, r1
   b505e:	4611      	mov	r1, r2
   b5060:	2200      	movs	r2, #0
   b5062:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5066:	4b04      	ldr	r3, [pc, #16]	; (b5078 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5068:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b506a:	2301      	movs	r3, #1
  _serial = serial;
   b506c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b506e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5070:	f7ff fbd0 	bl	b4814 <hal_usart_init_ex>
}
   b5074:	4620      	mov	r0, r4
   b5076:	bd10      	pop	{r4, pc}
   b5078:	000b7eb4 	.word	0x000b7eb4

000b507c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b507c:	4770      	bx	lr

000b507e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b507e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5080:	4606      	mov	r6, r0
   b5082:	4615      	mov	r5, r2
   b5084:	460c      	mov	r4, r1
   b5086:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5088:	42bc      	cmp	r4, r7
   b508a:	d006      	beq.n	b509a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b508c:	6833      	ldr	r3, [r6, #0]
   b508e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b5092:	689b      	ldr	r3, [r3, #8]
   b5094:	4630      	mov	r0, r6
   b5096:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5098:	e7f6      	b.n	b5088 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b509a:	4628      	mov	r0, r5
   b509c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b509e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b509e:	7c00      	ldrb	r0, [r0, #16]
   b50a0:	2200      	movs	r2, #0
   b50a2:	f7ff bbbf 	b.w	b4824 <hal_i2c_write>

000b50a6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b50a6:	7c00      	ldrb	r0, [r0, #16]
   b50a8:	2100      	movs	r1, #0
   b50aa:	f7ff bbc3 	b.w	b4834 <hal_i2c_available>

000b50ae <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b50ae:	7c00      	ldrb	r0, [r0, #16]
   b50b0:	2100      	movs	r1, #0
   b50b2:	f7ff bbc7 	b.w	b4844 <hal_i2c_read>

000b50b6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b50b6:	7c00      	ldrb	r0, [r0, #16]
   b50b8:	2100      	movs	r1, #0
   b50ba:	f7ff bbcb 	b.w	b4854 <hal_i2c_peek>

000b50be <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b50be:	7c00      	ldrb	r0, [r0, #16]
   b50c0:	2100      	movs	r1, #0
   b50c2:	f7ff bbcf 	b.w	b4864 <hal_i2c_flush>

000b50c6 <_ZN7TwoWireD0Ev>:
   b50c6:	b510      	push	{r4, lr}
   b50c8:	2114      	movs	r1, #20
   b50ca:	4604      	mov	r4, r0
   b50cc:	f7fe ffe5 	bl	b409a <_ZdlPvj>
   b50d0:	4620      	mov	r0, r4
   b50d2:	bd10      	pop	{r4, pc}

000b50d4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b50d4:	b538      	push	{r3, r4, r5, lr}
   b50d6:	4604      	mov	r4, r0
   b50d8:	4615      	mov	r5, r2
   b50da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b50de:	2200      	movs	r2, #0
   b50e0:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b50e4:	4b09      	ldr	r3, [pc, #36]	; (b510c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b50e6:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b50e8:	4608      	mov	r0, r1
   b50ea:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b50ec:	4629      	mov	r1, r5
   b50ee:	f7ff fbc9 	bl	b4884 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b50f2:	30bf      	adds	r0, #191	; 0xbf
   b50f4:	d108      	bne.n	b5108 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b50f6:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b50f8:	07db      	lsls	r3, r3, #31
   b50fa:	d505      	bpl.n	b5108 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b50fc:	6868      	ldr	r0, [r5, #4]
   b50fe:	f7ff fcad 	bl	b4a5c <free>
    free(conf.tx_buffer);
   b5102:	68e8      	ldr	r0, [r5, #12]
   b5104:	f7ff fcaa 	bl	b4a5c <free>
}
   b5108:	4620      	mov	r0, r4
   b510a:	bd38      	pop	{r3, r4, r5, pc}
   b510c:	000b7ee4 	.word	0x000b7ee4

000b5110 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b5110:	2200      	movs	r2, #0
   b5112:	6840      	ldr	r0, [r0, #4]
   b5114:	4611      	mov	r1, r2
   b5116:	f7ff bc39 	b.w	b498c <network_ready>

000b511a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b511a:	2200      	movs	r2, #0
   b511c:	6840      	ldr	r0, [r0, #4]
   b511e:	4611      	mov	r1, r2
   b5120:	f7ff bc54 	b.w	b49cc <network_listening>

000b5124 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5124:	2200      	movs	r2, #0
   b5126:	6840      	ldr	r0, [r0, #4]
   b5128:	4611      	mov	r1, r2
   b512a:	f7ff bc5f 	b.w	b49ec <network_get_listen_timeout>

000b512e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b512e:	6840      	ldr	r0, [r0, #4]
   b5130:	2200      	movs	r2, #0
   b5132:	f7ff bc53 	b.w	b49dc <network_set_listen_timeout>

000b5136 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5136:	6840      	ldr	r0, [r0, #4]
   b5138:	2200      	movs	r2, #0
   b513a:	f081 0101 	eor.w	r1, r1, #1
   b513e:	f7ff bc3d 	b.w	b49bc <network_listen>

000b5142 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5142:	2300      	movs	r3, #0
   b5144:	6840      	ldr	r0, [r0, #4]
   b5146:	461a      	mov	r2, r3
   b5148:	4619      	mov	r1, r3
   b514a:	f7ff bc2f 	b.w	b49ac <network_off>

000b514e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b514e:	2300      	movs	r3, #0
   b5150:	6840      	ldr	r0, [r0, #4]
   b5152:	461a      	mov	r2, r3
   b5154:	4619      	mov	r1, r3
   b5156:	f7ff bc21 	b.w	b499c <network_on>

000b515a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b515a:	2200      	movs	r2, #0
   b515c:	6840      	ldr	r0, [r0, #4]
   b515e:	4611      	mov	r1, r2
   b5160:	f7ff bc04 	b.w	b496c <network_connecting>

000b5164 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5164:	6840      	ldr	r0, [r0, #4]
   b5166:	2200      	movs	r2, #0
   b5168:	2102      	movs	r1, #2
   b516a:	f7ff bc07 	b.w	b497c <network_disconnect>

000b516e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b516e:	2300      	movs	r3, #0
   b5170:	6840      	ldr	r0, [r0, #4]
   b5172:	461a      	mov	r2, r3
   b5174:	f7ff bbf2 	b.w	b495c <network_connect>

000b5178 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b5178:	4b02      	ldr	r3, [pc, #8]	; (b5184 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b517a:	2204      	movs	r2, #4
   b517c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b517e:	4a02      	ldr	r2, [pc, #8]	; (b5188 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b5180:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b5182:	4770      	bx	lr
   b5184:	2003e70c 	.word	0x2003e70c
   b5188:	000b7f0c 	.word	0x000b7f0c

000b518c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b518c:	2300      	movs	r3, #0
   b518e:	6840      	ldr	r0, [r0, #4]
   b5190:	461a      	mov	r2, r3
   b5192:	f7ff bbe3 	b.w	b495c <network_connect>

000b5196 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b5196:	6840      	ldr	r0, [r0, #4]
   b5198:	2200      	movs	r2, #0
   b519a:	2102      	movs	r1, #2
   b519c:	f7ff bbee 	b.w	b497c <network_disconnect>

000b51a0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b51a0:	2200      	movs	r2, #0
   b51a2:	6840      	ldr	r0, [r0, #4]
   b51a4:	4611      	mov	r1, r2
   b51a6:	f7ff bbe1 	b.w	b496c <network_connecting>

000b51aa <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b51aa:	2200      	movs	r2, #0
   b51ac:	6840      	ldr	r0, [r0, #4]
   b51ae:	4611      	mov	r1, r2
   b51b0:	f7ff bbec 	b.w	b498c <network_ready>

000b51b4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b51b4:	2300      	movs	r3, #0
   b51b6:	6840      	ldr	r0, [r0, #4]
   b51b8:	461a      	mov	r2, r3
   b51ba:	4619      	mov	r1, r3
   b51bc:	f7ff bbee 	b.w	b499c <network_on>

000b51c0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b51c0:	2300      	movs	r3, #0
   b51c2:	6840      	ldr	r0, [r0, #4]
   b51c4:	461a      	mov	r2, r3
   b51c6:	4619      	mov	r1, r3
   b51c8:	f7ff bbf0 	b.w	b49ac <network_off>

000b51cc <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b51cc:	6840      	ldr	r0, [r0, #4]
   b51ce:	2100      	movs	r1, #0
   b51d0:	f7ff bc14 	b.w	b49fc <network_is_on>

000b51d4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b51d4:	6840      	ldr	r0, [r0, #4]
   b51d6:	2100      	movs	r1, #0
   b51d8:	f7ff bc18 	b.w	b4a0c <network_is_off>

000b51dc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b51dc:	6840      	ldr	r0, [r0, #4]
   b51de:	2200      	movs	r2, #0
   b51e0:	f081 0101 	eor.w	r1, r1, #1
   b51e4:	f7ff bbea 	b.w	b49bc <network_listen>

000b51e8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b51e8:	6840      	ldr	r0, [r0, #4]
   b51ea:	2200      	movs	r2, #0
   b51ec:	f7ff bbf6 	b.w	b49dc <network_set_listen_timeout>

000b51f0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b51f0:	2200      	movs	r2, #0
   b51f2:	6840      	ldr	r0, [r0, #4]
   b51f4:	4611      	mov	r1, r2
   b51f6:	f7ff bbf9 	b.w	b49ec <network_get_listen_timeout>

000b51fa <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b51fa:	2200      	movs	r2, #0
   b51fc:	6840      	ldr	r0, [r0, #4]
   b51fe:	4611      	mov	r1, r2
   b5200:	f7ff bbe4 	b.w	b49cc <network_listening>

000b5204 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5204:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5208:	b095      	sub	sp, #84	; 0x54
   b520a:	4614      	mov	r4, r2
   b520c:	460d      	mov	r5, r1
   b520e:	4607      	mov	r7, r0
    IPAddress addr;
   b5210:	f7ff fe24 	bl	b4e5c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5214:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b5216:	221c      	movs	r2, #28
   b5218:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b521a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b521c:	f000 fe75 	bl	b5f0a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5220:	2340      	movs	r3, #64	; 0x40
   b5222:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5224:	4620      	mov	r0, r4
   b5226:	466b      	mov	r3, sp
   b5228:	aa0c      	add	r2, sp, #48	; 0x30
   b522a:	2100      	movs	r1, #0
   b522c:	f7ff fa62 	bl	b46f4 <netdb_getaddrinfo>
    if (!r) {
   b5230:	4604      	mov	r4, r0
   b5232:	2800      	cmp	r0, #0
   b5234:	d14b      	bne.n	b52ce <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5236:	4602      	mov	r2, r0
   b5238:	2101      	movs	r1, #1
   b523a:	6868      	ldr	r0, [r5, #4]
   b523c:	f7ff fba6 	bl	b498c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5240:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5242:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5244:	4622      	mov	r2, r4
   b5246:	6868      	ldr	r0, [r5, #4]
   b5248:	f7ff fba0 	bl	b498c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b524c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b524e:	4681      	mov	r9, r0
        bool ok = false;
   b5250:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5252:	2e00      	cmp	r6, #0
   b5254:	d03b      	beq.n	b52ce <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b5256:	2900      	cmp	r1, #0
   b5258:	d139      	bne.n	b52ce <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b525a:	6873      	ldr	r3, [r6, #4]
   b525c:	2b02      	cmp	r3, #2
   b525e:	d003      	beq.n	b5268 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5260:	2b0a      	cmp	r3, #10
   b5262:	d011      	beq.n	b5288 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5264:	69f6      	ldr	r6, [r6, #28]
   b5266:	e7f4      	b.n	b5252 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5268:	f1b8 0f00 	cmp.w	r8, #0
   b526c:	d0fa      	beq.n	b5264 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b526e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5270:	a806      	add	r0, sp, #24
   b5272:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5274:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b5276:	f7ff fe1f 	bl	b4eb8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b527a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b527c:	1d3c      	adds	r4, r7, #4
   b527e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5280:	682b      	ldr	r3, [r5, #0]
   b5282:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5284:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b5286:	e7ed      	b.n	b5264 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5288:	f1b9 0f00 	cmp.w	r9, #0
   b528c:	d0ea      	beq.n	b5264 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b528e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5290:	2210      	movs	r2, #16
   b5292:	a801      	add	r0, sp, #4
   b5294:	f000 fe39 	bl	b5f0a <memset>
                    a.v = 6;
   b5298:	2306      	movs	r3, #6
   b529a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b529e:	ad01      	add	r5, sp, #4
   b52a0:	f104 0308 	add.w	r3, r4, #8
   b52a4:	3418      	adds	r4, #24
   b52a6:	6818      	ldr	r0, [r3, #0]
   b52a8:	6859      	ldr	r1, [r3, #4]
   b52aa:	462a      	mov	r2, r5
   b52ac:	c203      	stmia	r2!, {r0, r1}
   b52ae:	3308      	adds	r3, #8
   b52b0:	42a3      	cmp	r3, r4
   b52b2:	4615      	mov	r5, r2
   b52b4:	d1f7      	bne.n	b52a6 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b52b6:	a901      	add	r1, sp, #4
   b52b8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b52ba:	ad07      	add	r5, sp, #28
   b52bc:	f7ff fddc 	bl	b4e78 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b52c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b52c2:	1d3c      	adds	r4, r7, #4
   b52c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b52c6:	682b      	ldr	r3, [r5, #0]
   b52c8:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b52ca:	4649      	mov	r1, r9
   b52cc:	e7ca      	b.n	b5264 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b52ce:	9800      	ldr	r0, [sp, #0]
   b52d0:	f7ff fa08 	bl	b46e4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b52d4:	4638      	mov	r0, r7
   b52d6:	b015      	add	sp, #84	; 0x54
   b52d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b52dc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b52dc:	4b02      	ldr	r3, [pc, #8]	; (b52e8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b52de:	4a03      	ldr	r2, [pc, #12]	; (b52ec <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b52e0:	601a      	str	r2, [r3, #0]
   b52e2:	2200      	movs	r2, #0
   b52e4:	605a      	str	r2, [r3, #4]

} // spark
   b52e6:	4770      	bx	lr
   b52e8:	2003e714 	.word	0x2003e714
   b52ec:	000b7f48 	.word	0x000b7f48

000b52f0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b52f0:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b52f2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b52f4:	d902      	bls.n	b52fc <pinAvailable+0xc>
    return false;
   b52f6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b52f8:	b002      	add	sp, #8
   b52fa:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b52fc:	f1a0 030b 	sub.w	r3, r0, #11
   b5300:	2b02      	cmp	r3, #2
   b5302:	d81a      	bhi.n	b533a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5304:	4c17      	ldr	r4, [pc, #92]	; (b5364 <pinAvailable+0x74>)
   b5306:	7821      	ldrb	r1, [r4, #0]
   b5308:	f3bf 8f5b 	dmb	ish
   b530c:	f011 0101 	ands.w	r1, r1, #1
   b5310:	d10b      	bne.n	b532a <pinAvailable+0x3a>
   b5312:	4620      	mov	r0, r4
   b5314:	9101      	str	r1, [sp, #4]
   b5316:	f7fe fec2 	bl	b409e <__cxa_guard_acquire>
   b531a:	9901      	ldr	r1, [sp, #4]
   b531c:	b128      	cbz	r0, b532a <pinAvailable+0x3a>
   b531e:	4812      	ldr	r0, [pc, #72]	; (b5368 <pinAvailable+0x78>)
   b5320:	f7ff fbfa 	bl	b4b18 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5324:	4620      	mov	r0, r4
   b5326:	f7fe febf 	bl	b40a8 <__cxa_guard_release>
   b532a:	4b0f      	ldr	r3, [pc, #60]	; (b5368 <pinAvailable+0x78>)
   b532c:	7818      	ldrb	r0, [r3, #0]
   b532e:	f7ff fab9 	bl	b48a4 <hal_spi_is_enabled>
   b5332:	2800      	cmp	r0, #0
   b5334:	d1df      	bne.n	b52f6 <pinAvailable+0x6>
  return true; // 'pin' is available
   b5336:	2001      	movs	r0, #1
   b5338:	e7de      	b.n	b52f8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b533a:	2801      	cmp	r0, #1
   b533c:	d809      	bhi.n	b5352 <pinAvailable+0x62>
   b533e:	f000 f89b 	bl	b5478 <_Z19__fetch_global_Wirev>
   b5342:	2100      	movs	r1, #0
   b5344:	7c00      	ldrb	r0, [r0, #16]
   b5346:	f7ff fa95 	bl	b4874 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b534a:	f080 0001 	eor.w	r0, r0, #1
   b534e:	b2c0      	uxtb	r0, r0
   b5350:	e7d2      	b.n	b52f8 <pinAvailable+0x8>
   b5352:	3809      	subs	r0, #9
   b5354:	2801      	cmp	r0, #1
   b5356:	d8ee      	bhi.n	b5336 <pinAvailable+0x46>
   b5358:	f000 f84e 	bl	b53f8 <_Z22__fetch_global_Serial1v>
   b535c:	7c00      	ldrb	r0, [r0, #16]
   b535e:	f7ff fa49 	bl	b47f4 <hal_usart_is_enabled>
   b5362:	e7f2      	b.n	b534a <pinAvailable+0x5a>
   b5364:	2003e71c 	.word	0x2003e71c
   b5368:	2003e720 	.word	0x2003e720

000b536c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b536c:	2823      	cmp	r0, #35	; 0x23
{
   b536e:	b538      	push	{r3, r4, r5, lr}
   b5370:	4604      	mov	r4, r0
   b5372:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5374:	d80a      	bhi.n	b538c <pinMode+0x20>
   b5376:	29ff      	cmp	r1, #255	; 0xff
   b5378:	d008      	beq.n	b538c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b537a:	f7ff ffb9 	bl	b52f0 <pinAvailable>
   b537e:	b128      	cbz	r0, b538c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b5380:	4629      	mov	r1, r5
   b5382:	4620      	mov	r0, r4
}
   b5384:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b5388:	f7ff b9c4 	b.w	b4714 <HAL_Pin_Mode>
}
   b538c:	bd38      	pop	{r3, r4, r5, pc}

000b538e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b538e:	b538      	push	{r3, r4, r5, lr}
   b5390:	4604      	mov	r4, r0
   b5392:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b5394:	f7ff f9c6 	bl	b4724 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b5398:	28ff      	cmp	r0, #255	; 0xff
   b539a:	d010      	beq.n	b53be <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b539c:	2806      	cmp	r0, #6
   b539e:	d804      	bhi.n	b53aa <digitalWrite+0x1c>
   b53a0:	234d      	movs	r3, #77	; 0x4d
   b53a2:	fa23 f000 	lsr.w	r0, r3, r0
   b53a6:	07c3      	lsls	r3, r0, #31
   b53a8:	d409      	bmi.n	b53be <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b53aa:	4620      	mov	r0, r4
   b53ac:	f7ff ffa0 	bl	b52f0 <pinAvailable>
   b53b0:	b128      	cbz	r0, b53be <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b53b2:	4629      	mov	r1, r5
   b53b4:	4620      	mov	r0, r4
}
   b53b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b53ba:	f7ff b9bb 	b.w	b4734 <HAL_GPIO_Write>
}
   b53be:	bd38      	pop	{r3, r4, r5, pc}

000b53c0 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b53c0:	4770      	bx	lr
	...

000b53c4 <_Z20acquireSerial1Bufferv>:
{
   b53c4:	b538      	push	{r3, r4, r5, lr}
   b53c6:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b53c8:	2514      	movs	r5, #20
   b53ca:	462a      	mov	r2, r5
   b53cc:	2100      	movs	r1, #0
   b53ce:	f000 fd9c 	bl	b5f0a <memset>
   b53d2:	8025      	strh	r5, [r4, #0]
   b53d4:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b53d6:	4907      	ldr	r1, [pc, #28]	; (b53f4 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b53d8:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b53da:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b53dc:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b53de:	f000 f86f 	bl	b54c0 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b53e2:	4904      	ldr	r1, [pc, #16]	; (b53f4 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b53e4:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b53e6:	4628      	mov	r0, r5
   b53e8:	f000 f86a 	bl	b54c0 <_ZnajRKSt9nothrow_t>
    };
   b53ec:	60e0      	str	r0, [r4, #12]
}
   b53ee:	4620      	mov	r0, r4
   b53f0:	bd38      	pop	{r3, r4, r5, pc}
   b53f2:	bf00      	nop
   b53f4:	000b7f7c 	.word	0x000b7f7c

000b53f8 <_Z22__fetch_global_Serial1v>:
{
   b53f8:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b53fa:	4d0e      	ldr	r5, [pc, #56]	; (b5434 <_Z22__fetch_global_Serial1v+0x3c>)
   b53fc:	7829      	ldrb	r1, [r5, #0]
   b53fe:	f3bf 8f5b 	dmb	ish
   b5402:	f011 0401 	ands.w	r4, r1, #1
{
   b5406:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5408:	d111      	bne.n	b542e <_Z22__fetch_global_Serial1v+0x36>
   b540a:	4628      	mov	r0, r5
   b540c:	f7fe fe47 	bl	b409e <__cxa_guard_acquire>
   b5410:	b168      	cbz	r0, b542e <_Z22__fetch_global_Serial1v+0x36>
   b5412:	a801      	add	r0, sp, #4
   b5414:	f7ff ffd6 	bl	b53c4 <_Z20acquireSerial1Bufferv>
   b5418:	aa01      	add	r2, sp, #4
   b541a:	4621      	mov	r1, r4
   b541c:	4806      	ldr	r0, [pc, #24]	; (b5438 <_Z22__fetch_global_Serial1v+0x40>)
   b541e:	f7ff fe19 	bl	b5054 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b5422:	4628      	mov	r0, r5
   b5424:	f7fe fe40 	bl	b40a8 <__cxa_guard_release>
   b5428:	4804      	ldr	r0, [pc, #16]	; (b543c <_Z22__fetch_global_Serial1v+0x44>)
   b542a:	f000 fd57 	bl	b5edc <atexit>
    return serial1;
}
   b542e:	4802      	ldr	r0, [pc, #8]	; (b5438 <_Z22__fetch_global_Serial1v+0x40>)
   b5430:	b007      	add	sp, #28
   b5432:	bd30      	pop	{r4, r5, pc}
   b5434:	2003e728 	.word	0x2003e728
   b5438:	2003e72c 	.word	0x2003e72c
   b543c:	000b53c1 	.word	0x000b53c1

000b5440 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5440:	4770      	bx	lr
	...

000b5444 <_Z17acquireWireBufferv>:
{
   b5444:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b5446:	4b0a      	ldr	r3, [pc, #40]	; (b5470 <_Z17acquireWireBufferv+0x2c>)
   b5448:	6003      	str	r3, [r0, #0]
   b544a:	2301      	movs	r3, #1
{
   b544c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b544e:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5450:	4908      	ldr	r1, [pc, #32]	; (b5474 <_Z17acquireWireBufferv+0x30>)
   b5452:	2020      	movs	r0, #32
   b5454:	f000 f834 	bl	b54c0 <_ZnajRKSt9nothrow_t>
	};
   b5458:	2520      	movs	r5, #32
   b545a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b545c:	4905      	ldr	r1, [pc, #20]	; (b5474 <_Z17acquireWireBufferv+0x30>)
	};
   b545e:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5460:	4628      	mov	r0, r5
   b5462:	f000 f82d 	bl	b54c0 <_ZnajRKSt9nothrow_t>
	};
   b5466:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b546a:	4620      	mov	r0, r4
   b546c:	bd38      	pop	{r3, r4, r5, pc}
   b546e:	bf00      	nop
   b5470:	00010018 	.word	0x00010018
   b5474:	000b7f7c 	.word	0x000b7f7c

000b5478 <_Z19__fetch_global_Wirev>:
{
   b5478:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b547a:	4d0e      	ldr	r5, [pc, #56]	; (b54b4 <_Z19__fetch_global_Wirev+0x3c>)
   b547c:	7829      	ldrb	r1, [r5, #0]
   b547e:	f3bf 8f5b 	dmb	ish
   b5482:	f011 0401 	ands.w	r4, r1, #1
{
   b5486:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5488:	d111      	bne.n	b54ae <_Z19__fetch_global_Wirev+0x36>
   b548a:	4628      	mov	r0, r5
   b548c:	f7fe fe07 	bl	b409e <__cxa_guard_acquire>
   b5490:	b168      	cbz	r0, b54ae <_Z19__fetch_global_Wirev+0x36>
   b5492:	4668      	mov	r0, sp
   b5494:	f7ff ffd6 	bl	b5444 <_Z17acquireWireBufferv>
   b5498:	466a      	mov	r2, sp
   b549a:	4621      	mov	r1, r4
   b549c:	4806      	ldr	r0, [pc, #24]	; (b54b8 <_Z19__fetch_global_Wirev+0x40>)
   b549e:	f7ff fe19 	bl	b50d4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b54a2:	4628      	mov	r0, r5
   b54a4:	f7fe fe00 	bl	b40a8 <__cxa_guard_release>
   b54a8:	4804      	ldr	r0, [pc, #16]	; (b54bc <_Z19__fetch_global_Wirev+0x44>)
   b54aa:	f000 fd17 	bl	b5edc <atexit>
	return wire;
}
   b54ae:	4802      	ldr	r0, [pc, #8]	; (b54b8 <_Z19__fetch_global_Wirev+0x40>)
   b54b0:	b007      	add	sp, #28
   b54b2:	bd30      	pop	{r4, r5, pc}
   b54b4:	2003e744 	.word	0x2003e744
   b54b8:	2003e748 	.word	0x2003e748
   b54bc:	000b5441 	.word	0x000b5441

000b54c0 <_ZnajRKSt9nothrow_t>:
   b54c0:	f7fe bde9 	b.w	b4096 <_Znaj>

000b54c4 <__aeabi_drsub>:
   b54c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b54c8:	e002      	b.n	b54d0 <__adddf3>
   b54ca:	bf00      	nop

000b54cc <__aeabi_dsub>:
   b54cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b54d0 <__adddf3>:
   b54d0:	b530      	push	{r4, r5, lr}
   b54d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b54d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b54da:	ea94 0f05 	teq	r4, r5
   b54de:	bf08      	it	eq
   b54e0:	ea90 0f02 	teqeq	r0, r2
   b54e4:	bf1f      	itttt	ne
   b54e6:	ea54 0c00 	orrsne.w	ip, r4, r0
   b54ea:	ea55 0c02 	orrsne.w	ip, r5, r2
   b54ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b54f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b54f6:	f000 80e2 	beq.w	b56be <__adddf3+0x1ee>
   b54fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b54fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b5502:	bfb8      	it	lt
   b5504:	426d      	neglt	r5, r5
   b5506:	dd0c      	ble.n	b5522 <__adddf3+0x52>
   b5508:	442c      	add	r4, r5
   b550a:	ea80 0202 	eor.w	r2, r0, r2
   b550e:	ea81 0303 	eor.w	r3, r1, r3
   b5512:	ea82 0000 	eor.w	r0, r2, r0
   b5516:	ea83 0101 	eor.w	r1, r3, r1
   b551a:	ea80 0202 	eor.w	r2, r0, r2
   b551e:	ea81 0303 	eor.w	r3, r1, r3
   b5522:	2d36      	cmp	r5, #54	; 0x36
   b5524:	bf88      	it	hi
   b5526:	bd30      	pophi	{r4, r5, pc}
   b5528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b552c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b5530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b5534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b5538:	d002      	beq.n	b5540 <__adddf3+0x70>
   b553a:	4240      	negs	r0, r0
   b553c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b5540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b5544:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b5548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b554c:	d002      	beq.n	b5554 <__adddf3+0x84>
   b554e:	4252      	negs	r2, r2
   b5550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b5554:	ea94 0f05 	teq	r4, r5
   b5558:	f000 80a7 	beq.w	b56aa <__adddf3+0x1da>
   b555c:	f1a4 0401 	sub.w	r4, r4, #1
   b5560:	f1d5 0e20 	rsbs	lr, r5, #32
   b5564:	db0d      	blt.n	b5582 <__adddf3+0xb2>
   b5566:	fa02 fc0e 	lsl.w	ip, r2, lr
   b556a:	fa22 f205 	lsr.w	r2, r2, r5
   b556e:	1880      	adds	r0, r0, r2
   b5570:	f141 0100 	adc.w	r1, r1, #0
   b5574:	fa03 f20e 	lsl.w	r2, r3, lr
   b5578:	1880      	adds	r0, r0, r2
   b557a:	fa43 f305 	asr.w	r3, r3, r5
   b557e:	4159      	adcs	r1, r3
   b5580:	e00e      	b.n	b55a0 <__adddf3+0xd0>
   b5582:	f1a5 0520 	sub.w	r5, r5, #32
   b5586:	f10e 0e20 	add.w	lr, lr, #32
   b558a:	2a01      	cmp	r2, #1
   b558c:	fa03 fc0e 	lsl.w	ip, r3, lr
   b5590:	bf28      	it	cs
   b5592:	f04c 0c02 	orrcs.w	ip, ip, #2
   b5596:	fa43 f305 	asr.w	r3, r3, r5
   b559a:	18c0      	adds	r0, r0, r3
   b559c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b55a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b55a4:	d507      	bpl.n	b55b6 <__adddf3+0xe6>
   b55a6:	f04f 0e00 	mov.w	lr, #0
   b55aa:	f1dc 0c00 	rsbs	ip, ip, #0
   b55ae:	eb7e 0000 	sbcs.w	r0, lr, r0
   b55b2:	eb6e 0101 	sbc.w	r1, lr, r1
   b55b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b55ba:	d31b      	bcc.n	b55f4 <__adddf3+0x124>
   b55bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b55c0:	d30c      	bcc.n	b55dc <__adddf3+0x10c>
   b55c2:	0849      	lsrs	r1, r1, #1
   b55c4:	ea5f 0030 	movs.w	r0, r0, rrx
   b55c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b55cc:	f104 0401 	add.w	r4, r4, #1
   b55d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b55d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b55d8:	f080 809a 	bcs.w	b5710 <__adddf3+0x240>
   b55dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b55e0:	bf08      	it	eq
   b55e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b55e6:	f150 0000 	adcs.w	r0, r0, #0
   b55ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b55ee:	ea41 0105 	orr.w	r1, r1, r5
   b55f2:	bd30      	pop	{r4, r5, pc}
   b55f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b55f8:	4140      	adcs	r0, r0
   b55fa:	eb41 0101 	adc.w	r1, r1, r1
   b55fe:	3c01      	subs	r4, #1
   b5600:	bf28      	it	cs
   b5602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b5606:	d2e9      	bcs.n	b55dc <__adddf3+0x10c>
   b5608:	f091 0f00 	teq	r1, #0
   b560c:	bf04      	itt	eq
   b560e:	4601      	moveq	r1, r0
   b5610:	2000      	moveq	r0, #0
   b5612:	fab1 f381 	clz	r3, r1
   b5616:	bf08      	it	eq
   b5618:	3320      	addeq	r3, #32
   b561a:	f1a3 030b 	sub.w	r3, r3, #11
   b561e:	f1b3 0220 	subs.w	r2, r3, #32
   b5622:	da0c      	bge.n	b563e <__adddf3+0x16e>
   b5624:	320c      	adds	r2, #12
   b5626:	dd08      	ble.n	b563a <__adddf3+0x16a>
   b5628:	f102 0c14 	add.w	ip, r2, #20
   b562c:	f1c2 020c 	rsb	r2, r2, #12
   b5630:	fa01 f00c 	lsl.w	r0, r1, ip
   b5634:	fa21 f102 	lsr.w	r1, r1, r2
   b5638:	e00c      	b.n	b5654 <__adddf3+0x184>
   b563a:	f102 0214 	add.w	r2, r2, #20
   b563e:	bfd8      	it	le
   b5640:	f1c2 0c20 	rsble	ip, r2, #32
   b5644:	fa01 f102 	lsl.w	r1, r1, r2
   b5648:	fa20 fc0c 	lsr.w	ip, r0, ip
   b564c:	bfdc      	itt	le
   b564e:	ea41 010c 	orrle.w	r1, r1, ip
   b5652:	4090      	lslle	r0, r2
   b5654:	1ae4      	subs	r4, r4, r3
   b5656:	bfa2      	ittt	ge
   b5658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b565c:	4329      	orrge	r1, r5
   b565e:	bd30      	popge	{r4, r5, pc}
   b5660:	ea6f 0404 	mvn.w	r4, r4
   b5664:	3c1f      	subs	r4, #31
   b5666:	da1c      	bge.n	b56a2 <__adddf3+0x1d2>
   b5668:	340c      	adds	r4, #12
   b566a:	dc0e      	bgt.n	b568a <__adddf3+0x1ba>
   b566c:	f104 0414 	add.w	r4, r4, #20
   b5670:	f1c4 0220 	rsb	r2, r4, #32
   b5674:	fa20 f004 	lsr.w	r0, r0, r4
   b5678:	fa01 f302 	lsl.w	r3, r1, r2
   b567c:	ea40 0003 	orr.w	r0, r0, r3
   b5680:	fa21 f304 	lsr.w	r3, r1, r4
   b5684:	ea45 0103 	orr.w	r1, r5, r3
   b5688:	bd30      	pop	{r4, r5, pc}
   b568a:	f1c4 040c 	rsb	r4, r4, #12
   b568e:	f1c4 0220 	rsb	r2, r4, #32
   b5692:	fa20 f002 	lsr.w	r0, r0, r2
   b5696:	fa01 f304 	lsl.w	r3, r1, r4
   b569a:	ea40 0003 	orr.w	r0, r0, r3
   b569e:	4629      	mov	r1, r5
   b56a0:	bd30      	pop	{r4, r5, pc}
   b56a2:	fa21 f004 	lsr.w	r0, r1, r4
   b56a6:	4629      	mov	r1, r5
   b56a8:	bd30      	pop	{r4, r5, pc}
   b56aa:	f094 0f00 	teq	r4, #0
   b56ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b56b2:	bf06      	itte	eq
   b56b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b56b8:	3401      	addeq	r4, #1
   b56ba:	3d01      	subne	r5, #1
   b56bc:	e74e      	b.n	b555c <__adddf3+0x8c>
   b56be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b56c2:	bf18      	it	ne
   b56c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b56c8:	d029      	beq.n	b571e <__adddf3+0x24e>
   b56ca:	ea94 0f05 	teq	r4, r5
   b56ce:	bf08      	it	eq
   b56d0:	ea90 0f02 	teqeq	r0, r2
   b56d4:	d005      	beq.n	b56e2 <__adddf3+0x212>
   b56d6:	ea54 0c00 	orrs.w	ip, r4, r0
   b56da:	bf04      	itt	eq
   b56dc:	4619      	moveq	r1, r3
   b56de:	4610      	moveq	r0, r2
   b56e0:	bd30      	pop	{r4, r5, pc}
   b56e2:	ea91 0f03 	teq	r1, r3
   b56e6:	bf1e      	ittt	ne
   b56e8:	2100      	movne	r1, #0
   b56ea:	2000      	movne	r0, #0
   b56ec:	bd30      	popne	{r4, r5, pc}
   b56ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b56f2:	d105      	bne.n	b5700 <__adddf3+0x230>
   b56f4:	0040      	lsls	r0, r0, #1
   b56f6:	4149      	adcs	r1, r1
   b56f8:	bf28      	it	cs
   b56fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b56fe:	bd30      	pop	{r4, r5, pc}
   b5700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b5704:	bf3c      	itt	cc
   b5706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b570a:	bd30      	popcc	{r4, r5, pc}
   b570c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b5710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b5714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b5718:	f04f 0000 	mov.w	r0, #0
   b571c:	bd30      	pop	{r4, r5, pc}
   b571e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b5722:	bf1a      	itte	ne
   b5724:	4619      	movne	r1, r3
   b5726:	4610      	movne	r0, r2
   b5728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b572c:	bf1c      	itt	ne
   b572e:	460b      	movne	r3, r1
   b5730:	4602      	movne	r2, r0
   b5732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b5736:	bf06      	itte	eq
   b5738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b573c:	ea91 0f03 	teqeq	r1, r3
   b5740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b5744:	bd30      	pop	{r4, r5, pc}
   b5746:	bf00      	nop

000b5748 <__aeabi_ui2d>:
   b5748:	f090 0f00 	teq	r0, #0
   b574c:	bf04      	itt	eq
   b574e:	2100      	moveq	r1, #0
   b5750:	4770      	bxeq	lr
   b5752:	b530      	push	{r4, r5, lr}
   b5754:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b5758:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b575c:	f04f 0500 	mov.w	r5, #0
   b5760:	f04f 0100 	mov.w	r1, #0
   b5764:	e750      	b.n	b5608 <__adddf3+0x138>
   b5766:	bf00      	nop

000b5768 <__aeabi_i2d>:
   b5768:	f090 0f00 	teq	r0, #0
   b576c:	bf04      	itt	eq
   b576e:	2100      	moveq	r1, #0
   b5770:	4770      	bxeq	lr
   b5772:	b530      	push	{r4, r5, lr}
   b5774:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b5778:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b577c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b5780:	bf48      	it	mi
   b5782:	4240      	negmi	r0, r0
   b5784:	f04f 0100 	mov.w	r1, #0
   b5788:	e73e      	b.n	b5608 <__adddf3+0x138>
   b578a:	bf00      	nop

000b578c <__aeabi_f2d>:
   b578c:	0042      	lsls	r2, r0, #1
   b578e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b5792:	ea4f 0131 	mov.w	r1, r1, rrx
   b5796:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b579a:	bf1f      	itttt	ne
   b579c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b57a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b57a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b57a8:	4770      	bxne	lr
   b57aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b57ae:	bf08      	it	eq
   b57b0:	4770      	bxeq	lr
   b57b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b57b6:	bf04      	itt	eq
   b57b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b57bc:	4770      	bxeq	lr
   b57be:	b530      	push	{r4, r5, lr}
   b57c0:	f44f 7460 	mov.w	r4, #896	; 0x380
   b57c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b57c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b57cc:	e71c      	b.n	b5608 <__adddf3+0x138>
   b57ce:	bf00      	nop

000b57d0 <__aeabi_ul2d>:
   b57d0:	ea50 0201 	orrs.w	r2, r0, r1
   b57d4:	bf08      	it	eq
   b57d6:	4770      	bxeq	lr
   b57d8:	b530      	push	{r4, r5, lr}
   b57da:	f04f 0500 	mov.w	r5, #0
   b57de:	e00a      	b.n	b57f6 <__aeabi_l2d+0x16>

000b57e0 <__aeabi_l2d>:
   b57e0:	ea50 0201 	orrs.w	r2, r0, r1
   b57e4:	bf08      	it	eq
   b57e6:	4770      	bxeq	lr
   b57e8:	b530      	push	{r4, r5, lr}
   b57ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b57ee:	d502      	bpl.n	b57f6 <__aeabi_l2d+0x16>
   b57f0:	4240      	negs	r0, r0
   b57f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b57f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b57fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b57fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b5802:	f43f aed8 	beq.w	b55b6 <__adddf3+0xe6>
   b5806:	f04f 0203 	mov.w	r2, #3
   b580a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b580e:	bf18      	it	ne
   b5810:	3203      	addne	r2, #3
   b5812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b5816:	bf18      	it	ne
   b5818:	3203      	addne	r2, #3
   b581a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b581e:	f1c2 0320 	rsb	r3, r2, #32
   b5822:	fa00 fc03 	lsl.w	ip, r0, r3
   b5826:	fa20 f002 	lsr.w	r0, r0, r2
   b582a:	fa01 fe03 	lsl.w	lr, r1, r3
   b582e:	ea40 000e 	orr.w	r0, r0, lr
   b5832:	fa21 f102 	lsr.w	r1, r1, r2
   b5836:	4414      	add	r4, r2
   b5838:	e6bd      	b.n	b55b6 <__adddf3+0xe6>
   b583a:	bf00      	nop

000b583c <__aeabi_dmul>:
   b583c:	b570      	push	{r4, r5, r6, lr}
   b583e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b5842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b5846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b584a:	bf1d      	ittte	ne
   b584c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b5850:	ea94 0f0c 	teqne	r4, ip
   b5854:	ea95 0f0c 	teqne	r5, ip
   b5858:	f000 f8de 	bleq	b5a18 <__aeabi_dmul+0x1dc>
   b585c:	442c      	add	r4, r5
   b585e:	ea81 0603 	eor.w	r6, r1, r3
   b5862:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b5866:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b586a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b586e:	bf18      	it	ne
   b5870:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b5874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b5878:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b587c:	d038      	beq.n	b58f0 <__aeabi_dmul+0xb4>
   b587e:	fba0 ce02 	umull	ip, lr, r0, r2
   b5882:	f04f 0500 	mov.w	r5, #0
   b5886:	fbe1 e502 	umlal	lr, r5, r1, r2
   b588a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b588e:	fbe0 e503 	umlal	lr, r5, r0, r3
   b5892:	f04f 0600 	mov.w	r6, #0
   b5896:	fbe1 5603 	umlal	r5, r6, r1, r3
   b589a:	f09c 0f00 	teq	ip, #0
   b589e:	bf18      	it	ne
   b58a0:	f04e 0e01 	orrne.w	lr, lr, #1
   b58a4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b58a8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b58ac:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b58b0:	d204      	bcs.n	b58bc <__aeabi_dmul+0x80>
   b58b2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b58b6:	416d      	adcs	r5, r5
   b58b8:	eb46 0606 	adc.w	r6, r6, r6
   b58bc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b58c0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b58c4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b58c8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b58cc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b58d0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b58d4:	bf88      	it	hi
   b58d6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b58da:	d81e      	bhi.n	b591a <__aeabi_dmul+0xde>
   b58dc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b58e0:	bf08      	it	eq
   b58e2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b58e6:	f150 0000 	adcs.w	r0, r0, #0
   b58ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b58ee:	bd70      	pop	{r4, r5, r6, pc}
   b58f0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b58f4:	ea46 0101 	orr.w	r1, r6, r1
   b58f8:	ea40 0002 	orr.w	r0, r0, r2
   b58fc:	ea81 0103 	eor.w	r1, r1, r3
   b5900:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b5904:	bfc2      	ittt	gt
   b5906:	ebd4 050c 	rsbsgt	r5, r4, ip
   b590a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b590e:	bd70      	popgt	{r4, r5, r6, pc}
   b5910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b5914:	f04f 0e00 	mov.w	lr, #0
   b5918:	3c01      	subs	r4, #1
   b591a:	f300 80ab 	bgt.w	b5a74 <__aeabi_dmul+0x238>
   b591e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b5922:	bfde      	ittt	le
   b5924:	2000      	movle	r0, #0
   b5926:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b592a:	bd70      	pople	{r4, r5, r6, pc}
   b592c:	f1c4 0400 	rsb	r4, r4, #0
   b5930:	3c20      	subs	r4, #32
   b5932:	da35      	bge.n	b59a0 <__aeabi_dmul+0x164>
   b5934:	340c      	adds	r4, #12
   b5936:	dc1b      	bgt.n	b5970 <__aeabi_dmul+0x134>
   b5938:	f104 0414 	add.w	r4, r4, #20
   b593c:	f1c4 0520 	rsb	r5, r4, #32
   b5940:	fa00 f305 	lsl.w	r3, r0, r5
   b5944:	fa20 f004 	lsr.w	r0, r0, r4
   b5948:	fa01 f205 	lsl.w	r2, r1, r5
   b594c:	ea40 0002 	orr.w	r0, r0, r2
   b5950:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b5954:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b5958:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b595c:	fa21 f604 	lsr.w	r6, r1, r4
   b5960:	eb42 0106 	adc.w	r1, r2, r6
   b5964:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b5968:	bf08      	it	eq
   b596a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b596e:	bd70      	pop	{r4, r5, r6, pc}
   b5970:	f1c4 040c 	rsb	r4, r4, #12
   b5974:	f1c4 0520 	rsb	r5, r4, #32
   b5978:	fa00 f304 	lsl.w	r3, r0, r4
   b597c:	fa20 f005 	lsr.w	r0, r0, r5
   b5980:	fa01 f204 	lsl.w	r2, r1, r4
   b5984:	ea40 0002 	orr.w	r0, r0, r2
   b5988:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b598c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b5990:	f141 0100 	adc.w	r1, r1, #0
   b5994:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b5998:	bf08      	it	eq
   b599a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b599e:	bd70      	pop	{r4, r5, r6, pc}
   b59a0:	f1c4 0520 	rsb	r5, r4, #32
   b59a4:	fa00 f205 	lsl.w	r2, r0, r5
   b59a8:	ea4e 0e02 	orr.w	lr, lr, r2
   b59ac:	fa20 f304 	lsr.w	r3, r0, r4
   b59b0:	fa01 f205 	lsl.w	r2, r1, r5
   b59b4:	ea43 0302 	orr.w	r3, r3, r2
   b59b8:	fa21 f004 	lsr.w	r0, r1, r4
   b59bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b59c0:	fa21 f204 	lsr.w	r2, r1, r4
   b59c4:	ea20 0002 	bic.w	r0, r0, r2
   b59c8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b59cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b59d0:	bf08      	it	eq
   b59d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b59d6:	bd70      	pop	{r4, r5, r6, pc}
   b59d8:	f094 0f00 	teq	r4, #0
   b59dc:	d10f      	bne.n	b59fe <__aeabi_dmul+0x1c2>
   b59de:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b59e2:	0040      	lsls	r0, r0, #1
   b59e4:	eb41 0101 	adc.w	r1, r1, r1
   b59e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b59ec:	bf08      	it	eq
   b59ee:	3c01      	subeq	r4, #1
   b59f0:	d0f7      	beq.n	b59e2 <__aeabi_dmul+0x1a6>
   b59f2:	ea41 0106 	orr.w	r1, r1, r6
   b59f6:	f095 0f00 	teq	r5, #0
   b59fa:	bf18      	it	ne
   b59fc:	4770      	bxne	lr
   b59fe:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b5a02:	0052      	lsls	r2, r2, #1
   b5a04:	eb43 0303 	adc.w	r3, r3, r3
   b5a08:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b5a0c:	bf08      	it	eq
   b5a0e:	3d01      	subeq	r5, #1
   b5a10:	d0f7      	beq.n	b5a02 <__aeabi_dmul+0x1c6>
   b5a12:	ea43 0306 	orr.w	r3, r3, r6
   b5a16:	4770      	bx	lr
   b5a18:	ea94 0f0c 	teq	r4, ip
   b5a1c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b5a20:	bf18      	it	ne
   b5a22:	ea95 0f0c 	teqne	r5, ip
   b5a26:	d00c      	beq.n	b5a42 <__aeabi_dmul+0x206>
   b5a28:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b5a2c:	bf18      	it	ne
   b5a2e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b5a32:	d1d1      	bne.n	b59d8 <__aeabi_dmul+0x19c>
   b5a34:	ea81 0103 	eor.w	r1, r1, r3
   b5a38:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b5a3c:	f04f 0000 	mov.w	r0, #0
   b5a40:	bd70      	pop	{r4, r5, r6, pc}
   b5a42:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b5a46:	bf06      	itte	eq
   b5a48:	4610      	moveq	r0, r2
   b5a4a:	4619      	moveq	r1, r3
   b5a4c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b5a50:	d019      	beq.n	b5a86 <__aeabi_dmul+0x24a>
   b5a52:	ea94 0f0c 	teq	r4, ip
   b5a56:	d102      	bne.n	b5a5e <__aeabi_dmul+0x222>
   b5a58:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b5a5c:	d113      	bne.n	b5a86 <__aeabi_dmul+0x24a>
   b5a5e:	ea95 0f0c 	teq	r5, ip
   b5a62:	d105      	bne.n	b5a70 <__aeabi_dmul+0x234>
   b5a64:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b5a68:	bf1c      	itt	ne
   b5a6a:	4610      	movne	r0, r2
   b5a6c:	4619      	movne	r1, r3
   b5a6e:	d10a      	bne.n	b5a86 <__aeabi_dmul+0x24a>
   b5a70:	ea81 0103 	eor.w	r1, r1, r3
   b5a74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b5a78:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b5a7c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b5a80:	f04f 0000 	mov.w	r0, #0
   b5a84:	bd70      	pop	{r4, r5, r6, pc}
   b5a86:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b5a8a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b5a8e:	bd70      	pop	{r4, r5, r6, pc}

000b5a90 <__aeabi_ddiv>:
   b5a90:	b570      	push	{r4, r5, r6, lr}
   b5a92:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b5a96:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b5a9a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b5a9e:	bf1d      	ittte	ne
   b5aa0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b5aa4:	ea94 0f0c 	teqne	r4, ip
   b5aa8:	ea95 0f0c 	teqne	r5, ip
   b5aac:	f000 f8a7 	bleq	b5bfe <__aeabi_ddiv+0x16e>
   b5ab0:	eba4 0405 	sub.w	r4, r4, r5
   b5ab4:	ea81 0e03 	eor.w	lr, r1, r3
   b5ab8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b5abc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b5ac0:	f000 8088 	beq.w	b5bd4 <__aeabi_ddiv+0x144>
   b5ac4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b5ac8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b5acc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b5ad0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b5ad4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b5ad8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b5adc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b5ae0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b5ae4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b5ae8:	429d      	cmp	r5, r3
   b5aea:	bf08      	it	eq
   b5aec:	4296      	cmpeq	r6, r2
   b5aee:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b5af2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b5af6:	d202      	bcs.n	b5afe <__aeabi_ddiv+0x6e>
   b5af8:	085b      	lsrs	r3, r3, #1
   b5afa:	ea4f 0232 	mov.w	r2, r2, rrx
   b5afe:	1ab6      	subs	r6, r6, r2
   b5b00:	eb65 0503 	sbc.w	r5, r5, r3
   b5b04:	085b      	lsrs	r3, r3, #1
   b5b06:	ea4f 0232 	mov.w	r2, r2, rrx
   b5b0a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b5b0e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b5b12:	ebb6 0e02 	subs.w	lr, r6, r2
   b5b16:	eb75 0e03 	sbcs.w	lr, r5, r3
   b5b1a:	bf22      	ittt	cs
   b5b1c:	1ab6      	subcs	r6, r6, r2
   b5b1e:	4675      	movcs	r5, lr
   b5b20:	ea40 000c 	orrcs.w	r0, r0, ip
   b5b24:	085b      	lsrs	r3, r3, #1
   b5b26:	ea4f 0232 	mov.w	r2, r2, rrx
   b5b2a:	ebb6 0e02 	subs.w	lr, r6, r2
   b5b2e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b5b32:	bf22      	ittt	cs
   b5b34:	1ab6      	subcs	r6, r6, r2
   b5b36:	4675      	movcs	r5, lr
   b5b38:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b5b3c:	085b      	lsrs	r3, r3, #1
   b5b3e:	ea4f 0232 	mov.w	r2, r2, rrx
   b5b42:	ebb6 0e02 	subs.w	lr, r6, r2
   b5b46:	eb75 0e03 	sbcs.w	lr, r5, r3
   b5b4a:	bf22      	ittt	cs
   b5b4c:	1ab6      	subcs	r6, r6, r2
   b5b4e:	4675      	movcs	r5, lr
   b5b50:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b5b54:	085b      	lsrs	r3, r3, #1
   b5b56:	ea4f 0232 	mov.w	r2, r2, rrx
   b5b5a:	ebb6 0e02 	subs.w	lr, r6, r2
   b5b5e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b5b62:	bf22      	ittt	cs
   b5b64:	1ab6      	subcs	r6, r6, r2
   b5b66:	4675      	movcs	r5, lr
   b5b68:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b5b6c:	ea55 0e06 	orrs.w	lr, r5, r6
   b5b70:	d018      	beq.n	b5ba4 <__aeabi_ddiv+0x114>
   b5b72:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b5b76:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b5b7a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b5b7e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b5b82:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b5b86:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b5b8a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b5b8e:	d1c0      	bne.n	b5b12 <__aeabi_ddiv+0x82>
   b5b90:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b5b94:	d10b      	bne.n	b5bae <__aeabi_ddiv+0x11e>
   b5b96:	ea41 0100 	orr.w	r1, r1, r0
   b5b9a:	f04f 0000 	mov.w	r0, #0
   b5b9e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b5ba2:	e7b6      	b.n	b5b12 <__aeabi_ddiv+0x82>
   b5ba4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b5ba8:	bf04      	itt	eq
   b5baa:	4301      	orreq	r1, r0
   b5bac:	2000      	moveq	r0, #0
   b5bae:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b5bb2:	bf88      	it	hi
   b5bb4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b5bb8:	f63f aeaf 	bhi.w	b591a <__aeabi_dmul+0xde>
   b5bbc:	ebb5 0c03 	subs.w	ip, r5, r3
   b5bc0:	bf04      	itt	eq
   b5bc2:	ebb6 0c02 	subseq.w	ip, r6, r2
   b5bc6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b5bca:	f150 0000 	adcs.w	r0, r0, #0
   b5bce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b5bd2:	bd70      	pop	{r4, r5, r6, pc}
   b5bd4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b5bd8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b5bdc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b5be0:	bfc2      	ittt	gt
   b5be2:	ebd4 050c 	rsbsgt	r5, r4, ip
   b5be6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b5bea:	bd70      	popgt	{r4, r5, r6, pc}
   b5bec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b5bf0:	f04f 0e00 	mov.w	lr, #0
   b5bf4:	3c01      	subs	r4, #1
   b5bf6:	e690      	b.n	b591a <__aeabi_dmul+0xde>
   b5bf8:	ea45 0e06 	orr.w	lr, r5, r6
   b5bfc:	e68d      	b.n	b591a <__aeabi_dmul+0xde>
   b5bfe:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b5c02:	ea94 0f0c 	teq	r4, ip
   b5c06:	bf08      	it	eq
   b5c08:	ea95 0f0c 	teqeq	r5, ip
   b5c0c:	f43f af3b 	beq.w	b5a86 <__aeabi_dmul+0x24a>
   b5c10:	ea94 0f0c 	teq	r4, ip
   b5c14:	d10a      	bne.n	b5c2c <__aeabi_ddiv+0x19c>
   b5c16:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b5c1a:	f47f af34 	bne.w	b5a86 <__aeabi_dmul+0x24a>
   b5c1e:	ea95 0f0c 	teq	r5, ip
   b5c22:	f47f af25 	bne.w	b5a70 <__aeabi_dmul+0x234>
   b5c26:	4610      	mov	r0, r2
   b5c28:	4619      	mov	r1, r3
   b5c2a:	e72c      	b.n	b5a86 <__aeabi_dmul+0x24a>
   b5c2c:	ea95 0f0c 	teq	r5, ip
   b5c30:	d106      	bne.n	b5c40 <__aeabi_ddiv+0x1b0>
   b5c32:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b5c36:	f43f aefd 	beq.w	b5a34 <__aeabi_dmul+0x1f8>
   b5c3a:	4610      	mov	r0, r2
   b5c3c:	4619      	mov	r1, r3
   b5c3e:	e722      	b.n	b5a86 <__aeabi_dmul+0x24a>
   b5c40:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b5c44:	bf18      	it	ne
   b5c46:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b5c4a:	f47f aec5 	bne.w	b59d8 <__aeabi_dmul+0x19c>
   b5c4e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b5c52:	f47f af0d 	bne.w	b5a70 <__aeabi_dmul+0x234>
   b5c56:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b5c5a:	f47f aeeb 	bne.w	b5a34 <__aeabi_dmul+0x1f8>
   b5c5e:	e712      	b.n	b5a86 <__aeabi_dmul+0x24a>

000b5c60 <__gedf2>:
   b5c60:	f04f 3cff 	mov.w	ip, #4294967295
   b5c64:	e006      	b.n	b5c74 <__cmpdf2+0x4>
   b5c66:	bf00      	nop

000b5c68 <__ledf2>:
   b5c68:	f04f 0c01 	mov.w	ip, #1
   b5c6c:	e002      	b.n	b5c74 <__cmpdf2+0x4>
   b5c6e:	bf00      	nop

000b5c70 <__cmpdf2>:
   b5c70:	f04f 0c01 	mov.w	ip, #1
   b5c74:	f84d cd04 	str.w	ip, [sp, #-4]!
   b5c78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b5c7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b5c80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b5c84:	bf18      	it	ne
   b5c86:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b5c8a:	d01b      	beq.n	b5cc4 <__cmpdf2+0x54>
   b5c8c:	b001      	add	sp, #4
   b5c8e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b5c92:	bf0c      	ite	eq
   b5c94:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b5c98:	ea91 0f03 	teqne	r1, r3
   b5c9c:	bf02      	ittt	eq
   b5c9e:	ea90 0f02 	teqeq	r0, r2
   b5ca2:	2000      	moveq	r0, #0
   b5ca4:	4770      	bxeq	lr
   b5ca6:	f110 0f00 	cmn.w	r0, #0
   b5caa:	ea91 0f03 	teq	r1, r3
   b5cae:	bf58      	it	pl
   b5cb0:	4299      	cmppl	r1, r3
   b5cb2:	bf08      	it	eq
   b5cb4:	4290      	cmpeq	r0, r2
   b5cb6:	bf2c      	ite	cs
   b5cb8:	17d8      	asrcs	r0, r3, #31
   b5cba:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b5cbe:	f040 0001 	orr.w	r0, r0, #1
   b5cc2:	4770      	bx	lr
   b5cc4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b5cc8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b5ccc:	d102      	bne.n	b5cd4 <__cmpdf2+0x64>
   b5cce:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b5cd2:	d107      	bne.n	b5ce4 <__cmpdf2+0x74>
   b5cd4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b5cd8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b5cdc:	d1d6      	bne.n	b5c8c <__cmpdf2+0x1c>
   b5cde:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b5ce2:	d0d3      	beq.n	b5c8c <__cmpdf2+0x1c>
   b5ce4:	f85d 0b04 	ldr.w	r0, [sp], #4
   b5ce8:	4770      	bx	lr
   b5cea:	bf00      	nop

000b5cec <__aeabi_cdrcmple>:
   b5cec:	4684      	mov	ip, r0
   b5cee:	4610      	mov	r0, r2
   b5cf0:	4662      	mov	r2, ip
   b5cf2:	468c      	mov	ip, r1
   b5cf4:	4619      	mov	r1, r3
   b5cf6:	4663      	mov	r3, ip
   b5cf8:	e000      	b.n	b5cfc <__aeabi_cdcmpeq>
   b5cfa:	bf00      	nop

000b5cfc <__aeabi_cdcmpeq>:
   b5cfc:	b501      	push	{r0, lr}
   b5cfe:	f7ff ffb7 	bl	b5c70 <__cmpdf2>
   b5d02:	2800      	cmp	r0, #0
   b5d04:	bf48      	it	mi
   b5d06:	f110 0f00 	cmnmi.w	r0, #0
   b5d0a:	bd01      	pop	{r0, pc}

000b5d0c <__aeabi_dcmpeq>:
   b5d0c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b5d10:	f7ff fff4 	bl	b5cfc <__aeabi_cdcmpeq>
   b5d14:	bf0c      	ite	eq
   b5d16:	2001      	moveq	r0, #1
   b5d18:	2000      	movne	r0, #0
   b5d1a:	f85d fb08 	ldr.w	pc, [sp], #8
   b5d1e:	bf00      	nop

000b5d20 <__aeabi_dcmplt>:
   b5d20:	f84d ed08 	str.w	lr, [sp, #-8]!
   b5d24:	f7ff ffea 	bl	b5cfc <__aeabi_cdcmpeq>
   b5d28:	bf34      	ite	cc
   b5d2a:	2001      	movcc	r0, #1
   b5d2c:	2000      	movcs	r0, #0
   b5d2e:	f85d fb08 	ldr.w	pc, [sp], #8
   b5d32:	bf00      	nop

000b5d34 <__aeabi_dcmple>:
   b5d34:	f84d ed08 	str.w	lr, [sp, #-8]!
   b5d38:	f7ff ffe0 	bl	b5cfc <__aeabi_cdcmpeq>
   b5d3c:	bf94      	ite	ls
   b5d3e:	2001      	movls	r0, #1
   b5d40:	2000      	movhi	r0, #0
   b5d42:	f85d fb08 	ldr.w	pc, [sp], #8
   b5d46:	bf00      	nop

000b5d48 <__aeabi_dcmpge>:
   b5d48:	f84d ed08 	str.w	lr, [sp, #-8]!
   b5d4c:	f7ff ffce 	bl	b5cec <__aeabi_cdrcmple>
   b5d50:	bf94      	ite	ls
   b5d52:	2001      	movls	r0, #1
   b5d54:	2000      	movhi	r0, #0
   b5d56:	f85d fb08 	ldr.w	pc, [sp], #8
   b5d5a:	bf00      	nop

000b5d5c <__aeabi_dcmpgt>:
   b5d5c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b5d60:	f7ff ffc4 	bl	b5cec <__aeabi_cdrcmple>
   b5d64:	bf34      	ite	cc
   b5d66:	2001      	movcc	r0, #1
   b5d68:	2000      	movcs	r0, #0
   b5d6a:	f85d fb08 	ldr.w	pc, [sp], #8
   b5d6e:	bf00      	nop

000b5d70 <__aeabi_d2iz>:
   b5d70:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b5d74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b5d78:	d215      	bcs.n	b5da6 <__aeabi_d2iz+0x36>
   b5d7a:	d511      	bpl.n	b5da0 <__aeabi_d2iz+0x30>
   b5d7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b5d80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b5d84:	d912      	bls.n	b5dac <__aeabi_d2iz+0x3c>
   b5d86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b5d8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b5d8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b5d92:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b5d96:	fa23 f002 	lsr.w	r0, r3, r2
   b5d9a:	bf18      	it	ne
   b5d9c:	4240      	negne	r0, r0
   b5d9e:	4770      	bx	lr
   b5da0:	f04f 0000 	mov.w	r0, #0
   b5da4:	4770      	bx	lr
   b5da6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b5daa:	d105      	bne.n	b5db8 <__aeabi_d2iz+0x48>
   b5dac:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b5db0:	bf08      	it	eq
   b5db2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b5db6:	4770      	bx	lr
   b5db8:	f04f 0000 	mov.w	r0, #0
   b5dbc:	4770      	bx	lr
   b5dbe:	bf00      	nop

000b5dc0 <__aeabi_d2uiz>:
   b5dc0:	004a      	lsls	r2, r1, #1
   b5dc2:	d211      	bcs.n	b5de8 <__aeabi_d2uiz+0x28>
   b5dc4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b5dc8:	d211      	bcs.n	b5dee <__aeabi_d2uiz+0x2e>
   b5dca:	d50d      	bpl.n	b5de8 <__aeabi_d2uiz+0x28>
   b5dcc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b5dd0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b5dd4:	d40e      	bmi.n	b5df4 <__aeabi_d2uiz+0x34>
   b5dd6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b5dda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b5dde:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b5de2:	fa23 f002 	lsr.w	r0, r3, r2
   b5de6:	4770      	bx	lr
   b5de8:	f04f 0000 	mov.w	r0, #0
   b5dec:	4770      	bx	lr
   b5dee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b5df2:	d102      	bne.n	b5dfa <__aeabi_d2uiz+0x3a>
   b5df4:	f04f 30ff 	mov.w	r0, #4294967295
   b5df8:	4770      	bx	lr
   b5dfa:	f04f 0000 	mov.w	r0, #0
   b5dfe:	4770      	bx	lr

000b5e00 <__aeabi_d2f>:
   b5e00:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b5e04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b5e08:	bf24      	itt	cs
   b5e0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b5e0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b5e12:	d90d      	bls.n	b5e30 <__aeabi_d2f+0x30>
   b5e14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b5e18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b5e1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b5e20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b5e24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b5e28:	bf08      	it	eq
   b5e2a:	f020 0001 	biceq.w	r0, r0, #1
   b5e2e:	4770      	bx	lr
   b5e30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b5e34:	d121      	bne.n	b5e7a <__aeabi_d2f+0x7a>
   b5e36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b5e3a:	bfbc      	itt	lt
   b5e3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b5e40:	4770      	bxlt	lr
   b5e42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b5e46:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b5e4a:	f1c2 0218 	rsb	r2, r2, #24
   b5e4e:	f1c2 0c20 	rsb	ip, r2, #32
   b5e52:	fa10 f30c 	lsls.w	r3, r0, ip
   b5e56:	fa20 f002 	lsr.w	r0, r0, r2
   b5e5a:	bf18      	it	ne
   b5e5c:	f040 0001 	orrne.w	r0, r0, #1
   b5e60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b5e64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b5e68:	fa03 fc0c 	lsl.w	ip, r3, ip
   b5e6c:	ea40 000c 	orr.w	r0, r0, ip
   b5e70:	fa23 f302 	lsr.w	r3, r3, r2
   b5e74:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b5e78:	e7cc      	b.n	b5e14 <__aeabi_d2f+0x14>
   b5e7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b5e7e:	d107      	bne.n	b5e90 <__aeabi_d2f+0x90>
   b5e80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b5e84:	bf1e      	ittt	ne
   b5e86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b5e8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b5e8e:	4770      	bxne	lr
   b5e90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b5e94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b5e98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b5e9c:	4770      	bx	lr
   b5e9e:	bf00      	nop

000b5ea0 <__aeabi_d2ulz>:
   b5ea0:	b5d0      	push	{r4, r6, r7, lr}
   b5ea2:	4b0c      	ldr	r3, [pc, #48]	; (b5ed4 <__aeabi_d2ulz+0x34>)
   b5ea4:	2200      	movs	r2, #0
   b5ea6:	4606      	mov	r6, r0
   b5ea8:	460f      	mov	r7, r1
   b5eaa:	f7ff fcc7 	bl	b583c <__aeabi_dmul>
   b5eae:	f7ff ff87 	bl	b5dc0 <__aeabi_d2uiz>
   b5eb2:	4604      	mov	r4, r0
   b5eb4:	f7ff fc48 	bl	b5748 <__aeabi_ui2d>
   b5eb8:	4b07      	ldr	r3, [pc, #28]	; (b5ed8 <__aeabi_d2ulz+0x38>)
   b5eba:	2200      	movs	r2, #0
   b5ebc:	f7ff fcbe 	bl	b583c <__aeabi_dmul>
   b5ec0:	4602      	mov	r2, r0
   b5ec2:	460b      	mov	r3, r1
   b5ec4:	4630      	mov	r0, r6
   b5ec6:	4639      	mov	r1, r7
   b5ec8:	f7ff fb00 	bl	b54cc <__aeabi_dsub>
   b5ecc:	f7ff ff78 	bl	b5dc0 <__aeabi_d2uiz>
   b5ed0:	4621      	mov	r1, r4
   b5ed2:	bdd0      	pop	{r4, r6, r7, pc}
   b5ed4:	3df00000 	.word	0x3df00000
   b5ed8:	41f00000 	.word	0x41f00000

000b5edc <atexit>:
   b5edc:	2300      	movs	r3, #0
   b5ede:	4601      	mov	r1, r0
   b5ee0:	461a      	mov	r2, r3
   b5ee2:	4618      	mov	r0, r3
   b5ee4:	f000 be92 	b.w	b6c0c <__register_exitproc>

000b5ee8 <atof>:
   b5ee8:	2100      	movs	r1, #0
   b5eea:	f000 be83 	b.w	b6bf4 <strtod>

000b5eee <memcpy>:
   b5eee:	440a      	add	r2, r1
   b5ef0:	4291      	cmp	r1, r2
   b5ef2:	f100 33ff 	add.w	r3, r0, #4294967295
   b5ef6:	d100      	bne.n	b5efa <memcpy+0xc>
   b5ef8:	4770      	bx	lr
   b5efa:	b510      	push	{r4, lr}
   b5efc:	f811 4b01 	ldrb.w	r4, [r1], #1
   b5f00:	f803 4f01 	strb.w	r4, [r3, #1]!
   b5f04:	4291      	cmp	r1, r2
   b5f06:	d1f9      	bne.n	b5efc <memcpy+0xe>
   b5f08:	bd10      	pop	{r4, pc}

000b5f0a <memset>:
   b5f0a:	4402      	add	r2, r0
   b5f0c:	4603      	mov	r3, r0
   b5f0e:	4293      	cmp	r3, r2
   b5f10:	d100      	bne.n	b5f14 <memset+0xa>
   b5f12:	4770      	bx	lr
   b5f14:	f803 1b01 	strb.w	r1, [r3], #1
   b5f18:	e7f9      	b.n	b5f0e <memset+0x4>
	...

000b5f1c <srand>:
   b5f1c:	b538      	push	{r3, r4, r5, lr}
   b5f1e:	4b10      	ldr	r3, [pc, #64]	; (b5f60 <srand+0x44>)
   b5f20:	681d      	ldr	r5, [r3, #0]
   b5f22:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5f24:	4604      	mov	r4, r0
   b5f26:	b9b3      	cbnz	r3, b5f56 <srand+0x3a>
   b5f28:	2018      	movs	r0, #24
   b5f2a:	f7fe fd8f 	bl	b4a4c <malloc>
   b5f2e:	4602      	mov	r2, r0
   b5f30:	63a8      	str	r0, [r5, #56]	; 0x38
   b5f32:	b920      	cbnz	r0, b5f3e <srand+0x22>
   b5f34:	4b0b      	ldr	r3, [pc, #44]	; (b5f64 <srand+0x48>)
   b5f36:	480c      	ldr	r0, [pc, #48]	; (b5f68 <srand+0x4c>)
   b5f38:	2142      	movs	r1, #66	; 0x42
   b5f3a:	f7fe fd9f 	bl	b4a7c <__assert_func>
   b5f3e:	490b      	ldr	r1, [pc, #44]	; (b5f6c <srand+0x50>)
   b5f40:	4b0b      	ldr	r3, [pc, #44]	; (b5f70 <srand+0x54>)
   b5f42:	e9c0 1300 	strd	r1, r3, [r0]
   b5f46:	4b0b      	ldr	r3, [pc, #44]	; (b5f74 <srand+0x58>)
   b5f48:	6083      	str	r3, [r0, #8]
   b5f4a:	230b      	movs	r3, #11
   b5f4c:	8183      	strh	r3, [r0, #12]
   b5f4e:	2100      	movs	r1, #0
   b5f50:	2001      	movs	r0, #1
   b5f52:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b5f56:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5f58:	2200      	movs	r2, #0
   b5f5a:	611c      	str	r4, [r3, #16]
   b5f5c:	615a      	str	r2, [r3, #20]
   b5f5e:	bd38      	pop	{r3, r4, r5, pc}
   b5f60:	2003e4c8 	.word	0x2003e4c8
   b5f64:	000b7f7d 	.word	0x000b7f7d
   b5f68:	000b7f94 	.word	0x000b7f94
   b5f6c:	abcd330e 	.word	0xabcd330e
   b5f70:	e66d1234 	.word	0xe66d1234
   b5f74:	0005deec 	.word	0x0005deec

000b5f78 <strlen>:
   b5f78:	4603      	mov	r3, r0
   b5f7a:	f813 2b01 	ldrb.w	r2, [r3], #1
   b5f7e:	2a00      	cmp	r2, #0
   b5f80:	d1fb      	bne.n	b5f7a <strlen+0x2>
   b5f82:	1a18      	subs	r0, r3, r0
   b5f84:	3801      	subs	r0, #1
   b5f86:	4770      	bx	lr

000b5f88 <strncmp>:
   b5f88:	b510      	push	{r4, lr}
   b5f8a:	b17a      	cbz	r2, b5fac <strncmp+0x24>
   b5f8c:	4603      	mov	r3, r0
   b5f8e:	3901      	subs	r1, #1
   b5f90:	1884      	adds	r4, r0, r2
   b5f92:	f813 0b01 	ldrb.w	r0, [r3], #1
   b5f96:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b5f9a:	4290      	cmp	r0, r2
   b5f9c:	d101      	bne.n	b5fa2 <strncmp+0x1a>
   b5f9e:	42a3      	cmp	r3, r4
   b5fa0:	d101      	bne.n	b5fa6 <strncmp+0x1e>
   b5fa2:	1a80      	subs	r0, r0, r2
   b5fa4:	bd10      	pop	{r4, pc}
   b5fa6:	2800      	cmp	r0, #0
   b5fa8:	d1f3      	bne.n	b5f92 <strncmp+0xa>
   b5faa:	e7fa      	b.n	b5fa2 <strncmp+0x1a>
   b5fac:	4610      	mov	r0, r2
   b5fae:	e7f9      	b.n	b5fa4 <strncmp+0x1c>

000b5fb0 <sulp>:
   b5fb0:	b570      	push	{r4, r5, r6, lr}
   b5fb2:	4604      	mov	r4, r0
   b5fb4:	460d      	mov	r5, r1
   b5fb6:	ec45 4b10 	vmov	d0, r4, r5
   b5fba:	4616      	mov	r6, r2
   b5fbc:	f001 fd80 	bl	b7ac0 <__ulp>
   b5fc0:	ec51 0b10 	vmov	r0, r1, d0
   b5fc4:	b17e      	cbz	r6, b5fe6 <sulp+0x36>
   b5fc6:	f3c5 530a 	ubfx	r3, r5, #20, #11
   b5fca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b5fce:	2b00      	cmp	r3, #0
   b5fd0:	dd09      	ble.n	b5fe6 <sulp+0x36>
   b5fd2:	051b      	lsls	r3, r3, #20
   b5fd4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   b5fd8:	2400      	movs	r4, #0
   b5fda:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   b5fde:	4622      	mov	r2, r4
   b5fe0:	462b      	mov	r3, r5
   b5fe2:	f7ff fc2b 	bl	b583c <__aeabi_dmul>
   b5fe6:	bd70      	pop	{r4, r5, r6, pc}

000b5fe8 <_strtod_l>:
   b5fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5fec:	ed2d 8b02 	vpush	{d8}
   b5ff0:	b09d      	sub	sp, #116	; 0x74
   b5ff2:	461f      	mov	r7, r3
   b5ff4:	2300      	movs	r3, #0
   b5ff6:	9318      	str	r3, [sp, #96]	; 0x60
   b5ff8:	4ba2      	ldr	r3, [pc, #648]	; (b6284 <_strtod_l+0x29c>)
   b5ffa:	9213      	str	r2, [sp, #76]	; 0x4c
   b5ffc:	681b      	ldr	r3, [r3, #0]
   b5ffe:	9305      	str	r3, [sp, #20]
   b6000:	4604      	mov	r4, r0
   b6002:	4618      	mov	r0, r3
   b6004:	4688      	mov	r8, r1
   b6006:	f7ff ffb7 	bl	b5f78 <strlen>
   b600a:	f04f 0a00 	mov.w	sl, #0
   b600e:	4605      	mov	r5, r0
   b6010:	f04f 0b00 	mov.w	fp, #0
   b6014:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b6018:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b601a:	781a      	ldrb	r2, [r3, #0]
   b601c:	2a2b      	cmp	r2, #43	; 0x2b
   b601e:	d04e      	beq.n	b60be <_strtod_l+0xd6>
   b6020:	d83b      	bhi.n	b609a <_strtod_l+0xb2>
   b6022:	2a0d      	cmp	r2, #13
   b6024:	d834      	bhi.n	b6090 <_strtod_l+0xa8>
   b6026:	2a08      	cmp	r2, #8
   b6028:	d834      	bhi.n	b6094 <_strtod_l+0xac>
   b602a:	2a00      	cmp	r2, #0
   b602c:	d03e      	beq.n	b60ac <_strtod_l+0xc4>
   b602e:	2300      	movs	r3, #0
   b6030:	930a      	str	r3, [sp, #40]	; 0x28
   b6032:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   b6034:	7833      	ldrb	r3, [r6, #0]
   b6036:	2b30      	cmp	r3, #48	; 0x30
   b6038:	f040 80b0 	bne.w	b619c <_strtod_l+0x1b4>
   b603c:	7873      	ldrb	r3, [r6, #1]
   b603e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b6042:	2b58      	cmp	r3, #88	; 0x58
   b6044:	d168      	bne.n	b6118 <_strtod_l+0x130>
   b6046:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b6048:	9301      	str	r3, [sp, #4]
   b604a:	ab18      	add	r3, sp, #96	; 0x60
   b604c:	9702      	str	r7, [sp, #8]
   b604e:	9300      	str	r3, [sp, #0]
   b6050:	4a8d      	ldr	r2, [pc, #564]	; (b6288 <_strtod_l+0x2a0>)
   b6052:	ab19      	add	r3, sp, #100	; 0x64
   b6054:	a917      	add	r1, sp, #92	; 0x5c
   b6056:	4620      	mov	r0, r4
   b6058:	f000 fea2 	bl	b6da0 <__gethex>
   b605c:	f010 0707 	ands.w	r7, r0, #7
   b6060:	4605      	mov	r5, r0
   b6062:	d005      	beq.n	b6070 <_strtod_l+0x88>
   b6064:	2f06      	cmp	r7, #6
   b6066:	d12c      	bne.n	b60c2 <_strtod_l+0xda>
   b6068:	3601      	adds	r6, #1
   b606a:	2300      	movs	r3, #0
   b606c:	9617      	str	r6, [sp, #92]	; 0x5c
   b606e:	930a      	str	r3, [sp, #40]	; 0x28
   b6070:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b6072:	2b00      	cmp	r3, #0
   b6074:	f040 8590 	bne.w	b6b98 <_strtod_l+0xbb0>
   b6078:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b607a:	b1eb      	cbz	r3, b60b8 <_strtod_l+0xd0>
   b607c:	4652      	mov	r2, sl
   b607e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   b6082:	ec43 2b10 	vmov	d0, r2, r3
   b6086:	b01d      	add	sp, #116	; 0x74
   b6088:	ecbd 8b02 	vpop	{d8}
   b608c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6090:	2a20      	cmp	r2, #32
   b6092:	d1cc      	bne.n	b602e <_strtod_l+0x46>
   b6094:	3301      	adds	r3, #1
   b6096:	9317      	str	r3, [sp, #92]	; 0x5c
   b6098:	e7be      	b.n	b6018 <_strtod_l+0x30>
   b609a:	2a2d      	cmp	r2, #45	; 0x2d
   b609c:	d1c7      	bne.n	b602e <_strtod_l+0x46>
   b609e:	2201      	movs	r2, #1
   b60a0:	920a      	str	r2, [sp, #40]	; 0x28
   b60a2:	1c5a      	adds	r2, r3, #1
   b60a4:	9217      	str	r2, [sp, #92]	; 0x5c
   b60a6:	785b      	ldrb	r3, [r3, #1]
   b60a8:	2b00      	cmp	r3, #0
   b60aa:	d1c2      	bne.n	b6032 <_strtod_l+0x4a>
   b60ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b60ae:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b60b2:	2b00      	cmp	r3, #0
   b60b4:	f040 856e 	bne.w	b6b94 <_strtod_l+0xbac>
   b60b8:	4652      	mov	r2, sl
   b60ba:	465b      	mov	r3, fp
   b60bc:	e7e1      	b.n	b6082 <_strtod_l+0x9a>
   b60be:	2200      	movs	r2, #0
   b60c0:	e7ee      	b.n	b60a0 <_strtod_l+0xb8>
   b60c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b60c4:	b13a      	cbz	r2, b60d6 <_strtod_l+0xee>
   b60c6:	2135      	movs	r1, #53	; 0x35
   b60c8:	a81a      	add	r0, sp, #104	; 0x68
   b60ca:	f001 fe04 	bl	b7cd6 <__copybits>
   b60ce:	9918      	ldr	r1, [sp, #96]	; 0x60
   b60d0:	4620      	mov	r0, r4
   b60d2:	f001 f9c3 	bl	b745c <_Bfree>
   b60d6:	3f01      	subs	r7, #1
   b60d8:	2f04      	cmp	r7, #4
   b60da:	d806      	bhi.n	b60ea <_strtod_l+0x102>
   b60dc:	e8df f007 	tbb	[pc, r7]
   b60e0:	1714030a 	.word	0x1714030a
   b60e4:	0a          	.byte	0x0a
   b60e5:	00          	.byte	0x00
   b60e6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   b60ea:	0728      	lsls	r0, r5, #28
   b60ec:	d5c0      	bpl.n	b6070 <_strtod_l+0x88>
   b60ee:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   b60f2:	e7bd      	b.n	b6070 <_strtod_l+0x88>
   b60f4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   b60f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   b60fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   b60fe:	f202 4233 	addw	r2, r2, #1075	; 0x433
   b6102:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   b6106:	e7f0      	b.n	b60ea <_strtod_l+0x102>
   b6108:	f8df b180 	ldr.w	fp, [pc, #384]	; b628c <_strtod_l+0x2a4>
   b610c:	e7ed      	b.n	b60ea <_strtod_l+0x102>
   b610e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   b6112:	f04f 3aff 	mov.w	sl, #4294967295
   b6116:	e7e8      	b.n	b60ea <_strtod_l+0x102>
   b6118:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b611a:	1c5a      	adds	r2, r3, #1
   b611c:	9217      	str	r2, [sp, #92]	; 0x5c
   b611e:	785b      	ldrb	r3, [r3, #1]
   b6120:	2b30      	cmp	r3, #48	; 0x30
   b6122:	d0f9      	beq.n	b6118 <_strtod_l+0x130>
   b6124:	2b00      	cmp	r3, #0
   b6126:	d0a3      	beq.n	b6070 <_strtod_l+0x88>
   b6128:	2301      	movs	r3, #1
   b612a:	f04f 0900 	mov.w	r9, #0
   b612e:	9304      	str	r3, [sp, #16]
   b6130:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b6132:	9308      	str	r3, [sp, #32]
   b6134:	f8cd 901c 	str.w	r9, [sp, #28]
   b6138:	464f      	mov	r7, r9
   b613a:	220a      	movs	r2, #10
   b613c:	9817      	ldr	r0, [sp, #92]	; 0x5c
   b613e:	7806      	ldrb	r6, [r0, #0]
   b6140:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   b6144:	b2d9      	uxtb	r1, r3
   b6146:	2909      	cmp	r1, #9
   b6148:	d92a      	bls.n	b61a0 <_strtod_l+0x1b8>
   b614a:	9905      	ldr	r1, [sp, #20]
   b614c:	462a      	mov	r2, r5
   b614e:	f7ff ff1b 	bl	b5f88 <strncmp>
   b6152:	b398      	cbz	r0, b61bc <_strtod_l+0x1d4>
   b6154:	2000      	movs	r0, #0
   b6156:	4632      	mov	r2, r6
   b6158:	463d      	mov	r5, r7
   b615a:	9005      	str	r0, [sp, #20]
   b615c:	4603      	mov	r3, r0
   b615e:	2a65      	cmp	r2, #101	; 0x65
   b6160:	d001      	beq.n	b6166 <_strtod_l+0x17e>
   b6162:	2a45      	cmp	r2, #69	; 0x45
   b6164:	d118      	bne.n	b6198 <_strtod_l+0x1b0>
   b6166:	b91d      	cbnz	r5, b6170 <_strtod_l+0x188>
   b6168:	9a04      	ldr	r2, [sp, #16]
   b616a:	4302      	orrs	r2, r0
   b616c:	d09e      	beq.n	b60ac <_strtod_l+0xc4>
   b616e:	2500      	movs	r5, #0
   b6170:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   b6174:	f108 0201 	add.w	r2, r8, #1
   b6178:	9217      	str	r2, [sp, #92]	; 0x5c
   b617a:	f898 2001 	ldrb.w	r2, [r8, #1]
   b617e:	2a2b      	cmp	r2, #43	; 0x2b
   b6180:	d075      	beq.n	b626e <_strtod_l+0x286>
   b6182:	2a2d      	cmp	r2, #45	; 0x2d
   b6184:	d07b      	beq.n	b627e <_strtod_l+0x296>
   b6186:	f04f 0c00 	mov.w	ip, #0
   b618a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   b618e:	2909      	cmp	r1, #9
   b6190:	f240 8082 	bls.w	b6298 <_strtod_l+0x2b0>
   b6194:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b6198:	2600      	movs	r6, #0
   b619a:	e09d      	b.n	b62d8 <_strtod_l+0x2f0>
   b619c:	2300      	movs	r3, #0
   b619e:	e7c4      	b.n	b612a <_strtod_l+0x142>
   b61a0:	2f08      	cmp	r7, #8
   b61a2:	bfd8      	it	le
   b61a4:	9907      	ldrle	r1, [sp, #28]
   b61a6:	f100 0001 	add.w	r0, r0, #1
   b61aa:	bfda      	itte	le
   b61ac:	fb02 3301 	mlale	r3, r2, r1, r3
   b61b0:	9307      	strle	r3, [sp, #28]
   b61b2:	fb02 3909 	mlagt	r9, r2, r9, r3
   b61b6:	3701      	adds	r7, #1
   b61b8:	9017      	str	r0, [sp, #92]	; 0x5c
   b61ba:	e7bf      	b.n	b613c <_strtod_l+0x154>
   b61bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b61be:	195a      	adds	r2, r3, r5
   b61c0:	9217      	str	r2, [sp, #92]	; 0x5c
   b61c2:	5d5a      	ldrb	r2, [r3, r5]
   b61c4:	2f00      	cmp	r7, #0
   b61c6:	d037      	beq.n	b6238 <_strtod_l+0x250>
   b61c8:	9005      	str	r0, [sp, #20]
   b61ca:	463d      	mov	r5, r7
   b61cc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   b61d0:	2b09      	cmp	r3, #9
   b61d2:	d912      	bls.n	b61fa <_strtod_l+0x212>
   b61d4:	2301      	movs	r3, #1
   b61d6:	e7c2      	b.n	b615e <_strtod_l+0x176>
   b61d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b61da:	1c5a      	adds	r2, r3, #1
   b61dc:	9217      	str	r2, [sp, #92]	; 0x5c
   b61de:	785a      	ldrb	r2, [r3, #1]
   b61e0:	3001      	adds	r0, #1
   b61e2:	2a30      	cmp	r2, #48	; 0x30
   b61e4:	d0f8      	beq.n	b61d8 <_strtod_l+0x1f0>
   b61e6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   b61ea:	2b08      	cmp	r3, #8
   b61ec:	f200 84d9 	bhi.w	b6ba2 <_strtod_l+0xbba>
   b61f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b61f2:	9005      	str	r0, [sp, #20]
   b61f4:	2000      	movs	r0, #0
   b61f6:	9308      	str	r3, [sp, #32]
   b61f8:	4605      	mov	r5, r0
   b61fa:	3a30      	subs	r2, #48	; 0x30
   b61fc:	f100 0301 	add.w	r3, r0, #1
   b6200:	d014      	beq.n	b622c <_strtod_l+0x244>
   b6202:	9905      	ldr	r1, [sp, #20]
   b6204:	4419      	add	r1, r3
   b6206:	9105      	str	r1, [sp, #20]
   b6208:	462b      	mov	r3, r5
   b620a:	eb00 0e05 	add.w	lr, r0, r5
   b620e:	210a      	movs	r1, #10
   b6210:	4573      	cmp	r3, lr
   b6212:	d113      	bne.n	b623c <_strtod_l+0x254>
   b6214:	182b      	adds	r3, r5, r0
   b6216:	2b08      	cmp	r3, #8
   b6218:	f105 0501 	add.w	r5, r5, #1
   b621c:	4405      	add	r5, r0
   b621e:	dc1c      	bgt.n	b625a <_strtod_l+0x272>
   b6220:	9907      	ldr	r1, [sp, #28]
   b6222:	230a      	movs	r3, #10
   b6224:	fb03 2301 	mla	r3, r3, r1, r2
   b6228:	9307      	str	r3, [sp, #28]
   b622a:	2300      	movs	r3, #0
   b622c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b622e:	1c51      	adds	r1, r2, #1
   b6230:	9117      	str	r1, [sp, #92]	; 0x5c
   b6232:	7852      	ldrb	r2, [r2, #1]
   b6234:	4618      	mov	r0, r3
   b6236:	e7c9      	b.n	b61cc <_strtod_l+0x1e4>
   b6238:	4638      	mov	r0, r7
   b623a:	e7d2      	b.n	b61e2 <_strtod_l+0x1fa>
   b623c:	2b08      	cmp	r3, #8
   b623e:	dc04      	bgt.n	b624a <_strtod_l+0x262>
   b6240:	9e07      	ldr	r6, [sp, #28]
   b6242:	434e      	muls	r6, r1
   b6244:	9607      	str	r6, [sp, #28]
   b6246:	3301      	adds	r3, #1
   b6248:	e7e2      	b.n	b6210 <_strtod_l+0x228>
   b624a:	f103 0c01 	add.w	ip, r3, #1
   b624e:	f1bc 0f10 	cmp.w	ip, #16
   b6252:	bfd8      	it	le
   b6254:	fb01 f909 	mulle.w	r9, r1, r9
   b6258:	e7f5      	b.n	b6246 <_strtod_l+0x25e>
   b625a:	2d10      	cmp	r5, #16
   b625c:	bfdc      	itt	le
   b625e:	230a      	movle	r3, #10
   b6260:	fb03 2909 	mlale	r9, r3, r9, r2
   b6264:	e7e1      	b.n	b622a <_strtod_l+0x242>
   b6266:	2300      	movs	r3, #0
   b6268:	9305      	str	r3, [sp, #20]
   b626a:	2301      	movs	r3, #1
   b626c:	e77c      	b.n	b6168 <_strtod_l+0x180>
   b626e:	f04f 0c00 	mov.w	ip, #0
   b6272:	f108 0202 	add.w	r2, r8, #2
   b6276:	9217      	str	r2, [sp, #92]	; 0x5c
   b6278:	f898 2002 	ldrb.w	r2, [r8, #2]
   b627c:	e785      	b.n	b618a <_strtod_l+0x1a2>
   b627e:	f04f 0c01 	mov.w	ip, #1
   b6282:	e7f6      	b.n	b6272 <_strtod_l+0x28a>
   b6284:	000b820c 	.word	0x000b820c
   b6288:	000b8020 	.word	0x000b8020
   b628c:	7ff00000 	.word	0x7ff00000
   b6290:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b6292:	1c51      	adds	r1, r2, #1
   b6294:	9117      	str	r1, [sp, #92]	; 0x5c
   b6296:	7852      	ldrb	r2, [r2, #1]
   b6298:	2a30      	cmp	r2, #48	; 0x30
   b629a:	d0f9      	beq.n	b6290 <_strtod_l+0x2a8>
   b629c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   b62a0:	2908      	cmp	r1, #8
   b62a2:	f63f af79 	bhi.w	b6198 <_strtod_l+0x1b0>
   b62a6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   b62aa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b62ac:	9206      	str	r2, [sp, #24]
   b62ae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b62b0:	1c51      	adds	r1, r2, #1
   b62b2:	9117      	str	r1, [sp, #92]	; 0x5c
   b62b4:	7852      	ldrb	r2, [r2, #1]
   b62b6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   b62ba:	2e09      	cmp	r6, #9
   b62bc:	d937      	bls.n	b632e <_strtod_l+0x346>
   b62be:	9e06      	ldr	r6, [sp, #24]
   b62c0:	1b89      	subs	r1, r1, r6
   b62c2:	2908      	cmp	r1, #8
   b62c4:	f644 661f 	movw	r6, #19999	; 0x4e1f
   b62c8:	dc02      	bgt.n	b62d0 <_strtod_l+0x2e8>
   b62ca:	4576      	cmp	r6, lr
   b62cc:	bfa8      	it	ge
   b62ce:	4676      	movge	r6, lr
   b62d0:	f1bc 0f00 	cmp.w	ip, #0
   b62d4:	d000      	beq.n	b62d8 <_strtod_l+0x2f0>
   b62d6:	4276      	negs	r6, r6
   b62d8:	2d00      	cmp	r5, #0
   b62da:	d14d      	bne.n	b6378 <_strtod_l+0x390>
   b62dc:	9904      	ldr	r1, [sp, #16]
   b62de:	4301      	orrs	r1, r0
   b62e0:	f47f aec6 	bne.w	b6070 <_strtod_l+0x88>
   b62e4:	2b00      	cmp	r3, #0
   b62e6:	f47f aee1 	bne.w	b60ac <_strtod_l+0xc4>
   b62ea:	2a69      	cmp	r2, #105	; 0x69
   b62ec:	d027      	beq.n	b633e <_strtod_l+0x356>
   b62ee:	dc24      	bgt.n	b633a <_strtod_l+0x352>
   b62f0:	2a49      	cmp	r2, #73	; 0x49
   b62f2:	d024      	beq.n	b633e <_strtod_l+0x356>
   b62f4:	2a4e      	cmp	r2, #78	; 0x4e
   b62f6:	f47f aed9 	bne.w	b60ac <_strtod_l+0xc4>
   b62fa:	499f      	ldr	r1, [pc, #636]	; (b6578 <_strtod_l+0x590>)
   b62fc:	a817      	add	r0, sp, #92	; 0x5c
   b62fe:	f000 ffa7 	bl	b7250 <__match>
   b6302:	2800      	cmp	r0, #0
   b6304:	f43f aed2 	beq.w	b60ac <_strtod_l+0xc4>
   b6308:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b630a:	781b      	ldrb	r3, [r3, #0]
   b630c:	2b28      	cmp	r3, #40	; 0x28
   b630e:	d12d      	bne.n	b636c <_strtod_l+0x384>
   b6310:	499a      	ldr	r1, [pc, #616]	; (b657c <_strtod_l+0x594>)
   b6312:	aa1a      	add	r2, sp, #104	; 0x68
   b6314:	a817      	add	r0, sp, #92	; 0x5c
   b6316:	f000 ffaf 	bl	b7278 <__hexnan>
   b631a:	2805      	cmp	r0, #5
   b631c:	d126      	bne.n	b636c <_strtod_l+0x384>
   b631e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   b6320:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   b6324:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   b6328:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   b632c:	e6a0      	b.n	b6070 <_strtod_l+0x88>
   b632e:	210a      	movs	r1, #10
   b6330:	fb01 2e0e 	mla	lr, r1, lr, r2
   b6334:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   b6338:	e7b9      	b.n	b62ae <_strtod_l+0x2c6>
   b633a:	2a6e      	cmp	r2, #110	; 0x6e
   b633c:	e7db      	b.n	b62f6 <_strtod_l+0x30e>
   b633e:	4990      	ldr	r1, [pc, #576]	; (b6580 <_strtod_l+0x598>)
   b6340:	a817      	add	r0, sp, #92	; 0x5c
   b6342:	f000 ff85 	bl	b7250 <__match>
   b6346:	2800      	cmp	r0, #0
   b6348:	f43f aeb0 	beq.w	b60ac <_strtod_l+0xc4>
   b634c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b634e:	498d      	ldr	r1, [pc, #564]	; (b6584 <_strtod_l+0x59c>)
   b6350:	3b01      	subs	r3, #1
   b6352:	a817      	add	r0, sp, #92	; 0x5c
   b6354:	9317      	str	r3, [sp, #92]	; 0x5c
   b6356:	f000 ff7b 	bl	b7250 <__match>
   b635a:	b910      	cbnz	r0, b6362 <_strtod_l+0x37a>
   b635c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b635e:	3301      	adds	r3, #1
   b6360:	9317      	str	r3, [sp, #92]	; 0x5c
   b6362:	f8df b230 	ldr.w	fp, [pc, #560]	; b6594 <_strtod_l+0x5ac>
   b6366:	f04f 0a00 	mov.w	sl, #0
   b636a:	e681      	b.n	b6070 <_strtod_l+0x88>
   b636c:	4886      	ldr	r0, [pc, #536]	; (b6588 <_strtod_l+0x5a0>)
   b636e:	f001 fd07 	bl	b7d80 <nan>
   b6372:	ec5b ab10 	vmov	sl, fp, d0
   b6376:	e67b      	b.n	b6070 <_strtod_l+0x88>
   b6378:	9b05      	ldr	r3, [sp, #20]
   b637a:	9807      	ldr	r0, [sp, #28]
   b637c:	1af3      	subs	r3, r6, r3
   b637e:	2f00      	cmp	r7, #0
   b6380:	bf08      	it	eq
   b6382:	462f      	moveq	r7, r5
   b6384:	2d10      	cmp	r5, #16
   b6386:	9306      	str	r3, [sp, #24]
   b6388:	46a8      	mov	r8, r5
   b638a:	bfa8      	it	ge
   b638c:	f04f 0810 	movge.w	r8, #16
   b6390:	f7ff f9da 	bl	b5748 <__aeabi_ui2d>
   b6394:	2d09      	cmp	r5, #9
   b6396:	4682      	mov	sl, r0
   b6398:	468b      	mov	fp, r1
   b639a:	dd13      	ble.n	b63c4 <_strtod_l+0x3dc>
   b639c:	4b7b      	ldr	r3, [pc, #492]	; (b658c <_strtod_l+0x5a4>)
   b639e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   b63a2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   b63a6:	f7ff fa49 	bl	b583c <__aeabi_dmul>
   b63aa:	4682      	mov	sl, r0
   b63ac:	4648      	mov	r0, r9
   b63ae:	468b      	mov	fp, r1
   b63b0:	f7ff f9ca 	bl	b5748 <__aeabi_ui2d>
   b63b4:	4602      	mov	r2, r0
   b63b6:	460b      	mov	r3, r1
   b63b8:	4650      	mov	r0, sl
   b63ba:	4659      	mov	r1, fp
   b63bc:	f7ff f888 	bl	b54d0 <__adddf3>
   b63c0:	4682      	mov	sl, r0
   b63c2:	468b      	mov	fp, r1
   b63c4:	2d0f      	cmp	r5, #15
   b63c6:	dc38      	bgt.n	b643a <_strtod_l+0x452>
   b63c8:	9b06      	ldr	r3, [sp, #24]
   b63ca:	2b00      	cmp	r3, #0
   b63cc:	f43f ae50 	beq.w	b6070 <_strtod_l+0x88>
   b63d0:	dd24      	ble.n	b641c <_strtod_l+0x434>
   b63d2:	2b16      	cmp	r3, #22
   b63d4:	dc0b      	bgt.n	b63ee <_strtod_l+0x406>
   b63d6:	496d      	ldr	r1, [pc, #436]	; (b658c <_strtod_l+0x5a4>)
   b63d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b63dc:	e9d1 0100 	ldrd	r0, r1, [r1]
   b63e0:	4652      	mov	r2, sl
   b63e2:	465b      	mov	r3, fp
   b63e4:	f7ff fa2a 	bl	b583c <__aeabi_dmul>
   b63e8:	4682      	mov	sl, r0
   b63ea:	468b      	mov	fp, r1
   b63ec:	e640      	b.n	b6070 <_strtod_l+0x88>
   b63ee:	9a06      	ldr	r2, [sp, #24]
   b63f0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   b63f4:	4293      	cmp	r3, r2
   b63f6:	db20      	blt.n	b643a <_strtod_l+0x452>
   b63f8:	4c64      	ldr	r4, [pc, #400]	; (b658c <_strtod_l+0x5a4>)
   b63fa:	f1c5 050f 	rsb	r5, r5, #15
   b63fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   b6402:	4652      	mov	r2, sl
   b6404:	465b      	mov	r3, fp
   b6406:	e9d1 0100 	ldrd	r0, r1, [r1]
   b640a:	f7ff fa17 	bl	b583c <__aeabi_dmul>
   b640e:	9b06      	ldr	r3, [sp, #24]
   b6410:	1b5d      	subs	r5, r3, r5
   b6412:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   b6416:	e9d4 2300 	ldrd	r2, r3, [r4]
   b641a:	e7e3      	b.n	b63e4 <_strtod_l+0x3fc>
   b641c:	9b06      	ldr	r3, [sp, #24]
   b641e:	3316      	adds	r3, #22
   b6420:	db0b      	blt.n	b643a <_strtod_l+0x452>
   b6422:	9b05      	ldr	r3, [sp, #20]
   b6424:	1b9e      	subs	r6, r3, r6
   b6426:	4b59      	ldr	r3, [pc, #356]	; (b658c <_strtod_l+0x5a4>)
   b6428:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   b642c:	e9d6 2300 	ldrd	r2, r3, [r6]
   b6430:	4650      	mov	r0, sl
   b6432:	4659      	mov	r1, fp
   b6434:	f7ff fb2c 	bl	b5a90 <__aeabi_ddiv>
   b6438:	e7d6      	b.n	b63e8 <_strtod_l+0x400>
   b643a:	9b06      	ldr	r3, [sp, #24]
   b643c:	eba5 0808 	sub.w	r8, r5, r8
   b6440:	4498      	add	r8, r3
   b6442:	f1b8 0f00 	cmp.w	r8, #0
   b6446:	dd74      	ble.n	b6532 <_strtod_l+0x54a>
   b6448:	f018 030f 	ands.w	r3, r8, #15
   b644c:	d00a      	beq.n	b6464 <_strtod_l+0x47c>
   b644e:	494f      	ldr	r1, [pc, #316]	; (b658c <_strtod_l+0x5a4>)
   b6450:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b6454:	4652      	mov	r2, sl
   b6456:	465b      	mov	r3, fp
   b6458:	e9d1 0100 	ldrd	r0, r1, [r1]
   b645c:	f7ff f9ee 	bl	b583c <__aeabi_dmul>
   b6460:	4682      	mov	sl, r0
   b6462:	468b      	mov	fp, r1
   b6464:	f038 080f 	bics.w	r8, r8, #15
   b6468:	d04f      	beq.n	b650a <_strtod_l+0x522>
   b646a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   b646e:	dd22      	ble.n	b64b6 <_strtod_l+0x4ce>
   b6470:	2500      	movs	r5, #0
   b6472:	462e      	mov	r6, r5
   b6474:	9507      	str	r5, [sp, #28]
   b6476:	9505      	str	r5, [sp, #20]
   b6478:	2322      	movs	r3, #34	; 0x22
   b647a:	f8df b118 	ldr.w	fp, [pc, #280]	; b6594 <_strtod_l+0x5ac>
   b647e:	6023      	str	r3, [r4, #0]
   b6480:	f04f 0a00 	mov.w	sl, #0
   b6484:	9b07      	ldr	r3, [sp, #28]
   b6486:	2b00      	cmp	r3, #0
   b6488:	f43f adf2 	beq.w	b6070 <_strtod_l+0x88>
   b648c:	9918      	ldr	r1, [sp, #96]	; 0x60
   b648e:	4620      	mov	r0, r4
   b6490:	f000 ffe4 	bl	b745c <_Bfree>
   b6494:	9905      	ldr	r1, [sp, #20]
   b6496:	4620      	mov	r0, r4
   b6498:	f000 ffe0 	bl	b745c <_Bfree>
   b649c:	4631      	mov	r1, r6
   b649e:	4620      	mov	r0, r4
   b64a0:	f000 ffdc 	bl	b745c <_Bfree>
   b64a4:	9907      	ldr	r1, [sp, #28]
   b64a6:	4620      	mov	r0, r4
   b64a8:	f000 ffd8 	bl	b745c <_Bfree>
   b64ac:	4629      	mov	r1, r5
   b64ae:	4620      	mov	r0, r4
   b64b0:	f000 ffd4 	bl	b745c <_Bfree>
   b64b4:	e5dc      	b.n	b6070 <_strtod_l+0x88>
   b64b6:	4b36      	ldr	r3, [pc, #216]	; (b6590 <_strtod_l+0x5a8>)
   b64b8:	9304      	str	r3, [sp, #16]
   b64ba:	2300      	movs	r3, #0
   b64bc:	ea4f 1828 	mov.w	r8, r8, asr #4
   b64c0:	4650      	mov	r0, sl
   b64c2:	4659      	mov	r1, fp
   b64c4:	4699      	mov	r9, r3
   b64c6:	f1b8 0f01 	cmp.w	r8, #1
   b64ca:	dc21      	bgt.n	b6510 <_strtod_l+0x528>
   b64cc:	b10b      	cbz	r3, b64d2 <_strtod_l+0x4ea>
   b64ce:	4682      	mov	sl, r0
   b64d0:	468b      	mov	fp, r1
   b64d2:	4b2f      	ldr	r3, [pc, #188]	; (b6590 <_strtod_l+0x5a8>)
   b64d4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   b64d8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   b64dc:	4652      	mov	r2, sl
   b64de:	465b      	mov	r3, fp
   b64e0:	e9d9 0100 	ldrd	r0, r1, [r9]
   b64e4:	f7ff f9aa 	bl	b583c <__aeabi_dmul>
   b64e8:	4b2a      	ldr	r3, [pc, #168]	; (b6594 <_strtod_l+0x5ac>)
   b64ea:	460a      	mov	r2, r1
   b64ec:	400b      	ands	r3, r1
   b64ee:	492a      	ldr	r1, [pc, #168]	; (b6598 <_strtod_l+0x5b0>)
   b64f0:	428b      	cmp	r3, r1
   b64f2:	4682      	mov	sl, r0
   b64f4:	d8bc      	bhi.n	b6470 <_strtod_l+0x488>
   b64f6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   b64fa:	428b      	cmp	r3, r1
   b64fc:	bf86      	itte	hi
   b64fe:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; b659c <_strtod_l+0x5b4>
   b6502:	f04f 3aff 	movhi.w	sl, #4294967295
   b6506:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   b650a:	2300      	movs	r3, #0
   b650c:	9304      	str	r3, [sp, #16]
   b650e:	e084      	b.n	b661a <_strtod_l+0x632>
   b6510:	f018 0f01 	tst.w	r8, #1
   b6514:	d005      	beq.n	b6522 <_strtod_l+0x53a>
   b6516:	9b04      	ldr	r3, [sp, #16]
   b6518:	e9d3 2300 	ldrd	r2, r3, [r3]
   b651c:	f7ff f98e 	bl	b583c <__aeabi_dmul>
   b6520:	2301      	movs	r3, #1
   b6522:	9a04      	ldr	r2, [sp, #16]
   b6524:	3208      	adds	r2, #8
   b6526:	f109 0901 	add.w	r9, r9, #1
   b652a:	ea4f 0868 	mov.w	r8, r8, asr #1
   b652e:	9204      	str	r2, [sp, #16]
   b6530:	e7c9      	b.n	b64c6 <_strtod_l+0x4de>
   b6532:	d0ea      	beq.n	b650a <_strtod_l+0x522>
   b6534:	f1c8 0800 	rsb	r8, r8, #0
   b6538:	f018 020f 	ands.w	r2, r8, #15
   b653c:	d00a      	beq.n	b6554 <_strtod_l+0x56c>
   b653e:	4b13      	ldr	r3, [pc, #76]	; (b658c <_strtod_l+0x5a4>)
   b6540:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b6544:	4650      	mov	r0, sl
   b6546:	4659      	mov	r1, fp
   b6548:	e9d3 2300 	ldrd	r2, r3, [r3]
   b654c:	f7ff faa0 	bl	b5a90 <__aeabi_ddiv>
   b6550:	4682      	mov	sl, r0
   b6552:	468b      	mov	fp, r1
   b6554:	ea5f 1828 	movs.w	r8, r8, asr #4
   b6558:	d0d7      	beq.n	b650a <_strtod_l+0x522>
   b655a:	f1b8 0f1f 	cmp.w	r8, #31
   b655e:	dd1f      	ble.n	b65a0 <_strtod_l+0x5b8>
   b6560:	2500      	movs	r5, #0
   b6562:	462e      	mov	r6, r5
   b6564:	9507      	str	r5, [sp, #28]
   b6566:	9505      	str	r5, [sp, #20]
   b6568:	2322      	movs	r3, #34	; 0x22
   b656a:	f04f 0a00 	mov.w	sl, #0
   b656e:	f04f 0b00 	mov.w	fp, #0
   b6572:	6023      	str	r3, [r4, #0]
   b6574:	e786      	b.n	b6484 <_strtod_l+0x49c>
   b6576:	bf00      	nop
   b6578:	000b801a 	.word	0x000b801a
   b657c:	000b8034 	.word	0x000b8034
   b6580:	000b8011 	.word	0x000b8011
   b6584:	000b8014 	.word	0x000b8014
   b6588:	000b8208 	.word	0x000b8208
   b658c:	000b82c8 	.word	0x000b82c8
   b6590:	000b82a0 	.word	0x000b82a0
   b6594:	7ff00000 	.word	0x7ff00000
   b6598:	7ca00000 	.word	0x7ca00000
   b659c:	7fefffff 	.word	0x7fefffff
   b65a0:	f018 0310 	ands.w	r3, r8, #16
   b65a4:	bf18      	it	ne
   b65a6:	236a      	movne	r3, #106	; 0x6a
   b65a8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; b6958 <_strtod_l+0x970>
   b65ac:	9304      	str	r3, [sp, #16]
   b65ae:	4650      	mov	r0, sl
   b65b0:	4659      	mov	r1, fp
   b65b2:	2300      	movs	r3, #0
   b65b4:	f018 0f01 	tst.w	r8, #1
   b65b8:	d004      	beq.n	b65c4 <_strtod_l+0x5dc>
   b65ba:	e9d9 2300 	ldrd	r2, r3, [r9]
   b65be:	f7ff f93d 	bl	b583c <__aeabi_dmul>
   b65c2:	2301      	movs	r3, #1
   b65c4:	ea5f 0868 	movs.w	r8, r8, asr #1
   b65c8:	f109 0908 	add.w	r9, r9, #8
   b65cc:	d1f2      	bne.n	b65b4 <_strtod_l+0x5cc>
   b65ce:	b10b      	cbz	r3, b65d4 <_strtod_l+0x5ec>
   b65d0:	4682      	mov	sl, r0
   b65d2:	468b      	mov	fp, r1
   b65d4:	9b04      	ldr	r3, [sp, #16]
   b65d6:	b1c3      	cbz	r3, b660a <_strtod_l+0x622>
   b65d8:	f3cb 520a 	ubfx	r2, fp, #20, #11
   b65dc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   b65e0:	2b00      	cmp	r3, #0
   b65e2:	4659      	mov	r1, fp
   b65e4:	dd11      	ble.n	b660a <_strtod_l+0x622>
   b65e6:	2b1f      	cmp	r3, #31
   b65e8:	f340 8124 	ble.w	b6834 <_strtod_l+0x84c>
   b65ec:	2b34      	cmp	r3, #52	; 0x34
   b65ee:	bfde      	ittt	le
   b65f0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   b65f4:	f04f 33ff 	movle.w	r3, #4294967295
   b65f8:	fa03 f202 	lslle.w	r2, r3, r2
   b65fc:	f04f 0a00 	mov.w	sl, #0
   b6600:	bfcc      	ite	gt
   b6602:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   b6606:	ea02 0b01 	andle.w	fp, r2, r1
   b660a:	2200      	movs	r2, #0
   b660c:	2300      	movs	r3, #0
   b660e:	4650      	mov	r0, sl
   b6610:	4659      	mov	r1, fp
   b6612:	f7ff fb7b 	bl	b5d0c <__aeabi_dcmpeq>
   b6616:	2800      	cmp	r0, #0
   b6618:	d1a2      	bne.n	b6560 <_strtod_l+0x578>
   b661a:	9b07      	ldr	r3, [sp, #28]
   b661c:	9300      	str	r3, [sp, #0]
   b661e:	9908      	ldr	r1, [sp, #32]
   b6620:	462b      	mov	r3, r5
   b6622:	463a      	mov	r2, r7
   b6624:	4620      	mov	r0, r4
   b6626:	f000 ff81 	bl	b752c <__s2b>
   b662a:	9007      	str	r0, [sp, #28]
   b662c:	2800      	cmp	r0, #0
   b662e:	f43f af1f 	beq.w	b6470 <_strtod_l+0x488>
   b6632:	9b05      	ldr	r3, [sp, #20]
   b6634:	1b9e      	subs	r6, r3, r6
   b6636:	9b06      	ldr	r3, [sp, #24]
   b6638:	2b00      	cmp	r3, #0
   b663a:	bfb4      	ite	lt
   b663c:	4633      	movlt	r3, r6
   b663e:	2300      	movge	r3, #0
   b6640:	930c      	str	r3, [sp, #48]	; 0x30
   b6642:	9b06      	ldr	r3, [sp, #24]
   b6644:	2500      	movs	r5, #0
   b6646:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b664a:	9312      	str	r3, [sp, #72]	; 0x48
   b664c:	462e      	mov	r6, r5
   b664e:	9b07      	ldr	r3, [sp, #28]
   b6650:	4620      	mov	r0, r4
   b6652:	6859      	ldr	r1, [r3, #4]
   b6654:	f000 fec2 	bl	b73dc <_Balloc>
   b6658:	9005      	str	r0, [sp, #20]
   b665a:	2800      	cmp	r0, #0
   b665c:	f43f af0c 	beq.w	b6478 <_strtod_l+0x490>
   b6660:	9b07      	ldr	r3, [sp, #28]
   b6662:	691a      	ldr	r2, [r3, #16]
   b6664:	3202      	adds	r2, #2
   b6666:	f103 010c 	add.w	r1, r3, #12
   b666a:	0092      	lsls	r2, r2, #2
   b666c:	300c      	adds	r0, #12
   b666e:	f7ff fc3e 	bl	b5eee <memcpy>
   b6672:	ec4b ab10 	vmov	d0, sl, fp
   b6676:	aa1a      	add	r2, sp, #104	; 0x68
   b6678:	a919      	add	r1, sp, #100	; 0x64
   b667a:	4620      	mov	r0, r4
   b667c:	f001 fa9c 	bl	b7bb8 <__d2b>
   b6680:	ec4b ab18 	vmov	d8, sl, fp
   b6684:	9018      	str	r0, [sp, #96]	; 0x60
   b6686:	2800      	cmp	r0, #0
   b6688:	f43f aef6 	beq.w	b6478 <_strtod_l+0x490>
   b668c:	2101      	movs	r1, #1
   b668e:	4620      	mov	r0, r4
   b6690:	f000 ffe6 	bl	b7660 <__i2b>
   b6694:	4606      	mov	r6, r0
   b6696:	2800      	cmp	r0, #0
   b6698:	f43f aeee 	beq.w	b6478 <_strtod_l+0x490>
   b669c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   b669e:	9904      	ldr	r1, [sp, #16]
   b66a0:	2b00      	cmp	r3, #0
   b66a2:	bfab      	itete	ge
   b66a4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   b66a6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   b66a8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   b66aa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   b66ae:	bfac      	ite	ge
   b66b0:	eb03 0902 	addge.w	r9, r3, r2
   b66b4:	1ad7      	sublt	r7, r2, r3
   b66b6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   b66b8:	eba3 0801 	sub.w	r8, r3, r1
   b66bc:	4490      	add	r8, r2
   b66be:	4ba1      	ldr	r3, [pc, #644]	; (b6944 <_strtod_l+0x95c>)
   b66c0:	f108 38ff 	add.w	r8, r8, #4294967295
   b66c4:	4598      	cmp	r8, r3
   b66c6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   b66ca:	f280 80c7 	bge.w	b685c <_strtod_l+0x874>
   b66ce:	eba3 0308 	sub.w	r3, r3, r8
   b66d2:	2b1f      	cmp	r3, #31
   b66d4:	eba2 0203 	sub.w	r2, r2, r3
   b66d8:	f04f 0101 	mov.w	r1, #1
   b66dc:	f300 80b1 	bgt.w	b6842 <_strtod_l+0x85a>
   b66e0:	fa01 f303 	lsl.w	r3, r1, r3
   b66e4:	930d      	str	r3, [sp, #52]	; 0x34
   b66e6:	2300      	movs	r3, #0
   b66e8:	9308      	str	r3, [sp, #32]
   b66ea:	eb09 0802 	add.w	r8, r9, r2
   b66ee:	9b04      	ldr	r3, [sp, #16]
   b66f0:	45c1      	cmp	r9, r8
   b66f2:	4417      	add	r7, r2
   b66f4:	441f      	add	r7, r3
   b66f6:	464b      	mov	r3, r9
   b66f8:	bfa8      	it	ge
   b66fa:	4643      	movge	r3, r8
   b66fc:	42bb      	cmp	r3, r7
   b66fe:	bfa8      	it	ge
   b6700:	463b      	movge	r3, r7
   b6702:	2b00      	cmp	r3, #0
   b6704:	bfc2      	ittt	gt
   b6706:	eba8 0803 	subgt.w	r8, r8, r3
   b670a:	1aff      	subgt	r7, r7, r3
   b670c:	eba9 0903 	subgt.w	r9, r9, r3
   b6710:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b6712:	2b00      	cmp	r3, #0
   b6714:	dd17      	ble.n	b6746 <_strtod_l+0x75e>
   b6716:	4631      	mov	r1, r6
   b6718:	461a      	mov	r2, r3
   b671a:	4620      	mov	r0, r4
   b671c:	f001 f860 	bl	b77e0 <__pow5mult>
   b6720:	4606      	mov	r6, r0
   b6722:	2800      	cmp	r0, #0
   b6724:	f43f aea8 	beq.w	b6478 <_strtod_l+0x490>
   b6728:	4601      	mov	r1, r0
   b672a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b672c:	4620      	mov	r0, r4
   b672e:	f000 ffad 	bl	b768c <__multiply>
   b6732:	900b      	str	r0, [sp, #44]	; 0x2c
   b6734:	2800      	cmp	r0, #0
   b6736:	f43f ae9f 	beq.w	b6478 <_strtod_l+0x490>
   b673a:	9918      	ldr	r1, [sp, #96]	; 0x60
   b673c:	4620      	mov	r0, r4
   b673e:	f000 fe8d 	bl	b745c <_Bfree>
   b6742:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b6744:	9318      	str	r3, [sp, #96]	; 0x60
   b6746:	f1b8 0f00 	cmp.w	r8, #0
   b674a:	f300 808c 	bgt.w	b6866 <_strtod_l+0x87e>
   b674e:	9b06      	ldr	r3, [sp, #24]
   b6750:	2b00      	cmp	r3, #0
   b6752:	dd08      	ble.n	b6766 <_strtod_l+0x77e>
   b6754:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b6756:	9905      	ldr	r1, [sp, #20]
   b6758:	4620      	mov	r0, r4
   b675a:	f001 f841 	bl	b77e0 <__pow5mult>
   b675e:	9005      	str	r0, [sp, #20]
   b6760:	2800      	cmp	r0, #0
   b6762:	f43f ae89 	beq.w	b6478 <_strtod_l+0x490>
   b6766:	2f00      	cmp	r7, #0
   b6768:	dd08      	ble.n	b677c <_strtod_l+0x794>
   b676a:	9905      	ldr	r1, [sp, #20]
   b676c:	463a      	mov	r2, r7
   b676e:	4620      	mov	r0, r4
   b6770:	f001 f890 	bl	b7894 <__lshift>
   b6774:	9005      	str	r0, [sp, #20]
   b6776:	2800      	cmp	r0, #0
   b6778:	f43f ae7e 	beq.w	b6478 <_strtod_l+0x490>
   b677c:	f1b9 0f00 	cmp.w	r9, #0
   b6780:	dd08      	ble.n	b6794 <_strtod_l+0x7ac>
   b6782:	4631      	mov	r1, r6
   b6784:	464a      	mov	r2, r9
   b6786:	4620      	mov	r0, r4
   b6788:	f001 f884 	bl	b7894 <__lshift>
   b678c:	4606      	mov	r6, r0
   b678e:	2800      	cmp	r0, #0
   b6790:	f43f ae72 	beq.w	b6478 <_strtod_l+0x490>
   b6794:	9a05      	ldr	r2, [sp, #20]
   b6796:	9918      	ldr	r1, [sp, #96]	; 0x60
   b6798:	4620      	mov	r0, r4
   b679a:	f001 f907 	bl	b79ac <__mdiff>
   b679e:	4605      	mov	r5, r0
   b67a0:	2800      	cmp	r0, #0
   b67a2:	f43f ae69 	beq.w	b6478 <_strtod_l+0x490>
   b67a6:	68c3      	ldr	r3, [r0, #12]
   b67a8:	930b      	str	r3, [sp, #44]	; 0x2c
   b67aa:	2300      	movs	r3, #0
   b67ac:	60c3      	str	r3, [r0, #12]
   b67ae:	4631      	mov	r1, r6
   b67b0:	f001 f8e0 	bl	b7974 <__mcmp>
   b67b4:	2800      	cmp	r0, #0
   b67b6:	da60      	bge.n	b687a <_strtod_l+0x892>
   b67b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b67ba:	ea53 030a 	orrs.w	r3, r3, sl
   b67be:	f040 8082 	bne.w	b68c6 <_strtod_l+0x8de>
   b67c2:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b67c6:	2b00      	cmp	r3, #0
   b67c8:	d17d      	bne.n	b68c6 <_strtod_l+0x8de>
   b67ca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b67ce:	0d1b      	lsrs	r3, r3, #20
   b67d0:	051b      	lsls	r3, r3, #20
   b67d2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   b67d6:	d976      	bls.n	b68c6 <_strtod_l+0x8de>
   b67d8:	696b      	ldr	r3, [r5, #20]
   b67da:	b913      	cbnz	r3, b67e2 <_strtod_l+0x7fa>
   b67dc:	692b      	ldr	r3, [r5, #16]
   b67de:	2b01      	cmp	r3, #1
   b67e0:	dd71      	ble.n	b68c6 <_strtod_l+0x8de>
   b67e2:	4629      	mov	r1, r5
   b67e4:	2201      	movs	r2, #1
   b67e6:	4620      	mov	r0, r4
   b67e8:	f001 f854 	bl	b7894 <__lshift>
   b67ec:	4631      	mov	r1, r6
   b67ee:	4605      	mov	r5, r0
   b67f0:	f001 f8c0 	bl	b7974 <__mcmp>
   b67f4:	2800      	cmp	r0, #0
   b67f6:	dd66      	ble.n	b68c6 <_strtod_l+0x8de>
   b67f8:	9904      	ldr	r1, [sp, #16]
   b67fa:	4a53      	ldr	r2, [pc, #332]	; (b6948 <_strtod_l+0x960>)
   b67fc:	465b      	mov	r3, fp
   b67fe:	2900      	cmp	r1, #0
   b6800:	f000 8081 	beq.w	b6906 <_strtod_l+0x91e>
   b6804:	ea02 010b 	and.w	r1, r2, fp
   b6808:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   b680c:	dc7b      	bgt.n	b6906 <_strtod_l+0x91e>
   b680e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   b6812:	f77f aea9 	ble.w	b6568 <_strtod_l+0x580>
   b6816:	4b4d      	ldr	r3, [pc, #308]	; (b694c <_strtod_l+0x964>)
   b6818:	4650      	mov	r0, sl
   b681a:	4659      	mov	r1, fp
   b681c:	2200      	movs	r2, #0
   b681e:	f7ff f80d 	bl	b583c <__aeabi_dmul>
   b6822:	460b      	mov	r3, r1
   b6824:	4303      	orrs	r3, r0
   b6826:	bf08      	it	eq
   b6828:	2322      	moveq	r3, #34	; 0x22
   b682a:	4682      	mov	sl, r0
   b682c:	468b      	mov	fp, r1
   b682e:	bf08      	it	eq
   b6830:	6023      	streq	r3, [r4, #0]
   b6832:	e62b      	b.n	b648c <_strtod_l+0x4a4>
   b6834:	f04f 32ff 	mov.w	r2, #4294967295
   b6838:	fa02 f303 	lsl.w	r3, r2, r3
   b683c:	ea03 0a0a 	and.w	sl, r3, sl
   b6840:	e6e3      	b.n	b660a <_strtod_l+0x622>
   b6842:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   b6846:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   b684a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   b684e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   b6852:	fa01 f308 	lsl.w	r3, r1, r8
   b6856:	9308      	str	r3, [sp, #32]
   b6858:	910d      	str	r1, [sp, #52]	; 0x34
   b685a:	e746      	b.n	b66ea <_strtod_l+0x702>
   b685c:	2300      	movs	r3, #0
   b685e:	9308      	str	r3, [sp, #32]
   b6860:	2301      	movs	r3, #1
   b6862:	930d      	str	r3, [sp, #52]	; 0x34
   b6864:	e741      	b.n	b66ea <_strtod_l+0x702>
   b6866:	9918      	ldr	r1, [sp, #96]	; 0x60
   b6868:	4642      	mov	r2, r8
   b686a:	4620      	mov	r0, r4
   b686c:	f001 f812 	bl	b7894 <__lshift>
   b6870:	9018      	str	r0, [sp, #96]	; 0x60
   b6872:	2800      	cmp	r0, #0
   b6874:	f47f af6b 	bne.w	b674e <_strtod_l+0x766>
   b6878:	e5fe      	b.n	b6478 <_strtod_l+0x490>
   b687a:	465f      	mov	r7, fp
   b687c:	d16e      	bne.n	b695c <_strtod_l+0x974>
   b687e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b6880:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b6884:	b342      	cbz	r2, b68d8 <_strtod_l+0x8f0>
   b6886:	4a32      	ldr	r2, [pc, #200]	; (b6950 <_strtod_l+0x968>)
   b6888:	4293      	cmp	r3, r2
   b688a:	d128      	bne.n	b68de <_strtod_l+0x8f6>
   b688c:	9b04      	ldr	r3, [sp, #16]
   b688e:	4651      	mov	r1, sl
   b6890:	b1eb      	cbz	r3, b68ce <_strtod_l+0x8e6>
   b6892:	4b2d      	ldr	r3, [pc, #180]	; (b6948 <_strtod_l+0x960>)
   b6894:	403b      	ands	r3, r7
   b6896:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b689a:	f04f 32ff 	mov.w	r2, #4294967295
   b689e:	d819      	bhi.n	b68d4 <_strtod_l+0x8ec>
   b68a0:	0d1b      	lsrs	r3, r3, #20
   b68a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b68a6:	fa02 f303 	lsl.w	r3, r2, r3
   b68aa:	4299      	cmp	r1, r3
   b68ac:	d117      	bne.n	b68de <_strtod_l+0x8f6>
   b68ae:	4b29      	ldr	r3, [pc, #164]	; (b6954 <_strtod_l+0x96c>)
   b68b0:	429f      	cmp	r7, r3
   b68b2:	d102      	bne.n	b68ba <_strtod_l+0x8d2>
   b68b4:	3101      	adds	r1, #1
   b68b6:	f43f addf 	beq.w	b6478 <_strtod_l+0x490>
   b68ba:	4b23      	ldr	r3, [pc, #140]	; (b6948 <_strtod_l+0x960>)
   b68bc:	403b      	ands	r3, r7
   b68be:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   b68c2:	f04f 0a00 	mov.w	sl, #0
   b68c6:	9b04      	ldr	r3, [sp, #16]
   b68c8:	2b00      	cmp	r3, #0
   b68ca:	d1a4      	bne.n	b6816 <_strtod_l+0x82e>
   b68cc:	e5de      	b.n	b648c <_strtod_l+0x4a4>
   b68ce:	f04f 33ff 	mov.w	r3, #4294967295
   b68d2:	e7ea      	b.n	b68aa <_strtod_l+0x8c2>
   b68d4:	4613      	mov	r3, r2
   b68d6:	e7e8      	b.n	b68aa <_strtod_l+0x8c2>
   b68d8:	ea53 030a 	orrs.w	r3, r3, sl
   b68dc:	d08c      	beq.n	b67f8 <_strtod_l+0x810>
   b68de:	9b08      	ldr	r3, [sp, #32]
   b68e0:	b1db      	cbz	r3, b691a <_strtod_l+0x932>
   b68e2:	423b      	tst	r3, r7
   b68e4:	d0ef      	beq.n	b68c6 <_strtod_l+0x8de>
   b68e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b68e8:	9a04      	ldr	r2, [sp, #16]
   b68ea:	4650      	mov	r0, sl
   b68ec:	4659      	mov	r1, fp
   b68ee:	b1c3      	cbz	r3, b6922 <_strtod_l+0x93a>
   b68f0:	f7ff fb5e 	bl	b5fb0 <sulp>
   b68f4:	4602      	mov	r2, r0
   b68f6:	460b      	mov	r3, r1
   b68f8:	ec51 0b18 	vmov	r0, r1, d8
   b68fc:	f7fe fde8 	bl	b54d0 <__adddf3>
   b6900:	4682      	mov	sl, r0
   b6902:	468b      	mov	fp, r1
   b6904:	e7df      	b.n	b68c6 <_strtod_l+0x8de>
   b6906:	4013      	ands	r3, r2
   b6908:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   b690c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   b6910:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   b6914:	f04f 3aff 	mov.w	sl, #4294967295
   b6918:	e7d5      	b.n	b68c6 <_strtod_l+0x8de>
   b691a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b691c:	ea13 0f0a 	tst.w	r3, sl
   b6920:	e7e0      	b.n	b68e4 <_strtod_l+0x8fc>
   b6922:	f7ff fb45 	bl	b5fb0 <sulp>
   b6926:	4602      	mov	r2, r0
   b6928:	460b      	mov	r3, r1
   b692a:	ec51 0b18 	vmov	r0, r1, d8
   b692e:	f7fe fdcd 	bl	b54cc <__aeabi_dsub>
   b6932:	2200      	movs	r2, #0
   b6934:	2300      	movs	r3, #0
   b6936:	4682      	mov	sl, r0
   b6938:	468b      	mov	fp, r1
   b693a:	f7ff f9e7 	bl	b5d0c <__aeabi_dcmpeq>
   b693e:	2800      	cmp	r0, #0
   b6940:	d0c1      	beq.n	b68c6 <_strtod_l+0x8de>
   b6942:	e611      	b.n	b6568 <_strtod_l+0x580>
   b6944:	fffffc02 	.word	0xfffffc02
   b6948:	7ff00000 	.word	0x7ff00000
   b694c:	39500000 	.word	0x39500000
   b6950:	000fffff 	.word	0x000fffff
   b6954:	7fefffff 	.word	0x7fefffff
   b6958:	000b8048 	.word	0x000b8048
   b695c:	4631      	mov	r1, r6
   b695e:	4628      	mov	r0, r5
   b6960:	f001 f986 	bl	b7c70 <__ratio>
   b6964:	ec59 8b10 	vmov	r8, r9, d0
   b6968:	ee10 0a10 	vmov	r0, s0
   b696c:	2200      	movs	r2, #0
   b696e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b6972:	4649      	mov	r1, r9
   b6974:	f7ff f9de 	bl	b5d34 <__aeabi_dcmple>
   b6978:	2800      	cmp	r0, #0
   b697a:	d07a      	beq.n	b6a72 <_strtod_l+0xa8a>
   b697c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b697e:	2b00      	cmp	r3, #0
   b6980:	d04a      	beq.n	b6a18 <_strtod_l+0xa30>
   b6982:	4b95      	ldr	r3, [pc, #596]	; (b6bd8 <_strtod_l+0xbf0>)
   b6984:	2200      	movs	r2, #0
   b6986:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b698a:	f8df 924c 	ldr.w	r9, [pc, #588]	; b6bd8 <_strtod_l+0xbf0>
   b698e:	f04f 0800 	mov.w	r8, #0
   b6992:	4b92      	ldr	r3, [pc, #584]	; (b6bdc <_strtod_l+0xbf4>)
   b6994:	403b      	ands	r3, r7
   b6996:	930d      	str	r3, [sp, #52]	; 0x34
   b6998:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b699a:	4b91      	ldr	r3, [pc, #580]	; (b6be0 <_strtod_l+0xbf8>)
   b699c:	429a      	cmp	r2, r3
   b699e:	f040 80b0 	bne.w	b6b02 <_strtod_l+0xb1a>
   b69a2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b69a6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   b69aa:	ec4b ab10 	vmov	d0, sl, fp
   b69ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b69b2:	f001 f885 	bl	b7ac0 <__ulp>
   b69b6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b69ba:	ec53 2b10 	vmov	r2, r3, d0
   b69be:	f7fe ff3d 	bl	b583c <__aeabi_dmul>
   b69c2:	4652      	mov	r2, sl
   b69c4:	465b      	mov	r3, fp
   b69c6:	f7fe fd83 	bl	b54d0 <__adddf3>
   b69ca:	460b      	mov	r3, r1
   b69cc:	4983      	ldr	r1, [pc, #524]	; (b6bdc <_strtod_l+0xbf4>)
   b69ce:	4a85      	ldr	r2, [pc, #532]	; (b6be4 <_strtod_l+0xbfc>)
   b69d0:	4019      	ands	r1, r3
   b69d2:	4291      	cmp	r1, r2
   b69d4:	4682      	mov	sl, r0
   b69d6:	d960      	bls.n	b6a9a <_strtod_l+0xab2>
   b69d8:	ee18 3a90 	vmov	r3, s17
   b69dc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   b69e0:	4293      	cmp	r3, r2
   b69e2:	d104      	bne.n	b69ee <_strtod_l+0xa06>
   b69e4:	ee18 3a10 	vmov	r3, s16
   b69e8:	3301      	adds	r3, #1
   b69ea:	f43f ad45 	beq.w	b6478 <_strtod_l+0x490>
   b69ee:	f8df b200 	ldr.w	fp, [pc, #512]	; b6bf0 <_strtod_l+0xc08>
   b69f2:	f04f 3aff 	mov.w	sl, #4294967295
   b69f6:	9918      	ldr	r1, [sp, #96]	; 0x60
   b69f8:	4620      	mov	r0, r4
   b69fa:	f000 fd2f 	bl	b745c <_Bfree>
   b69fe:	9905      	ldr	r1, [sp, #20]
   b6a00:	4620      	mov	r0, r4
   b6a02:	f000 fd2b 	bl	b745c <_Bfree>
   b6a06:	4631      	mov	r1, r6
   b6a08:	4620      	mov	r0, r4
   b6a0a:	f000 fd27 	bl	b745c <_Bfree>
   b6a0e:	4629      	mov	r1, r5
   b6a10:	4620      	mov	r0, r4
   b6a12:	f000 fd23 	bl	b745c <_Bfree>
   b6a16:	e61a      	b.n	b664e <_strtod_l+0x666>
   b6a18:	f1ba 0f00 	cmp.w	sl, #0
   b6a1c:	d11b      	bne.n	b6a56 <_strtod_l+0xa6e>
   b6a1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b6a22:	b9f3      	cbnz	r3, b6a62 <_strtod_l+0xa7a>
   b6a24:	4b6c      	ldr	r3, [pc, #432]	; (b6bd8 <_strtod_l+0xbf0>)
   b6a26:	2200      	movs	r2, #0
   b6a28:	4640      	mov	r0, r8
   b6a2a:	4649      	mov	r1, r9
   b6a2c:	f7ff f978 	bl	b5d20 <__aeabi_dcmplt>
   b6a30:	b9d0      	cbnz	r0, b6a68 <_strtod_l+0xa80>
   b6a32:	4640      	mov	r0, r8
   b6a34:	4649      	mov	r1, r9
   b6a36:	4b6c      	ldr	r3, [pc, #432]	; (b6be8 <_strtod_l+0xc00>)
   b6a38:	2200      	movs	r2, #0
   b6a3a:	f7fe feff 	bl	b583c <__aeabi_dmul>
   b6a3e:	4680      	mov	r8, r0
   b6a40:	4689      	mov	r9, r1
   b6a42:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   b6a46:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   b6a4a:	9315      	str	r3, [sp, #84]	; 0x54
   b6a4c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   b6a50:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b6a54:	e79d      	b.n	b6992 <_strtod_l+0x9aa>
   b6a56:	f1ba 0f01 	cmp.w	sl, #1
   b6a5a:	d102      	bne.n	b6a62 <_strtod_l+0xa7a>
   b6a5c:	2f00      	cmp	r7, #0
   b6a5e:	f43f ad83 	beq.w	b6568 <_strtod_l+0x580>
   b6a62:	4b62      	ldr	r3, [pc, #392]	; (b6bec <_strtod_l+0xc04>)
   b6a64:	2200      	movs	r2, #0
   b6a66:	e78e      	b.n	b6986 <_strtod_l+0x99e>
   b6a68:	f8df 917c 	ldr.w	r9, [pc, #380]	; b6be8 <_strtod_l+0xc00>
   b6a6c:	f04f 0800 	mov.w	r8, #0
   b6a70:	e7e7      	b.n	b6a42 <_strtod_l+0xa5a>
   b6a72:	4b5d      	ldr	r3, [pc, #372]	; (b6be8 <_strtod_l+0xc00>)
   b6a74:	4640      	mov	r0, r8
   b6a76:	4649      	mov	r1, r9
   b6a78:	2200      	movs	r2, #0
   b6a7a:	f7fe fedf 	bl	b583c <__aeabi_dmul>
   b6a7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b6a80:	4680      	mov	r8, r0
   b6a82:	4689      	mov	r9, r1
   b6a84:	b933      	cbnz	r3, b6a94 <_strtod_l+0xaac>
   b6a86:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b6a8a:	900e      	str	r0, [sp, #56]	; 0x38
   b6a8c:	930f      	str	r3, [sp, #60]	; 0x3c
   b6a8e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   b6a92:	e7dd      	b.n	b6a50 <_strtod_l+0xa68>
   b6a94:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   b6a98:	e7f9      	b.n	b6a8e <_strtod_l+0xaa6>
   b6a9a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   b6a9e:	9b04      	ldr	r3, [sp, #16]
   b6aa0:	2b00      	cmp	r3, #0
   b6aa2:	d1a8      	bne.n	b69f6 <_strtod_l+0xa0e>
   b6aa4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b6aa8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b6aaa:	0d1b      	lsrs	r3, r3, #20
   b6aac:	051b      	lsls	r3, r3, #20
   b6aae:	429a      	cmp	r2, r3
   b6ab0:	d1a1      	bne.n	b69f6 <_strtod_l+0xa0e>
   b6ab2:	4640      	mov	r0, r8
   b6ab4:	4649      	mov	r1, r9
   b6ab6:	f001 f979 	bl	b7dac <__aeabi_d2lz>
   b6aba:	f7fe fe91 	bl	b57e0 <__aeabi_l2d>
   b6abe:	4602      	mov	r2, r0
   b6ac0:	460b      	mov	r3, r1
   b6ac2:	4640      	mov	r0, r8
   b6ac4:	4649      	mov	r1, r9
   b6ac6:	f7fe fd01 	bl	b54cc <__aeabi_dsub>
   b6aca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b6acc:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b6ad0:	ea43 030a 	orr.w	r3, r3, sl
   b6ad4:	4313      	orrs	r3, r2
   b6ad6:	4680      	mov	r8, r0
   b6ad8:	4689      	mov	r9, r1
   b6ada:	d055      	beq.n	b6b88 <_strtod_l+0xba0>
   b6adc:	a336      	add	r3, pc, #216	; (adr r3, b6bb8 <_strtod_l+0xbd0>)
   b6ade:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6ae2:	f7ff f91d 	bl	b5d20 <__aeabi_dcmplt>
   b6ae6:	2800      	cmp	r0, #0
   b6ae8:	f47f acd0 	bne.w	b648c <_strtod_l+0x4a4>
   b6aec:	a334      	add	r3, pc, #208	; (adr r3, b6bc0 <_strtod_l+0xbd8>)
   b6aee:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6af2:	4640      	mov	r0, r8
   b6af4:	4649      	mov	r1, r9
   b6af6:	f7ff f931 	bl	b5d5c <__aeabi_dcmpgt>
   b6afa:	2800      	cmp	r0, #0
   b6afc:	f43f af7b 	beq.w	b69f6 <_strtod_l+0xa0e>
   b6b00:	e4c4      	b.n	b648c <_strtod_l+0x4a4>
   b6b02:	9b04      	ldr	r3, [sp, #16]
   b6b04:	b333      	cbz	r3, b6b54 <_strtod_l+0xb6c>
   b6b06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b6b08:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b6b0c:	d822      	bhi.n	b6b54 <_strtod_l+0xb6c>
   b6b0e:	a32e      	add	r3, pc, #184	; (adr r3, b6bc8 <_strtod_l+0xbe0>)
   b6b10:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6b14:	4640      	mov	r0, r8
   b6b16:	4649      	mov	r1, r9
   b6b18:	f7ff f90c 	bl	b5d34 <__aeabi_dcmple>
   b6b1c:	b1a0      	cbz	r0, b6b48 <_strtod_l+0xb60>
   b6b1e:	4649      	mov	r1, r9
   b6b20:	4640      	mov	r0, r8
   b6b22:	f7ff f94d 	bl	b5dc0 <__aeabi_d2uiz>
   b6b26:	2801      	cmp	r0, #1
   b6b28:	bf38      	it	cc
   b6b2a:	2001      	movcc	r0, #1
   b6b2c:	f7fe fe0c 	bl	b5748 <__aeabi_ui2d>
   b6b30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b6b32:	4680      	mov	r8, r0
   b6b34:	4689      	mov	r9, r1
   b6b36:	bb23      	cbnz	r3, b6b82 <_strtod_l+0xb9a>
   b6b38:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b6b3c:	9010      	str	r0, [sp, #64]	; 0x40
   b6b3e:	9311      	str	r3, [sp, #68]	; 0x44
   b6b40:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   b6b44:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b6b48:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b6b4a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b6b4c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   b6b50:	1a9b      	subs	r3, r3, r2
   b6b52:	9309      	str	r3, [sp, #36]	; 0x24
   b6b54:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b6b58:	eeb0 0a48 	vmov.f32	s0, s16
   b6b5c:	eef0 0a68 	vmov.f32	s1, s17
   b6b60:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b6b64:	f000 ffac 	bl	b7ac0 <__ulp>
   b6b68:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b6b6c:	ec53 2b10 	vmov	r2, r3, d0
   b6b70:	f7fe fe64 	bl	b583c <__aeabi_dmul>
   b6b74:	ec53 2b18 	vmov	r2, r3, d8
   b6b78:	f7fe fcaa 	bl	b54d0 <__adddf3>
   b6b7c:	4682      	mov	sl, r0
   b6b7e:	468b      	mov	fp, r1
   b6b80:	e78d      	b.n	b6a9e <_strtod_l+0xab6>
   b6b82:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   b6b86:	e7db      	b.n	b6b40 <_strtod_l+0xb58>
   b6b88:	a311      	add	r3, pc, #68	; (adr r3, b6bd0 <_strtod_l+0xbe8>)
   b6b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6b8e:	f7ff f8c7 	bl	b5d20 <__aeabi_dcmplt>
   b6b92:	e7b2      	b.n	b6afa <_strtod_l+0xb12>
   b6b94:	2300      	movs	r3, #0
   b6b96:	930a      	str	r3, [sp, #40]	; 0x28
   b6b98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   b6b9a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b6b9c:	6013      	str	r3, [r2, #0]
   b6b9e:	f7ff ba6b 	b.w	b6078 <_strtod_l+0x90>
   b6ba2:	2a65      	cmp	r2, #101	; 0x65
   b6ba4:	f43f ab5f 	beq.w	b6266 <_strtod_l+0x27e>
   b6ba8:	2a45      	cmp	r2, #69	; 0x45
   b6baa:	f43f ab5c 	beq.w	b6266 <_strtod_l+0x27e>
   b6bae:	2301      	movs	r3, #1
   b6bb0:	f7ff bb94 	b.w	b62dc <_strtod_l+0x2f4>
   b6bb4:	f3af 8000 	nop.w
   b6bb8:	94a03595 	.word	0x94a03595
   b6bbc:	3fdfffff 	.word	0x3fdfffff
   b6bc0:	35afe535 	.word	0x35afe535
   b6bc4:	3fe00000 	.word	0x3fe00000
   b6bc8:	ffc00000 	.word	0xffc00000
   b6bcc:	41dfffff 	.word	0x41dfffff
   b6bd0:	94a03595 	.word	0x94a03595
   b6bd4:	3fcfffff 	.word	0x3fcfffff
   b6bd8:	3ff00000 	.word	0x3ff00000
   b6bdc:	7ff00000 	.word	0x7ff00000
   b6be0:	7fe00000 	.word	0x7fe00000
   b6be4:	7c9fffff 	.word	0x7c9fffff
   b6be8:	3fe00000 	.word	0x3fe00000
   b6bec:	bff00000 	.word	0xbff00000
   b6bf0:	7fefffff 	.word	0x7fefffff

000b6bf4 <strtod>:
   b6bf4:	460a      	mov	r2, r1
   b6bf6:	4601      	mov	r1, r0
   b6bf8:	4802      	ldr	r0, [pc, #8]	; (b6c04 <strtod+0x10>)
   b6bfa:	4b03      	ldr	r3, [pc, #12]	; (b6c08 <strtod+0x14>)
   b6bfc:	6800      	ldr	r0, [r0, #0]
   b6bfe:	f7ff b9f3 	b.w	b5fe8 <_strtod_l>
   b6c02:	bf00      	nop
   b6c04:	2003e4c8 	.word	0x2003e4c8
   b6c08:	2003e534 	.word	0x2003e534

000b6c0c <__register_exitproc>:
   b6c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6c10:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b6ccc <__register_exitproc+0xc0>
   b6c14:	4606      	mov	r6, r0
   b6c16:	f8d8 0000 	ldr.w	r0, [r8]
   b6c1a:	461f      	mov	r7, r3
   b6c1c:	460d      	mov	r5, r1
   b6c1e:	4691      	mov	r9, r2
   b6c20:	f000 fbc6 	bl	b73b0 <__retarget_lock_acquire_recursive>
   b6c24:	4b25      	ldr	r3, [pc, #148]	; (b6cbc <__register_exitproc+0xb0>)
   b6c26:	681c      	ldr	r4, [r3, #0]
   b6c28:	b934      	cbnz	r4, b6c38 <__register_exitproc+0x2c>
   b6c2a:	4c25      	ldr	r4, [pc, #148]	; (b6cc0 <__register_exitproc+0xb4>)
   b6c2c:	601c      	str	r4, [r3, #0]
   b6c2e:	4b25      	ldr	r3, [pc, #148]	; (b6cc4 <__register_exitproc+0xb8>)
   b6c30:	b113      	cbz	r3, b6c38 <__register_exitproc+0x2c>
   b6c32:	681b      	ldr	r3, [r3, #0]
   b6c34:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b6c38:	6863      	ldr	r3, [r4, #4]
   b6c3a:	2b1f      	cmp	r3, #31
   b6c3c:	dd07      	ble.n	b6c4e <__register_exitproc+0x42>
   b6c3e:	f8d8 0000 	ldr.w	r0, [r8]
   b6c42:	f000 fbb7 	bl	b73b4 <__retarget_lock_release_recursive>
   b6c46:	f04f 30ff 	mov.w	r0, #4294967295
   b6c4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6c4e:	b34e      	cbz	r6, b6ca4 <__register_exitproc+0x98>
   b6c50:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b6c54:	b988      	cbnz	r0, b6c7a <__register_exitproc+0x6e>
   b6c56:	4b1c      	ldr	r3, [pc, #112]	; (b6cc8 <__register_exitproc+0xbc>)
   b6c58:	b923      	cbnz	r3, b6c64 <__register_exitproc+0x58>
   b6c5a:	f8d8 0000 	ldr.w	r0, [r8]
   b6c5e:	f000 fba8 	bl	b73b2 <__retarget_lock_release>
   b6c62:	e7f0      	b.n	b6c46 <__register_exitproc+0x3a>
   b6c64:	f44f 7084 	mov.w	r0, #264	; 0x108
   b6c68:	f7fd fef0 	bl	b4a4c <malloc>
   b6c6c:	2800      	cmp	r0, #0
   b6c6e:	d0f4      	beq.n	b6c5a <__register_exitproc+0x4e>
   b6c70:	2300      	movs	r3, #0
   b6c72:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b6c76:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b6c7a:	6863      	ldr	r3, [r4, #4]
   b6c7c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b6c80:	2201      	movs	r2, #1
   b6c82:	409a      	lsls	r2, r3
   b6c84:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b6c88:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b6c8c:	4313      	orrs	r3, r2
   b6c8e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b6c92:	2e02      	cmp	r6, #2
   b6c94:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b6c98:	bf02      	ittt	eq
   b6c9a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b6c9e:	4313      	orreq	r3, r2
   b6ca0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b6ca4:	6863      	ldr	r3, [r4, #4]
   b6ca6:	f8d8 0000 	ldr.w	r0, [r8]
   b6caa:	1c5a      	adds	r2, r3, #1
   b6cac:	3302      	adds	r3, #2
   b6cae:	6062      	str	r2, [r4, #4]
   b6cb0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b6cb4:	f000 fb7e 	bl	b73b4 <__retarget_lock_release_recursive>
   b6cb8:	2000      	movs	r0, #0
   b6cba:	e7c6      	b.n	b6c4a <__register_exitproc+0x3e>
   b6cbc:	2003e7e8 	.word	0x2003e7e8
   b6cc0:	2003e75c 	.word	0x2003e75c
   b6cc4:	00000000 	.word	0x00000000
   b6cc8:	000b4a4d 	.word	0x000b4a4d
   b6ccc:	2003e52c 	.word	0x2003e52c

000b6cd0 <rshift>:
   b6cd0:	6903      	ldr	r3, [r0, #16]
   b6cd2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   b6cd6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6cda:	ea4f 1261 	mov.w	r2, r1, asr #5
   b6cde:	f100 0414 	add.w	r4, r0, #20
   b6ce2:	dd45      	ble.n	b6d70 <rshift+0xa0>
   b6ce4:	f011 011f 	ands.w	r1, r1, #31
   b6ce8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   b6cec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   b6cf0:	d10c      	bne.n	b6d0c <rshift+0x3c>
   b6cf2:	f100 0710 	add.w	r7, r0, #16
   b6cf6:	4629      	mov	r1, r5
   b6cf8:	42b1      	cmp	r1, r6
   b6cfa:	d334      	bcc.n	b6d66 <rshift+0x96>
   b6cfc:	1a9b      	subs	r3, r3, r2
   b6cfe:	009b      	lsls	r3, r3, #2
   b6d00:	1eea      	subs	r2, r5, #3
   b6d02:	4296      	cmp	r6, r2
   b6d04:	bf38      	it	cc
   b6d06:	2300      	movcc	r3, #0
   b6d08:	4423      	add	r3, r4
   b6d0a:	e015      	b.n	b6d38 <rshift+0x68>
   b6d0c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   b6d10:	f1c1 0820 	rsb	r8, r1, #32
   b6d14:	40cf      	lsrs	r7, r1
   b6d16:	f105 0e04 	add.w	lr, r5, #4
   b6d1a:	46a1      	mov	r9, r4
   b6d1c:	4576      	cmp	r6, lr
   b6d1e:	46f4      	mov	ip, lr
   b6d20:	d815      	bhi.n	b6d4e <rshift+0x7e>
   b6d22:	1a9a      	subs	r2, r3, r2
   b6d24:	0092      	lsls	r2, r2, #2
   b6d26:	3a04      	subs	r2, #4
   b6d28:	3501      	adds	r5, #1
   b6d2a:	42ae      	cmp	r6, r5
   b6d2c:	bf38      	it	cc
   b6d2e:	2200      	movcc	r2, #0
   b6d30:	18a3      	adds	r3, r4, r2
   b6d32:	50a7      	str	r7, [r4, r2]
   b6d34:	b107      	cbz	r7, b6d38 <rshift+0x68>
   b6d36:	3304      	adds	r3, #4
   b6d38:	1b1a      	subs	r2, r3, r4
   b6d3a:	42a3      	cmp	r3, r4
   b6d3c:	ea4f 02a2 	mov.w	r2, r2, asr #2
   b6d40:	bf08      	it	eq
   b6d42:	2300      	moveq	r3, #0
   b6d44:	6102      	str	r2, [r0, #16]
   b6d46:	bf08      	it	eq
   b6d48:	6143      	streq	r3, [r0, #20]
   b6d4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b6d4e:	f8dc c000 	ldr.w	ip, [ip]
   b6d52:	fa0c fc08 	lsl.w	ip, ip, r8
   b6d56:	ea4c 0707 	orr.w	r7, ip, r7
   b6d5a:	f849 7b04 	str.w	r7, [r9], #4
   b6d5e:	f85e 7b04 	ldr.w	r7, [lr], #4
   b6d62:	40cf      	lsrs	r7, r1
   b6d64:	e7da      	b.n	b6d1c <rshift+0x4c>
   b6d66:	f851 cb04 	ldr.w	ip, [r1], #4
   b6d6a:	f847 cf04 	str.w	ip, [r7, #4]!
   b6d6e:	e7c3      	b.n	b6cf8 <rshift+0x28>
   b6d70:	4623      	mov	r3, r4
   b6d72:	e7e1      	b.n	b6d38 <rshift+0x68>

000b6d74 <__hexdig_fun>:
   b6d74:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b6d78:	2b09      	cmp	r3, #9
   b6d7a:	d802      	bhi.n	b6d82 <__hexdig_fun+0xe>
   b6d7c:	3820      	subs	r0, #32
   b6d7e:	b2c0      	uxtb	r0, r0
   b6d80:	4770      	bx	lr
   b6d82:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b6d86:	2b05      	cmp	r3, #5
   b6d88:	d801      	bhi.n	b6d8e <__hexdig_fun+0x1a>
   b6d8a:	3847      	subs	r0, #71	; 0x47
   b6d8c:	e7f7      	b.n	b6d7e <__hexdig_fun+0xa>
   b6d8e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b6d92:	2b05      	cmp	r3, #5
   b6d94:	d801      	bhi.n	b6d9a <__hexdig_fun+0x26>
   b6d96:	3827      	subs	r0, #39	; 0x27
   b6d98:	e7f1      	b.n	b6d7e <__hexdig_fun+0xa>
   b6d9a:	2000      	movs	r0, #0
   b6d9c:	4770      	bx	lr
	...

000b6da0 <__gethex>:
   b6da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6da4:	ed2d 8b02 	vpush	{d8}
   b6da8:	b089      	sub	sp, #36	; 0x24
   b6daa:	ee08 0a10 	vmov	s16, r0
   b6dae:	9304      	str	r3, [sp, #16]
   b6db0:	4bb4      	ldr	r3, [pc, #720]	; (b7084 <__gethex+0x2e4>)
   b6db2:	681b      	ldr	r3, [r3, #0]
   b6db4:	9301      	str	r3, [sp, #4]
   b6db6:	4618      	mov	r0, r3
   b6db8:	468b      	mov	fp, r1
   b6dba:	4690      	mov	r8, r2
   b6dbc:	f7ff f8dc 	bl	b5f78 <strlen>
   b6dc0:	9b01      	ldr	r3, [sp, #4]
   b6dc2:	f8db 2000 	ldr.w	r2, [fp]
   b6dc6:	4403      	add	r3, r0
   b6dc8:	4682      	mov	sl, r0
   b6dca:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b6dce:	9305      	str	r3, [sp, #20]
   b6dd0:	1c93      	adds	r3, r2, #2
   b6dd2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   b6dd6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   b6dda:	32fe      	adds	r2, #254	; 0xfe
   b6ddc:	18d1      	adds	r1, r2, r3
   b6dde:	461f      	mov	r7, r3
   b6de0:	f813 0b01 	ldrb.w	r0, [r3], #1
   b6de4:	9100      	str	r1, [sp, #0]
   b6de6:	2830      	cmp	r0, #48	; 0x30
   b6de8:	d0f8      	beq.n	b6ddc <__gethex+0x3c>
   b6dea:	f7ff ffc3 	bl	b6d74 <__hexdig_fun>
   b6dee:	4604      	mov	r4, r0
   b6df0:	2800      	cmp	r0, #0
   b6df2:	d13a      	bne.n	b6e6a <__gethex+0xca>
   b6df4:	9901      	ldr	r1, [sp, #4]
   b6df6:	4652      	mov	r2, sl
   b6df8:	4638      	mov	r0, r7
   b6dfa:	f7ff f8c5 	bl	b5f88 <strncmp>
   b6dfe:	4605      	mov	r5, r0
   b6e00:	2800      	cmp	r0, #0
   b6e02:	d168      	bne.n	b6ed6 <__gethex+0x136>
   b6e04:	f817 000a 	ldrb.w	r0, [r7, sl]
   b6e08:	eb07 060a 	add.w	r6, r7, sl
   b6e0c:	f7ff ffb2 	bl	b6d74 <__hexdig_fun>
   b6e10:	2800      	cmp	r0, #0
   b6e12:	d062      	beq.n	b6eda <__gethex+0x13a>
   b6e14:	4633      	mov	r3, r6
   b6e16:	7818      	ldrb	r0, [r3, #0]
   b6e18:	2830      	cmp	r0, #48	; 0x30
   b6e1a:	461f      	mov	r7, r3
   b6e1c:	f103 0301 	add.w	r3, r3, #1
   b6e20:	d0f9      	beq.n	b6e16 <__gethex+0x76>
   b6e22:	f7ff ffa7 	bl	b6d74 <__hexdig_fun>
   b6e26:	2301      	movs	r3, #1
   b6e28:	fab0 f480 	clz	r4, r0
   b6e2c:	0964      	lsrs	r4, r4, #5
   b6e2e:	4635      	mov	r5, r6
   b6e30:	9300      	str	r3, [sp, #0]
   b6e32:	463a      	mov	r2, r7
   b6e34:	4616      	mov	r6, r2
   b6e36:	3201      	adds	r2, #1
   b6e38:	7830      	ldrb	r0, [r6, #0]
   b6e3a:	f7ff ff9b 	bl	b6d74 <__hexdig_fun>
   b6e3e:	2800      	cmp	r0, #0
   b6e40:	d1f8      	bne.n	b6e34 <__gethex+0x94>
   b6e42:	9901      	ldr	r1, [sp, #4]
   b6e44:	4652      	mov	r2, sl
   b6e46:	4630      	mov	r0, r6
   b6e48:	f7ff f89e 	bl	b5f88 <strncmp>
   b6e4c:	b980      	cbnz	r0, b6e70 <__gethex+0xd0>
   b6e4e:	b94d      	cbnz	r5, b6e64 <__gethex+0xc4>
   b6e50:	eb06 050a 	add.w	r5, r6, sl
   b6e54:	462a      	mov	r2, r5
   b6e56:	4616      	mov	r6, r2
   b6e58:	3201      	adds	r2, #1
   b6e5a:	7830      	ldrb	r0, [r6, #0]
   b6e5c:	f7ff ff8a 	bl	b6d74 <__hexdig_fun>
   b6e60:	2800      	cmp	r0, #0
   b6e62:	d1f8      	bne.n	b6e56 <__gethex+0xb6>
   b6e64:	1bad      	subs	r5, r5, r6
   b6e66:	00ad      	lsls	r5, r5, #2
   b6e68:	e004      	b.n	b6e74 <__gethex+0xd4>
   b6e6a:	2400      	movs	r4, #0
   b6e6c:	4625      	mov	r5, r4
   b6e6e:	e7e0      	b.n	b6e32 <__gethex+0x92>
   b6e70:	2d00      	cmp	r5, #0
   b6e72:	d1f7      	bne.n	b6e64 <__gethex+0xc4>
   b6e74:	7833      	ldrb	r3, [r6, #0]
   b6e76:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b6e7a:	2b50      	cmp	r3, #80	; 0x50
   b6e7c:	d13b      	bne.n	b6ef6 <__gethex+0x156>
   b6e7e:	7873      	ldrb	r3, [r6, #1]
   b6e80:	2b2b      	cmp	r3, #43	; 0x2b
   b6e82:	d02c      	beq.n	b6ede <__gethex+0x13e>
   b6e84:	2b2d      	cmp	r3, #45	; 0x2d
   b6e86:	d02e      	beq.n	b6ee6 <__gethex+0x146>
   b6e88:	1c71      	adds	r1, r6, #1
   b6e8a:	f04f 0900 	mov.w	r9, #0
   b6e8e:	7808      	ldrb	r0, [r1, #0]
   b6e90:	f7ff ff70 	bl	b6d74 <__hexdig_fun>
   b6e94:	1e43      	subs	r3, r0, #1
   b6e96:	b2db      	uxtb	r3, r3
   b6e98:	2b18      	cmp	r3, #24
   b6e9a:	d82c      	bhi.n	b6ef6 <__gethex+0x156>
   b6e9c:	f1a0 0210 	sub.w	r2, r0, #16
   b6ea0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   b6ea4:	f7ff ff66 	bl	b6d74 <__hexdig_fun>
   b6ea8:	1e43      	subs	r3, r0, #1
   b6eaa:	b2db      	uxtb	r3, r3
   b6eac:	2b18      	cmp	r3, #24
   b6eae:	d91d      	bls.n	b6eec <__gethex+0x14c>
   b6eb0:	f1b9 0f00 	cmp.w	r9, #0
   b6eb4:	d000      	beq.n	b6eb8 <__gethex+0x118>
   b6eb6:	4252      	negs	r2, r2
   b6eb8:	4415      	add	r5, r2
   b6eba:	f8cb 1000 	str.w	r1, [fp]
   b6ebe:	b1e4      	cbz	r4, b6efa <__gethex+0x15a>
   b6ec0:	9b00      	ldr	r3, [sp, #0]
   b6ec2:	2b00      	cmp	r3, #0
   b6ec4:	bf14      	ite	ne
   b6ec6:	2700      	movne	r7, #0
   b6ec8:	2706      	moveq	r7, #6
   b6eca:	4638      	mov	r0, r7
   b6ecc:	b009      	add	sp, #36	; 0x24
   b6ece:	ecbd 8b02 	vpop	{d8}
   b6ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6ed6:	463e      	mov	r6, r7
   b6ed8:	4625      	mov	r5, r4
   b6eda:	2401      	movs	r4, #1
   b6edc:	e7ca      	b.n	b6e74 <__gethex+0xd4>
   b6ede:	f04f 0900 	mov.w	r9, #0
   b6ee2:	1cb1      	adds	r1, r6, #2
   b6ee4:	e7d3      	b.n	b6e8e <__gethex+0xee>
   b6ee6:	f04f 0901 	mov.w	r9, #1
   b6eea:	e7fa      	b.n	b6ee2 <__gethex+0x142>
   b6eec:	230a      	movs	r3, #10
   b6eee:	fb03 0202 	mla	r2, r3, r2, r0
   b6ef2:	3a10      	subs	r2, #16
   b6ef4:	e7d4      	b.n	b6ea0 <__gethex+0x100>
   b6ef6:	4631      	mov	r1, r6
   b6ef8:	e7df      	b.n	b6eba <__gethex+0x11a>
   b6efa:	1bf3      	subs	r3, r6, r7
   b6efc:	3b01      	subs	r3, #1
   b6efe:	4621      	mov	r1, r4
   b6f00:	2b07      	cmp	r3, #7
   b6f02:	dc0b      	bgt.n	b6f1c <__gethex+0x17c>
   b6f04:	ee18 0a10 	vmov	r0, s16
   b6f08:	f000 fa68 	bl	b73dc <_Balloc>
   b6f0c:	4604      	mov	r4, r0
   b6f0e:	b940      	cbnz	r0, b6f22 <__gethex+0x182>
   b6f10:	4b5d      	ldr	r3, [pc, #372]	; (b7088 <__gethex+0x2e8>)
   b6f12:	4602      	mov	r2, r0
   b6f14:	21de      	movs	r1, #222	; 0xde
   b6f16:	485d      	ldr	r0, [pc, #372]	; (b708c <__gethex+0x2ec>)
   b6f18:	f7fd fdb0 	bl	b4a7c <__assert_func>
   b6f1c:	3101      	adds	r1, #1
   b6f1e:	105b      	asrs	r3, r3, #1
   b6f20:	e7ee      	b.n	b6f00 <__gethex+0x160>
   b6f22:	f100 0914 	add.w	r9, r0, #20
   b6f26:	f04f 0b00 	mov.w	fp, #0
   b6f2a:	f1ca 0301 	rsb	r3, sl, #1
   b6f2e:	f8cd 9008 	str.w	r9, [sp, #8]
   b6f32:	f8cd b000 	str.w	fp, [sp]
   b6f36:	9306      	str	r3, [sp, #24]
   b6f38:	42b7      	cmp	r7, r6
   b6f3a:	d340      	bcc.n	b6fbe <__gethex+0x21e>
   b6f3c:	9802      	ldr	r0, [sp, #8]
   b6f3e:	9b00      	ldr	r3, [sp, #0]
   b6f40:	f840 3b04 	str.w	r3, [r0], #4
   b6f44:	eba0 0009 	sub.w	r0, r0, r9
   b6f48:	1080      	asrs	r0, r0, #2
   b6f4a:	0146      	lsls	r6, r0, #5
   b6f4c:	6120      	str	r0, [r4, #16]
   b6f4e:	4618      	mov	r0, r3
   b6f50:	f000 fb36 	bl	b75c0 <__hi0bits>
   b6f54:	1a30      	subs	r0, r6, r0
   b6f56:	f8d8 6000 	ldr.w	r6, [r8]
   b6f5a:	42b0      	cmp	r0, r6
   b6f5c:	dd63      	ble.n	b7026 <__gethex+0x286>
   b6f5e:	1b87      	subs	r7, r0, r6
   b6f60:	4639      	mov	r1, r7
   b6f62:	4620      	mov	r0, r4
   b6f64:	f000 feda 	bl	b7d1c <__any_on>
   b6f68:	4682      	mov	sl, r0
   b6f6a:	b1a8      	cbz	r0, b6f98 <__gethex+0x1f8>
   b6f6c:	1e7b      	subs	r3, r7, #1
   b6f6e:	1159      	asrs	r1, r3, #5
   b6f70:	f003 021f 	and.w	r2, r3, #31
   b6f74:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   b6f78:	f04f 0a01 	mov.w	sl, #1
   b6f7c:	fa0a f202 	lsl.w	r2, sl, r2
   b6f80:	420a      	tst	r2, r1
   b6f82:	d009      	beq.n	b6f98 <__gethex+0x1f8>
   b6f84:	4553      	cmp	r3, sl
   b6f86:	dd05      	ble.n	b6f94 <__gethex+0x1f4>
   b6f88:	1eb9      	subs	r1, r7, #2
   b6f8a:	4620      	mov	r0, r4
   b6f8c:	f000 fec6 	bl	b7d1c <__any_on>
   b6f90:	2800      	cmp	r0, #0
   b6f92:	d145      	bne.n	b7020 <__gethex+0x280>
   b6f94:	f04f 0a02 	mov.w	sl, #2
   b6f98:	4639      	mov	r1, r7
   b6f9a:	4620      	mov	r0, r4
   b6f9c:	f7ff fe98 	bl	b6cd0 <rshift>
   b6fa0:	443d      	add	r5, r7
   b6fa2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   b6fa6:	42ab      	cmp	r3, r5
   b6fa8:	da4c      	bge.n	b7044 <__gethex+0x2a4>
   b6faa:	ee18 0a10 	vmov	r0, s16
   b6fae:	4621      	mov	r1, r4
   b6fb0:	f000 fa54 	bl	b745c <_Bfree>
   b6fb4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b6fb6:	2300      	movs	r3, #0
   b6fb8:	6013      	str	r3, [r2, #0]
   b6fba:	27a3      	movs	r7, #163	; 0xa3
   b6fbc:	e785      	b.n	b6eca <__gethex+0x12a>
   b6fbe:	1e73      	subs	r3, r6, #1
   b6fc0:	9a05      	ldr	r2, [sp, #20]
   b6fc2:	9303      	str	r3, [sp, #12]
   b6fc4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   b6fc8:	4293      	cmp	r3, r2
   b6fca:	d019      	beq.n	b7000 <__gethex+0x260>
   b6fcc:	f1bb 0f20 	cmp.w	fp, #32
   b6fd0:	d107      	bne.n	b6fe2 <__gethex+0x242>
   b6fd2:	9b02      	ldr	r3, [sp, #8]
   b6fd4:	9a00      	ldr	r2, [sp, #0]
   b6fd6:	f843 2b04 	str.w	r2, [r3], #4
   b6fda:	9302      	str	r3, [sp, #8]
   b6fdc:	2300      	movs	r3, #0
   b6fde:	9300      	str	r3, [sp, #0]
   b6fe0:	469b      	mov	fp, r3
   b6fe2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   b6fe6:	f7ff fec5 	bl	b6d74 <__hexdig_fun>
   b6fea:	9b00      	ldr	r3, [sp, #0]
   b6fec:	f000 000f 	and.w	r0, r0, #15
   b6ff0:	fa00 f00b 	lsl.w	r0, r0, fp
   b6ff4:	4303      	orrs	r3, r0
   b6ff6:	9300      	str	r3, [sp, #0]
   b6ff8:	f10b 0b04 	add.w	fp, fp, #4
   b6ffc:	9b03      	ldr	r3, [sp, #12]
   b6ffe:	e00d      	b.n	b701c <__gethex+0x27c>
   b7000:	9b03      	ldr	r3, [sp, #12]
   b7002:	9a06      	ldr	r2, [sp, #24]
   b7004:	4413      	add	r3, r2
   b7006:	42bb      	cmp	r3, r7
   b7008:	d3e0      	bcc.n	b6fcc <__gethex+0x22c>
   b700a:	4618      	mov	r0, r3
   b700c:	9901      	ldr	r1, [sp, #4]
   b700e:	9307      	str	r3, [sp, #28]
   b7010:	4652      	mov	r2, sl
   b7012:	f7fe ffb9 	bl	b5f88 <strncmp>
   b7016:	9b07      	ldr	r3, [sp, #28]
   b7018:	2800      	cmp	r0, #0
   b701a:	d1d7      	bne.n	b6fcc <__gethex+0x22c>
   b701c:	461e      	mov	r6, r3
   b701e:	e78b      	b.n	b6f38 <__gethex+0x198>
   b7020:	f04f 0a03 	mov.w	sl, #3
   b7024:	e7b8      	b.n	b6f98 <__gethex+0x1f8>
   b7026:	da0a      	bge.n	b703e <__gethex+0x29e>
   b7028:	1a37      	subs	r7, r6, r0
   b702a:	4621      	mov	r1, r4
   b702c:	ee18 0a10 	vmov	r0, s16
   b7030:	463a      	mov	r2, r7
   b7032:	f000 fc2f 	bl	b7894 <__lshift>
   b7036:	1bed      	subs	r5, r5, r7
   b7038:	4604      	mov	r4, r0
   b703a:	f100 0914 	add.w	r9, r0, #20
   b703e:	f04f 0a00 	mov.w	sl, #0
   b7042:	e7ae      	b.n	b6fa2 <__gethex+0x202>
   b7044:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b7048:	42a8      	cmp	r0, r5
   b704a:	dd72      	ble.n	b7132 <__gethex+0x392>
   b704c:	1b45      	subs	r5, r0, r5
   b704e:	42ae      	cmp	r6, r5
   b7050:	dc36      	bgt.n	b70c0 <__gethex+0x320>
   b7052:	f8d8 300c 	ldr.w	r3, [r8, #12]
   b7056:	2b02      	cmp	r3, #2
   b7058:	d02a      	beq.n	b70b0 <__gethex+0x310>
   b705a:	2b03      	cmp	r3, #3
   b705c:	d02c      	beq.n	b70b8 <__gethex+0x318>
   b705e:	2b01      	cmp	r3, #1
   b7060:	d11c      	bne.n	b709c <__gethex+0x2fc>
   b7062:	42ae      	cmp	r6, r5
   b7064:	d11a      	bne.n	b709c <__gethex+0x2fc>
   b7066:	2e01      	cmp	r6, #1
   b7068:	d112      	bne.n	b7090 <__gethex+0x2f0>
   b706a:	9a04      	ldr	r2, [sp, #16]
   b706c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b7070:	6013      	str	r3, [r2, #0]
   b7072:	2301      	movs	r3, #1
   b7074:	6123      	str	r3, [r4, #16]
   b7076:	f8c9 3000 	str.w	r3, [r9]
   b707a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b707c:	2762      	movs	r7, #98	; 0x62
   b707e:	601c      	str	r4, [r3, #0]
   b7080:	e723      	b.n	b6eca <__gethex+0x12a>
   b7082:	bf00      	nop
   b7084:	000b820c 	.word	0x000b820c
   b7088:	000b8171 	.word	0x000b8171
   b708c:	000b8182 	.word	0x000b8182
   b7090:	1e71      	subs	r1, r6, #1
   b7092:	4620      	mov	r0, r4
   b7094:	f000 fe42 	bl	b7d1c <__any_on>
   b7098:	2800      	cmp	r0, #0
   b709a:	d1e6      	bne.n	b706a <__gethex+0x2ca>
   b709c:	ee18 0a10 	vmov	r0, s16
   b70a0:	4621      	mov	r1, r4
   b70a2:	f000 f9db 	bl	b745c <_Bfree>
   b70a6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b70a8:	2300      	movs	r3, #0
   b70aa:	6013      	str	r3, [r2, #0]
   b70ac:	2750      	movs	r7, #80	; 0x50
   b70ae:	e70c      	b.n	b6eca <__gethex+0x12a>
   b70b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b70b2:	2b00      	cmp	r3, #0
   b70b4:	d1f2      	bne.n	b709c <__gethex+0x2fc>
   b70b6:	e7d8      	b.n	b706a <__gethex+0x2ca>
   b70b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b70ba:	2b00      	cmp	r3, #0
   b70bc:	d1d5      	bne.n	b706a <__gethex+0x2ca>
   b70be:	e7ed      	b.n	b709c <__gethex+0x2fc>
   b70c0:	1e6f      	subs	r7, r5, #1
   b70c2:	f1ba 0f00 	cmp.w	sl, #0
   b70c6:	d131      	bne.n	b712c <__gethex+0x38c>
   b70c8:	b127      	cbz	r7, b70d4 <__gethex+0x334>
   b70ca:	4639      	mov	r1, r7
   b70cc:	4620      	mov	r0, r4
   b70ce:	f000 fe25 	bl	b7d1c <__any_on>
   b70d2:	4682      	mov	sl, r0
   b70d4:	117b      	asrs	r3, r7, #5
   b70d6:	2101      	movs	r1, #1
   b70d8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   b70dc:	f007 071f 	and.w	r7, r7, #31
   b70e0:	fa01 f707 	lsl.w	r7, r1, r7
   b70e4:	421f      	tst	r7, r3
   b70e6:	4629      	mov	r1, r5
   b70e8:	4620      	mov	r0, r4
   b70ea:	bf18      	it	ne
   b70ec:	f04a 0a02 	orrne.w	sl, sl, #2
   b70f0:	1b76      	subs	r6, r6, r5
   b70f2:	f7ff fded 	bl	b6cd0 <rshift>
   b70f6:	f8d8 5004 	ldr.w	r5, [r8, #4]
   b70fa:	2702      	movs	r7, #2
   b70fc:	f1ba 0f00 	cmp.w	sl, #0
   b7100:	d048      	beq.n	b7194 <__gethex+0x3f4>
   b7102:	f8d8 300c 	ldr.w	r3, [r8, #12]
   b7106:	2b02      	cmp	r3, #2
   b7108:	d015      	beq.n	b7136 <__gethex+0x396>
   b710a:	2b03      	cmp	r3, #3
   b710c:	d017      	beq.n	b713e <__gethex+0x39e>
   b710e:	2b01      	cmp	r3, #1
   b7110:	d109      	bne.n	b7126 <__gethex+0x386>
   b7112:	f01a 0f02 	tst.w	sl, #2
   b7116:	d006      	beq.n	b7126 <__gethex+0x386>
   b7118:	f8d9 0000 	ldr.w	r0, [r9]
   b711c:	ea4a 0a00 	orr.w	sl, sl, r0
   b7120:	f01a 0f01 	tst.w	sl, #1
   b7124:	d10e      	bne.n	b7144 <__gethex+0x3a4>
   b7126:	f047 0710 	orr.w	r7, r7, #16
   b712a:	e033      	b.n	b7194 <__gethex+0x3f4>
   b712c:	f04f 0a01 	mov.w	sl, #1
   b7130:	e7d0      	b.n	b70d4 <__gethex+0x334>
   b7132:	2701      	movs	r7, #1
   b7134:	e7e2      	b.n	b70fc <__gethex+0x35c>
   b7136:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b7138:	f1c3 0301 	rsb	r3, r3, #1
   b713c:	9315      	str	r3, [sp, #84]	; 0x54
   b713e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b7140:	2b00      	cmp	r3, #0
   b7142:	d0f0      	beq.n	b7126 <__gethex+0x386>
   b7144:	f8d4 b010 	ldr.w	fp, [r4, #16]
   b7148:	f104 0314 	add.w	r3, r4, #20
   b714c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   b7150:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   b7154:	f04f 0c00 	mov.w	ip, #0
   b7158:	4618      	mov	r0, r3
   b715a:	f853 2b04 	ldr.w	r2, [r3], #4
   b715e:	f1b2 3fff 	cmp.w	r2, #4294967295
   b7162:	d01c      	beq.n	b719e <__gethex+0x3fe>
   b7164:	3201      	adds	r2, #1
   b7166:	6002      	str	r2, [r0, #0]
   b7168:	2f02      	cmp	r7, #2
   b716a:	f104 0314 	add.w	r3, r4, #20
   b716e:	d13f      	bne.n	b71f0 <__gethex+0x450>
   b7170:	f8d8 2000 	ldr.w	r2, [r8]
   b7174:	3a01      	subs	r2, #1
   b7176:	42b2      	cmp	r2, r6
   b7178:	d10a      	bne.n	b7190 <__gethex+0x3f0>
   b717a:	1171      	asrs	r1, r6, #5
   b717c:	2201      	movs	r2, #1
   b717e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   b7182:	f006 061f 	and.w	r6, r6, #31
   b7186:	fa02 f606 	lsl.w	r6, r2, r6
   b718a:	421e      	tst	r6, r3
   b718c:	bf18      	it	ne
   b718e:	4617      	movne	r7, r2
   b7190:	f047 0720 	orr.w	r7, r7, #32
   b7194:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b7196:	601c      	str	r4, [r3, #0]
   b7198:	9b04      	ldr	r3, [sp, #16]
   b719a:	601d      	str	r5, [r3, #0]
   b719c:	e695      	b.n	b6eca <__gethex+0x12a>
   b719e:	4299      	cmp	r1, r3
   b71a0:	f843 cc04 	str.w	ip, [r3, #-4]
   b71a4:	d8d8      	bhi.n	b7158 <__gethex+0x3b8>
   b71a6:	68a3      	ldr	r3, [r4, #8]
   b71a8:	459b      	cmp	fp, r3
   b71aa:	db19      	blt.n	b71e0 <__gethex+0x440>
   b71ac:	6861      	ldr	r1, [r4, #4]
   b71ae:	ee18 0a10 	vmov	r0, s16
   b71b2:	3101      	adds	r1, #1
   b71b4:	f000 f912 	bl	b73dc <_Balloc>
   b71b8:	4681      	mov	r9, r0
   b71ba:	b918      	cbnz	r0, b71c4 <__gethex+0x424>
   b71bc:	4b1a      	ldr	r3, [pc, #104]	; (b7228 <__gethex+0x488>)
   b71be:	4602      	mov	r2, r0
   b71c0:	2184      	movs	r1, #132	; 0x84
   b71c2:	e6a8      	b.n	b6f16 <__gethex+0x176>
   b71c4:	6922      	ldr	r2, [r4, #16]
   b71c6:	3202      	adds	r2, #2
   b71c8:	f104 010c 	add.w	r1, r4, #12
   b71cc:	0092      	lsls	r2, r2, #2
   b71ce:	300c      	adds	r0, #12
   b71d0:	f7fe fe8d 	bl	b5eee <memcpy>
   b71d4:	4621      	mov	r1, r4
   b71d6:	ee18 0a10 	vmov	r0, s16
   b71da:	f000 f93f 	bl	b745c <_Bfree>
   b71de:	464c      	mov	r4, r9
   b71e0:	6923      	ldr	r3, [r4, #16]
   b71e2:	1c5a      	adds	r2, r3, #1
   b71e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   b71e8:	6122      	str	r2, [r4, #16]
   b71ea:	2201      	movs	r2, #1
   b71ec:	615a      	str	r2, [r3, #20]
   b71ee:	e7bb      	b.n	b7168 <__gethex+0x3c8>
   b71f0:	6922      	ldr	r2, [r4, #16]
   b71f2:	455a      	cmp	r2, fp
   b71f4:	dd0b      	ble.n	b720e <__gethex+0x46e>
   b71f6:	2101      	movs	r1, #1
   b71f8:	4620      	mov	r0, r4
   b71fa:	f7ff fd69 	bl	b6cd0 <rshift>
   b71fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
   b7202:	3501      	adds	r5, #1
   b7204:	42ab      	cmp	r3, r5
   b7206:	f6ff aed0 	blt.w	b6faa <__gethex+0x20a>
   b720a:	2701      	movs	r7, #1
   b720c:	e7c0      	b.n	b7190 <__gethex+0x3f0>
   b720e:	f016 061f 	ands.w	r6, r6, #31
   b7212:	d0fa      	beq.n	b720a <__gethex+0x46a>
   b7214:	4453      	add	r3, sl
   b7216:	f1c6 0620 	rsb	r6, r6, #32
   b721a:	f853 0c04 	ldr.w	r0, [r3, #-4]
   b721e:	f000 f9cf 	bl	b75c0 <__hi0bits>
   b7222:	42b0      	cmp	r0, r6
   b7224:	dbe7      	blt.n	b71f6 <__gethex+0x456>
   b7226:	e7f0      	b.n	b720a <__gethex+0x46a>
   b7228:	000b8171 	.word	0x000b8171

000b722c <L_shift>:
   b722c:	f1c2 0208 	rsb	r2, r2, #8
   b7230:	0092      	lsls	r2, r2, #2
   b7232:	b570      	push	{r4, r5, r6, lr}
   b7234:	f1c2 0620 	rsb	r6, r2, #32
   b7238:	6843      	ldr	r3, [r0, #4]
   b723a:	6804      	ldr	r4, [r0, #0]
   b723c:	fa03 f506 	lsl.w	r5, r3, r6
   b7240:	432c      	orrs	r4, r5
   b7242:	40d3      	lsrs	r3, r2
   b7244:	6004      	str	r4, [r0, #0]
   b7246:	f840 3f04 	str.w	r3, [r0, #4]!
   b724a:	4288      	cmp	r0, r1
   b724c:	d3f4      	bcc.n	b7238 <L_shift+0xc>
   b724e:	bd70      	pop	{r4, r5, r6, pc}

000b7250 <__match>:
   b7250:	b530      	push	{r4, r5, lr}
   b7252:	6803      	ldr	r3, [r0, #0]
   b7254:	3301      	adds	r3, #1
   b7256:	f811 4b01 	ldrb.w	r4, [r1], #1
   b725a:	b914      	cbnz	r4, b7262 <__match+0x12>
   b725c:	6003      	str	r3, [r0, #0]
   b725e:	2001      	movs	r0, #1
   b7260:	bd30      	pop	{r4, r5, pc}
   b7262:	f813 2b01 	ldrb.w	r2, [r3], #1
   b7266:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   b726a:	2d19      	cmp	r5, #25
   b726c:	bf98      	it	ls
   b726e:	3220      	addls	r2, #32
   b7270:	42a2      	cmp	r2, r4
   b7272:	d0f0      	beq.n	b7256 <__match+0x6>
   b7274:	2000      	movs	r0, #0
   b7276:	e7f3      	b.n	b7260 <__match+0x10>

000b7278 <__hexnan>:
   b7278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b727c:	680b      	ldr	r3, [r1, #0]
   b727e:	115e      	asrs	r6, r3, #5
   b7280:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   b7284:	f013 031f 	ands.w	r3, r3, #31
   b7288:	b087      	sub	sp, #28
   b728a:	bf18      	it	ne
   b728c:	3604      	addne	r6, #4
   b728e:	2500      	movs	r5, #0
   b7290:	1f37      	subs	r7, r6, #4
   b7292:	4690      	mov	r8, r2
   b7294:	6802      	ldr	r2, [r0, #0]
   b7296:	9301      	str	r3, [sp, #4]
   b7298:	4682      	mov	sl, r0
   b729a:	f846 5c04 	str.w	r5, [r6, #-4]
   b729e:	46b9      	mov	r9, r7
   b72a0:	463c      	mov	r4, r7
   b72a2:	9502      	str	r5, [sp, #8]
   b72a4:	46ab      	mov	fp, r5
   b72a6:	7851      	ldrb	r1, [r2, #1]
   b72a8:	1c53      	adds	r3, r2, #1
   b72aa:	9303      	str	r3, [sp, #12]
   b72ac:	b341      	cbz	r1, b7300 <__hexnan+0x88>
   b72ae:	4608      	mov	r0, r1
   b72b0:	9205      	str	r2, [sp, #20]
   b72b2:	9104      	str	r1, [sp, #16]
   b72b4:	f7ff fd5e 	bl	b6d74 <__hexdig_fun>
   b72b8:	2800      	cmp	r0, #0
   b72ba:	d14f      	bne.n	b735c <__hexnan+0xe4>
   b72bc:	9904      	ldr	r1, [sp, #16]
   b72be:	9a05      	ldr	r2, [sp, #20]
   b72c0:	2920      	cmp	r1, #32
   b72c2:	d818      	bhi.n	b72f6 <__hexnan+0x7e>
   b72c4:	9b02      	ldr	r3, [sp, #8]
   b72c6:	459b      	cmp	fp, r3
   b72c8:	dd13      	ble.n	b72f2 <__hexnan+0x7a>
   b72ca:	454c      	cmp	r4, r9
   b72cc:	d206      	bcs.n	b72dc <__hexnan+0x64>
   b72ce:	2d07      	cmp	r5, #7
   b72d0:	dc04      	bgt.n	b72dc <__hexnan+0x64>
   b72d2:	462a      	mov	r2, r5
   b72d4:	4649      	mov	r1, r9
   b72d6:	4620      	mov	r0, r4
   b72d8:	f7ff ffa8 	bl	b722c <L_shift>
   b72dc:	4544      	cmp	r4, r8
   b72de:	d950      	bls.n	b7382 <__hexnan+0x10a>
   b72e0:	2300      	movs	r3, #0
   b72e2:	f1a4 0904 	sub.w	r9, r4, #4
   b72e6:	f844 3c04 	str.w	r3, [r4, #-4]
   b72ea:	f8cd b008 	str.w	fp, [sp, #8]
   b72ee:	464c      	mov	r4, r9
   b72f0:	461d      	mov	r5, r3
   b72f2:	9a03      	ldr	r2, [sp, #12]
   b72f4:	e7d7      	b.n	b72a6 <__hexnan+0x2e>
   b72f6:	2929      	cmp	r1, #41	; 0x29
   b72f8:	d156      	bne.n	b73a8 <__hexnan+0x130>
   b72fa:	3202      	adds	r2, #2
   b72fc:	f8ca 2000 	str.w	r2, [sl]
   b7300:	f1bb 0f00 	cmp.w	fp, #0
   b7304:	d050      	beq.n	b73a8 <__hexnan+0x130>
   b7306:	454c      	cmp	r4, r9
   b7308:	d206      	bcs.n	b7318 <__hexnan+0xa0>
   b730a:	2d07      	cmp	r5, #7
   b730c:	dc04      	bgt.n	b7318 <__hexnan+0xa0>
   b730e:	462a      	mov	r2, r5
   b7310:	4649      	mov	r1, r9
   b7312:	4620      	mov	r0, r4
   b7314:	f7ff ff8a 	bl	b722c <L_shift>
   b7318:	4544      	cmp	r4, r8
   b731a:	d934      	bls.n	b7386 <__hexnan+0x10e>
   b731c:	f1a8 0204 	sub.w	r2, r8, #4
   b7320:	4623      	mov	r3, r4
   b7322:	f853 1b04 	ldr.w	r1, [r3], #4
   b7326:	f842 1f04 	str.w	r1, [r2, #4]!
   b732a:	429f      	cmp	r7, r3
   b732c:	d2f9      	bcs.n	b7322 <__hexnan+0xaa>
   b732e:	1b3b      	subs	r3, r7, r4
   b7330:	f023 0303 	bic.w	r3, r3, #3
   b7334:	3304      	adds	r3, #4
   b7336:	3401      	adds	r4, #1
   b7338:	3e03      	subs	r6, #3
   b733a:	42b4      	cmp	r4, r6
   b733c:	bf88      	it	hi
   b733e:	2304      	movhi	r3, #4
   b7340:	4443      	add	r3, r8
   b7342:	2200      	movs	r2, #0
   b7344:	f843 2b04 	str.w	r2, [r3], #4
   b7348:	429f      	cmp	r7, r3
   b734a:	d2fb      	bcs.n	b7344 <__hexnan+0xcc>
   b734c:	683b      	ldr	r3, [r7, #0]
   b734e:	b91b      	cbnz	r3, b7358 <__hexnan+0xe0>
   b7350:	4547      	cmp	r7, r8
   b7352:	d127      	bne.n	b73a4 <__hexnan+0x12c>
   b7354:	2301      	movs	r3, #1
   b7356:	603b      	str	r3, [r7, #0]
   b7358:	2005      	movs	r0, #5
   b735a:	e026      	b.n	b73aa <__hexnan+0x132>
   b735c:	3501      	adds	r5, #1
   b735e:	2d08      	cmp	r5, #8
   b7360:	f10b 0b01 	add.w	fp, fp, #1
   b7364:	dd06      	ble.n	b7374 <__hexnan+0xfc>
   b7366:	4544      	cmp	r4, r8
   b7368:	d9c3      	bls.n	b72f2 <__hexnan+0x7a>
   b736a:	2300      	movs	r3, #0
   b736c:	f844 3c04 	str.w	r3, [r4, #-4]
   b7370:	2501      	movs	r5, #1
   b7372:	3c04      	subs	r4, #4
   b7374:	6822      	ldr	r2, [r4, #0]
   b7376:	f000 000f 	and.w	r0, r0, #15
   b737a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   b737e:	6022      	str	r2, [r4, #0]
   b7380:	e7b7      	b.n	b72f2 <__hexnan+0x7a>
   b7382:	2508      	movs	r5, #8
   b7384:	e7b5      	b.n	b72f2 <__hexnan+0x7a>
   b7386:	9b01      	ldr	r3, [sp, #4]
   b7388:	2b00      	cmp	r3, #0
   b738a:	d0df      	beq.n	b734c <__hexnan+0xd4>
   b738c:	f04f 32ff 	mov.w	r2, #4294967295
   b7390:	f1c3 0320 	rsb	r3, r3, #32
   b7394:	fa22 f303 	lsr.w	r3, r2, r3
   b7398:	f856 2c04 	ldr.w	r2, [r6, #-4]
   b739c:	401a      	ands	r2, r3
   b739e:	f846 2c04 	str.w	r2, [r6, #-4]
   b73a2:	e7d3      	b.n	b734c <__hexnan+0xd4>
   b73a4:	3f04      	subs	r7, #4
   b73a6:	e7d1      	b.n	b734c <__hexnan+0xd4>
   b73a8:	2004      	movs	r0, #4
   b73aa:	b007      	add	sp, #28
   b73ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b73b0 <__retarget_lock_acquire_recursive>:
   b73b0:	4770      	bx	lr

000b73b2 <__retarget_lock_release>:
   b73b2:	4770      	bx	lr

000b73b4 <__retarget_lock_release_recursive>:
   b73b4:	4770      	bx	lr

000b73b6 <__ascii_mbtowc>:
   b73b6:	b082      	sub	sp, #8
   b73b8:	b901      	cbnz	r1, b73bc <__ascii_mbtowc+0x6>
   b73ba:	a901      	add	r1, sp, #4
   b73bc:	b142      	cbz	r2, b73d0 <__ascii_mbtowc+0x1a>
   b73be:	b14b      	cbz	r3, b73d4 <__ascii_mbtowc+0x1e>
   b73c0:	7813      	ldrb	r3, [r2, #0]
   b73c2:	600b      	str	r3, [r1, #0]
   b73c4:	7812      	ldrb	r2, [r2, #0]
   b73c6:	1e10      	subs	r0, r2, #0
   b73c8:	bf18      	it	ne
   b73ca:	2001      	movne	r0, #1
   b73cc:	b002      	add	sp, #8
   b73ce:	4770      	bx	lr
   b73d0:	4610      	mov	r0, r2
   b73d2:	e7fb      	b.n	b73cc <__ascii_mbtowc+0x16>
   b73d4:	f06f 0001 	mvn.w	r0, #1
   b73d8:	e7f8      	b.n	b73cc <__ascii_mbtowc+0x16>
	...

000b73dc <_Balloc>:
   b73dc:	b570      	push	{r4, r5, r6, lr}
   b73de:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b73e0:	4604      	mov	r4, r0
   b73e2:	460d      	mov	r5, r1
   b73e4:	b976      	cbnz	r6, b7404 <_Balloc+0x28>
   b73e6:	2010      	movs	r0, #16
   b73e8:	f7fd fb30 	bl	b4a4c <malloc>
   b73ec:	4602      	mov	r2, r0
   b73ee:	6260      	str	r0, [r4, #36]	; 0x24
   b73f0:	b920      	cbnz	r0, b73fc <_Balloc+0x20>
   b73f2:	4b18      	ldr	r3, [pc, #96]	; (b7454 <_Balloc+0x78>)
   b73f4:	4818      	ldr	r0, [pc, #96]	; (b7458 <_Balloc+0x7c>)
   b73f6:	2166      	movs	r1, #102	; 0x66
   b73f8:	f7fd fb40 	bl	b4a7c <__assert_func>
   b73fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   b7400:	6006      	str	r6, [r0, #0]
   b7402:	60c6      	str	r6, [r0, #12]
   b7404:	6a66      	ldr	r6, [r4, #36]	; 0x24
   b7406:	68f3      	ldr	r3, [r6, #12]
   b7408:	b183      	cbz	r3, b742c <_Balloc+0x50>
   b740a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b740c:	68db      	ldr	r3, [r3, #12]
   b740e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   b7412:	b9b8      	cbnz	r0, b7444 <_Balloc+0x68>
   b7414:	2101      	movs	r1, #1
   b7416:	fa01 f605 	lsl.w	r6, r1, r5
   b741a:	1d72      	adds	r2, r6, #5
   b741c:	0092      	lsls	r2, r2, #2
   b741e:	4620      	mov	r0, r4
   b7420:	f000 fc9d 	bl	b7d5e <_calloc_r>
   b7424:	b160      	cbz	r0, b7440 <_Balloc+0x64>
   b7426:	e9c0 5601 	strd	r5, r6, [r0, #4]
   b742a:	e00e      	b.n	b744a <_Balloc+0x6e>
   b742c:	2221      	movs	r2, #33	; 0x21
   b742e:	2104      	movs	r1, #4
   b7430:	4620      	mov	r0, r4
   b7432:	f000 fc94 	bl	b7d5e <_calloc_r>
   b7436:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b7438:	60f0      	str	r0, [r6, #12]
   b743a:	68db      	ldr	r3, [r3, #12]
   b743c:	2b00      	cmp	r3, #0
   b743e:	d1e4      	bne.n	b740a <_Balloc+0x2e>
   b7440:	2000      	movs	r0, #0
   b7442:	bd70      	pop	{r4, r5, r6, pc}
   b7444:	6802      	ldr	r2, [r0, #0]
   b7446:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   b744a:	2300      	movs	r3, #0
   b744c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   b7450:	e7f7      	b.n	b7442 <_Balloc+0x66>
   b7452:	bf00      	nop
   b7454:	000b7f7d 	.word	0x000b7f7d
   b7458:	000b8220 	.word	0x000b8220

000b745c <_Bfree>:
   b745c:	b570      	push	{r4, r5, r6, lr}
   b745e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b7460:	4605      	mov	r5, r0
   b7462:	460c      	mov	r4, r1
   b7464:	b976      	cbnz	r6, b7484 <_Bfree+0x28>
   b7466:	2010      	movs	r0, #16
   b7468:	f7fd faf0 	bl	b4a4c <malloc>
   b746c:	4602      	mov	r2, r0
   b746e:	6268      	str	r0, [r5, #36]	; 0x24
   b7470:	b920      	cbnz	r0, b747c <_Bfree+0x20>
   b7472:	4b09      	ldr	r3, [pc, #36]	; (b7498 <_Bfree+0x3c>)
   b7474:	4809      	ldr	r0, [pc, #36]	; (b749c <_Bfree+0x40>)
   b7476:	218a      	movs	r1, #138	; 0x8a
   b7478:	f7fd fb00 	bl	b4a7c <__assert_func>
   b747c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   b7480:	6006      	str	r6, [r0, #0]
   b7482:	60c6      	str	r6, [r0, #12]
   b7484:	b13c      	cbz	r4, b7496 <_Bfree+0x3a>
   b7486:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b7488:	6862      	ldr	r2, [r4, #4]
   b748a:	68db      	ldr	r3, [r3, #12]
   b748c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   b7490:	6021      	str	r1, [r4, #0]
   b7492:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   b7496:	bd70      	pop	{r4, r5, r6, pc}
   b7498:	000b7f7d 	.word	0x000b7f7d
   b749c:	000b8220 	.word	0x000b8220

000b74a0 <__multadd>:
   b74a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b74a4:	690d      	ldr	r5, [r1, #16]
   b74a6:	4607      	mov	r7, r0
   b74a8:	460c      	mov	r4, r1
   b74aa:	461e      	mov	r6, r3
   b74ac:	f101 0c14 	add.w	ip, r1, #20
   b74b0:	2000      	movs	r0, #0
   b74b2:	f8dc 3000 	ldr.w	r3, [ip]
   b74b6:	b299      	uxth	r1, r3
   b74b8:	fb02 6101 	mla	r1, r2, r1, r6
   b74bc:	0c1e      	lsrs	r6, r3, #16
   b74be:	0c0b      	lsrs	r3, r1, #16
   b74c0:	fb02 3306 	mla	r3, r2, r6, r3
   b74c4:	b289      	uxth	r1, r1
   b74c6:	3001      	adds	r0, #1
   b74c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   b74cc:	4285      	cmp	r5, r0
   b74ce:	f84c 1b04 	str.w	r1, [ip], #4
   b74d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
   b74d6:	dcec      	bgt.n	b74b2 <__multadd+0x12>
   b74d8:	b30e      	cbz	r6, b751e <__multadd+0x7e>
   b74da:	68a3      	ldr	r3, [r4, #8]
   b74dc:	42ab      	cmp	r3, r5
   b74de:	dc19      	bgt.n	b7514 <__multadd+0x74>
   b74e0:	6861      	ldr	r1, [r4, #4]
   b74e2:	4638      	mov	r0, r7
   b74e4:	3101      	adds	r1, #1
   b74e6:	f7ff ff79 	bl	b73dc <_Balloc>
   b74ea:	4680      	mov	r8, r0
   b74ec:	b928      	cbnz	r0, b74fa <__multadd+0x5a>
   b74ee:	4602      	mov	r2, r0
   b74f0:	4b0c      	ldr	r3, [pc, #48]	; (b7524 <__multadd+0x84>)
   b74f2:	480d      	ldr	r0, [pc, #52]	; (b7528 <__multadd+0x88>)
   b74f4:	21b5      	movs	r1, #181	; 0xb5
   b74f6:	f7fd fac1 	bl	b4a7c <__assert_func>
   b74fa:	6922      	ldr	r2, [r4, #16]
   b74fc:	3202      	adds	r2, #2
   b74fe:	f104 010c 	add.w	r1, r4, #12
   b7502:	0092      	lsls	r2, r2, #2
   b7504:	300c      	adds	r0, #12
   b7506:	f7fe fcf2 	bl	b5eee <memcpy>
   b750a:	4621      	mov	r1, r4
   b750c:	4638      	mov	r0, r7
   b750e:	f7ff ffa5 	bl	b745c <_Bfree>
   b7512:	4644      	mov	r4, r8
   b7514:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   b7518:	3501      	adds	r5, #1
   b751a:	615e      	str	r6, [r3, #20]
   b751c:	6125      	str	r5, [r4, #16]
   b751e:	4620      	mov	r0, r4
   b7520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7524:	000b8171 	.word	0x000b8171
   b7528:	000b8220 	.word	0x000b8220

000b752c <__s2b>:
   b752c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7530:	460c      	mov	r4, r1
   b7532:	4615      	mov	r5, r2
   b7534:	461f      	mov	r7, r3
   b7536:	2209      	movs	r2, #9
   b7538:	3308      	adds	r3, #8
   b753a:	4606      	mov	r6, r0
   b753c:	fb93 f3f2 	sdiv	r3, r3, r2
   b7540:	2100      	movs	r1, #0
   b7542:	2201      	movs	r2, #1
   b7544:	429a      	cmp	r2, r3
   b7546:	db09      	blt.n	b755c <__s2b+0x30>
   b7548:	4630      	mov	r0, r6
   b754a:	f7ff ff47 	bl	b73dc <_Balloc>
   b754e:	b940      	cbnz	r0, b7562 <__s2b+0x36>
   b7550:	4602      	mov	r2, r0
   b7552:	4b19      	ldr	r3, [pc, #100]	; (b75b8 <__s2b+0x8c>)
   b7554:	4819      	ldr	r0, [pc, #100]	; (b75bc <__s2b+0x90>)
   b7556:	21ce      	movs	r1, #206	; 0xce
   b7558:	f7fd fa90 	bl	b4a7c <__assert_func>
   b755c:	0052      	lsls	r2, r2, #1
   b755e:	3101      	adds	r1, #1
   b7560:	e7f0      	b.n	b7544 <__s2b+0x18>
   b7562:	9b08      	ldr	r3, [sp, #32]
   b7564:	6143      	str	r3, [r0, #20]
   b7566:	2d09      	cmp	r5, #9
   b7568:	f04f 0301 	mov.w	r3, #1
   b756c:	6103      	str	r3, [r0, #16]
   b756e:	dd16      	ble.n	b759e <__s2b+0x72>
   b7570:	f104 0909 	add.w	r9, r4, #9
   b7574:	46c8      	mov	r8, r9
   b7576:	442c      	add	r4, r5
   b7578:	f818 3b01 	ldrb.w	r3, [r8], #1
   b757c:	4601      	mov	r1, r0
   b757e:	3b30      	subs	r3, #48	; 0x30
   b7580:	220a      	movs	r2, #10
   b7582:	4630      	mov	r0, r6
   b7584:	f7ff ff8c 	bl	b74a0 <__multadd>
   b7588:	45a0      	cmp	r8, r4
   b758a:	d1f5      	bne.n	b7578 <__s2b+0x4c>
   b758c:	f1a5 0408 	sub.w	r4, r5, #8
   b7590:	444c      	add	r4, r9
   b7592:	1b2d      	subs	r5, r5, r4
   b7594:	1963      	adds	r3, r4, r5
   b7596:	42bb      	cmp	r3, r7
   b7598:	db04      	blt.n	b75a4 <__s2b+0x78>
   b759a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b759e:	340a      	adds	r4, #10
   b75a0:	2509      	movs	r5, #9
   b75a2:	e7f6      	b.n	b7592 <__s2b+0x66>
   b75a4:	f814 3b01 	ldrb.w	r3, [r4], #1
   b75a8:	4601      	mov	r1, r0
   b75aa:	3b30      	subs	r3, #48	; 0x30
   b75ac:	220a      	movs	r2, #10
   b75ae:	4630      	mov	r0, r6
   b75b0:	f7ff ff76 	bl	b74a0 <__multadd>
   b75b4:	e7ee      	b.n	b7594 <__s2b+0x68>
   b75b6:	bf00      	nop
   b75b8:	000b8171 	.word	0x000b8171
   b75bc:	000b8220 	.word	0x000b8220

000b75c0 <__hi0bits>:
   b75c0:	0c03      	lsrs	r3, r0, #16
   b75c2:	041b      	lsls	r3, r3, #16
   b75c4:	b9d3      	cbnz	r3, b75fc <__hi0bits+0x3c>
   b75c6:	0400      	lsls	r0, r0, #16
   b75c8:	2310      	movs	r3, #16
   b75ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   b75ce:	bf04      	itt	eq
   b75d0:	0200      	lsleq	r0, r0, #8
   b75d2:	3308      	addeq	r3, #8
   b75d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   b75d8:	bf04      	itt	eq
   b75da:	0100      	lsleq	r0, r0, #4
   b75dc:	3304      	addeq	r3, #4
   b75de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   b75e2:	bf04      	itt	eq
   b75e4:	0080      	lsleq	r0, r0, #2
   b75e6:	3302      	addeq	r3, #2
   b75e8:	2800      	cmp	r0, #0
   b75ea:	db05      	blt.n	b75f8 <__hi0bits+0x38>
   b75ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   b75f0:	f103 0301 	add.w	r3, r3, #1
   b75f4:	bf08      	it	eq
   b75f6:	2320      	moveq	r3, #32
   b75f8:	4618      	mov	r0, r3
   b75fa:	4770      	bx	lr
   b75fc:	2300      	movs	r3, #0
   b75fe:	e7e4      	b.n	b75ca <__hi0bits+0xa>

000b7600 <__lo0bits>:
   b7600:	6803      	ldr	r3, [r0, #0]
   b7602:	f013 0207 	ands.w	r2, r3, #7
   b7606:	4601      	mov	r1, r0
   b7608:	d00b      	beq.n	b7622 <__lo0bits+0x22>
   b760a:	07da      	lsls	r2, r3, #31
   b760c:	d423      	bmi.n	b7656 <__lo0bits+0x56>
   b760e:	0798      	lsls	r0, r3, #30
   b7610:	bf49      	itett	mi
   b7612:	085b      	lsrmi	r3, r3, #1
   b7614:	089b      	lsrpl	r3, r3, #2
   b7616:	2001      	movmi	r0, #1
   b7618:	600b      	strmi	r3, [r1, #0]
   b761a:	bf5c      	itt	pl
   b761c:	600b      	strpl	r3, [r1, #0]
   b761e:	2002      	movpl	r0, #2
   b7620:	4770      	bx	lr
   b7622:	b298      	uxth	r0, r3
   b7624:	b9a8      	cbnz	r0, b7652 <__lo0bits+0x52>
   b7626:	0c1b      	lsrs	r3, r3, #16
   b7628:	2010      	movs	r0, #16
   b762a:	b2da      	uxtb	r2, r3
   b762c:	b90a      	cbnz	r2, b7632 <__lo0bits+0x32>
   b762e:	3008      	adds	r0, #8
   b7630:	0a1b      	lsrs	r3, r3, #8
   b7632:	071a      	lsls	r2, r3, #28
   b7634:	bf04      	itt	eq
   b7636:	091b      	lsreq	r3, r3, #4
   b7638:	3004      	addeq	r0, #4
   b763a:	079a      	lsls	r2, r3, #30
   b763c:	bf04      	itt	eq
   b763e:	089b      	lsreq	r3, r3, #2
   b7640:	3002      	addeq	r0, #2
   b7642:	07da      	lsls	r2, r3, #31
   b7644:	d403      	bmi.n	b764e <__lo0bits+0x4e>
   b7646:	085b      	lsrs	r3, r3, #1
   b7648:	f100 0001 	add.w	r0, r0, #1
   b764c:	d005      	beq.n	b765a <__lo0bits+0x5a>
   b764e:	600b      	str	r3, [r1, #0]
   b7650:	4770      	bx	lr
   b7652:	4610      	mov	r0, r2
   b7654:	e7e9      	b.n	b762a <__lo0bits+0x2a>
   b7656:	2000      	movs	r0, #0
   b7658:	4770      	bx	lr
   b765a:	2020      	movs	r0, #32
   b765c:	4770      	bx	lr
	...

000b7660 <__i2b>:
   b7660:	b510      	push	{r4, lr}
   b7662:	460c      	mov	r4, r1
   b7664:	2101      	movs	r1, #1
   b7666:	f7ff feb9 	bl	b73dc <_Balloc>
   b766a:	4602      	mov	r2, r0
   b766c:	b928      	cbnz	r0, b767a <__i2b+0x1a>
   b766e:	4b05      	ldr	r3, [pc, #20]	; (b7684 <__i2b+0x24>)
   b7670:	4805      	ldr	r0, [pc, #20]	; (b7688 <__i2b+0x28>)
   b7672:	f44f 71a0 	mov.w	r1, #320	; 0x140
   b7676:	f7fd fa01 	bl	b4a7c <__assert_func>
   b767a:	2301      	movs	r3, #1
   b767c:	6144      	str	r4, [r0, #20]
   b767e:	6103      	str	r3, [r0, #16]
   b7680:	bd10      	pop	{r4, pc}
   b7682:	bf00      	nop
   b7684:	000b8171 	.word	0x000b8171
   b7688:	000b8220 	.word	0x000b8220

000b768c <__multiply>:
   b768c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7690:	4691      	mov	r9, r2
   b7692:	690a      	ldr	r2, [r1, #16]
   b7694:	f8d9 3010 	ldr.w	r3, [r9, #16]
   b7698:	429a      	cmp	r2, r3
   b769a:	bfb8      	it	lt
   b769c:	460b      	movlt	r3, r1
   b769e:	460c      	mov	r4, r1
   b76a0:	bfbc      	itt	lt
   b76a2:	464c      	movlt	r4, r9
   b76a4:	4699      	movlt	r9, r3
   b76a6:	6927      	ldr	r7, [r4, #16]
   b76a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
   b76ac:	68a3      	ldr	r3, [r4, #8]
   b76ae:	6861      	ldr	r1, [r4, #4]
   b76b0:	eb07 060a 	add.w	r6, r7, sl
   b76b4:	42b3      	cmp	r3, r6
   b76b6:	b085      	sub	sp, #20
   b76b8:	bfb8      	it	lt
   b76ba:	3101      	addlt	r1, #1
   b76bc:	f7ff fe8e 	bl	b73dc <_Balloc>
   b76c0:	b930      	cbnz	r0, b76d0 <__multiply+0x44>
   b76c2:	4602      	mov	r2, r0
   b76c4:	4b44      	ldr	r3, [pc, #272]	; (b77d8 <__multiply+0x14c>)
   b76c6:	4845      	ldr	r0, [pc, #276]	; (b77dc <__multiply+0x150>)
   b76c8:	f240 115d 	movw	r1, #349	; 0x15d
   b76cc:	f7fd f9d6 	bl	b4a7c <__assert_func>
   b76d0:	f100 0514 	add.w	r5, r0, #20
   b76d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   b76d8:	462b      	mov	r3, r5
   b76da:	2200      	movs	r2, #0
   b76dc:	4543      	cmp	r3, r8
   b76de:	d321      	bcc.n	b7724 <__multiply+0x98>
   b76e0:	f104 0314 	add.w	r3, r4, #20
   b76e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   b76e8:	f109 0314 	add.w	r3, r9, #20
   b76ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   b76f0:	9202      	str	r2, [sp, #8]
   b76f2:	1b3a      	subs	r2, r7, r4
   b76f4:	3a15      	subs	r2, #21
   b76f6:	f022 0203 	bic.w	r2, r2, #3
   b76fa:	3204      	adds	r2, #4
   b76fc:	f104 0115 	add.w	r1, r4, #21
   b7700:	428f      	cmp	r7, r1
   b7702:	bf38      	it	cc
   b7704:	2204      	movcc	r2, #4
   b7706:	9201      	str	r2, [sp, #4]
   b7708:	9a02      	ldr	r2, [sp, #8]
   b770a:	9303      	str	r3, [sp, #12]
   b770c:	429a      	cmp	r2, r3
   b770e:	d80c      	bhi.n	b772a <__multiply+0x9e>
   b7710:	2e00      	cmp	r6, #0
   b7712:	dd03      	ble.n	b771c <__multiply+0x90>
   b7714:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   b7718:	2b00      	cmp	r3, #0
   b771a:	d05a      	beq.n	b77d2 <__multiply+0x146>
   b771c:	6106      	str	r6, [r0, #16]
   b771e:	b005      	add	sp, #20
   b7720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7724:	f843 2b04 	str.w	r2, [r3], #4
   b7728:	e7d8      	b.n	b76dc <__multiply+0x50>
   b772a:	f8b3 a000 	ldrh.w	sl, [r3]
   b772e:	f1ba 0f00 	cmp.w	sl, #0
   b7732:	d024      	beq.n	b777e <__multiply+0xf2>
   b7734:	f104 0e14 	add.w	lr, r4, #20
   b7738:	46a9      	mov	r9, r5
   b773a:	f04f 0c00 	mov.w	ip, #0
   b773e:	f85e 2b04 	ldr.w	r2, [lr], #4
   b7742:	f8d9 1000 	ldr.w	r1, [r9]
   b7746:	fa1f fb82 	uxth.w	fp, r2
   b774a:	b289      	uxth	r1, r1
   b774c:	fb0a 110b 	mla	r1, sl, fp, r1
   b7750:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   b7754:	f8d9 2000 	ldr.w	r2, [r9]
   b7758:	4461      	add	r1, ip
   b775a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   b775e:	fb0a c20b 	mla	r2, sl, fp, ip
   b7762:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   b7766:	b289      	uxth	r1, r1
   b7768:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   b776c:	4577      	cmp	r7, lr
   b776e:	f849 1b04 	str.w	r1, [r9], #4
   b7772:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   b7776:	d8e2      	bhi.n	b773e <__multiply+0xb2>
   b7778:	9a01      	ldr	r2, [sp, #4]
   b777a:	f845 c002 	str.w	ip, [r5, r2]
   b777e:	9a03      	ldr	r2, [sp, #12]
   b7780:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   b7784:	3304      	adds	r3, #4
   b7786:	f1b9 0f00 	cmp.w	r9, #0
   b778a:	d020      	beq.n	b77ce <__multiply+0x142>
   b778c:	6829      	ldr	r1, [r5, #0]
   b778e:	f104 0c14 	add.w	ip, r4, #20
   b7792:	46ae      	mov	lr, r5
   b7794:	f04f 0a00 	mov.w	sl, #0
   b7798:	f8bc b000 	ldrh.w	fp, [ip]
   b779c:	f8be 2002 	ldrh.w	r2, [lr, #2]
   b77a0:	fb09 220b 	mla	r2, r9, fp, r2
   b77a4:	4492      	add	sl, r2
   b77a6:	b289      	uxth	r1, r1
   b77a8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   b77ac:	f84e 1b04 	str.w	r1, [lr], #4
   b77b0:	f85c 2b04 	ldr.w	r2, [ip], #4
   b77b4:	f8be 1000 	ldrh.w	r1, [lr]
   b77b8:	0c12      	lsrs	r2, r2, #16
   b77ba:	fb09 1102 	mla	r1, r9, r2, r1
   b77be:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   b77c2:	4567      	cmp	r7, ip
   b77c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   b77c8:	d8e6      	bhi.n	b7798 <__multiply+0x10c>
   b77ca:	9a01      	ldr	r2, [sp, #4]
   b77cc:	50a9      	str	r1, [r5, r2]
   b77ce:	3504      	adds	r5, #4
   b77d0:	e79a      	b.n	b7708 <__multiply+0x7c>
   b77d2:	3e01      	subs	r6, #1
   b77d4:	e79c      	b.n	b7710 <__multiply+0x84>
   b77d6:	bf00      	nop
   b77d8:	000b8171 	.word	0x000b8171
   b77dc:	000b8220 	.word	0x000b8220

000b77e0 <__pow5mult>:
   b77e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b77e4:	4615      	mov	r5, r2
   b77e6:	f012 0203 	ands.w	r2, r2, #3
   b77ea:	4606      	mov	r6, r0
   b77ec:	460f      	mov	r7, r1
   b77ee:	d007      	beq.n	b7800 <__pow5mult+0x20>
   b77f0:	4c25      	ldr	r4, [pc, #148]	; (b7888 <__pow5mult+0xa8>)
   b77f2:	3a01      	subs	r2, #1
   b77f4:	2300      	movs	r3, #0
   b77f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   b77fa:	f7ff fe51 	bl	b74a0 <__multadd>
   b77fe:	4607      	mov	r7, r0
   b7800:	10ad      	asrs	r5, r5, #2
   b7802:	d03d      	beq.n	b7880 <__pow5mult+0xa0>
   b7804:	6a74      	ldr	r4, [r6, #36]	; 0x24
   b7806:	b97c      	cbnz	r4, b7828 <__pow5mult+0x48>
   b7808:	2010      	movs	r0, #16
   b780a:	f7fd f91f 	bl	b4a4c <malloc>
   b780e:	4602      	mov	r2, r0
   b7810:	6270      	str	r0, [r6, #36]	; 0x24
   b7812:	b928      	cbnz	r0, b7820 <__pow5mult+0x40>
   b7814:	4b1d      	ldr	r3, [pc, #116]	; (b788c <__pow5mult+0xac>)
   b7816:	481e      	ldr	r0, [pc, #120]	; (b7890 <__pow5mult+0xb0>)
   b7818:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   b781c:	f7fd f92e 	bl	b4a7c <__assert_func>
   b7820:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b7824:	6004      	str	r4, [r0, #0]
   b7826:	60c4      	str	r4, [r0, #12]
   b7828:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   b782c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   b7830:	b94c      	cbnz	r4, b7846 <__pow5mult+0x66>
   b7832:	f240 2171 	movw	r1, #625	; 0x271
   b7836:	4630      	mov	r0, r6
   b7838:	f7ff ff12 	bl	b7660 <__i2b>
   b783c:	2300      	movs	r3, #0
   b783e:	f8c8 0008 	str.w	r0, [r8, #8]
   b7842:	4604      	mov	r4, r0
   b7844:	6003      	str	r3, [r0, #0]
   b7846:	f04f 0900 	mov.w	r9, #0
   b784a:	07eb      	lsls	r3, r5, #31
   b784c:	d50a      	bpl.n	b7864 <__pow5mult+0x84>
   b784e:	4639      	mov	r1, r7
   b7850:	4622      	mov	r2, r4
   b7852:	4630      	mov	r0, r6
   b7854:	f7ff ff1a 	bl	b768c <__multiply>
   b7858:	4639      	mov	r1, r7
   b785a:	4680      	mov	r8, r0
   b785c:	4630      	mov	r0, r6
   b785e:	f7ff fdfd 	bl	b745c <_Bfree>
   b7862:	4647      	mov	r7, r8
   b7864:	106d      	asrs	r5, r5, #1
   b7866:	d00b      	beq.n	b7880 <__pow5mult+0xa0>
   b7868:	6820      	ldr	r0, [r4, #0]
   b786a:	b938      	cbnz	r0, b787c <__pow5mult+0x9c>
   b786c:	4622      	mov	r2, r4
   b786e:	4621      	mov	r1, r4
   b7870:	4630      	mov	r0, r6
   b7872:	f7ff ff0b 	bl	b768c <__multiply>
   b7876:	6020      	str	r0, [r4, #0]
   b7878:	f8c0 9000 	str.w	r9, [r0]
   b787c:	4604      	mov	r4, r0
   b787e:	e7e4      	b.n	b784a <__pow5mult+0x6a>
   b7880:	4638      	mov	r0, r7
   b7882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7886:	bf00      	nop
   b7888:	000b8390 	.word	0x000b8390
   b788c:	000b7f7d 	.word	0x000b7f7d
   b7890:	000b8220 	.word	0x000b8220

000b7894 <__lshift>:
   b7894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7898:	460c      	mov	r4, r1
   b789a:	6849      	ldr	r1, [r1, #4]
   b789c:	6923      	ldr	r3, [r4, #16]
   b789e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   b78a2:	68a3      	ldr	r3, [r4, #8]
   b78a4:	4607      	mov	r7, r0
   b78a6:	4691      	mov	r9, r2
   b78a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
   b78ac:	f108 0601 	add.w	r6, r8, #1
   b78b0:	42b3      	cmp	r3, r6
   b78b2:	db0b      	blt.n	b78cc <__lshift+0x38>
   b78b4:	4638      	mov	r0, r7
   b78b6:	f7ff fd91 	bl	b73dc <_Balloc>
   b78ba:	4605      	mov	r5, r0
   b78bc:	b948      	cbnz	r0, b78d2 <__lshift+0x3e>
   b78be:	4602      	mov	r2, r0
   b78c0:	4b2a      	ldr	r3, [pc, #168]	; (b796c <__lshift+0xd8>)
   b78c2:	482b      	ldr	r0, [pc, #172]	; (b7970 <__lshift+0xdc>)
   b78c4:	f240 11d9 	movw	r1, #473	; 0x1d9
   b78c8:	f7fd f8d8 	bl	b4a7c <__assert_func>
   b78cc:	3101      	adds	r1, #1
   b78ce:	005b      	lsls	r3, r3, #1
   b78d0:	e7ee      	b.n	b78b0 <__lshift+0x1c>
   b78d2:	2300      	movs	r3, #0
   b78d4:	f100 0114 	add.w	r1, r0, #20
   b78d8:	f100 0210 	add.w	r2, r0, #16
   b78dc:	4618      	mov	r0, r3
   b78de:	4553      	cmp	r3, sl
   b78e0:	db37      	blt.n	b7952 <__lshift+0xbe>
   b78e2:	6920      	ldr	r0, [r4, #16]
   b78e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   b78e8:	f104 0314 	add.w	r3, r4, #20
   b78ec:	f019 091f 	ands.w	r9, r9, #31
   b78f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   b78f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   b78f8:	d02f      	beq.n	b795a <__lshift+0xc6>
   b78fa:	f1c9 0e20 	rsb	lr, r9, #32
   b78fe:	468a      	mov	sl, r1
   b7900:	f04f 0c00 	mov.w	ip, #0
   b7904:	681a      	ldr	r2, [r3, #0]
   b7906:	fa02 f209 	lsl.w	r2, r2, r9
   b790a:	ea42 020c 	orr.w	r2, r2, ip
   b790e:	f84a 2b04 	str.w	r2, [sl], #4
   b7912:	f853 2b04 	ldr.w	r2, [r3], #4
   b7916:	4298      	cmp	r0, r3
   b7918:	fa22 fc0e 	lsr.w	ip, r2, lr
   b791c:	d8f2      	bhi.n	b7904 <__lshift+0x70>
   b791e:	1b03      	subs	r3, r0, r4
   b7920:	3b15      	subs	r3, #21
   b7922:	f023 0303 	bic.w	r3, r3, #3
   b7926:	3304      	adds	r3, #4
   b7928:	f104 0215 	add.w	r2, r4, #21
   b792c:	4290      	cmp	r0, r2
   b792e:	bf38      	it	cc
   b7930:	2304      	movcc	r3, #4
   b7932:	f841 c003 	str.w	ip, [r1, r3]
   b7936:	f1bc 0f00 	cmp.w	ip, #0
   b793a:	d001      	beq.n	b7940 <__lshift+0xac>
   b793c:	f108 0602 	add.w	r6, r8, #2
   b7940:	3e01      	subs	r6, #1
   b7942:	4638      	mov	r0, r7
   b7944:	612e      	str	r6, [r5, #16]
   b7946:	4621      	mov	r1, r4
   b7948:	f7ff fd88 	bl	b745c <_Bfree>
   b794c:	4628      	mov	r0, r5
   b794e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7952:	f842 0f04 	str.w	r0, [r2, #4]!
   b7956:	3301      	adds	r3, #1
   b7958:	e7c1      	b.n	b78de <__lshift+0x4a>
   b795a:	3904      	subs	r1, #4
   b795c:	f853 2b04 	ldr.w	r2, [r3], #4
   b7960:	f841 2f04 	str.w	r2, [r1, #4]!
   b7964:	4298      	cmp	r0, r3
   b7966:	d8f9      	bhi.n	b795c <__lshift+0xc8>
   b7968:	e7ea      	b.n	b7940 <__lshift+0xac>
   b796a:	bf00      	nop
   b796c:	000b8171 	.word	0x000b8171
   b7970:	000b8220 	.word	0x000b8220

000b7974 <__mcmp>:
   b7974:	b530      	push	{r4, r5, lr}
   b7976:	6902      	ldr	r2, [r0, #16]
   b7978:	690c      	ldr	r4, [r1, #16]
   b797a:	1b12      	subs	r2, r2, r4
   b797c:	d10e      	bne.n	b799c <__mcmp+0x28>
   b797e:	f100 0314 	add.w	r3, r0, #20
   b7982:	3114      	adds	r1, #20
   b7984:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   b7988:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   b798c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   b7990:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   b7994:	42a5      	cmp	r5, r4
   b7996:	d003      	beq.n	b79a0 <__mcmp+0x2c>
   b7998:	d305      	bcc.n	b79a6 <__mcmp+0x32>
   b799a:	2201      	movs	r2, #1
   b799c:	4610      	mov	r0, r2
   b799e:	bd30      	pop	{r4, r5, pc}
   b79a0:	4283      	cmp	r3, r0
   b79a2:	d3f3      	bcc.n	b798c <__mcmp+0x18>
   b79a4:	e7fa      	b.n	b799c <__mcmp+0x28>
   b79a6:	f04f 32ff 	mov.w	r2, #4294967295
   b79aa:	e7f7      	b.n	b799c <__mcmp+0x28>

000b79ac <__mdiff>:
   b79ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b79b0:	460c      	mov	r4, r1
   b79b2:	4606      	mov	r6, r0
   b79b4:	4611      	mov	r1, r2
   b79b6:	4620      	mov	r0, r4
   b79b8:	4690      	mov	r8, r2
   b79ba:	f7ff ffdb 	bl	b7974 <__mcmp>
   b79be:	1e05      	subs	r5, r0, #0
   b79c0:	d110      	bne.n	b79e4 <__mdiff+0x38>
   b79c2:	4629      	mov	r1, r5
   b79c4:	4630      	mov	r0, r6
   b79c6:	f7ff fd09 	bl	b73dc <_Balloc>
   b79ca:	b930      	cbnz	r0, b79da <__mdiff+0x2e>
   b79cc:	4b3a      	ldr	r3, [pc, #232]	; (b7ab8 <__mdiff+0x10c>)
   b79ce:	4602      	mov	r2, r0
   b79d0:	f240 2132 	movw	r1, #562	; 0x232
   b79d4:	4839      	ldr	r0, [pc, #228]	; (b7abc <__mdiff+0x110>)
   b79d6:	f7fd f851 	bl	b4a7c <__assert_func>
   b79da:	2301      	movs	r3, #1
   b79dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
   b79e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b79e4:	bfa4      	itt	ge
   b79e6:	4643      	movge	r3, r8
   b79e8:	46a0      	movge	r8, r4
   b79ea:	4630      	mov	r0, r6
   b79ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
   b79f0:	bfa6      	itte	ge
   b79f2:	461c      	movge	r4, r3
   b79f4:	2500      	movge	r5, #0
   b79f6:	2501      	movlt	r5, #1
   b79f8:	f7ff fcf0 	bl	b73dc <_Balloc>
   b79fc:	b920      	cbnz	r0, b7a08 <__mdiff+0x5c>
   b79fe:	4b2e      	ldr	r3, [pc, #184]	; (b7ab8 <__mdiff+0x10c>)
   b7a00:	4602      	mov	r2, r0
   b7a02:	f44f 7110 	mov.w	r1, #576	; 0x240
   b7a06:	e7e5      	b.n	b79d4 <__mdiff+0x28>
   b7a08:	f8d8 7010 	ldr.w	r7, [r8, #16]
   b7a0c:	6926      	ldr	r6, [r4, #16]
   b7a0e:	60c5      	str	r5, [r0, #12]
   b7a10:	f104 0914 	add.w	r9, r4, #20
   b7a14:	f108 0514 	add.w	r5, r8, #20
   b7a18:	f100 0e14 	add.w	lr, r0, #20
   b7a1c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   b7a20:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   b7a24:	f108 0210 	add.w	r2, r8, #16
   b7a28:	46f2      	mov	sl, lr
   b7a2a:	2100      	movs	r1, #0
   b7a2c:	f859 3b04 	ldr.w	r3, [r9], #4
   b7a30:	f852 bf04 	ldr.w	fp, [r2, #4]!
   b7a34:	fa1f f883 	uxth.w	r8, r3
   b7a38:	fa11 f18b 	uxtah	r1, r1, fp
   b7a3c:	0c1b      	lsrs	r3, r3, #16
   b7a3e:	eba1 0808 	sub.w	r8, r1, r8
   b7a42:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   b7a46:	eb03 4328 	add.w	r3, r3, r8, asr #16
   b7a4a:	fa1f f888 	uxth.w	r8, r8
   b7a4e:	1419      	asrs	r1, r3, #16
   b7a50:	454e      	cmp	r6, r9
   b7a52:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   b7a56:	f84a 3b04 	str.w	r3, [sl], #4
   b7a5a:	d8e7      	bhi.n	b7a2c <__mdiff+0x80>
   b7a5c:	1b33      	subs	r3, r6, r4
   b7a5e:	3b15      	subs	r3, #21
   b7a60:	f023 0303 	bic.w	r3, r3, #3
   b7a64:	3304      	adds	r3, #4
   b7a66:	3415      	adds	r4, #21
   b7a68:	42a6      	cmp	r6, r4
   b7a6a:	bf38      	it	cc
   b7a6c:	2304      	movcc	r3, #4
   b7a6e:	441d      	add	r5, r3
   b7a70:	4473      	add	r3, lr
   b7a72:	469e      	mov	lr, r3
   b7a74:	462e      	mov	r6, r5
   b7a76:	4566      	cmp	r6, ip
   b7a78:	d30e      	bcc.n	b7a98 <__mdiff+0xec>
   b7a7a:	f10c 0203 	add.w	r2, ip, #3
   b7a7e:	1b52      	subs	r2, r2, r5
   b7a80:	f022 0203 	bic.w	r2, r2, #3
   b7a84:	3d03      	subs	r5, #3
   b7a86:	45ac      	cmp	ip, r5
   b7a88:	bf38      	it	cc
   b7a8a:	2200      	movcc	r2, #0
   b7a8c:	441a      	add	r2, r3
   b7a8e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   b7a92:	b17b      	cbz	r3, b7ab4 <__mdiff+0x108>
   b7a94:	6107      	str	r7, [r0, #16]
   b7a96:	e7a3      	b.n	b79e0 <__mdiff+0x34>
   b7a98:	f856 8b04 	ldr.w	r8, [r6], #4
   b7a9c:	fa11 f288 	uxtah	r2, r1, r8
   b7aa0:	1414      	asrs	r4, r2, #16
   b7aa2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   b7aa6:	b292      	uxth	r2, r2
   b7aa8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   b7aac:	f84e 2b04 	str.w	r2, [lr], #4
   b7ab0:	1421      	asrs	r1, r4, #16
   b7ab2:	e7e0      	b.n	b7a76 <__mdiff+0xca>
   b7ab4:	3f01      	subs	r7, #1
   b7ab6:	e7ea      	b.n	b7a8e <__mdiff+0xe2>
   b7ab8:	000b8171 	.word	0x000b8171
   b7abc:	000b8220 	.word	0x000b8220

000b7ac0 <__ulp>:
   b7ac0:	b082      	sub	sp, #8
   b7ac2:	ed8d 0b00 	vstr	d0, [sp]
   b7ac6:	9b01      	ldr	r3, [sp, #4]
   b7ac8:	4912      	ldr	r1, [pc, #72]	; (b7b14 <__ulp+0x54>)
   b7aca:	4019      	ands	r1, r3
   b7acc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   b7ad0:	2900      	cmp	r1, #0
   b7ad2:	dd05      	ble.n	b7ae0 <__ulp+0x20>
   b7ad4:	2200      	movs	r2, #0
   b7ad6:	460b      	mov	r3, r1
   b7ad8:	ec43 2b10 	vmov	d0, r2, r3
   b7adc:	b002      	add	sp, #8
   b7ade:	4770      	bx	lr
   b7ae0:	4249      	negs	r1, r1
   b7ae2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   b7ae6:	ea4f 5021 	mov.w	r0, r1, asr #20
   b7aea:	f04f 0200 	mov.w	r2, #0
   b7aee:	f04f 0300 	mov.w	r3, #0
   b7af2:	da04      	bge.n	b7afe <__ulp+0x3e>
   b7af4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   b7af8:	fa41 f300 	asr.w	r3, r1, r0
   b7afc:	e7ec      	b.n	b7ad8 <__ulp+0x18>
   b7afe:	f1a0 0114 	sub.w	r1, r0, #20
   b7b02:	291e      	cmp	r1, #30
   b7b04:	bfda      	itte	le
   b7b06:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   b7b0a:	fa20 f101 	lsrle.w	r1, r0, r1
   b7b0e:	2101      	movgt	r1, #1
   b7b10:	460a      	mov	r2, r1
   b7b12:	e7e1      	b.n	b7ad8 <__ulp+0x18>
   b7b14:	7ff00000 	.word	0x7ff00000

000b7b18 <__b2d>:
   b7b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7b1a:	6905      	ldr	r5, [r0, #16]
   b7b1c:	f100 0714 	add.w	r7, r0, #20
   b7b20:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   b7b24:	1f2e      	subs	r6, r5, #4
   b7b26:	f855 4c04 	ldr.w	r4, [r5, #-4]
   b7b2a:	4620      	mov	r0, r4
   b7b2c:	f7ff fd48 	bl	b75c0 <__hi0bits>
   b7b30:	f1c0 0320 	rsb	r3, r0, #32
   b7b34:	280a      	cmp	r0, #10
   b7b36:	f8df c07c 	ldr.w	ip, [pc, #124]	; b7bb4 <__b2d+0x9c>
   b7b3a:	600b      	str	r3, [r1, #0]
   b7b3c:	dc14      	bgt.n	b7b68 <__b2d+0x50>
   b7b3e:	f1c0 0e0b 	rsb	lr, r0, #11
   b7b42:	fa24 f10e 	lsr.w	r1, r4, lr
   b7b46:	42b7      	cmp	r7, r6
   b7b48:	ea41 030c 	orr.w	r3, r1, ip
   b7b4c:	bf34      	ite	cc
   b7b4e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   b7b52:	2100      	movcs	r1, #0
   b7b54:	3015      	adds	r0, #21
   b7b56:	fa04 f000 	lsl.w	r0, r4, r0
   b7b5a:	fa21 f10e 	lsr.w	r1, r1, lr
   b7b5e:	ea40 0201 	orr.w	r2, r0, r1
   b7b62:	ec43 2b10 	vmov	d0, r2, r3
   b7b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b7b68:	42b7      	cmp	r7, r6
   b7b6a:	bf3a      	itte	cc
   b7b6c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   b7b70:	f1a5 0608 	subcc.w	r6, r5, #8
   b7b74:	2100      	movcs	r1, #0
   b7b76:	380b      	subs	r0, #11
   b7b78:	d017      	beq.n	b7baa <__b2d+0x92>
   b7b7a:	f1c0 0c20 	rsb	ip, r0, #32
   b7b7e:	fa04 f500 	lsl.w	r5, r4, r0
   b7b82:	42be      	cmp	r6, r7
   b7b84:	fa21 f40c 	lsr.w	r4, r1, ip
   b7b88:	ea45 0504 	orr.w	r5, r5, r4
   b7b8c:	bf8c      	ite	hi
   b7b8e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   b7b92:	2400      	movls	r4, #0
   b7b94:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   b7b98:	fa01 f000 	lsl.w	r0, r1, r0
   b7b9c:	fa24 f40c 	lsr.w	r4, r4, ip
   b7ba0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   b7ba4:	ea40 0204 	orr.w	r2, r0, r4
   b7ba8:	e7db      	b.n	b7b62 <__b2d+0x4a>
   b7baa:	ea44 030c 	orr.w	r3, r4, ip
   b7bae:	460a      	mov	r2, r1
   b7bb0:	e7d7      	b.n	b7b62 <__b2d+0x4a>
   b7bb2:	bf00      	nop
   b7bb4:	3ff00000 	.word	0x3ff00000

000b7bb8 <__d2b>:
   b7bb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b7bbc:	4689      	mov	r9, r1
   b7bbe:	2101      	movs	r1, #1
   b7bc0:	ec57 6b10 	vmov	r6, r7, d0
   b7bc4:	4690      	mov	r8, r2
   b7bc6:	f7ff fc09 	bl	b73dc <_Balloc>
   b7bca:	4604      	mov	r4, r0
   b7bcc:	b930      	cbnz	r0, b7bdc <__d2b+0x24>
   b7bce:	4602      	mov	r2, r0
   b7bd0:	4b25      	ldr	r3, [pc, #148]	; (b7c68 <__d2b+0xb0>)
   b7bd2:	4826      	ldr	r0, [pc, #152]	; (b7c6c <__d2b+0xb4>)
   b7bd4:	f240 310a 	movw	r1, #778	; 0x30a
   b7bd8:	f7fc ff50 	bl	b4a7c <__assert_func>
   b7bdc:	f3c7 550a 	ubfx	r5, r7, #20, #11
   b7be0:	f3c7 0313 	ubfx	r3, r7, #0, #20
   b7be4:	bb35      	cbnz	r5, b7c34 <__d2b+0x7c>
   b7be6:	2e00      	cmp	r6, #0
   b7be8:	9301      	str	r3, [sp, #4]
   b7bea:	d028      	beq.n	b7c3e <__d2b+0x86>
   b7bec:	4668      	mov	r0, sp
   b7bee:	9600      	str	r6, [sp, #0]
   b7bf0:	f7ff fd06 	bl	b7600 <__lo0bits>
   b7bf4:	9900      	ldr	r1, [sp, #0]
   b7bf6:	b300      	cbz	r0, b7c3a <__d2b+0x82>
   b7bf8:	9a01      	ldr	r2, [sp, #4]
   b7bfa:	f1c0 0320 	rsb	r3, r0, #32
   b7bfe:	fa02 f303 	lsl.w	r3, r2, r3
   b7c02:	430b      	orrs	r3, r1
   b7c04:	40c2      	lsrs	r2, r0
   b7c06:	6163      	str	r3, [r4, #20]
   b7c08:	9201      	str	r2, [sp, #4]
   b7c0a:	9b01      	ldr	r3, [sp, #4]
   b7c0c:	61a3      	str	r3, [r4, #24]
   b7c0e:	2b00      	cmp	r3, #0
   b7c10:	bf14      	ite	ne
   b7c12:	2202      	movne	r2, #2
   b7c14:	2201      	moveq	r2, #1
   b7c16:	6122      	str	r2, [r4, #16]
   b7c18:	b1d5      	cbz	r5, b7c50 <__d2b+0x98>
   b7c1a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   b7c1e:	4405      	add	r5, r0
   b7c20:	f8c9 5000 	str.w	r5, [r9]
   b7c24:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   b7c28:	f8c8 0000 	str.w	r0, [r8]
   b7c2c:	4620      	mov	r0, r4
   b7c2e:	b003      	add	sp, #12
   b7c30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b7c34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b7c38:	e7d5      	b.n	b7be6 <__d2b+0x2e>
   b7c3a:	6161      	str	r1, [r4, #20]
   b7c3c:	e7e5      	b.n	b7c0a <__d2b+0x52>
   b7c3e:	a801      	add	r0, sp, #4
   b7c40:	f7ff fcde 	bl	b7600 <__lo0bits>
   b7c44:	9b01      	ldr	r3, [sp, #4]
   b7c46:	6163      	str	r3, [r4, #20]
   b7c48:	2201      	movs	r2, #1
   b7c4a:	6122      	str	r2, [r4, #16]
   b7c4c:	3020      	adds	r0, #32
   b7c4e:	e7e3      	b.n	b7c18 <__d2b+0x60>
   b7c50:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   b7c54:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   b7c58:	f8c9 0000 	str.w	r0, [r9]
   b7c5c:	6918      	ldr	r0, [r3, #16]
   b7c5e:	f7ff fcaf 	bl	b75c0 <__hi0bits>
   b7c62:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   b7c66:	e7df      	b.n	b7c28 <__d2b+0x70>
   b7c68:	000b8171 	.word	0x000b8171
   b7c6c:	000b8220 	.word	0x000b8220

000b7c70 <__ratio>:
   b7c70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7c74:	4688      	mov	r8, r1
   b7c76:	4669      	mov	r1, sp
   b7c78:	4681      	mov	r9, r0
   b7c7a:	f7ff ff4d 	bl	b7b18 <__b2d>
   b7c7e:	a901      	add	r1, sp, #4
   b7c80:	4640      	mov	r0, r8
   b7c82:	ec55 4b10 	vmov	r4, r5, d0
   b7c86:	f7ff ff47 	bl	b7b18 <__b2d>
   b7c8a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   b7c8e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   b7c92:	eba3 0c02 	sub.w	ip, r3, r2
   b7c96:	e9dd 3200 	ldrd	r3, r2, [sp]
   b7c9a:	1a9b      	subs	r3, r3, r2
   b7c9c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   b7ca0:	ec51 0b10 	vmov	r0, r1, d0
   b7ca4:	2b00      	cmp	r3, #0
   b7ca6:	bfd6      	itet	le
   b7ca8:	460a      	movle	r2, r1
   b7caa:	462a      	movgt	r2, r5
   b7cac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   b7cb0:	468b      	mov	fp, r1
   b7cb2:	462f      	mov	r7, r5
   b7cb4:	bfd4      	ite	le
   b7cb6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   b7cba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   b7cbe:	4620      	mov	r0, r4
   b7cc0:	ee10 2a10 	vmov	r2, s0
   b7cc4:	465b      	mov	r3, fp
   b7cc6:	4639      	mov	r1, r7
   b7cc8:	f7fd fee2 	bl	b5a90 <__aeabi_ddiv>
   b7ccc:	ec41 0b10 	vmov	d0, r0, r1
   b7cd0:	b003      	add	sp, #12
   b7cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b7cd6 <__copybits>:
   b7cd6:	3901      	subs	r1, #1
   b7cd8:	b570      	push	{r4, r5, r6, lr}
   b7cda:	1149      	asrs	r1, r1, #5
   b7cdc:	6914      	ldr	r4, [r2, #16]
   b7cde:	3101      	adds	r1, #1
   b7ce0:	f102 0314 	add.w	r3, r2, #20
   b7ce4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   b7ce8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   b7cec:	1f05      	subs	r5, r0, #4
   b7cee:	42a3      	cmp	r3, r4
   b7cf0:	d30c      	bcc.n	b7d0c <__copybits+0x36>
   b7cf2:	1aa3      	subs	r3, r4, r2
   b7cf4:	3b11      	subs	r3, #17
   b7cf6:	f023 0303 	bic.w	r3, r3, #3
   b7cfa:	3211      	adds	r2, #17
   b7cfc:	42a2      	cmp	r2, r4
   b7cfe:	bf88      	it	hi
   b7d00:	2300      	movhi	r3, #0
   b7d02:	4418      	add	r0, r3
   b7d04:	2300      	movs	r3, #0
   b7d06:	4288      	cmp	r0, r1
   b7d08:	d305      	bcc.n	b7d16 <__copybits+0x40>
   b7d0a:	bd70      	pop	{r4, r5, r6, pc}
   b7d0c:	f853 6b04 	ldr.w	r6, [r3], #4
   b7d10:	f845 6f04 	str.w	r6, [r5, #4]!
   b7d14:	e7eb      	b.n	b7cee <__copybits+0x18>
   b7d16:	f840 3b04 	str.w	r3, [r0], #4
   b7d1a:	e7f4      	b.n	b7d06 <__copybits+0x30>

000b7d1c <__any_on>:
   b7d1c:	f100 0214 	add.w	r2, r0, #20
   b7d20:	6900      	ldr	r0, [r0, #16]
   b7d22:	114b      	asrs	r3, r1, #5
   b7d24:	4298      	cmp	r0, r3
   b7d26:	b510      	push	{r4, lr}
   b7d28:	db11      	blt.n	b7d4e <__any_on+0x32>
   b7d2a:	dd0a      	ble.n	b7d42 <__any_on+0x26>
   b7d2c:	f011 011f 	ands.w	r1, r1, #31
   b7d30:	d007      	beq.n	b7d42 <__any_on+0x26>
   b7d32:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   b7d36:	fa24 f001 	lsr.w	r0, r4, r1
   b7d3a:	fa00 f101 	lsl.w	r1, r0, r1
   b7d3e:	428c      	cmp	r4, r1
   b7d40:	d10b      	bne.n	b7d5a <__any_on+0x3e>
   b7d42:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   b7d46:	4293      	cmp	r3, r2
   b7d48:	d803      	bhi.n	b7d52 <__any_on+0x36>
   b7d4a:	2000      	movs	r0, #0
   b7d4c:	bd10      	pop	{r4, pc}
   b7d4e:	4603      	mov	r3, r0
   b7d50:	e7f7      	b.n	b7d42 <__any_on+0x26>
   b7d52:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   b7d56:	2900      	cmp	r1, #0
   b7d58:	d0f5      	beq.n	b7d46 <__any_on+0x2a>
   b7d5a:	2001      	movs	r0, #1
   b7d5c:	e7f6      	b.n	b7d4c <__any_on+0x30>

000b7d5e <_calloc_r>:
   b7d5e:	b513      	push	{r0, r1, r4, lr}
   b7d60:	434a      	muls	r2, r1
   b7d62:	4611      	mov	r1, r2
   b7d64:	9201      	str	r2, [sp, #4]
   b7d66:	f7fc fe81 	bl	b4a6c <_malloc_r>
   b7d6a:	4604      	mov	r4, r0
   b7d6c:	b118      	cbz	r0, b7d76 <_calloc_r+0x18>
   b7d6e:	9a01      	ldr	r2, [sp, #4]
   b7d70:	2100      	movs	r1, #0
   b7d72:	f7fe f8ca 	bl	b5f0a <memset>
   b7d76:	4620      	mov	r0, r4
   b7d78:	b002      	add	sp, #8
   b7d7a:	bd10      	pop	{r4, pc}
   b7d7c:	0000      	movs	r0, r0
	...

000b7d80 <nan>:
   b7d80:	ed9f 0b01 	vldr	d0, [pc, #4]	; b7d88 <nan+0x8>
   b7d84:	4770      	bx	lr
   b7d86:	bf00      	nop
   b7d88:	00000000 	.word	0x00000000
   b7d8c:	7ff80000 	.word	0x7ff80000

000b7d90 <__ascii_wctomb>:
   b7d90:	b149      	cbz	r1, b7da6 <__ascii_wctomb+0x16>
   b7d92:	2aff      	cmp	r2, #255	; 0xff
   b7d94:	bf85      	ittet	hi
   b7d96:	238a      	movhi	r3, #138	; 0x8a
   b7d98:	6003      	strhi	r3, [r0, #0]
   b7d9a:	700a      	strbls	r2, [r1, #0]
   b7d9c:	f04f 30ff 	movhi.w	r0, #4294967295
   b7da0:	bf98      	it	ls
   b7da2:	2001      	movls	r0, #1
   b7da4:	4770      	bx	lr
   b7da6:	4608      	mov	r0, r1
   b7da8:	4770      	bx	lr
	...

000b7dac <__aeabi_d2lz>:
   b7dac:	b538      	push	{r3, r4, r5, lr}
   b7dae:	2200      	movs	r2, #0
   b7db0:	2300      	movs	r3, #0
   b7db2:	4604      	mov	r4, r0
   b7db4:	460d      	mov	r5, r1
   b7db6:	f7fd ffb3 	bl	b5d20 <__aeabi_dcmplt>
   b7dba:	b928      	cbnz	r0, b7dc8 <__aeabi_d2lz+0x1c>
   b7dbc:	4620      	mov	r0, r4
   b7dbe:	4629      	mov	r1, r5
   b7dc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b7dc4:	f7fe b86c 	b.w	b5ea0 <__aeabi_d2ulz>
   b7dc8:	4620      	mov	r0, r4
   b7dca:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   b7dce:	f7fe f867 	bl	b5ea0 <__aeabi_d2ulz>
   b7dd2:	4240      	negs	r0, r0
   b7dd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7dd8:	bd38      	pop	{r3, r4, r5, pc}
   b7dda:	bf00      	nop

000b7ddc <dynalib_user>:
   b7ddc:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b7dec:	0000 0000 6574 706d 0046 0000               ....tempF...

000b7df8 <CSWTCH.88>:
   b7df8:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   b7e08:	0050 0000                                   P...

000b7e0c <_ZTVN5spark13EthernetClassE>:
	...
   b7e14:	4afb 000b 4af1 000b 4ae7 000b 4add 000b     .J...J...J...J..
   b7e24:	4ad1 000b 4ac5 000b 51cd 000b 51d5 000b     .J...J...Q...Q..
   b7e34:	4ab9 000b 4ab1 000b 4aa7 000b 4a9d 000b     .J...J...J...J..
   b7e44:	5205 000b 7061 0070 5925 252d 2d6d 6425     .R..app.%Y-%m-%d
   b7e54:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b7e64:	6d69 0065                                   ime.

000b7e68 <_ZTV9IPAddress>:
	...
   b7e70:	4df9 000b 4de9 000b 4deb 000b               .M...M...M..

000b7e7c <_ZTV9USBSerial>:
	...
   b7e84:	4edf 000b 4f47 000b 4f1d 000b 4b61 000b     .N..GO...O..aK..
   b7e94:	4f0f 000b 4ee1 000b 4ef1 000b 4f41 000b     .O...N...N..AO..
   b7ea4:	4f01 000b 4ed9 000b                         .O...N..

000b7eac <_ZTV11USARTSerial>:
	...
   b7eb4:	4fd9 000b 5045 000b 501d 000b 4b61 000b     .O..EP...P..aK..
   b7ec4:	4fed 000b 5009 000b 4ffb 000b 5017 000b     .O...P...O...P..
   b7ed4:	4fdb 000b 4fdf 000b                         .O...O..

000b7edc <_ZTV7TwoWire>:
	...
   b7ee4:	507d 000b 50c7 000b 509f 000b 507f 000b     }P...P...P...P..
   b7ef4:	50a7 000b 50af 000b 50b7 000b 50bf 000b     .P...P...P...P..

000b7f04 <_ZTVN5spark9WiFiClassE>:
	...
   b7f0c:	516f 000b 5165 000b 515b 000b 5111 000b     oQ..eQ..[Q...Q..
   b7f1c:	514f 000b 5143 000b 51cd 000b 51d5 000b     OQ..CQ...Q...Q..
   b7f2c:	5137 000b 512f 000b 5125 000b 511b 000b     7Q../Q..%Q...Q..
   b7f3c:	5205 000b                                   .R..

000b7f40 <_ZTVN5spark12NetworkClassE>:
	...
   b7f48:	518d 000b 5197 000b 51a1 000b 51ab 000b     .Q...Q...Q...Q..
   b7f58:	51b5 000b 51c1 000b 51cd 000b 51d5 000b     .Q...Q...Q...Q..
   b7f68:	51dd 000b 51e9 000b 51f1 000b 51fb 000b     .Q...Q...Q...Q..
   b7f78:	5205 000b                                   .R..

000b7f7c <_ZSt7nothrow>:
   b7f7c:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b7f8c:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   b7f9c:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   b7fac:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   b7fbc:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   b7fcc:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   b7fdc:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   b7fec:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   b7ffc:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   b800c:	646e 632e 6e00 0066 6e69 7469 0079 6e61     nd.c.nf.inity.an
   b801c:	0000 0000                                   ....

000b8020 <fpi.1>:
   b8020:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   b8030:	0000 0000                                   ....

000b8034 <fpinan.0>:
   b8034:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   b8044:	0000 0000                                   ....

000b8048 <tinytens>:
   b8048:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   b8058:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   b8068:	6f43 64ac 0628 1168                         Co.d(.h.

000b8070 <_ctype_>:
   b8070:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b8080:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b8090:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b80a0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b80b0:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b80c0:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b80d0:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b80e0:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b80f0:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   b8170:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   b8180:	0064 6d2f 746e 772f 726f 736b 6170 6563     d./mnt/workspace
   b8190:	772f 726f 736b 6170 6563 472f 4343 312d     /workspace/GCC-1
   b81a0:	2d30 6970 6570 696c 656e 6a2f 6e65 696b     0-pipeline/jenki
   b81b0:	736e 472d 4343 312d 2d30 6970 6570 696c     ns-GCC-10-pipeli
   b81c0:	656e 342d 5f38 3032 3032 3131 3432 315f     ne-48_20201124_1
   b81d0:	3036 3136 3038 3436 2f31 7273 2f63 656e     606180641/src/ne
   b81e0:	6c77 6269 6e2f 7765 696c 2f62 696c 6362     wlib/newlib/libc
   b81f0:	732f 6474 696c 2f62 6467 6f74 2d61 6567     /stdlib/gdtoa-ge
   b8200:	6874 7865 632e 2e00 0000 0000               thex.c......

000b820c <_C_numeric_locale>:
   b820c:	8207 000b 8208 000b e530 2003 0043 4f50     ........0.. C.PO
   b821c:	4953 0058 6d2f 746e 772f 726f 736b 6170     SIX./mnt/workspa
   b822c:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   b823c:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   b824c:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b825c:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b826c:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   b827c:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b828c:	6362 732f 6474 696c 2f62 706d 6572 2e63     bc/stdlib/mprec.
   b829c:	0063 0000                                   c...

000b82a0 <__mprec_bigtens>:
   b82a0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   b82b0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   b82c0:	bf3c 7f73 4fdd 7515                         <.s..O.u

000b82c8 <__mprec_tens>:
   b82c8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   b82d8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   b82e8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   b82f8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   b8308:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   b8318:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   b8328:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   b8338:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   b8348:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   b8358:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   b8368:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   b8378:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   b8388:	9db4 79d9 7843 44ea                         ...yCx.D

000b8390 <p05.0>:
   b8390:	0005 0000 0019 0000 007d 0000               ........}...

000b839c <link_const_variable_data_end>:
   b839c:	000b41fd 	.word	0x000b41fd
   b83a0:	000b46d5 	.word	0x000b46d5
   b83a4:	000b4b05 	.word	0x000b4b05
   b83a8:	000b4b2d 	.word	0x000b4b2d
   b83ac:	000b4b51 	.word	0x000b4b51
   b83b0:	000b4bf5 	.word	0x000b4bf5
   b83b4:	000b4c05 	.word	0x000b4c05
   b83b8:	000b4ca5 	.word	0x000b4ca5
   b83bc:	000b5179 	.word	0x000b5179
   b83c0:	000b52dd 	.word	0x000b52dd

000b83c4 <link_constructors_end>:
	...
